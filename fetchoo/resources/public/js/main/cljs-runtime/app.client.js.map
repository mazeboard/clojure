{"version":3,"sources":["app/client.cljs"],"mappings":"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","names":["options__56561__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","map__62891","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/app","js/app.client","js/app.client.Car","props__56562__auto__","this__56563__auto__","temp__5751__auto__","init-state__56564__auto__","obj62913","G__62914","G__62915","goog.object/get","obj62917","com.fulcrologic.fulcro.components/configure-component!","app.client/Car","this","id","model","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","app.client/ui-car","com.fulcrologic.fulcro.components.factory","params","com.fulcrologic.fulcro.components/make-state-map","map__62932","js/app.client.Person","obj62942","G__62943","G__62944","obj62946","app.client/Person","name","age","cars","com.fulcrologic.fulcro.components.get_query","evt","js/console.log","onClick","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core.map","app.client/ui-person","p__62947","map__62948","map__62950","js/app.client.PersonList","obj62953","G__62954","G__62955","obj62957","app.client/PersonList","people","app.client/ui-person-list","map__62958","js/app.client.Sample","obj62961","G__62962","G__62963","obj62965","app.client/Sample","app.client/APP","com.fulcrologic.fulcro.application.fulcro_app","app.client/f","x","app.client/init","com.fulcrologic.fulcro.application.mount_BANG_"],"sourcesContent":["(ns app.client\n  (:require\n    ;[\"react-number-format\" :as NumberFormat]\n     [com.fulcrologic.fulcro.application :as app]\n     [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n     [com.fulcrologic.fulcro.dom :as dom :refer [div h3 ul label]]\n     [com.fulcrologic.fulcro.algorithms.merge :as merge]\n     [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]\n    [com.fulcrologic.fulcro.algorithms.react-interop :as interop]))\n\n;(def ui-number-format (interop/react-factory NumberFormat))\n\n(defsc Car [this {:car/keys [id model] :as props}]\n  {:query [:car/id :car/model]\n   :ident :car/id}\n  (div :.field {} model))\n\n(def ui-car (comp/factory Car {:keyfn :car/id}))\n\n(defsc Person [this {:person/keys [id name age cars] :as props}]\n  {:query [:person/id :person/name :person/age {:person/cars (comp/get-query Car)}]\n   :ident :person/id\n   :initial-state {:person/id :param/id\n                  :person/name :param/name\n                  :person/age 20\n                  :person/cars [{:id 40 :model \"Ford\"}\n                                {:id 41 :model \"Escort\"}\n                                {:id 42 :model \"Volvo\"}]}\n   :initLocalState (fn [this props]{:onClick (fn [evt] (js/console.log \">Click\"))})\n   }\n  (let [onClick (comp/get-state this :onClick)]\n    (div :.ui.segment {}\n         (div :.field {}\n              (div :.field {}\n                   (label {:onClick onClick} \"Name :\")\n                   name)\n              #_(div :.field {}\n                   (label \"-- Amount: \")\n                   (ui-number-format {:value \"123456.33\"\n                                      :thousandSeparator true\n                                      :prefix \"$\"})\n                   )\n              (div :.field {}\n                   (label \"Age: \")\n                   age)\n              (h3 {} \"Cars\")\n              (ul {}\n                  ;(map-indexed (fn [i c] (ui-car {:key (str \"car-\" i)} c)) cars)\n                  (map ui-car cars)\n                  )))))\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc PersonList [this {:person-list/keys [people] :as props}]\n  {:query [{:person-list/people (comp/get-query Person)}]\n   :ident (fn [_ _] [:component/id ::person-list])\n   :initial-state {:person-list/people [{:id 1 :name \"Bob\"}\n                                        {:id 2 :name \"Sally\"}]}}\n  (div\n    (h3 \"-People\")\n    ;(map-indexed (fn [i p] (ui-person {:key (str \"person-\" i)} p)) people)\n    (map ui-person people)\n    ))\n\n(def ui-person-list (comp/factory PersonList))\n\n(defsc Sample [this {:root/keys [people]}]\n  {:query [{:root/people (comp/get-query PersonList)}]\n   :initial-state {:root/people {}}}\n  (dom/div\n    (when people\n      (ui-person-list people))))\n\n(def APP (app/fulcro-app))\n\n(defn f [x] (* x x))\n\n(defn ^:export init []\n  (app/mount! APP Sample \"app\"))\n\n(comment\n  (reset! (::app/state-atom APP) {})\n  (app/schedule-render! APP)\n  (+ 2 3)\n\n  (merge/merge-component! APP Car {:car/id 3 :car/model \"Opel\"}\n                          :append [:person/id 1 :person/cars]\n                          )\n  (merge/merge-component! APP Person {:person/id 1 :person/name \"Joe\"\n                                      :person/cars [{:car/id 2, :car/model \"BMW\"}]}\n                         :replace [:root/person]\n                          )\n  (merge/merge-component! APP Person {:person/id 2 :person/name \"Tom\"\n                                      :person/cars [{:car/id 1, :car/model \"Ford\"}]}\n                          :replace [:root/person] )\n  (merge/merge-component! APP Person {:person/id 3 :person/name \"Fuco\" :person/cars [{:car/id 1, :car/model \"Ford\"}]})\n\n  (keys APP)\n  (app/current-state APP)\n  (-> APP (::app/state-atom) deref)\n  (deref (::app/state-atom APP))\n\n  (comp/get-ident Car {:car/id 2})\n  )"]}