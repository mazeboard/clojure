{"version":3,"sources":["taoensso/timbre/appenders/core.cljc"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","taoensso.timbre.appenders.core/println-appender","p__51012","vec__51013","cljs.core.nth","seq50987","self__4718__auto__","cljs.core/seq","_opts","data","map__51016","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","output_","cljs.core.println","cljs.core/force","taoensso.timbre.appenders.core/console-appender","p__51031","vec__51032","seq51025","opts","js/console","level->logger","level","or__4131__auto__","G__51039","cljs.core/Keyword","js/Error","js/console.trace","js/console.debug","js/console.info","js/console.warn","js/console.error","js/console.log","temp__5753__auto__","logger","cljs.core.get_in","output","G__51051","fexpr__51050","cljs.core.assoc","args","vargs","temp__5751__auto__","err","cljs.core/cons","cljs.core.into_array","taoensso.timbre.appenders.core/console-?appender"],"sourcesContent":["(ns taoensso.timbre.appenders.core\n  \"Core Timbre appenders without any special dependency requirements.\n  These can be aliased into the main Timbre ns for convenience.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n  #?(:clj\n     (:require\n      [clojure.string  :as str]\n      [clojure.java.io :as jio]\n      [taoensso.encore :as enc :refer [have have? qb deprecated]])\n\n     :cljs\n     (:require\n      [clojure.string  :as str]\n      [taoensso.encore :as enc :refer-macros [have have?]]))\n\n  #?(:cljs\n     (:require-macros\n      [taoensso.encore :as enc-macros :refer [deprecated]])))\n\n;; TODO Add a simple official rolling spit appender?\n\n;;;; Println appender (clj & cljs)\n\n#?(:clj (enc/declare-remote taoensso.timbre/default-out\n                            taoensso.timbre/default-err))\n\n#?(:clj (alias 'timbre 'taoensso.timbre))\n\n#?(:clj\n   (let [system-newline enc/system-newline]\n     (defn- atomic-println [x] (print (str x system-newline)) (flush))))\n\n(defn println-appender\n  \"Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}.\"\n\n  ;; Unfortunately no easy way to check if *print-fn* is set. Metadata on the\n  ;; default throwing fn would be nice...\n\n  [& #?(:clj [{:keys [stream] :or {stream :auto}}] :cljs [_opts])]\n  (let #?(:cljs []\n          :clj  [stream\n                 (case stream\n                   :std-err timbre/default-err\n                   :std-out timbre/default-out\n                   stream)])\n\n    {:enabled?   true\n     :async?     false\n     :min-level  nil\n     :rate-limit nil\n     :output-fn  :inherit\n     :fn\n     (fn [data]\n       (let [{:keys [output_]} data]\n         #?(:cljs (println (force output_))\n            :clj\n            (let [stream\n                  (case stream\n                    :auto  (if (:error-level? data) *err* *out*)\n                    :*out* *out*\n                    :*err* *err*\n                    stream)]\n\n              (binding [*out* stream]\n                #?(:clj  (atomic-println (force output_))\n                   :cljs (println        (force output_))))))))}))\n\n(comment (println-appender))\n\n;;;; Spit appender (clj only)\n\n#?(:clj\n   (defn spit-appender\n     \"Returns a simple `spit` file appender for Clojure.\"\n     [& [{:keys [fname append? locking?]\n          :or   {fname \"./timbre-spit.log\"\n                 append?  true\n                 locking? true}}]]\n\n     (have? enc/nblank-str? fname)\n\n     {:enabled? true\n      :fn\n      (let [lock (Object.)]\n        (fn self [data]\n          (let [{:keys [output_]} data\n                output (force output_)\n                locklocal lock ; Ensure obj on stack for verifiers, Ref. CLJ-1472\n                ]\n            (try\n              (when locking? (monitor-enter locklocal)) ; For thread safety, Ref. #251\n              (with-open [^java.io.BufferedWriter w (jio/writer fname :append append?)]\n                (.write   w ^String output)\n                (.newLine w))\n\n              (catch java.io.IOException e\n                (if (:spit-appender/retry? data)\n                  (throw e) ; Unexpected error\n                  (do\n                    (jio/make-parents fname)\n                    (self (assoc data :spit-appender/retry? true)))))\n              (finally\n                (when locking?\n                  (monitor-exit locklocal)))))))}))\n\n(comment\n  (spit-appender)\n  (let [f (:fn (spit-appender))]\n    (enc/qb 1000 (f {:output_ \"boo\"}))))\n\n;;;; js/console appender (cljs only)\n\n#?(:cljs\n   (defn console-appender\n     \"Returns a simple js/console appender for ClojureScript.\n\n     Use ^:meta {:raw-console? true} as first argument to logging call if\n     you want args sent to console in a raw format enabling console-based\n     pretty-printing of JS objects, etc. E.g.:\n\n       (info                             my-js-obj) ; Send string   to console\n       (info ^:meta {:raw-console? true} my-js-obj) ; Send raw args to console\n\n     For accurate line numbers in Chrome, add these Blackbox[1] patterns:\n       `/taoensso/timbre/appenders/core\\\\.js$`\n       `/taoensso/timbre\\\\.js$`\n       `/cljs/core\\\\.js$`\n\n     [1] Ref. https://goo.gl/ZejSvR\"\n\n     ;; TODO Any way of using something like `Function.prototype.bind`\n     ;; (Ref. https://goo.gl/IZzkQB) to get accurate line numbers in all\n     ;; browsers w/o the need for Blackboxing?\n\n     [& [opts]]\n     {:enabled?   true\n      :async?     false\n      :min-level  nil\n      :rate-limit nil\n      :output-fn  :inherit\n      :fn\n      (if-not (exists? js/console)\n        (fn [data] nil)\n\n        (let [;; Don't cache this; some libs dynamically replace js/console\n              level->logger\n              (fn [level]\n                (or\n                  (case level\n                    :trace  js/console.trace\n                    :debug  js/console.debug\n                    :info   js/console.info\n                    :warn   js/console.warn\n                    :error  js/console.error\n                    :fatal  js/console.error\n                    :report js/console.info)\n                  js/console.log))]\n\n          (fn [data]\n            (when-let [logger (level->logger (:level data))]\n\n              (if (or (get    data :raw-console?) ; Undocumented\n                      (get-in data [:?meta :raw-console?]))\n\n                (let [output\n                      ((:output-fn data)\n                       (assoc data\n                         :msg_  \"\"\n                         :?err nil))\n\n                      args ; (<output> ?<raw-error> <raw-arg1> <raw-arg2> ...)\n                      (let [vargs (:vargs data)]\n                        (if-let [err (:?err data)]\n                          (cons output (cons err vargs))\n                          (cons output           vargs)))]\n\n                  (.apply logger js/console (into-array args)))\n                (.call    logger js/console (force (:output_ data))))))))}))\n\n(comment (console-appender))\n\n;;;; Deprecated\n\n(deprecated\n  #?(:cljs (def console-?appender \"DEPRECATED\" console-appender)))\n"]}