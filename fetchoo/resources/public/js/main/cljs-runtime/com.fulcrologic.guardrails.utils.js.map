{"version":3,"sources":["com/fulcrologic/guardrails/utils.cljc"],"mappings":"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","names":["com.fulcrologic.guardrails.utils/cljs-env?","env","cljs.core/boolean","com.fulcrologic.guardrails.utils/get-ns-meta","or__4131__auto__","cljs.core/meta","cljs.core/*ns*","G__47127","com.fulcrologic.guardrails.utils/get-ns-name","G__47130","var_args","G__47144","com.fulcrologic.guardrails.utils/clj->cljs","js/Error","form","com.fulcrologic.guardrails.utils.clj__GT_cljs","strip-core-ns","p1__47135#","ns-replacements","G__47150","cljs.core.merge","replace-namespace","cljs.core/qualified-symbol?","nspace","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol","cljs.core.get","cljs.core/name","clojure.walk/postwalk","com.fulcrologic.guardrails.utils/get-file-position","map__47156","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","line","column","G__47165","com.fulcrologic.guardrails.utils/get-call-context","com.fulcrologic.guardrails.utils.get_call_context","label","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","com.fulcrologic.guardrails.utils/gen-exception","msg","cljs.core/vec","cljs.core/array-map","com.fulcrologic.guardrails.utils/devtools-config-override","com.fulcrologic.guardrails.utils/map-vals","f","m","cljs.core/reduce-kv","k","v","cljs.core.assoc","com.fulcrologic.guardrails.utils/map-keys","p!","cljs.core/persistent!","t","cljs.core/transient","com.fulcrologic.guardrails.utils/filter-vals","pred","G__47210","cljs.core.dissoc_BANG_","com.fulcrologic.guardrails.utils/atom?","x","cljs.core/Atom","G__47214","com.fulcrologic.guardrails.utils/stacktrace","err","com.fulcrologic.guardrails.utils.stacktrace","opts","com.fulcrologic.guardrails.utils/report-problem","message","js/console.error","com.fulcrologic.guardrails.utils/report-exception","e"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc com.fulcrologic.guardrails.utils\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.utils))\n  (:require\n    #?(:clj [clojure.stacktrace :as st])\n    [clojure.walk :as walk]))\n\n(defn cljs-env? [env] (boolean (:ns env)))\n\n(defn get-ns-meta [env]\n  (if (cljs-env? env)\n    (or (meta *ns*) (some-> env :ns :meta))\n    (meta *ns*)))\n\n(defn get-ns-name [env]\n  (if (cljs-env? env)\n    (or (.-name *ns*) (some-> env :ns :name))\n    (.-name *ns*)))\n\n(defn clj->cljs\n  ([form]\n   (clj->cljs form true))\n  ([form strip-core-ns]\n   (let [ns-replacements   (cond-> {\"clojure.core\"            \"cljs.core\"\n                                    \"clojure.test\"            \"cljs.test\"\n                                    \"clojure.spec.alpha\"      \"cljs.spec.alpha\"\n                                    \"clojure.spec.test.alpha\" \"cljs.spec.test.alpha\"\n                                    \"orchestra.spec.test\"     \"orchestra-cljs.spec.test\"\n                                    \"clojure.spec.gen.alpha\"  \"cljs.spec.gen.alpha\"}\n                             strip-core-ns (merge {\"clojure.core\" nil\n                                                   \"cljs.core\"    nil}))\n         replace-namespace #(if-not (qualified-symbol? %)\n                              %\n                              (let [nspace (namespace %)]\n                                (if (contains? ns-replacements nspace)\n                                  (symbol (get ns-replacements nspace) (name %))\n                                  %)))]\n     (walk/postwalk replace-namespace form))))\n\n\n(defn get-file-position\n  [env]\n  (if (cljs-env? env)\n    (let [{:keys [line column]} env]\n      (str line \":\" column))\n    ;; TODO implement for clojure\n    nil))\n\n\n(defn get-call-context\n  ([env]\n   (get-call-context env nil))\n  ([env label]\n   (str (when label (str label \" \u2013 \"))\n     (get-ns-name env)\n     \":\"\n     (get-file-position env))))\n\n\n(defn gen-exception [env msg]\n  `(throw (~(if (cljs-env? env) 'js/Error. 'Exception.) ~msg)))\n\n\n(defn devtools-config-override\n  []\n  `(let [current-config# (~'devtools.prefs/get-prefs)\n         overrides#      {:max-print-level                                    4\n                          :min-expandable-sequable-count-for-well-known-types 2}\n         left-adjust#    (str \"margin-left: -17px;\")]\n     (merge current-config#\n       (into overrides# (for [k# [:header-style]\n                              :let [v# (get current-config# k#)]]\n                          [k# (str v# left-adjust#)])))))\n\n(defn map-vals [f m] (if (nil? m) {} (reduce-kv (fn [m k v] (assoc m k (f v))) m m)))\n(defn map-keys [f m] (if (nil? m) {} (reduce-kv (fn [m k v] (assoc m (f k) v)) {} m)))\n(let [p! persistent!, t transient]                          ; Note `mapv`-like nil->{} semantics\n  (defn filter-vals [pred m] (if (nil? m) {} (p! (reduce-kv (fn [m k v] (if (pred v) m (dissoc! m k))) (t m) m)))))\n\n#?(:clj\n   (defn atom? [x] (instance? clojure.lang.Atom x))\n   :cljs\n   (defn ^boolean atom? [x] (instance? Atom x)))\n\n#?(:clj\n   (defn compiling-cljs?\n     \"Return truthy iff currently generating Cljs code.\"\n     []\n     (when-let [n (find-ns 'cljs.analyzer)]\n       (when-let [v (ns-resolve n '*cljs-file*)]\n         @v))))\n\n(defn stacktrace\n  ([err] (stacktrace err nil))\n  ([err opts]\n   #?(:cljs (str err)\n      :clj  (with-out-str (st/print-stack-trace err)))))\n\n(defn report-problem [message]\n  #?(:clj\n     (.println System/err message)\n     :cljs\n     (js/console.error message)))\n\n(defn report-exception [e message]\n  #?(:clj\n     (.println System/err (str message \\n (.getMessage ^Exception e) \"\\n\" (stacktrace e)))\n     :cljs\n     (js/console.error message e)))\n"]}