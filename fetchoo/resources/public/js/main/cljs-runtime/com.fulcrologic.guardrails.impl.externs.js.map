{"version":3,"sources":["com/fulcrologic/guardrails/impl/externs.cljc"],"mappings":";AAMA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAiB,AAAA,AAACC;;AAC3B,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAc,AAAA,AAACF;;AACxB,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAM;AAAA;AAAA,AAAA,AAASC,AAAkB,AAAA,AAACJ;;AAC5B,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAQ;AAAA;AAAA,AAAA,AAASC,AAA2B,AAAA,AAACN;;AA6CrC,AAAA,AAAMO,AAAmBC,AAAGC,AAAQC;AAApC,AACE,AAAA,AAACC,AAAMZ,AAAiBa,AAAUJ,AAAGC,AAASC;;AAEhD,AAAA,AAAMG,AAAiBC;AAAvB,AACE,AAACH,AAAMT,AAAca,AAAM,AAAA,AAAwBD;;AAErD,AAAA,AAAME,AAAgBF;AAAtB,AACMA,AACF,AAAA,AAACG,AACC,AAAA,AAAAC,AAACC,AAAQC,AACX,AAACC;AADC,AAAyB,AAAAH,AAAA,AAACG;AAC5B;;AAEJ,AAAA,AAAMC,AAAoBd,AAAGC,AAAQK;AAArC,AACE,AAACD,AAAgBC;;AACjB,AAAA,AAACH,AAAMP,AAAkBQ,AAAUJ,AAAGC,AACpC,AAACO,AAAeF;;AAEpB,AAAA,AAAAS,AAAMM,AAAcrB,AAA0CE;AAA9D,AAAA,AAAAc,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAA4BV;AAA5B,AAAAc,AAAAJ,AAAA,AAAoDf;AAApD,AACE,AAACF,AAAkBC,AAAGC,AAAQC;;AAC9B,AAACY,AAAmBd,AAAGC,AAAQK;;AAEjC,AAAA,AAAAgB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAN,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAAI,AAAAA;AAAAA,AAAwCE;AAAxC,AAAAL,AAAAG,AAAA,AAAyEG;AAAzE,AACE,AAACvB,AAAML,AAA2B6B,AAAMD,AACtC,AAAClB,AAAeiB;;AAEpB,AAAA,AAAMG,AAAcH;AAApB,AACE,AAACpB,AAAgBoB;;AACjB,AAACD,AAA4BC","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.impl","js/com.fulcrologic.guardrails.impl.externs","js/com.fulcrologic.guardrails.impl.externs.externs-registry","com.fulcrologic.guardrails.impl.externs/externs-registry","cljs.core.atom","js/com.fulcrologic.guardrails.impl.externs.spec-registry","com.fulcrologic.guardrails.impl.externs/spec-registry","js/com.fulcrologic.guardrails.impl.externs.function-registry","com.fulcrologic.guardrails.impl.externs/function-registry","js/com.fulcrologic.guardrails.impl.externs.external-function-registry","com.fulcrologic.guardrails.impl.externs/external-function-registry","com.fulcrologic.guardrails.impl.externs/register-externs!","NS","fn-name","externs","cljs.core.swap_BANG_","cljs.core/assoc-in","com.fulcrologic.guardrails.impl.externs/register-specs!","function","cljs.core/merge","com.fulcrologic.guardrails.impl.externs/clean-function","cljs.core.update","p1__47249#","cljs.core.partial","com.fulcrologic.guardrails.utils/map-vals","cljs.core.dissoc","com.fulcrologic.guardrails.impl.externs/register-function!","p__47289","map__47291","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.guardrails.impl.externs/record-defn!","p__47349","map__47351","com.fulcrologic.guardrails.impl.externs/register-external-function!","external-function","var-name","cljs.core/assoc","com.fulcrologic.guardrails.impl.externs/record-fdef!"],"sourcesContent":["(ns com.fulcrologic.guardrails.impl.externs\n  (:require\n    #?@(:clj [[clojure.walk :as walk]])\n    [com.fulcrologic.guardrails.registry :as gr.reg]\n    [com.fulcrologic.guardrails.utils :as utils]))\n\n(defonce externs-registry (atom {}))\n(defonce spec-registry (atom {}))\n(defonce function-registry (atom {}))\n(defonce external-function-registry (atom {}))\n\n#?(:clj (try (require 'cljs.analyzer.api) (catch Exception _)))\n\n#?(:clj\n   (defn compiling-cljs? [env]\n     (and (:ns env) (utils/compiling-cljs?))))\n\n#?(:clj\n   (defn cljc-resolve [env s]\n     (letfn [(cljs-resolve []\n               (let [rslv     (some-> (find-ns 'cljs.analyzer.api) (ns-resolve 'resolve))\n                     ast-node (when rslv (rslv env s))\n                     macro?   (boolean (:macro ast-node))]\n                 (when ast-node\n                   (cond-> {::gr.reg/extern-name `(quote ~(:name ast-node))\n                            ::gr.reg/macro?      macro?}\n                     (not macro?) (assoc ::gr.reg/extern-value s)))))\n             (clojure-resolve []\n               (if (contains? env s)\n                 {::gr.reg/extern-name  `(quote ~s)\n                  ::gr.reg/extern-value s}\n                 (let [sym-var (ns-resolve *ns* env s)\n                       cls?    (class? sym-var)\n                       macro?  (boolean (some-> sym-var meta :macro))]\n                   (when (and sym-var (not cls?))\n                     (cond-> {::gr.reg/extern-name  `(quote ~(symbol sym-var))\n                              ::gr.reg/macro?       macro?}\n                       (not macro?)\n                       (assoc ::gr.reg/extern-value (symbol sym-var)))))))]\n       (if (compiling-cljs? env)\n         (cljs-resolve)\n         (clojure-resolve)))))\n\n#?(:clj\n   (defn extern-symbols [env body]\n     (let [externs (atom {})\n           record! (fn [x]\n                     (when (symbol? x)\n                       (when-let [extern (cljc-resolve env x)]\n                         (swap! externs assoc `(quote ~x) extern)))\n                     x)]\n       (walk/postwalk record! body)\n       @externs)))\n\n(defn register-externs! [NS fn-name externs]\n  (swap! externs-registry assoc-in [NS fn-name] externs))\n\n(defn register-specs! [function]\n  (swap! spec-registry merge (::gr.reg/spec-registry function)))\n\n(defn clean-function [function]\n  (-> function\n    (update ::gr.reg/arities\n      (partial utils/map-vals #(dissoc % ::gr.reg/body)))\n    (dissoc ::gr.reg/spec-registry)))\n\n(defn register-function! [NS fn-name function]\n  (register-specs! function)\n  (swap! function-registry assoc-in [NS fn-name]\n    (clean-function function)))\n\n(defn record-defn! [NS {:as function ::gr.reg/keys [fn-name]} externs]\n  (register-externs! NS fn-name externs)\n  (register-function! NS fn-name function))\n\n(defn register-external-function! [{:as external-function ::gr.reg/keys [var-name]}]\n  (swap! external-function-registry assoc var-name\n    (clean-function external-function)))\n\n(defn record-fdef! [external-function]\n  (register-specs! external-function)\n  (register-external-function! external-function))\n"]}