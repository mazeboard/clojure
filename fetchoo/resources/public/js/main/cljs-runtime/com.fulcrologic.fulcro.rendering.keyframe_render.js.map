{"version":3,"sources":["com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro.rendering.keyframe-render/render-state!","app","state-map","*blindly-render*-orig-val__56759","*blindly-render*-temp-val__56760","com.fulcrologic.fulcro.components/*blindly-render*","map__56765","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__56766","cljs.core/deref","runtime-atom","root-factory","root-class","mount-node","r!","or__4131__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","js/ReactDOM.render","query","com.fulcrologic.fulcro.components.get_query","data-tree","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","and__4120__auto__","G__56779","G__56780","p__56786","map__56787","com.fulcrologic.fulcro.rendering.keyframe-render/render!","force-root?","hydrate?","options","*blindly-render*-orig-val__56792","*blindly-render*-temp-val__56794","map__56795","map__56796","state-atom","js/ReactDOM.hydrate","app-root","G__56812","G__56813","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.fulcro.rendering.keyframe-render\n  \"The keyframe optimized render.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]\n    [taoensso.timbre :as log]))\n\n(defn render-state!\n  \"This function renders given state map over top of the current app. This allows you to render previews of state **without\n  actually changing the app state**. Used by Inspect for DOM preview. Forces a root-based render with no props diff optimization.\n  The app must already be mounted. Returns the result of render.\"\n  [app state-map]\n  (binding [comp/*blindly-render* true]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!        (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render))\n          query     (comp/get-query root-class state-map)\n          data-tree (if query\n                      (fdn/db->tree query state-map state-map)\n                      state-map)]\n      (when (and r! root-factory)\n        (r! (root-factory data-tree) mount-node)))))\n\n(defn render!\n  \"Render the UI. The keyframe render runs a full UI query and then asks React to render the root component.\n  The optimizations for this kind of render are purely those provided by `defsc`'s default\n  shouldComponentUpdate, which causes component to act like React PureComponent (though the props compare in cljs\n  is often faster).\n\n  If `:hydrate?` is true it will use the React hydrate functionality (on browsers) to render over\n  server-rendered content in the DOM.\n\n  If `:force-root? true` is included in the options map then not only will this do a keyframe update, it will also\n  force all components to return `true` from `shouldComponentUpdate`.\"\n  [app {:keys [force-root? hydrate?] :as options}]\n  (binding [comp/*blindly-render* force-root?]\n    (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom state-atom]} app\n          {:com.fulcrologic.fulcro.application/keys [root-factory root-class mount-node]} @runtime-atom\n          r!               (if hydrate?\n                             (or (ah/app-algorithm app :hydrate-root!) #?(:cljs js/ReactDOM.hydrate) #?(:cljs js/ReactDOM.render))\n                             (or (ah/app-algorithm app :render-root!) #?(:cljs js/ReactDOM.render)))\n          state-map        @state-atom\n          query            (comp/get-query root-class state-map)\n          data-tree        (if query\n                             (fdn/db->tree query state-map state-map)\n                             state-map)\n          app-root #?(:clj {}\n                      :cljs (when root-factory\n                              (r! (root-factory data-tree) mount-node)))]\n      (swap! runtime-atom assoc :com.fulcrologic.fulcro.application/app-root app-root)\n      #?(:cljs app-root))))"]}