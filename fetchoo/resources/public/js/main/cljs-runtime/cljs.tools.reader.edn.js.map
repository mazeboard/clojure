{"version":3,"sources":["cljs/tools/reader/edn.cljs"],"mappings":";AA4BA,AAAA;AAAA;AAAA,AAEA,AAAA,AAAgBA,AAAoBC;AAApC,AACE,AAAAC,AAAK,AAAK,AAAA,AAAeD;AAAzB,AAAA,AAAAC;AAAA,AAAAA,AACK,AAAK,AAAA,AAAeD;AADzB,AAAA,AAAAC;AAAA,AAAAA,AAEK,AAAK,AAAA,AAAeD;AAFzB,AAAA,AAAAC;AAGK,AAACC,AAAAA,AAAAA,AAAOF,AAAAA;;AAHbC;;;AAAAA;;;AAAAA;;;AAKF,AAAA,AAAgBE,AAAkBH;AAAlC,AACE,AAAI,AAAA,AAAeA,AACf,AAAA,AAAeA,AACf,AAAA,AAAeA;;AAErB,AAAA,AAAA,AAAAI,AAAOE;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOD,AACHE,AAAIC,AAAKC;AADb,AAEK,AAAA,AAACC,AAAWH,AAAIC,AAAKC;;;AAF1B,AAAA,AAAA,AAAOJ,AAGHE,AAAIC,AAAKC,AAAOE;AAHpB,AAIK,AACC,AAACC,AAAIH;AACL,AAACI,AAAuBN,AAAIC;;AAF7B,AAIC,AAAAR,AAAKW;AAAL,AAAA,AAAAX;AACK,AAACE,AAAiBO;;AADvBT;;;AAEA,AAACc,AAAmBP,AAAIC,AAAKC;;AAN9B,AASC,AAAOM,AAAG,AAAAC;AACHjB,AAAG;AAAI,AAACkB,AAAOV,AAAIE;;AAAQA;;;;AADlC,AAEE,AAAI,AAAI,AAACS,AAAYnB,AACb,AAACD,AAAmBC,AACpB,AAAA,AAAMA;AACZ,AAAKgB;;AACL,AAAI,AAACb,AAAiBH;AACpB,AAACe,AAAmBP,AAAIC,AAAKT;;AAC7B,AAAO,AAAAoB,AAAMJ;AAAN,AAAA,AAAAI,AAAkB,AAACC,AAAUb;;AAA7BY;;AAAoC,AAACE,AAAUd;;;;;;;;;;;;;AArBlE,AAAA,AAAA,AAAOF;;AAAP,AAuBA,AAAA,AAEA,AAAA,AAAOiB,AACJf,AAAIgB,AAAEC;AADT,AAEE,AAAAC,AAAY,AAACL,AAAUb;AAAvB,AAAA,AAAAkB;AAAA,AAAAA,AAAS1B;AAAT,AACE,AAAA0B,AAAY,AAACE,AAAAA,AAAAA,AAAgB5B,AAAAA;AAA7B,AAAA,AAAA0B;AAAA,AAAAA,AAASC;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAGnB,AAAAA,AAAIR,AAAAA,AAAGyB,AAAAA;;AACX,AAAAI,AAAa,AAAAI,AAAMzB;AAAN,AAAA,AAAAyB,AAAWf,AAAOlB;;AAAlBiC;;AAAbH,AAAoC9B;AAApC+B,AAAuCN;AAAvC,AAAA,AAAAI,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;;AACH,AAACE,AAA0B1B;;;AAE/B,AAAA,AAAO2B,AACJ3B,AAAIR,AAAGyB;AADV,AAEE,AAACW,AAA4B5B,AAAIR;;AAMnC,AAAA,AAAA,AAAAI,AAAOkC;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA/B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAO+B,AACHC,AAAMC,AAAOC,AAAOC;AADxB,AAEK,AAAMC,AAAE,AAAGH,AAAOC;AAAlB,AACE,AAAU,AAAI,AAACG,AAAML,AAAOI;AAA5B;AAAA,AACE,AAAA,AAACE,AAAsCN;;;AACzC,AAAOO,AAAEN;AAAT,AAAgBO;;AAAhB,AACE,AAAI,AAAID,AAAEH;AACR,AAACK,AAAuBD;;AACxB,AAAME,AAAE,AAACC,AAAU,AAACC,AAAIZ,AAAMO,AAAGJ;AAAjC,AACE,AAAI,AAAA,AAAIO;AACN,AAAA,AAACG,AAA6C,AAACD,AAAIZ,AAAMO,AAAGP;;AAC5D,AAAO,AAAA,AAAKO;AAAG,AAAGG,AAAE,AAAGF,AAAGL;;;;;;;;;;AAXzC,AAAA,AAAA,AAAOJ,AAaH9B,AAAIE,AAAOgC,AAAKD,AAAOY;AAb3B,AAcK,AAAA,AAAOP;AAAIC,AAAG,AAACG,AAAUxC,AAAOgC;;AAAhC,AACE,AAAI,AAAA,AAAIK;AACN,AAACO,AAAgC9C,AAAIE;;AACrC,AAAA,AAAQ,AAAIoC,AAAEL;AACZ,AAAMzC,AAAG,AAACsB,AAAUd;AAApB,AACE,AAAI,AAAA+C,AAAI,AAACpC,AAAYnB;AAAjB,AAAA,AAAAuD;AAAAA;;AAAA,AAAAA,AACI,AAACrD,AAAAA,AAAAA,AAAOF,AAAAA;AADZ,AAAA,AAAAuD;AAAAA;;AAEI,AAAA,AAAMvD;;;;AACZ,AAAIqD;AACF,AAACG,AAA8BhD,AAAIsC,AAAEL;;AACrC,AAACO,AAAuBD;;;AAC1B,AAAME,AAAE,AAACC,AAAUlD,AAAG0C;AAAtB,AACE,AAACrB,AAAUb;;AACX,AAAI,AAAA,AAAIyC;AACN,AAACK,AAAgC9C,AAAIR;;AACrC,AAAO,AAAA,AAAK8C;AAAG,AAAGG,AAAE,AAAGF,AAAGL;;;;;;;AAClC,AAACM,AAAuBD;;;;;;;AA9BnC,AAAA,AAAA,AAAOT;;AAAP,AAgCA,AAAuBmB,AAAY,AAAA,AAAA;AACnC,AAAuBC,AAAY,AAAA,AAAA;AAEnC,AAAA,AAAOC,AACJnD,AAAIoD,AAAUnC;AADjB,AAEE,AAAMzB,AAAG,AAACqB,AAAUb;AAApB,AACE,AAAA,AAAQ,AAAA,AAAMR;AACZ,AAAMuC,AAAM,AAAI,AAAI,AAACxC,AAAmBC,AACpB,AAACG,AAAiBH,AAClB,AAACmB,AAAYnB,AACnB,AAAKA,AACL,AAAA,AAAA,AAACW,AAAWH,AAAeR;AACnC6D,AAAU,AAAOtB;AALvB,AAME,AAEC,AAAA,AAAMsB;AAAY,AAAA,AAACV,AAAIZ;;AAFxB,AAIC,AAAA,AAAYA;AAJb;;AAAA,AAKC,AAAA,AAAYA;AALb;;AAAA,AAMC,AAAA,AAAYA;AANb;;AAAA,AAOC,AAAA,AAAYA;AAPb;;AAAA,AAQC,AAAA,AAAYA;AARb;;AAAA,AASC,AAAA,AAAYA;AATb;;AAAA,AAWC,AAAA,AAACuB,AAAmBvB;AACpB,AAAMwB,AAAE,AAAA,AAAA,AAAA,AAACC,AAAkBzB;AACrB0B,AAAG,AAAaF;AADtB,AAEE,AAAI,AAAK,AAAGE,AAAGR,AACN,AAAGQ,AAAGP;AACb,AAACQ,AAAoC1D,AAAI,AAAA,AAAWyD;;AACpDF;;;AAjBL,AAmBC,AAAA,AAACD,AAAmBvB;AACpB,AAAM4B,AAAI,AAAA,AAAKN;AAAf,AACE,AAAI,AAAA,AAAGM;AACL,AAACC,AAA4B5D,AAAI+B;;AACjC,AAAMQ,AAAG,AAAA,AAAA,AAACiB,AAAkBzB,AAAQ4B;AAApC,AACE,AAAI,AAAA,AAAG,AAAA,AAAKpB;AACV,AAACsB,AAA2B7D;;AAC5BuC;;;;AA1BT,AA4BO,AAACuB,AAAgC9D,AAAI+B;;;;;;;;;;;;AAC9C,AAACgC,AAA2B/D;;;AAElC,AAAA,AAAgBgE,AAAwBhE;AAAxC,AACE,AAAM,AAACiE,AAAiBjE;AAAxB,AAAA,AACG,AAACkE,AAAgBlE,AAAK,AAAA,AAAK,AAAA,AAAK,AAAA,AAAK,AAACmE,AAAkBnE;;AAD3D;;;AAGF,AAAA,AAAOoE,AACJnE,AAAKoE,AAAMrE,AAAIiB;AADlB,AAEE,AAAAqD,AAAgC,AAACN,AAAuBhE;AAAxD,AAAA2C,AAAA2B,AAAA,AAAA,AAAOC;AAAP,AAAA5B,AAAA2B,AAAA,AAAA,AAAkBE;AACZH,AAAM,AAACI,AAAKJ;AADlB,AAEE,AAAOK,AAAE,AAAA,AAACC;;AAAV,AACE,AAAMnF,AAAG,AAACoF,AAAUjE,AAAYX;AAAhC,AACE,AAAUR;AAAV;AAAA,AACE,AAACqF,AAAwB7E,AAAIC,AAAKsE,AAAWC,AAAa,AAACpC,AAAMsC;;;AACnE,AAAI,AAACI,AAAET,AAAM,AAACI,AAAKjF;AACjB,AAACuF,AAAYL;;AACb,AAAAxD,AAAiB,AAACxB,AAAAA,AAAAA,AAAOF,AAAAA;AAAzB,AAAA,AAAA0B;AAAA,AAAAA,AAAS8D;AAAT,AACE,AAAMC,AAAK,AAACD,AAAAA,AAAAA,AAAQhF,AAAAA,AAAIR,AAAAA,AAAGyB,AAAAA;AAA3B,AACE,AAAO,AAAA,AAAQ,AAAYgE,AAAKjF,AAAK,AAACkF,AAAMR,AAAEO,AAAMP;;;;AACtD,AAAMS,AAAE,AAAAC,AAAM,AAAAK,AAAMzF;AAAN,AAAA,AAAAyF,AAAW/E,AAAOlB;;AAAlBiG;;AAANJ,AAAA;AAAAC,AAAA;AAAAC,AAAsCtE;AAAtC,AAAA,AAAAmE,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAAT,AACE,AAAO,AAAA,AAAQ,AAAYL,AAAEnF,AAAK,AAACkF,AAAMR,AAAES,AAAGT;;;;;;;;AAE5D,AAAA,AAAOgB,AACJ1F,AAAIgB,AAAEC;AADT,AAEE,AAAM0E,AAAS,AAAA,AAAA,AAACvB,AAAwBpE,AAAIiB;AAA5C,AACE,AAAI,AAAC2E,AAAOD;AAAZ,AAAA;;AAEE,AAACE,AAAMC,AAAKH;;;AAElB,AAAA,AAAOI,AACJ/F,AAAIgB,AAAEC;AADT,AAEE,AAAA,AAAA,AAACmD,AAA0BpE,AAAIiB;;AAGjC,AAAA,AAAO+E,AACJhG,AAAIgB,AAAEC;AADT,AAEE,AAAAgF,AAAgC,AAACjC,AAAuBhE;AAAxD,AAAA2C,AAAAsD,AAAA,AAAA,AAAO1B;AAAP,AAAA5B,AAAAsD,AAAA,AAAA,AAAkBzB;AACZ0B,AAAQ,AAAA,AAAA,AAAC9B,AAAuBpE,AAAIiB;AACpCkF,AAAU,AAAC/D,AAAM8D;AACjBE,AAAG,AAAA,AAACC,AAAWH;AACfI,AAAQ,AAACC,AAAIH;AAJnB,AAKE,AAAM,AAACI,AAAKL;AAAZ,AACE,AAACM,AAAkBzG,AAAIuE,AAAWC,AAAa0B;;AADjD;;AAEA,AAAU,AAACpB,AAAE,AAAC1C,AAAMkE,AAAS,AAAClE,AAAMgE;AAApC;AAAA,AACE,AAAA,AAACM,AAAmB1G,AAASoG;;;AAC/B,AAAI,AAAID,AAAU,AAAA,AAAK,AAAqBQ;AAC1C,AAAA,AAAA,AAAYA,AAA6B,AAACC,AAASV;;AACnD,AAAA,AAAYW,AAA4B,AAACD,AAASV;;;AAExD,AAAA,AAAOY,AACJ9G,AAAIE,AAAOe;AADd,AAEE,AAAOT,AAAG,AAAAuG,AAAM,AAAAtG;AAAN,AAAA,AAAAsG,AAA+B7G;;AAA/B6G;;AACHvH,AAAG,AAACqB,AAAUb;;AADrB,AAEE,AAAI,AAAA+C,AAAI,AAACpC,AAAYnB;AAAjB,AAAA,AAAAuD;AAAAA;;AAAA,AAAAA,AAAqB,AAACrD,AAAAA,AAAAA,AAAOF,AAAAA;AAA7B,AAAA,AAAAuD;AAAAA;;AAAiC,AAAA,AAAMvD;;;;AACzC,AAAMwH,AAAE,AAAKxG;AAAb,AACE,AAACE,AAAOV,AAAIR;;AACZ,AAAAuD,AAAI,AAACkE,AAAaD;AAAlB,AAAA,AAAAjE;AAAAA;;AACI,AAACmE,AAAyBlH,AAAIgH;;;AACpC,AAAO,AAAAG,AAAM3G;AAAN,AAAA,AAAA2G,AAAkB3H;;AAAlB2H;;AAAuB,AAACtG,AAAUb;;;;;;;;AAE/C,AAAA,AAAOoH,AAAa5G,AAAGR;AAAvB,AACE,AAAMR,AAAG,AAACqB,AAAUb;AAApB,AACE,AAAAqH,AAAM7H;AAAN,AAAA,AAAA6H;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAQK,AAAM7H,AAAG,AAACqB,AAAUb;AAApB,AACE,AAAI,AAAA,AAAO,AAAA,AAACsH,AAAY,AAAA,AAAK9H;AAC3B,AAAC+H,AAAiCvH,AAAIR;;AACtC,AAAA,AAAA,AAAA,AAACgE,AAAkBxD,AAAIR;;;;;AAC9B,AAAI,AAACgI,AAAShI;AACZ,AAAMA,AAAG,AAAA,AAAA,AAAA,AAACgE,AAAkBxD,AAAIR;AAAhC,AACE,AAAI,AAAA,AAAG,AAAA,AAAKA;AACV,AAACqE,AAA2B7D;;AAC5BR;;;AACJ,AAACiI,AAA0BzH,AAAIR;;;;;AAEvC,AAAA,AAAOkI,AACJ1H,AAAIgB,AAAEC;AADT,AAEE,AAAOT,AAAG,AAAAC;AACHjB,AAAG,AAACqB,AAAUb;;AADrB,AAEE,AAAA2H,AAAMnI;AAAN,AAAA,AAAA,AAAAsF,AAAA,AAAA6C;AACM,AAAA,AAAA,AAACC,AAAsB5H,AAAeQ;;AAD5C,AAAA,AAAAsE,AAAA,AAAA6C;AAEK,AAAO,AAAAE,AAAMrH;AAAN,AAAA,AAAAqH,AAAkB,AAACT,AAAY5G,AAAGR;;AAAlC6H;;AACA,AAAChH,AAAUb;;;;;AAHvB,AAAA,AAAA8E,AAAA,AAAA6C;AAIK,AAAKnH;;AAJV,AAKE,AAAO,AAAAsH,AAAMtH;AAAN,AAAA,AAAAsH,AAAkBtI;;AAAlBsI;;AAAuB,AAACjH,AAAUb;;;;;;;;;;;AAE/C,AAAA,AAAO+H,AACJ/H,AAAIE;AADP,AAEE,AAAA8H,AAAiB,AAAA,AAAC7H,AAAWH,AAAYE;AAAzC,AAAA,AAAA8H;AAAA,AAAA,AAAAA,AAAWjG;AAAX,AACE,AAAAkG,AAAMlG;AAAN,AAAA,AAAAkG;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA,AAAA;;;;AAQE,AAAAlF,AAAI,AAAAiF,AAAa,AAACG,AAAapG;AAA3B,AAAA,AAAAiG;AAAA,AAAA,AAAAA,AAAWE;AAAX,AACE,AAACE,AAAO,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAK,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AADjB;;;AAAJ,AAAA,AAAAnF;AAAAA;;AAEI,AAAA,AAACsF,AAAkBrI,AAAY+B;;;;;AAXvC;;;AAaF,AAAA,AAAOuG,AACJC,AAAOrI,AAAOe;AADjB,AAEE,AAAMzB,AAAG,AAACqB,AAAU0H;AAApB,AACE,AAAA,AAAQ,AAAC5H,AAAYnB;AACnB,AAAMuC,AAAM,AAAA,AAAC5B,AAAWoI,AAAgB/I;AAClCwH,AAAE,AAACmB,AAAapG;AADtB,AAEE,AAAI,AAAAtC,AAAKuH;AAAL,AAAA,AAAAvH;AAAO,AAAA,AAAO,AAAA,AAAUsC;;AAAxBtC;;;AACF,AAAM+I,AAAG,AAAA,AAAA,AAACxB,AAAAA,AAAAA;AACJyB,AAAK,AAAA,AAAA,AAACzB,AAAAA,AAAAA;AADZ,AAEE,AAAI,AAAA,AAAe,AAAA,AAACrE,AAAIZ;AACtB,AAAA,AAACsG,AAAkBE,AAAgBxG;;AACnC,AAAC2G,AAAQF,AAAGC;;;AAChB,AAAA,AAACJ,AAAkBE,AAAgBxG;;;AACvC,AAAC4G,AAAuBJ;;;AAE9B,AAAA,AAAOK,AACJC;AADH,AAEE,AAAK7I,AAAIgB,AAAEC;AAAX,AACE,AAAA6H,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMD,AAAI,AAAA,AAAA,AAAA,AAAA,AAACrD,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;;;AAEjC,AAAA,AAAO8H,AACJ/I,AAAIgB,AAAEC;AADT,AAEE,AAAM+H,AAAE,AAACC,AAAa,AAAA,AAAA,AAAA,AAAA,AAACzD,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;AAAzC,AACE,AAAU,AAACiI,AAAKF;AAAhB;AAAA,AACE,AAACG,AAAuBnJ,AAAIgJ;;;AAC9B,AAAM7D,AAAE,AAAA,AAAA,AAAA,AAAA,AAACK,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;AAA3B,AACE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAmI,AAAA,AAAA,AAAA,AAAA,AAAmBjE,AAAAA,AAAAA;AACrB,AAACkE,AAAUlE,AAAE,AAACmE,AAAM,AAACC,AAAKpE,AAAG6D;;AAC7B,AAACQ,AAA8BxJ,AAAImF;;;AAE3C,AAAA,AAAOsE,AACJzJ,AAAIgB,AAAEC;AADT,AAEE,AAAMyI,AAAK,AAAA,AAAA,AAACtF,AAAuBpE,AAAIiB;AACjC0I,AAAQ,AAACpD,AAAImD;AADnB,AAEI,AAAU,AAAC5E,AAAE,AAAC1C,AAAMsH,AAAM,AAACtH,AAAMuH;AAAjC;AAAA,AACE,AAAA,AAACjD,AAAmB1G,AAAS0J;;;AAC/BC;;AAEN,AAAA,AAAOC,AACJ5J,AAAIgB,AAAEC;AADT,AAEE,AAAA4I,AAAM7J;AAAN,AAAA,AAAA6J,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AACGrE,AAAAA,AAAAA;;AADHqE;;AAGF,AAAA,AAAOC,AACJ9J,AAAIgB,AAAEC;AADT,AAEE,AAAMc,AAAM,AAAA,AAAC5B,AAAWH,AAAoB,AAACa,AAAUb;AAAvD,AACE,AAAAkB,AAAY,AAAA6I,AAAQhI;AAARgI,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAc5B;AAAd,AAAA,AAAA,AAAA4B,AAAA;AAAA;;AAAA,AAAAA,AAA2BC;;;AAAvC,AAAA,AAAA9I;AAAA,AAAAA,AAASsH;AAAT,AACE,AAAMhJ,AAAG,AAACoF,AAAUjE,AAAYX;AAAhC,AACE,AAAI,AAAA,AAAYR;AACd,AAAMyK,AAAM,AAAA,AAAA,AAAC7F,AAAkCpE,AAAIiB;AAAnD,AACE,AAAM,AAACuF,AAAK,AAACpE,AAAM6H;AAAnB,AACE,AAAA,AAAA,AAACxD,AAAkBzG,AAAYiK;;AADjC;;AAEA,AAAMC,AAAK,AAACC,AAAe,AAAK3B,AAAI,AAAA,AAACnC,AAAW4D;AAC1CG,AAAK,AAAA,AAAC/D,AAAW,AAACgE,AAAKJ;AAD7B,AAEE,AAAU,AAACnF,AAAE,AAAC1C,AAAM,AAACmE,AAAI2D,AAAO,AAAC9H,AAAM8H;AAAvC;AAAA,AACE,AAAA,AAACxD,AAAmB1G,AAAoBkK;;;AAC1C,AAACI,AAAOJ,AAAKE;;AACjB,AAACG,AAAwBvK,AAAI+B;;;AACjC,AAACyI,AAAiBxK,AAAI+B;;;AAE5B,AAAA,AAAO0I,AACJzK,AAAIgB,AAAEC;AADT,AAEE,AAAM4H,AAAI,AAAA,AAAA,AAAA,AAAA,AAACrD,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;AAA7B,AACE,AAAAyJ,AAAM7B;AAAN,AAAA,AAAA,AAAA/D,AAAA,AAAA,AAAA4F;AAEMC;;AAFN,AAAA,AAAA7F,AAAA,AAAA,AAAA4F;AAGOE;;AAHP,AAAA,AAAA9F,AAAA,AAAA,AAAA4F;AAIMG;;AAJN,AAME,AAACC,AAAiB9K,AAAI,AAAA,AAAyB6I;;;;;;AAErD,AAAA,AAAOnJ,AAAQF;AAAf,AACE,AAAAuL,AAAMvL;AAAN,AAAA,AAAAuL;AAAA;AACKrD;;;AADL;AAEKY;;;AAFL;AAGK0C;;;AAHL;AAIKjC;;;AAJL;AAKKrD;;;AALL;AAMK/D;;;AANL;AAOKoE;;;AAPL;AAQKpE;;;AARL;AASKqE;;;AATL;AAUKrE;;;AAVL;AAWKwB;;;AAXL;AAYKpC;;;;AAZL;;;;AAeF,AAAA,AAAOK,AAAiB5B;AAAxB,AACE,AAAAyL,AAAMzL;AAAN,AAAA,AAAAyL;AAAA;AACKlC;;;AADL;AAEKU;;;AAFL;AAGK,AAAA,AAACyB;;;AAHN;AAIKF;;;AAJL;AAKKpB;;;AALL;AAMKE;;;AANL;AAOKW;;;;AAPL;;;;AAUF,AAAA,AAAOjJ,AAAaxB,AAAIE,AAAOe;AAA/B,AACE,AAAMkK,AAAI,AAAA,AAAA,AAAA,AAAA,AAAC3F,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;AACvBmK,AAAO,AAAA,AAAA,AAAA,AAAA,AAAC5F,AAAAA,AAAAA,AAAKxF,AAAAA,AAAaiB,AAAAA;AADhC,AAEE,AAAA,AAAQ,AAAAoK,AAASF;AACf,AAAA,AAACG,AAAyBtL;;AAD5B;;AAEA,AAAAkB,AAAW,AAAA6B,AAAI,AAACyI,AAAI,AAAA,AAAUvK,AAAMkK;AAAzB,AAAA,AAAApI;AAAAA;;AACI,AAAC0I,AAAAA,AAAAA,AAAqBN,AAAAA;;;AADrC,AAAA,AAAAjK;AAAA,AAAAA,AAASqK;AAAT,AAEE,AAACA,AAAAA,AAAAA,AAAEH,AAAAA;;AACH,AAAAlK,AAAW,AAAA,AAAUD;AAArB,AAAA,AAAAC;AAAA,AAAAA,AAASuB;AAAT,AACE,AAACA,AAAAA,AAAAA,AAAE0I,AAAAA,AAAIC,AAAAA;;AACP,AAACM,AAA6B1L,AAAImL;;;;AAM1C,AAAA;;;;;;;;;;;;;;;;;;AAAA,AAAAvL,AAAM4F;AAAN,AAAA,AAAAmG,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAnG,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzF,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMyF,AAiBF+C;AAjBJ,AAiBY,AAAA,AAACwD,AAAQxD;;;AAjBrB,AAAA,AAAA,AAAAqD,AAAMpG,AAkBqB+C;AAlB3B,AAAA,AAAAsD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAhG,AAAAiG,AAAAD,AAAAA;AAAAA,AAkBqB5K;AAlBrB,AAAAuK,AAAAK,AAAA,AAkBYG;AAlBZ,AAmBK,AAAMC,AAAW,AAAK,AAAA,AAACC,AAAUjL;AAAjC,AACE,AAAC8K,AAAKxD,AAAO0D,AAAWD,AAAI/K;;;AApBnC,AAAA,AAAA,AAAMuE,AAqBF+C,AAAO0D,AAAWD,AAAI/K;AArB1B,AAsBK,AAAA,AACE;AAAA,AACE,AAAMzB,AAAG,AAACqB,AAAU0H;AAApB,AACE,AACC,AAAC5H,AAAYnB;AAAI;;AADlB,AAEC,AAAA,AAAMA;AAAI,AAAIyM;AAAW,AAAA,AAACG,AAAoB7D;;AAAYyD;;;AAF3D,AAGC,AAACK,AAAgB9D,AAAO/I;AAAI,AAACsH,AAAYyB,AAAO/I,AAAGyB;;AAHpD,AAIO,AAAMsK,AAAE,AAAC7L,AAAOF;AAAhB,AACE,AAAI+L;AACF,AAAMe,AAAI,AAACf,AAAAA,AAAAA,AAAEhD,AAAAA,AAAO/I,AAAAA,AAAGyB,AAAAA;AAAvB,AACE,AAAI,AAAYqL,AAAI/D;AAClB;;AACA+D;;;AACJ,AAACvE,AAAYQ,AAAO/I;;;;;;;;AAbrC,AAAA,AAAA2M,AAcSpM;AAdT,AAAAoM,AAckBI;AAdlB,AAeI,AAAI,AAACC,AAASD;AACZ,AAAM9J,AAAE,AAACgK,AAAQF;AAAjB,AACE,AAAI,AAAA,AAACzH,AAAoB,AAAA,AAAOrC;AAC9B,AAAO8J;;AACP,AAAO,AAACG,AAAQ,AAAWH,AACX,AAAA,AAAA,AAAA,AAACjD,AACM7G,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAACwB,AAAiBsE,AACX,AAACrE,AAAgBqE,AACjB,AAACpE,AAAkBoE,AACnB,AAACoE,AAAcpE,AACjCgE;;;AACpB,AAAO,AAACG,AAAQ,AAAWH,AACX,AAAA,AAAA,AAAA,AAACjD,AACM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAACrF,AAAiBsE,AACX,AAACrE,AAAgBqE,AACjB,AAACpE,AAAkBoE,AACnB,AAACoE,AAAcpE,AACjCgE;;;AAjCtB,AAAA,AAAAJ;;;;;AAtBL,AAAA,AAAA,AAAM3G;;AAAN,AAyDA,AAAA;;;;;;;;;AAAA,AAAA5F,AAAMiN;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA9M,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM8M,AAQF7F;AARJ,AAQO,AAAA,AAAA,AAAA,AAAC8F,AAAuB9F;;;AAR/B,AAAA,AAAA,AAAM6F,AASF5L,AAAK+F;AATT,AAUK,AAAM,AAAAvH,AAAKuH;AAAL,AAAA,AAAAvH;AAAO,AAAA,AAACsN,AAAK/F;;AAAbvH;;;AAAN,AACE,AAACsM,AAAK9K,AAAK,AAAC+L,AAAwBhG;;AADtC;;;;AAVL,AAAA,AAAA,AAAM6F;;AAAN","names":["cljs.tools.reader.edn/macro-terminating?","ch","and__4120__auto__","cljs.tools.reader.edn/macros","cljs.tools.reader.edn/not-constituent?","var_args","G__43020","cljs.tools.reader.edn/read-token","js/Error","rdr","kind","initch","cljs.tools.reader.edn.read_token","validate-leading?","cljs.core/not","cljs.tools.reader.impl.errors/throw-eof-at-start","cljs.tools.reader.impl.errors/throw-bad-char","sb","js/goog.string.StringBuffer","cljs.tools.reader.reader-types/unread","cljs.tools.reader.impl.utils/whitespace?","G__43028","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.edn/read-dispatch","_","opts","temp__5751__auto__","dm","cljs.tools.reader.edn/dispatch-macros","G__43032","G__43033","G__43034","cljs.tools.reader.edn/read-tagged","G__43035","cljs.tools.reader.impl.errors/throw-eof-at-dispatch","cljs.tools.reader.edn/read-unmatched-delimiter","cljs.tools.reader.impl.errors/throw-unmatch-delimiter","G__43043","cljs.tools.reader.edn/read-unicode-char","token","offset","length","base","l","cljs.core/count","cljs.tools.reader.impl.errors/throw-invalid-unicode-literal","i","uc","js/String.fromCharCode","d","cljs.tools.reader.impl.utils/char-code","cljs.core.nth","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit-in-token","exact?","cljs.tools.reader.impl.errors/throw-invalid-unicode-digit","or__4131__auto__","cljs.tools.reader.impl.errors/throw-invalid-unicode-len","cljs.tools.reader.edn/upper-limit","cljs.tools.reader.edn/lower-limit","cljs.tools.reader.edn/read-char*","backslash","token-len","goog.string/startsWith","c","cljs.tools.reader.edn.read_unicode_char","ic","cljs.tools.reader.impl.errors/throw-invalid-character-literal","len","cljs.tools.reader.impl.errors/throw-invalid-octal-len","cljs.tools.reader.impl.errors/throw-bad-octal-number","cljs.tools.reader.impl.errors/throw-unsupported-character","cljs.tools.reader.impl.errors/throw-eof-in-character","cljs.tools.reader.edn/starting-line-col-info","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.edn/read-delimited","delim","vec__43067","start-line","start-column","cljs.tools.reader.impl.utils/char","a","cljs.core/transient","cljs.tools.reader.impl.commons/read-past","cljs.tools.reader.impl.errors.throw_eof_delimited","cljs.core._EQ_","cljs.core/persistent!","macrofn","mret","cljs.core.conj_BANG_","o","G__43074","G__43075","G__43076","G__43077","cljs.tools.reader.edn/read","G__43078","cljs.tools.reader.edn/read-list","the-list","cljs.core/empty?","cljs.core.apply","cljs.core/list","cljs.tools.reader.edn/read-vector","cljs.tools.reader.edn/read-map","vec__43098","the-map","map-count","ks","cljs.core.take_nth","key-set","cljs.core/set","cljs.core/odd?","cljs.tools.reader.impl.errors/throw-odd-map","cljs.tools.reader.impl.errors/throw-dup-keys","cljs.core/PersistentArrayMap","cljs.core/to-array","cljs.core/PersistentHashMap","cljs.tools.reader.edn/read-number","G__43121","s","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.errors/throw-invalid-number","G__43135","cljs.tools.reader.edn/escape-char","G__43143","js/parseInt","cljs.tools.reader.impl.errors/throw-invalid-unicode-escape","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.errors/throw-bad-escape-char","cljs.tools.reader.edn/read-string*","G__43168","cljs.tools.reader.impl.errors.throw_eof_reading","G__43172","G__43175","cljs.tools.reader.edn/read-symbol","temp__5753__auto__","G__43185","p","cljs.tools.reader.impl.commons/parse-symbol","cljs.core.symbol","cljs.tools.reader.impl.errors/throw-invalid","cljs.tools.reader.edn/read-keyword","reader","ns","name","cljs.core.keyword","cljs.tools.reader.impl.errors/throw-single-colon","cljs.tools.reader.edn/wrapping-reader","sym","cljs.core/List","cljs.tools.reader.edn/read-meta","m","cljs.tools.reader.impl.utils/desugar-meta","cljs.core/map?","cljs.tools.reader.impl.errors/throw-bad-metadata","cljs.core/PROTOCOL_SENTINEL","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","cljs.tools.reader.impl.errors/throw-bad-metadata-target","cljs.tools.reader.edn/read-set","coll","the-set","cljs.tools.reader.edn/read-discard","G__43225","cljs.tools.reader.edn/read-namespaced-map","G__43231","cljs.tools.reader.impl.utils/second'","items","keys","cljs.tools.reader.impl.utils/namespace-keys","vals","cljs.core/rest","cljs.core/zipmap","cljs.tools.reader.impl.errors/throw-ns-map-no-map","cljs.tools.reader.impl.errors/throw-bad-ns","cljs.tools.reader.edn/read-symbolic-value","G__43252","js/Number.NaN","js/Number.NEGATIVE_INFINITY","js/Number.POSITIVE_INFINITY","cljs.tools.reader.impl.errors.reader_error","G__43264","cljs.tools.reader.impl.commons/read-comment","G__43271","cljs.tools.reader.impl.commons/throwing-reader","tag","object","cljs.core/Symbol","cljs.tools.reader.impl.errors/throw-bad-reader-tag","f","cljs.core.get","cljs.tools.reader/default-data-readers","cljs.tools.reader.impl.errors/throw-unknown-reader-tag","G__43312","p__43318","map__43320","cljs.core/hash-map","cljs.tools.reader.edn.read","eof","eof-error?","cljs.core/contains?","e43328","cljs.tools.reader.impl.errors/throw-eof-error","cljs.tools.reader.impl.commons/number-literal?","res","e","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ex-data","cljs.core.ex_info","cljs.tools.reader.reader-types/get-file-name","G__43349","cljs.tools.reader.edn/read-string","cljs.tools.reader.edn.read_string","cljs.core.not_EQ_","cljs.tools.reader.reader_types.string_push_back_reader"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"An EDN reader in clojure\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.edn\n  (:refer-clojure :exclude [read read-string char default-data-readers])\n  (:require [cljs.tools.reader.impl.errors :as err]\n            [cljs.tools.reader.reader-types :refer\n             [read-char unread peek-char indexing-reader?\n              get-line-number get-column-number get-file-name string-push-back-reader]]\n            [cljs.tools.reader.impl.utils :refer\n             [char ex-info? whitespace? numeric? desugar-meta namespace-keys second' char-code]]\n            [cljs.tools.reader.impl.commons :refer\n             [number-literal? read-past match-number parse-symbol read-comment throwing-reader]]\n            [cljs.tools.reader :refer [default-data-readers]]\n            [goog.string :as gstring])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare read macros dispatch-macros)\n\n(defn- ^boolean macro-terminating? [ch]\n  (and (not (identical? \\# ch))\n       (not (identical? \\' ch))\n       (not (identical? \\: ch))\n       (macros ch)))\n\n(defn- ^boolean not-constituent? [ch]\n  (or (identical? \\@ ch)\n      (identical? \\` ch)\n      (identical? \\~ ch)))\n\n(defn- read-token\n  ([rdr kind initch]\n     (read-token rdr kind initch true))\n  ([rdr kind initch validate-leading?]\n     (cond\n      (not initch)\n      (err/throw-eof-at-start rdr kind)\n\n      (and validate-leading?\n           (not-constituent? initch))\n      (err/throw-bad-char rdr kind initch)\n\n      :else\n      (loop [sb (StringBuffer.)\n             ch (do (unread rdr initch) initch)]\n        (if (or (whitespace? ch)\n                (macro-terminating? ch)\n                (nil? ch))\n          (str sb)\n          (if (not-constituent? ch)\n            (err/throw-bad-char rdr kind ch)\n            (recur (doto sb (.append (read-char rdr))) (peek-char rdr))))))))\n\n(declare read-tagged)\n\n(defn- read-dispatch\n  [rdr _ opts]\n  (if-let [ch (read-char rdr)]\n    (if-let [dm (dispatch-macros ch)]\n      (dm rdr ch opts)\n      (read-tagged (doto rdr (unread ch)) ch opts))\n    (err/throw-eof-at-dispatch rdr)))\n\n(defn- read-unmatched-delimiter\n  [rdr ch opts]\n  (err/throw-unmatch-delimiter rdr ch))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- read-unicode-char\n  ([token offset length base]\n     (let [l (+ offset length)]\n       (when-not (== (count token) l)\n         (err/throw-invalid-unicode-literal nil token))\n       (loop [i offset uc 0]\n         (if (== i l)\n           (js/String.fromCharCode uc)\n           (let [d (char-code (nth token i) base)]\n             (if (== d -1)\n               (err/throw-invalid-unicode-digit-in-token nil (nth token i) token)\n               (recur (inc i) (+ d (* uc base)))))))))\n\n  ([rdr initch base length exact?]\n     (loop [i 1 uc (char-code initch base)]\n       (if (== uc -1)\n         (err/throw-invalid-unicode-digit rdr initch)\n         (if-not (== i length)\n           (let [ch (peek-char rdr)]\n             (if (or (whitespace? ch)\n                     (macros ch)\n                     (nil? ch))\n               (if exact?\n                 (err/throw-invalid-unicode-len rdr i length)\n                 (js/String.fromCharCode uc))\n               (let [d (char-code ch base)]\n                 (read-char rdr)\n                 (if (== d -1)\n                   (err/throw-invalid-unicode-digit rdr ch)\n                   (recur (inc i) (+ d (* uc base)))))))\n           (js/String.fromCharCode uc))))))\n\n(def ^:private ^:const upper-limit (.charCodeAt \\uD7ff 0))\n(def ^:private ^:const lower-limit (.charCodeAt \\uE000 0))\n\n(defn- read-char*\n  [rdr backslash opts]\n  (let [ch (read-char rdr)]\n    (if-not (nil? ch)\n      (let [token (if (or (macro-terminating? ch)\n                          (not-constituent? ch)\n                          (whitespace? ch))\n                    (str ch)\n                    (read-token rdr :character ch false))\n            token-len (count token)]\n        (cond\n\n         (== 1 token-len)  (nth token 0)\n\n         (identical? token \"newline\") \\newline\n         (identical? token \"space\") \\space\n         (identical? token \"tab\") \\tab\n         (identical? token \"backspace\") \\backspace\n         (identical? token \"formfeed\") \\formfeed\n         (identical? token \"return\") \\return\n\n         (gstring/startsWith token \"u\")\n         (let [c (read-unicode-char token 1 4 16)\n               ic (.charCodeAt c)]\n           (if (and (> ic upper-limit)\n                    (< ic lower-limit))\n             (err/throw-invalid-character-literal rdr (.toString ic 16))\n             c))\n\n         (gstring/startsWith token \"o\")\n         (let [len (dec token-len)]\n           (if (> len 3)\n             (err/throw-invalid-octal-len rdr token)\n             (let [uc (read-unicode-char token 1 len 8)]\n               (if (> (int uc) 0377)\n                 (err/throw-bad-octal-number rdr)\n                 uc))))\n\n         :else (err/throw-unsupported-character rdr token)))\n      (err/throw-eof-in-character rdr))))\n\n(defn ^:private starting-line-col-info [rdr]\n  (when (indexing-reader? rdr)\n    [(get-line-number rdr) (int (dec (int (get-column-number rdr))))]))\n\n(defn- read-delimited\n  [kind delim rdr opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        delim (char delim)]\n    (loop [a (transient [])]\n      (let [ch (read-past whitespace? rdr)]\n        (when-not ch\n          (err/throw-eof-delimited rdr kind start-line start-column (count a)))\n        (if (= delim (char ch))\n          (persistent! a)\n          (if-let [macrofn (macros ch)]\n            (let [mret (macrofn rdr ch opts)]\n              (recur (if-not (identical? mret rdr) (conj! a mret) a)))\n            (let [o (read (doto rdr (unread ch)) true nil opts)]\n              (recur (if-not (identical? o rdr) (conj! a o) a)))))))))\n\n(defn- read-list\n  [rdr _ opts]\n  (let [the-list (read-delimited :list \\) rdr opts)]\n    (if (empty? the-list)\n      '()\n      (apply list the-list))))\n\n(defn- read-vector\n  [rdr _ opts]\n  (read-delimited :vector \\] rdr opts))\n\n\n(defn- read-map\n  [rdr _ opts]\n  (let [[start-line start-column] (starting-line-col-info rdr)\n        the-map (read-delimited :map \\} rdr opts)\n        map-count (count the-map)\n        ks (take-nth 2 the-map)\n        key-set (set ks)]\n    (when (odd? map-count)\n      (err/throw-odd-map rdr start-line start-column the-map))\n    (when-not (= (count key-set) (count ks))\n      (err/throw-dup-keys rdr :map ks))\n    (if (<= map-count (* 2 (.-HASHMAP-THRESHOLD cljs.core/PersistentArrayMap)))\n      (.fromArray cljs.core/PersistentArrayMap (to-array the-map) true true)\n      (.fromArray cljs.core/PersistentHashMap (to-array the-map) true))))\n\n(defn- read-number\n  [rdr initch opts]\n  (loop [sb (doto (StringBuffer.) (.append initch))\n         ch (read-char rdr)]\n    (if (or (whitespace? ch) (macros ch) (nil? ch))\n      (let [s (str sb)]\n        (unread rdr ch)\n        (or (match-number s)\n            (err/throw-invalid-number rdr s)))\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- escape-char [sb rdr]\n  (let [ch (read-char rdr)]\n    (case ch\n      \\t \"\\t\"\n      \\r \"\\r\"\n      \\n \"\\n\"\n      \\\\ \"\\\\\"\n      \\\" \"\\\"\"\n      \\b \"\\b\"\n      \\f \"\\f\"\n      \\u (let [ch (read-char rdr)]\n           (if (== -1 (js/parseInt (int ch) 16))\n             (err/throw-invalid-unicode-escape rdr ch)\n             (read-unicode-char rdr ch 16 4 true)))\n      (if (numeric? ch)\n        (let [ch (read-unicode-char rdr ch 8 3 false)]\n          (if (> (int ch) 0377)\n            (err/throw-bad-octal-number rdr)\n            ch))\n        (err/throw-bad-escape-char rdr ch)))))\n\n(defn- read-string*\n  [rdr _ opts]\n  (loop [sb (StringBuffer.)\n         ch (read-char rdr)]\n    (case ch\n      nil (err/throw-eof-reading rdr :string \\\" sb)\n      \\\\ (recur (doto sb (.append (escape-char sb rdr)))\n                (read-char rdr))\n      \\\" (str sb)\n      (recur (doto sb (.append ch)) (read-char rdr)))))\n\n(defn- read-symbol\n  [rdr initch]\n  (when-let [token (read-token rdr :symbol initch)]\n    (case token\n\n      ;; special symbols\n      \"nil\" nil\n      \"true\" true\n      \"false\" false\n      \"/\" '/\n\n      (or (when-let [p (parse-symbol token)]\n            (symbol (p 0) (p 1)))\n          (err/throw-invalid rdr :symbol token)))))\n\n(defn- read-keyword\n  [reader initch opts]\n  (let [ch (read-char reader)]\n    (if-not (whitespace? ch)\n      (let [token (read-token reader :keyword ch)\n            s (parse-symbol token)]\n        (if (and s (== -1 (.indexOf token \"::\")))\n          (let [ns (s 0)\n                name (s 1)]\n            (if (identical? \\: (nth token 0))\n              (err/throw-invalid reader :keyword token) ;; no ::keyword in edn\n              (keyword ns name)))\n          (err/throw-invalid reader :keyword token)))\n      (err/throw-single-colon reader))))\n\n(defn- wrapping-reader\n  [sym]\n  (fn [rdr _ opts]\n    (list sym (read rdr true nil opts))))\n\n(defn- read-meta\n  [rdr _ opts]\n  (let [m (desugar-meta (read rdr true nil opts))]\n    (when-not (map? m)\n      (err/throw-bad-metadata rdr m))\n    (let [o (read rdr true nil opts)]\n      (if (implements? IMeta o)\n        (with-meta o (merge (meta o) m))\n        (err/throw-bad-metadata-target rdr o)))))\n\n(defn- read-set\n  [rdr _ opts]\n  (let [coll (read-delimited :set \\} rdr opts)\n        the-set (set coll)]\n      (when-not (= (count coll) (count the-set))\n        (err/throw-dup-keys rdr :set coll))\n      the-set))\n\n(defn- read-discard\n  [rdr _ opts]\n  (doto rdr\n    (read true nil true)))\n\n(defn- read-namespaced-map\n  [rdr _ opts]\n  (let [token (read-token rdr :namespaced-map (read-char rdr))]\n    (if-let [ns (some-> token parse-symbol second')]\n      (let [ch (read-past whitespace? rdr)]\n        (if (identical? ch \\{)\n          (let [items (read-delimited :namespaced-map \\} rdr opts)]\n            (when (odd? (count items))\n              (err/throw-odd-map rdr nil nil items))\n            (let [keys (namespace-keys (str ns) (take-nth 2 items))\n                  vals (take-nth 2 (rest items))]\n              (when-not (= (count (set keys)) (count keys))\n                (err/throw-dup-keys rdr :namespaced-map keys))\n              (zipmap keys vals)))\n          (err/throw-ns-map-no-map rdr token)))\n      (err/throw-bad-ns rdr token))))\n\n(defn- read-symbolic-value\n  [rdr _ opts]\n  (let [sym (read rdr true nil opts)]\n    (case sym\n\n      NaN js/Number.NaN\n      -Inf js/Number.NEGATIVE_INFINITY\n      Inf js/Number.POSITIVE_INFINITY\n\n      (err/reader-error rdr (str \"Invalid token: ##\" sym)))))\n\n(defn- macros [ch]\n  (case ch\n    \\\" read-string*\n    \\: read-keyword\n    \\; read-comment\n    \\^ read-meta\n    \\( read-list\n    \\) read-unmatched-delimiter\n    \\[ read-vector\n    \\] read-unmatched-delimiter\n    \\{ read-map\n    \\} read-unmatched-delimiter\n    \\\\ read-char*\n    \\# read-dispatch\n    nil))\n\n(defn- dispatch-macros [ch]\n  (case ch\n    \\^ read-meta                ;deprecated\n    \\{ read-set\n    \\< (throwing-reader \"Unreadable form\")\n    \\! read-comment\n    \\_ read-discard\n    \\: read-namespaced-map\n    \\# read-symbolic-value\n    nil))\n\n(defn- read-tagged [rdr initch opts]\n  (let [tag (read rdr true nil opts)\n        object (read rdr true nil opts)]\n    (if-not (symbol? tag)\n      (err/throw-bad-reader-tag rdr \"Reader tag must be a symbol\"))\n    (if-let [f (or (get (:readers opts) tag)\n                   (default-data-readers tag))]\n      (f object)\n      (if-let [d (:default opts)]\n        (d tag object)\n        (err/throw-unknown-reader-tag rdr tag)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read\n  \"Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   cljs.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.\"\n  ([reader] (read {} reader))\n  ([{:keys [eof] :as opts} reader]\n     (let [eof-error? (not (contains? opts :eof))]\n       (read reader eof-error? eof opts)))\n  ([reader eof-error? eof opts]\n     (try\n       (loop []\n         (let [ch (read-char reader)]\n           (cond\n            (whitespace? ch) (recur)\n            (nil? ch) (if eof-error? (err/throw-eof-error reader nil) eof)\n            (number-literal? reader ch) (read-number reader ch opts)\n            :else (let [f (macros ch)]\n                    (if f\n                      (let [res (f reader ch opts)]\n                        (if (identical? res reader)\n                          (recur)\n                          res))\n                      (read-symbol reader ch))))))\n       (catch js/Error e\n         (if (ex-info? e)\n           (let [d (ex-data e)]\n             (if (= :reader-exception (:type d))\n               (throw e)\n               (throw (ex-info (.-message e)\n                               (merge {:type :reader-exception}\n                                      d\n                                      (if (indexing-reader? reader)\n                                        {:line   (get-line-number reader)\n                                         :column (get-column-number reader)\n                                         :file   (get-file-name reader)}))\n                               e))))\n           (throw (ex-info (.-message e)\n                           (merge {:type :reader-exception}\n                                  (if (indexing-reader? reader)\n                                    {:line   (get-line-number reader)\n                                     :column (get-column-number reader)\n                                     :file   (get-file-name reader)}))\n                           e)))))))\n\n(defn read-string\n  \"Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per cljs.tools.reader.edn/read\"\n  ([s] (read-string {:eof nil} s))\n  ([opts s]\n     (when (and s (not= s \"\"))\n       (read opts (string-push-back-reader s)))))\n"]}