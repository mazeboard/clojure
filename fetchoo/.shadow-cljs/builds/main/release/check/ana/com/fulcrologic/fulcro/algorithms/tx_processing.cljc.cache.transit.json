["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nvar parallel_QMARK_ = (function (p__79442){\nvar map__79443 = p__79442;\nvar map__79443__$1 = (((((!((map__79443 == null))))?(((((map__79443.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79443.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79443):map__79443);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79443__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__79441 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__79441__$1 = (((((!((map__79441 == null))))?(((((map__79441.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79441.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79441):map__79441);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79441__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79441__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__79452_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__79452_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__79453_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__79453_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nvar vec__79457 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79457,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79457,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (vec__79457,active_queue,send_queue__$1){\nreturn (function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n});})(vec__79457,active_queue,send_queue__$1))\n,cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__79460 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__79457,active_queue,send_queue__$1,id_sequence,clusters){\nreturn (function (result,id){\nvar vec__79462 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__79463 = cljs.core.seq(vec__79462);\nvar first__79464 = cljs.core.first(seq__79463);\nvar seq__79463__$1 = cljs.core.next(seq__79463);\nvar map__79465 = first__79464;\nvar map__79465__$1 = (((((!((map__79465 == null))))?(((((map__79465.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79465.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79465):map__79465);\nvar n = map__79465__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79465__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__79463__$1;\nvar cluster = vec__79462;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n});})(vec__79457,active_queue,send_queue__$1,id_sequence,clusters))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__79460__$1 = (((((!((map__79460 == null))))?(((((map__79460.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79460.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79460):map__79460);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79460__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79460__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__79473){\nvar map__79474 = p__79473;\nvar map__79474__$1 = (((((!((map__79474 == null))))?(((((map__79474.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79474.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79474):map__79474);\nvar ast = map__79474__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79474__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79474__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79474__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nvar vec__79480 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__79483 = cljs.core.split_with(((function (vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options){\nreturn (function (p1__79477_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__79477_SHARP_));\n});})(vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options))\n,send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79483,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79483,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer){\nreturn (function (acc,p__79486){\nvar map__79487 = p__79486;\nvar map__79487__$1 = (((((!((map__79487 == null))))?(((((map__79487.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79487.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79487):map__79487);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79487__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast)))?edn_query_language.core.ast__GT_query(ast):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [edn_query_language.core.ast__GT_query(ast)], null));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n});})(vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer))\n,cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),((function (vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__79494){\nvar map__79495 = p__79494;\nvar map__79495__$1 = (((((!((map__79495 == null))))?(((((map__79495.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79495.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79495):map__79495);\nvar combined_result = map__79495__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79495__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__79499 = cljs.core.seq(to_send);\nvar chunk__79501 = null;\nvar count__79502 = (0);\nvar i__79503 = (0);\nwhile(true){\nif((i__79503 < count__79502)){\nvar map__79521 = chunk__79501.cljs$core$IIndexed$_nth$arity$2(null,i__79503);\nvar map__79521__$1 = (((((!((map__79521 == null))))?(((((map__79521.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79521.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79521):map__79521);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79521__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__80013 = seq__79499;\nvar G__80014 = chunk__79501;\nvar G__80015 = count__79502;\nvar G__80016 = (i__79503 + (1));\nseq__79499 = G__80013;\nchunk__79501 = G__80014;\ncount__79502 = G__80015;\ni__79503 = G__80016;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__79499);\nif(temp__5753__auto__){\nvar seq__79499__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__79499__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__79499__$1);\nvar G__80021 = cljs.core.chunk_rest(seq__79499__$1);\nvar G__80022 = c__4550__auto__;\nvar G__80023 = cljs.core.count(c__4550__auto__);\nvar G__80024 = (0);\nseq__79499 = G__80021;\nchunk__79501 = G__80022;\ncount__79502 = G__80023;\ni__79503 = G__80024;\ncontinue;\n} else {\nvar map__79528 = cljs.core.first(seq__79499__$1);\nvar map__79528__$1 = (((((!((map__79528 == null))))?(((((map__79528.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79528.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79528):map__79528);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79528__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__80026 = cljs.core.next(seq__79499__$1);\nvar G__80027 = null;\nvar G__80028 = (0);\nvar G__80029 = (0);\nseq__79499 = G__80026;\nchunk__79501 = G__80027;\ncount__79502 = G__80028;\ni__79503 = G__80029;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});})(vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),((function (vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__79533){\nvar map__79534 = p__79533;\nvar map__79534__$1 = (((((!((map__79534 == null))))?(((((map__79534.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79534.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79534):map__79534);\nvar combined_result = map__79534__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79534__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__79541_80032 = cljs.core.seq(to_send);\nvar chunk__79542_80033 = null;\nvar count__79543_80034 = (0);\nvar i__79544_80035 = (0);\nwhile(true){\nif((i__79544_80035 < count__79543_80034)){\nvar map__79589_80036 = chunk__79542_80033.cljs$core$IIndexed$_nth$arity$2(null,i__79544_80035);\nvar map__79589_80037__$1 = (((((!((map__79589_80036 == null))))?(((((map__79589_80036.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79589_80036.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79589_80036):map__79589_80036);\nvar ast_80038__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79589_80037__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_80039 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79589_80037__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_80042 = cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_80038__$1));\nvar result_80043 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_80042);\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var map__79597_80044 = result_80043;\nvar map__79597_80045__$1 = (((((!((map__79597_80044 == null))))?(((((map__79597_80044.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79597_80044.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79597_80044):map__79597_80044);\nvar status_code_80046 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79597_80045__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_80047__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79597_80045__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_80046)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_80047__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,remote_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_80046));\n}\n}catch (e79596){var e_80049 = e79596;\n}} else {\n}\n\n(result_handler_80039.cljs$core$IFn$_invoke$arity$1 ? result_handler_80039.cljs$core$IFn$_invoke$arity$1(result_80043) : result_handler_80039.call(null,result_80043));\n\n\nvar G__80050 = seq__79541_80032;\nvar G__80051 = chunk__79542_80033;\nvar G__80052 = count__79543_80034;\nvar G__80053 = (i__79544_80035 + (1));\nseq__79541_80032 = G__80050;\nchunk__79542_80033 = G__80051;\ncount__79543_80034 = G__80052;\ni__79544_80035 = G__80053;\ncontinue;\n} else {\nvar temp__5753__auto___80055 = cljs.core.seq(seq__79541_80032);\nif(temp__5753__auto___80055){\nvar seq__79541_80058__$1 = temp__5753__auto___80055;\nif(cljs.core.chunked_seq_QMARK_(seq__79541_80058__$1)){\nvar c__4550__auto___80059 = cljs.core.chunk_first(seq__79541_80058__$1);\nvar G__80060 = cljs.core.chunk_rest(seq__79541_80058__$1);\nvar G__80061 = c__4550__auto___80059;\nvar G__80062 = cljs.core.count(c__4550__auto___80059);\nvar G__80063 = (0);\nseq__79541_80032 = G__80060;\nchunk__79542_80033 = G__80061;\ncount__79543_80034 = G__80062;\ni__79544_80035 = G__80063;\ncontinue;\n} else {\nvar map__79601_80064 = cljs.core.first(seq__79541_80058__$1);\nvar map__79601_80065__$1 = (((((!((map__79601_80064 == null))))?(((((map__79601_80064.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79601_80064.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79601_80064):map__79601_80064);\nvar ast_80066__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79601_80065__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_80067 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79601_80065__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_80070 = cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_80066__$1));\nvar result_80071 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_80070);\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var map__79606_80073 = result_80071;\nvar map__79606_80074__$1 = (((((!((map__79606_80073 == null))))?(((((map__79606_80073.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79606_80073.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79606_80073):map__79606_80073);\nvar status_code_80075 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79606_80074__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_80076__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79606_80074__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_80075)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_80076__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,remote_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_80075));\n}\n}catch (e79605){var e_80080 = e79605;\n}} else {\n}\n\n(result_handler_80067.cljs$core$IFn$_invoke$arity$1 ? result_handler_80067.cljs$core$IFn$_invoke$arity$1(result_80071) : result_handler_80067.call(null,result_80071));\n\n\nvar G__80082 = cljs.core.next(seq__79541_80058__$1);\nvar G__80083 = null;\nvar G__80084 = (0);\nvar G__80085 = (0);\nseq__79541_80032 = G__80082;\nchunk__79542_80033 = G__80083;\ncount__79543_80034 = G__80084;\ni__79544_80035 = G__80085;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n});})(vec__79480,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__79483,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nvar b2__45871__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__45871__auto__)){\nvar remote = b2__45871__auto__;\nvar b2__45871__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__45871__auto____$1)){\nvar transmit_BANG_ = b2__45871__auto____$1;\nvar b2__45871__auto____$2 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nif(cljs.core.truth_(b2__45871__auto____$2)){\nvar query_transform = b2__45871__auto____$2;\nvar b2__45871__auto____$3 = (cljs.core.truth_(query_transform)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(send_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),query_transform):send_node);\nif(cljs.core.truth_(b2__45871__auto____$3)){\nvar send_node__$1 = b2__45871__auto____$3;\ntry{if(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_80098 = edn_query_language.core.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node__$1));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node__$1),tx_80098);\n}catch (e79624){var e_80100 = e79624;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node__$1) : transmit_BANG_.call(null,remote,send_node__$1));\n}catch (e79615){var e = e79615;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception!\"], null);\n});})(e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,257868482);\n\ntry{if(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node__$1),\"Transmit Exception\");\n}catch (e79621){var e_80103__$1 = e79621;\n}} else {\n}\n\nvar G__79623 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__79622 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node__$1);\nreturn (fexpr__79622.cljs$core$IFn$_invoke$arity$1 ? fexpr__79622.cljs$core$IFn$_invoke$arity$1(G__79623) : fexpr__79622.call(null,G__79623));\n}catch (e79618){var e__$1 = e79618;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e__$1,e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n});})(e__$1,e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-1815300803);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-2038152829);\n\nvar G__79628 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__79627 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__79627.cljs$core$IFn$_invoke$arity$1 ? fexpr__79627.cljs$core$IFn$_invoke$arity$1(G__79628) : fexpr__79627.call(null,G__79628));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-1248489622);\n\nvar G__79630 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__79629 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__79629.cljs$core$IFn$_invoke$arity$1 ? fexpr__79629.cljs$core$IFn$_invoke$arity$1(G__79630) : fexpr__79629.call(null,G__79630));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,1548568217);\n\nvar G__79634 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__79633 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__79633.cljs$core$IFn$_invoke$arity$1 ? fexpr__79633.cljs$core$IFn$_invoke$arity$1(G__79634) : fexpr__79633.call(null,G__79634));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto__))\n,null)),null,1921830287);\n\nvar G__79636 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__79635 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__79635.cljs$core$IFn$_invoke$arity$1 ? fexpr__79635.cljs$core$IFn$_invoke$arity$1(G__79636) : fexpr__79635.call(null,G__79636));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__79640){\nvar map__79641 = p__79640;\nvar map__79641__$1 = (((((!((map__79641 == null))))?(((((map__79641.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79641.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79641):map__79641);\nvar app__$1 = map__79641__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79641__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (send_queues,remote_names,map__79641,map__79641__$1,app__$1,runtime_atom){\nreturn (function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__79652 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79652,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79652,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__79655_80125 = cljs.core.seq(p);\nvar chunk__79656_80126 = null;\nvar count__79657_80127 = (0);\nvar i__79658_80128 = (0);\nwhile(true){\nif((i__79658_80128 < count__79657_80127)){\nvar item_80129 = chunk__79656_80126.cljs$core$IIndexed$_nth$arity$2(null,i__79658_80128);\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_80129,remote);\n\n\nvar G__80130 = seq__79655_80125;\nvar G__80131 = chunk__79656_80126;\nvar G__80132 = count__79657_80127;\nvar G__80133 = (i__79658_80128 + (1));\nseq__79655_80125 = G__80130;\nchunk__79656_80126 = G__80131;\ncount__79657_80127 = G__80132;\ni__79658_80128 = G__80133;\ncontinue;\n} else {\nvar temp__5753__auto___80134 = cljs.core.seq(seq__79655_80125);\nif(temp__5753__auto___80134){\nvar seq__79655_80135__$1 = temp__5753__auto___80134;\nif(cljs.core.chunked_seq_QMARK_(seq__79655_80135__$1)){\nvar c__4550__auto___80138 = cljs.core.chunk_first(seq__79655_80135__$1);\nvar G__80139 = cljs.core.chunk_rest(seq__79655_80135__$1);\nvar G__80140 = c__4550__auto___80138;\nvar G__80141 = cljs.core.count(c__4550__auto___80138);\nvar G__80142 = (0);\nseq__79655_80125 = G__80139;\nchunk__79656_80126 = G__80140;\ncount__79657_80127 = G__80141;\ni__79658_80128 = G__80142;\ncontinue;\n} else {\nvar item_80144 = cljs.core.first(seq__79655_80135__$1);\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_80144,remote);\n\n\nvar G__80146 = cljs.core.next(seq__79655_80135__$1);\nvar G__80147 = null;\nvar G__80148 = (0);\nvar G__80149 = (0);\nseq__79655_80125 = G__80146;\nchunk__79656_80126 = G__80147;\ncount__79657_80127 = G__80148;\ni__79658_80128 = G__80149;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__79665 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__79665__$1 = (((((!((map__79665 == null))))?(((((map__79665.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79665.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79665):map__79665);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79665__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79665__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n});})(send_queues,remote_names,map__79641,map__79641__$1,app__$1,runtime_atom))\n,cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nreturn new_send_queues;\n});\n/**\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__79669 = arguments.length;\nswitch (G__79669) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n});})(ast,ast_nodes))\n),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n});})(ast,ast_nodes))\n)),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2;\n\n/**\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__79684 = arguments.length;\nswitch (G__79684) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__79687,addl){\nvar map__79688 = p__79687;\nvar map__79688__$1 = (((((!((map__79688 == null))))?(((((map__79688.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79688.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79688):map__79688);\nvar tx_node = map__79688__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79688__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar map__79690 = options;\nvar map__79690__$1 = (((((!((map__79690 == null))))?(((((map__79690.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79690.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79690):map__79690);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79690__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79690__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__79695 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__79695__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79695,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__79695);\nvar G__79695__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79695__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__79695__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79695__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__79695__$2;\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__79696){\nvar map__79697 = p__79696;\nvar map__79697__$1 = (((((!((map__79697 == null))))?(((((map__79697.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79697.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79697):map__79697);\nvar tx_node = map__79697__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79697__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3;\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e79706){var e = e79706;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,241,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch of mutation failed with an exception. No dispatch generated.\"], null);\n});})(e))\n,null)),null,1926772083);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = ((function (do_dispatch){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__79708){\nvar map__79709 = p__79708;\nvar map__79709__$1 = (((((!((map__79709 == null))))?(((((map__79709.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79709.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79709):map__79709);\nvar ele = map__79709__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79709__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__79713 = original_ast_node;\nvar map__79713__$1 = (((((!((map__79713 == null))))?(((((map__79713.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79713.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79713):map__79713);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79713__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__79716 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79716,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__79716;\n}\n});})(do_dispatch))\n;\nvar dispatch_all = ((function (do_dispatch,dispatch){\nreturn (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});})(do_dispatch,dispatch))\n;\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__79722){\nvar map__79723 = p__79722;\nvar map__79723__$1 = (((((!((map__79723 == null))))?(((((map__79723.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79723.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79723):map__79723);\nvar app__$1 = map__79723__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79723__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__79723,map__79723__$1,app__$1,runtime_atom){\nreturn (function (p1__79718_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__79718_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__79718_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n});})(map__79723,map__79723__$1,app__$1,runtime_atom))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,((function (dispatched_nodes,map__79723,map__79723__$1,app__$1,runtime_atom){\nreturn (function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),((function (dispatched_nodes,map__79723,map__79723__$1,app__$1,runtime_atom){\nreturn (function (p1__79719_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__79719_SHARP_,dispatched_nodes);\n});})(dispatched_nodes,map__79723,map__79723__$1,app__$1,runtime_atom))\n),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.PersistentVector.EMPTY);\n});})(dispatched_nodes,map__79723,map__79723__$1,app__$1,runtime_atom))\n);\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__79734 = arguments.length;\nswitch (G__79734) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(10));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__79743 = arguments.length;\nswitch (G__79743) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(10));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__79751 = arguments.length;\nswitch (G__79751) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__79756){\nvar map__79757 = p__79756;\nvar map__79757__$1 = (((((!((map__79757 == null))))?(((((map__79757.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79757.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79757):map__79757);\nvar node = map__79757__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79757__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79757__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,map__79757,map__79757__$1,node,id,elements){\nreturn (function (p__79760,element){\nvar map__79761 = p__79760;\nvar map__79761__$1 = (((((!((map__79761 == null))))?(((((map__79761.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79761.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79761):map__79761);\nvar acc = map__79761__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79761__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79761__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__79763 = element;\nvar map__79763__$1 = (((((!((map__79763 == null))))?(((((map__79763.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79763.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79763):map__79763);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79763__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79763__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79763__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79763__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__79764 = dispatch;\nvar map__79764__$1 = (((((!((map__79764 == null))))?(((((map__79764.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79764.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79764):map__79764);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79764__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var or__4131__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar G__79771 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__79771) : complete_QMARK_.call(null,G__79771));\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4120__auto__ = (function (){var or__4131__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar G__79774 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__79774) : complete_QMARK_.call(null,G__79774));\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e79775){var e_80201 = e79775;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,319,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_80201,map__79763,map__79763__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__79764,map__79764__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_before,updated_element,done_QMARK___$1,new_acc,env,map__79761,map__79761__$1,acc,done_QMARK_,new_elements,remotes,map__79757,map__79757__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_80201,\"Failure dispatching optimistic action for AST node\",element,\"of transaction node\",node], null);\n});})(e_80201,map__79763,map__79763__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__79764,map__79764__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_before,updated_element,done_QMARK___$1,new_acc,env,map__79761,map__79761__$1,acc,done_QMARK_,new_elements,remotes,map__79757,map__79757__$1,node,id,elements))\n,null)),null,-1717165625);\n}\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_80202 = edn_query_language.core.ast__GT_query(original_ast_node);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_80202], null));\n}catch (e79778){var e_80205 = e79778;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n});})(remotes,map__79757,map__79757__$1,node,id,elements))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__79782){\nvar map__79783 = p__79782;\nvar map__79783__$1 = (((((!((map__79783 == null))))?(((((map__79783.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79783.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79783):map__79783);\nvar node = map__79783__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79783__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79783__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__79783,map__79783__$1,node,id,elements){\nreturn (function (new_elements,element){\nvar map__79787 = element;\nvar map__79787__$1 = (((((!((map__79787 == null))))?(((((map__79787.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79787.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79787):map__79787);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79787__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79787__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79787__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79787__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__79788 = dispatch;\nvar map__79788__$1 = (((((!((map__79788 == null))))?(((((map__79788.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79788.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79788):map__79788);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79788__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var G__79796 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__79796) : complete_QMARK_.call(null,G__79796));\n})());\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e79797){var e_80215 = e79797;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,348,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_80215,map__79787,map__79787__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__79788,map__79788__$1,action,exec_QMARK_,state_before,updated_node,new_acc,env,map__79783,map__79783__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_80215,\"Failure dispatching optimistic action for AST node\",element,\"of transaction node\",node], null);\n});})(e_80215,map__79787,map__79787__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__79788,map__79788__$1,action,exec_QMARK_,state_before,updated_node,new_acc,env,map__79783,map__79783__$1,node,id,elements))\n,null)),null,-231167309);\n}\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_80218 = edn_query_language.core.ast__GT_query(original_ast_node);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_80218], null));\n}catch (e79800){var e_80222 = e79800;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n});})(map__79783,map__79783__$1,node,id,elements))\n,cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__79805){\nvar map__79806 = p__79805;\nvar map__79806__$1 = (((((!((map__79806 == null))))?(((((map__79806.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79806.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79806):map__79806);\nvar tx_node = map__79806__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79806__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar element_complete_QMARK_ = ((function (map__79806,map__79806__$1,tx_node,elements){\nreturn (function (p__79808){\nvar map__79809 = p__79808;\nvar map__79809__$1 = (((((!((map__79809 == null))))?(((((map__79809.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79809.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79809):map__79809);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79809__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79809__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});})(map__79806,map__79806__$1,tx_node,elements))\n;\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__79817,remote,txn_id,ele_idx){\nvar map__79819 = p__79817;\nvar map__79819__$1 = (((((!((map__79819 == null))))?(((((map__79819.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79819.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79819):map__79819);\nvar app__$1 = map__79819__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79819__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__79822 = cljs.core.deref(runtime_atom);\nvar map__79822__$1 = (((((!((map__79822 == null))))?(((((map__79822.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79822.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79822):map__79822);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79822__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue__$1 = cljs.core.filterv(((function (map__79822,map__79822__$1,send_queues,queue,map__79819,map__79819__$1,app__$1,runtime_atom){\nreturn (function (p__79829){\nvar map__79830 = p__79829;\nvar map__79830__$1 = (((((!((map__79830 == null))))?(((((map__79830.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79830.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79830):map__79830);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79830__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79830__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n});})(map__79822,map__79822__$1,send_queues,queue,map__79819,map__79819__$1,app__$1,runtime_atom))\n,queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue__$1);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__79841 = arguments.length;\nswitch (G__79841) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__79843,txn_id,ele_idx,remote,result,result_key){\nvar map__79844 = p__79843;\nvar map__79844__$1 = (((((!((map__79844 == null))))?(((((map__79844.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79844.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79844):map__79844);\nvar app__$1 = map__79844__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79844__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_queue,map__79844,map__79844__$1,app__$1,runtime_atom){\nreturn (function (idx,p__79846){\nvar map__79849 = p__79846;\nvar map__79849__$1 = (((((!((map__79849 == null))))?(((((map__79849.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79849.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79849):map__79849);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79849__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n});})(active_queue,map__79844,map__79844__$1,app__$1,runtime_atom))\n,(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,394,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (active_queue,txn_idx,not_found_QMARK_,map__79844,map__79844__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n});})(active_queue,txn_idx,not_found_QMARK_,map__79844,map__79844__$1,app__$1,runtime_atom))\n,null)),null,-182374212);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6;\n\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__79859,p__79860,ele_idx,remote){\nvar map__79861 = p__79859;\nvar map__79861__$1 = (((((!((map__79861 == null))))?(((((map__79861.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79861.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79861):map__79861);\nvar app__$1 = map__79861__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79861__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__79862 = p__79860;\nvar map__79862__$1 = (((((!((map__79862 == null))))?(((((map__79862.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79862.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79862):map__79862);\nvar tx_node = map__79862__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79862__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79862__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar handler = ((function (map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options))\n;\nvar update_handler = ((function (handler,map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(handler,map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options))\n;\nvar map__79866 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null));\nvar map__79866__$1 = (((((!((map__79866 == null))))?(((((map__79866.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79866.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79866):map__79866);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79866__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79866__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79866__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,423,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (handler,update_handler,map__79866,map__79866__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire,map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire], null);\n});})(handler,update_handler,map__79866,map__79866__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire,map__79861,map__79861__$1,app__$1,runtime_atom,map__79862,map__79862__$1,tx_node,id,options))\n,null)),null,-310413918);\n\nreturn remote_desire;\n})()\n\n))));\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),\"The remote AST was empty!\"], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__79873){\nvar map__79874 = p__79873;\nvar map__79874__$1 = (((((!((map__79874 == null))))?(((((map__79874.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79874.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79874):map__79874);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79874__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79874__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79874__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,to_dispatch,map__79874,map__79874__$1,idx,dispatch,started_QMARK_){\nreturn (function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,node,idx,remote);\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\n}\n});})(remotes,to_dispatch,map__79874,map__79874__$1,idx,dispatch,started_QMARK_))\n,tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__79877){\nvar map__79878 = p__79877;\nvar map__79878__$1 = (((((!((map__79878 == null))))?(((((map__79878.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79878.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79878):map__79878);\nvar tx_node = map__79878__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79878__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.every_QMARK_(((function (map__79878,map__79878__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__79882){\nvar map__79883 = p__79882;\nvar map__79883__$1 = (((((!((map__79883 == null))))?(((((map__79883.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79883.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79883):map__79883);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79883__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79883__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n});})(map__79878,map__79878__$1,tx_node,elements))\n,elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__79887){\nvar map__79888 = p__79887;\nvar map__79888__$1 = (((((!((map__79888 == null))))?(((((map__79888.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79888.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79888):map__79888);\nvar element = map__79888__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79888__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79888__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__79893){\nvar map__79894 = p__79893;\nvar map__79894__$1 = (((((!((map__79894 == null))))?(((((map__79894.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79894.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79894):map__79894);\nvar tx_node = map__79894__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79894__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__79901){\nvar map__79902 = p__79901;\nvar map__79902__$1 = (((((!((map__79902 == null))))?(((((map__79902.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79902.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79902):map__79902);\nvar tx_node = map__79902__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79902__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79902__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (optimistic_QMARK_,map__79902,map__79902__$1,tx_node,options,elements){\nreturn (function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n});})(optimistic_QMARK_,map__79902,map__79902__$1,tx_node,options,elements))\n,tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__79907,remote){\nvar map__79908 = p__79907;\nvar map__79908__$1 = (((((!((map__79908 == null))))?(((((map__79908.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79908.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79908):map__79908);\nvar tx_element = map__79908__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79908__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79908__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79908__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_80299 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_80300 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_80300)){\nvar env_80301 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_80299], null));\ntry{(handler_80300.cljs$core$IFn$_invoke$arity$1 ? handler_80300.cljs$core$IFn$_invoke$arity$1(env_80301) : handler_80300.call(null,env_80301));\n}catch (e79911){var e_80303 = e79911;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,523,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_80303,env_80301,result_80299,handler_80300,map__79908,map__79908__$1,tx_element,results,dispatch,original_ast_node){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_80303,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n});})(e_80303,env_80301,result_80299,handler_80300,map__79908,map__79908__$1,tx_element,results,dispatch,original_ast_node))\n,null)),null,1802906327);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__79914){\nvar map__79915 = p__79914;\nvar map__79915__$1 = (((((!((map__79915 == null))))?(((((map__79915.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79915.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79915):map__79915);\nvar tx_element = map__79915__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79915__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79915__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__79915,map__79915__$1,tx_element,results,complete_QMARK_){\nreturn (function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n});})(map__79915,map__79915__$1,tx_element,results,complete_QMARK_))\n,tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__79918){\nvar map__79920 = p__79918;\nvar map__79920__$1 = (((((!((map__79920 == null))))?(((((map__79920.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79920.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79920):map__79920);\nvar tx_node = map__79920__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79920__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__79920,map__79920__$1,tx_node,elements){\nreturn (function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n});})(map__79920,map__79920__$1,tx_node,elements))\n,elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__79923){\nvar map__79924 = p__79923;\nvar map__79924__$1 = (((((!((map__79924 == null))))?(((((map__79924.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79924.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79924):map__79924);\nvar tx_node = map__79924__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79924__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar get_env = ((function (map__79924,map__79924__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});})(map__79924,map__79924__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (get_env,map__79924,map__79924__$1,tx_node,elements){\nreturn (function (node,p__79927){\nvar map__79928 = p__79927;\nvar map__79928__$1 = (((((!((map__79928 == null))))?(((((map__79928.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79928.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79928):map__79928);\nvar element = map__79928__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79928__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79928__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79928__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar seq__79932_80317 = cljs.core.seq(progress);\nvar chunk__79933_80318 = null;\nvar count__79934_80319 = (0);\nvar i__79935_80320 = (0);\nwhile(true){\nif((i__79935_80320 < count__79934_80319)){\nvar vec__79946_80321 = chunk__79933_80318.cljs$core$IIndexed$_nth$arity$2(null,i__79935_80320);\nvar remote_80322 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79946_80321,(0),null);\nvar value_80323 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79946_80321,(1),null);\nvar env_80325 = get_env(remote_80322,value_80323);\nvar action_80326 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_80326)){\ntry{(action_80326.cljs$core$IFn$_invoke$arity$1 ? action_80326.cljs$core$IFn$_invoke$arity$1(env_80325) : action_80326.call(null,env_80325));\n}catch (e79950){var e_80329 = e79950;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,563,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__79932_80317,chunk__79933_80318,count__79934_80319,i__79935_80320,e_80329,env_80325,action_80326,vec__79946_80321,remote_80322,value_80323,map__79928,map__79928__$1,element,idx,progress,dispatch,get_env,map__79924,map__79924__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_80329,\"Progress action threw an exception for txn element\",element], null);\n});})(seq__79932_80317,chunk__79933_80318,count__79934_80319,i__79935_80320,e_80329,env_80325,action_80326,vec__79946_80321,remote_80322,value_80323,map__79928,map__79928__$1,element,idx,progress,dispatch,get_env,map__79924,map__79924__$1,tx_node,elements))\n,null)),null,1066383798);\n}} else {\n}\n\n\nvar G__80331 = seq__79932_80317;\nvar G__80332 = chunk__79933_80318;\nvar G__80333 = count__79934_80319;\nvar G__80334 = (i__79935_80320 + (1));\nseq__79932_80317 = G__80331;\nchunk__79933_80318 = G__80332;\ncount__79934_80319 = G__80333;\ni__79935_80320 = G__80334;\ncontinue;\n} else {\nvar temp__5753__auto___80336 = cljs.core.seq(seq__79932_80317);\nif(temp__5753__auto___80336){\nvar seq__79932_80338__$1 = temp__5753__auto___80336;\nif(cljs.core.chunked_seq_QMARK_(seq__79932_80338__$1)){\nvar c__4550__auto___80339 = cljs.core.chunk_first(seq__79932_80338__$1);\nvar G__80341 = cljs.core.chunk_rest(seq__79932_80338__$1);\nvar G__80342 = c__4550__auto___80339;\nvar G__80343 = cljs.core.count(c__4550__auto___80339);\nvar G__80344 = (0);\nseq__79932_80317 = G__80341;\nchunk__79933_80318 = G__80342;\ncount__79934_80319 = G__80343;\ni__79935_80320 = G__80344;\ncontinue;\n} else {\nvar vec__79951_80346 = cljs.core.first(seq__79932_80338__$1);\nvar remote_80347 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79951_80346,(0),null);\nvar value_80348 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79951_80346,(1),null);\nvar env_80349 = get_env(remote_80347,value_80348);\nvar action_80350 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_80350)){\ntry{(action_80350.cljs$core$IFn$_invoke$arity$1 ? action_80350.cljs$core$IFn$_invoke$arity$1(env_80349) : action_80350.call(null,env_80349));\n}catch (e79955){var e_80352 = e79955;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,563,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__79932_80317,chunk__79933_80318,count__79934_80319,i__79935_80320,e_80352,env_80349,action_80350,vec__79951_80346,remote_80347,value_80348,seq__79932_80338__$1,temp__5753__auto___80336,map__79928,map__79928__$1,element,idx,progress,dispatch,get_env,map__79924,map__79924__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_80352,\"Progress action threw an exception for txn element\",element], null);\n});})(seq__79932_80317,chunk__79933_80318,count__79934_80319,i__79935_80320,e_80352,env_80349,action_80350,vec__79951_80346,remote_80347,value_80348,seq__79932_80338__$1,temp__5753__auto___80336,map__79928,map__79928__$1,element,idx,progress,dispatch,get_env,map__79924,map__79924__$1,tx_node,elements))\n,null)),null,-887477396);\n}} else {\n}\n\n\nvar G__80356 = cljs.core.next(seq__79932_80338__$1);\nvar G__80357 = null;\nvar G__80358 = (0);\nvar G__80359 = (0);\nseq__79932_80317 = G__80356;\nchunk__79933_80318 = G__80357;\ncount__79934_80319 = G__80358;\ni__79935_80320 = G__80359;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n});})(get_env,map__79924,map__79924__$1,tx_node,elements))\n,tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__79958){\nvar map__79959 = p__79958;\nvar map__79959__$1 = (((((!((map__79959 == null))))?(((((map__79959.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79959.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79959):map__79959);\nvar tx_node = map__79959__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79959__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__79962 = tx_node;\nvar G__79962__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__79962):G__79962);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__79962__$1);\n} else {\nreturn G__79962__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (env){\nreturn (function (acc,element){\nvar map__79966 = element;\nvar map__79966__$1 = (((((!((map__79966 == null))))?(((((map__79966.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79966.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79966):map__79966);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79966__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n});})(env))\n,outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__79969,remotes){\nvar map__79970 = p__79969;\nvar map__79970__$1 = (((((!((map__79970 == null))))?(((((map__79970.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79970.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79970):map__79970);\nvar tx_node = map__79970__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79970__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar active_on_element = ((function (map__79970,map__79970__$1,tx_node,elements){\nreturn (function (p__79973){\nvar map__79975 = p__79973;\nvar map__79975__$1 = (((((!((map__79975 == null))))?(((((map__79975.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79975.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79975):map__79975);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79975__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79975__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});})(map__79970,map__79970__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_on_element,map__79970,map__79970__$1,tx_node,elements){\nreturn (function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n});})(active_on_element,map__79970,map__79970__$1,tx_node,elements))\n,cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__79980){\nvar map__79981 = p__79980;\nvar map__79981__$1 = (((((!((map__79981 == null))))?(((((map__79981.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79981.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79981):map__79981);\nvar app__$1 = map__79981__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__79981,map__79981__$1,app__$1,state_atom,runtime_atom){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n});})(map__79981,map__79981__$1,app__$1,state_atom,runtime_atom))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = ((function (new_queue,map__79981,map__79981__$1,app__$1,state_atom,runtime_atom){\nreturn (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});})(new_queue,map__79981,map__79981__$1,app__$1,state_atom,runtime_atom))\n;\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.test","~$cljs.test","~$clojure.core","~$cljs.core","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^O","~$>defn","~$ghostwheel.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^13","^?","^@","~$log","~$taoensso.timbre","~$eql","^13","^D","^D","^O","^O","~$goog","^17","~$com.fulcrologic.fulcro.specs","^18","~$inspect","^O","^12","^12","~$com.fulcrologic.fulcro.algorithms.tempid","^1:","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1<","~$sched","^1<","~$enc","~$taoensso.encore","^1;","^1;","~$s","^@","^R","^R","^10","^10","^15","^15","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1?","^1?","^@","^@","~$tempid","^1:","^1A","^1A"],"~:seen",["^T",["~:require"]],"~:uses",["^ ","~$schedule!","^1<","^N","^O","^P","^O","^Q","^R","~$=>","^R","~$|","^R"],"~:require-macros",["^ ","^?","^@","^14","^15","^D","^D","^O","^O","^19","^O","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^15","^15","^1?","^1?","^@","^@"],"~:form",["~#list",["~$ns","^V","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .",["^1J",["^1D",["^12","~:as","^11"],["^?","^1L","~$s"],["^10","^1L","^["],["^1:","^1L","^1B"],["^1A","^1L","^1@"],["^1<","^1L","^1=","~:refer",["^1F"]],["^1;","^1L","~$m"],["^18"],["^O","^1L","^19","^1M",["^N","^P"]],"^18",["^R","^1M",["^Q","^1G","~$|"]],["^13","^1L","^16"],["^1?","^1L","^1>"],["^15","^1L","^14"]]]]],"~:flags",["^ ","^1D",["^T",[]]],"~:js-deps",["^ "],"~:deps",["^17","^D","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]],"^X","^V","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1630228762509,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .\"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [ghostwheel.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(>defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(>defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(>defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(>defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(>defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(>defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(>defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(>defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(>defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (if (= :root (:type ast))\n                                         (eql/ast->query ast)\n                                         [(eql/ast->query ast)])]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (select-keys body (top-keys ast))\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app remote-name (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(>defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote          (get (app->remotes app) remote-name)\n               transmit!       (get remote :transmit!)\n               query-transform (ah/app-algorithm app :global-eql-transform)\n               send-node       (if query-transform\n                                 (update send-node ::ast query-transform)\n                                 send-node)]\n    (try\n      (inspect/ilet [tx (eql/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception!\")\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name)\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(>defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (net-send! app item remote))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (net-send! app send-node remote))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    new-send-queues))\n\n(>defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(>defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(>defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch of mutation failed with an exception. No dispatch generated.\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(>defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) (::submission-queue @runtime-atom))]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue []))))\n    (process-queue! app)))\n\n(>defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 10)))\n\n(>defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 10)))\n\n(>defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(>defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-before    (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (log/error e \"Failure dispatching optimistic action for AST node\" element \"of transaction node\" node)))\n                               (ilet [tx (eql/ast->query original-ast-node)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                               :state-before state-before\n                                                                               :tx           tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(>defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?        (and action (not (complete? :action)))\n                               state-before (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                               updated-node (if exec? (-> element\n                                                        (assoc ::state-before-action state-before)\n                                                        (update ::complete? conj :action)) element)\n                               new-acc      (conj new-elements updated-node)\n                               env          (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"Failure dispatching optimistic action for AST node\" element \"of transaction node\" node)))\n                             (ilet [tx (eql/ast->query original-ast-node)]\n                               (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                             :state-before state-before\n                                                                             :tx           tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(>defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(>defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        queue (get send-queues remote)\n        queue (filterv (fn [{:keys [::id ::idx]}]\n                         (not (and (= txn-id id) (= ele-idx idx)))) queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(>defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(>defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name => ::send-node]\n  (let [handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        {:keys [::dispatch ::original-ast-node ::state-before-action]} (get-in tx-node [::elements ele-idx])\n        env            (build-env app tx-node {:ast                 original-ast-node\n                                               :state-before-action state-before-action})\n        remote-fn      (get dispatch remote)\n        remote-desire  (when remote-fn (remote-fn env))\n        ast            (cond\n                         (or (false? remote-desire) (nil? remote-desire)) nil\n                         (true? remote-desire) original-ast-node\n                         (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                         (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                         :else (do\n                                 (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire)\n                                 remote-desire))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 500 :body \"The remote AST was empty!\"})\n        nil))))\n\n(>defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (do\n            (add-send! app node idx remote)\n            (update-in node [::elements idx ::started?] conj remote))))\n      tx-node\n      to-dispatch)))\n\n(>defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(>defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(>defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(>defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(>defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {:keys [::results ::dispatch ::original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch dispatch :result result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::complete? conj remote))\n\n(>defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(>defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(>defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {:keys [::idx ::progress ::dispatch] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception for txn element\" element))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(>defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(>defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(>defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(>defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(>defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n","~:reader-features",["^T",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","map__79441","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","parallel?","p__79442","map__79443","options","cljs.core/boolean","or__4131__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__79452#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__79453#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__79457","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__79460","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","n","cljs.core/first","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","clusters","reads","writes","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","result","id","vec__79462","seq__79463","cljs.core/seq","first__79464","cljs.core/next","map__79465","ast","_","cluster","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p__79473","map__79474","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","vec__79480","vec__79483","active-nodes","id-to-send","to-send","to-defer","p1__79477#","tx","p__79486","map__79487","acc","edn-query-language.core/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0","combined-node-idx","combined-node","p__79494","map__79495","body","combined-result","seq__79499","chunk__79501","count__79502","i__79503","map__79521","temp__5753__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__79528","update-handler","p__79533","map__79534","seq__79541","chunk__79542","count__79543","i__79544","map__79589","map__79601","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__79597","e","e79596","map__79606","e79605","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","b2__45871__auto__","remote","transmit!","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","cljs.core.update.cljs$core$IFn$_invoke$arity$3","e79615","e79624","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","e79618","e79621","G__79623","fexpr__79622","G__79628","fexpr__79627","G__79630","fexpr__79629","G__79634","fexpr__79633","G__79636","fexpr__79635","p__79640","map__79641","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","new-send-queues","vec__79652","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p","serial","front","seq__79655","chunk__79656","count__79657","i__79658","item","map__79665","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","var_args","G__79669","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2","ast-nodes","elements","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__79684","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__79687","map__79688","p__79696","map__79697","tx-node","addl","map__79690","ref","component","G__79695","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e79706","dispatch","p__79708","map__79709","original-ast-node","ele","map__79713","G__79716","dispatch-all","eles","p__79722","map__79723","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","dispatched-nodes","p1__79718#","com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.mutations/mutate","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","a","p1__79719#","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__79734","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","tm","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2","G__79743","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2","G__79751","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2","p__79756","map__79757","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","node","remotes","reduction","p__79760","map__79761","done?","new-elements","element","map__79763","map__79764","complete?","action","remote-set","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","exec?","and__4120__auto__","cljs.core/not","G__79771","fully-complete?","G__79774","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","state-before","updated-element","new-acc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","e79775","e79778","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__79782","map__79783","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__79787","map__79788","G__79796","updated-node","e79797","e79800","p__79805","map__79806","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__79808","map__79809","active-keys","clojure.set.union.cljs$core$IFn$_invoke$arity$2","desired-set","p__79817","map__79819","txn-id","ele-idx","map__79822","queue","cljs.core/filterv","p__79829","map__79830","cljs.core/assoc-in","G__79841","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__79843","map__79844","result-key","txn-idx","p__79846","map__79849","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6","p__79859","p__79860","map__79861","map__79862","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","map__79866","state-before-action","handler","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","remote-fn","remote-desire","cljs.core/map?","cljs.core/contains?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","p__79873","map__79874","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","p__79877","map__79878","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__79882","map__79883","in-progress","p__79887","map__79888","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__79893","map__79894","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/some","p__79901","map__79902","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__79907","map__79908","results","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","tx-element","e79911","p__79914","map__79915","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__79918","map__79920","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__79923","map__79924","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__79927","map__79928","seq__79932","chunk__79933","count__79934","i__79935","vec__79946","vec__79951","value","e79950","e79955","cljs.core/dissoc","p__79958","map__79959","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__79962","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","outer-acc","map__79966","refresh","p__79969","map__79970","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__79973","map__79975","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__79980","map__79981","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","cljs.core/update"]]],"~:cache-keys",["~#cmap",[["^1R","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^T",[]],"~:deps-syms",["^17","^D","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^1R","com/fulcrologic/fulcro/algorithms/normalize.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^1A","^13","^15","~$com.fulcrologic.fulcro.components"]]],["^1R","goog/dom/tagname.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.dom.HtmlElement"]]],["^1R","goog/async/freelist.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core/async/impl/ioc_helpers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$cljs.core.async.impl.protocols"]]],["^1R","goog/labs/useragent/platform.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.labs.userAgent.util","~$goog.string"]]],["^1R","expound/util.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","ghostwheel/reporting.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@","^F","^B","~$expound.alpha","~$clojure.string","~$ghostwheel.logging"]]],["^1R","cljs/core/async.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2<","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1R","goog/timer/timer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Promise","~$goog.events.EventTarget"]]],["^1R","orchestra_cljs/spec/test.cljs"],[1630228119080,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$goog.object","~$goog.userAgent.product","^2@","~$cljs.stacktrace","^J","^@","^H"]]],["^1R","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^15"]]],["^1R","cljs/spec/gen/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$goog.Uri"]]],["^1R","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^2>"]]],["^1R","goog/math/math.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.asserts"]]],["^1R","goog/string/stringformat.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2>"]]],["^1R","cljs/env.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/events/eventtype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1R","goog/labs/useragent/browser.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2=","^2J","~$goog.string.internal"]]],["^1R","goog/array/array.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^23",["^ ","^24",3,"^25",["^T",[2]],"^26",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1R","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^15","^13","^2J","^@"]]],["^1R","expound/problems.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$expound.paths","^@","^27","^2@","~$expound.printer","~$expound.ansi"]]],["^1R","goog/useragent/useragent.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2=","~$goog.reflect","^2>"]]],["^1R","goog/structs/prioritypool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1R","clojure/test/check/properties.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^1R","goog/async/run.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1R","com/cognitect/transit/impl/reader.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1R","clojure/test/check/generators.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^2>"]]],["^1R","taoensso/encore.cljs"],[1630228119299,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^12","~$cljs.reader","~$cljs.tools.reader.edn","^2J","^2>","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1R","goog/debug/error.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/async/workqueue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.async.FreeList"]]],["^1R","com/fulcrologic/fulcro/dom/events.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/events/events.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2O","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1R","goog/promise/resolver.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/browserfeature.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2P"]]],["^1R","cljs/tools/reader/edn.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2>","^3>"]]],["^1R","clojure/test/check/random/doubles.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$clojure.test.check.random.longs"]]],["^1R","goog/structs/priorityqueue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.structs.Heap"]]],["^1R","goog/net/xhrio.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Timer","^2G","^2N","^3H","^2I","~$goog.json.hybrid","~$goog.log","^3E","^3D","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2J","^2>","^3C","~$goog.structs.Map","~$goog.uri.utils","^2P"]]],["^1R","goog/promise/thenable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/fulcrologic/fulcro/algorithms/transit.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$cognitect.transit","~$com.cognitect.transit","^1:"]]],["^1R","goog/dom/nodetype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","com/cognitect/transit/util.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2J"]]],["^1R","cljs/pprint.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^2>","^3>"]]],["^1R","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@","^12","^R","^15","^13"]]],["^1R","cljs/tools/reader.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3M","^3N","^3O","^3L","^2G","^2>","^3>"]]],["^1R","expound/alpha.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$expound.problems","^@","^2@","^12","^27","^3=","^2>","^2V","~$expound.util","^2W","^H"]]],["^1R","clojure/test/check/rose_tree.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","clojure/test/check/impl.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1R","goog/events/eventtarget.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Disposable","^2N","^3?","~$goog.events.Event","^3J","^3K","^2J"]]],["^1R","clojure/test/check/random.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$clojure.test.check.random.doubles","^3Q"]]],["^1R","goog/disposable/disposable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.disposable.IDisposable"]]],["^1R","expound/ansi.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@"]]],["^2R","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",5,"^25",["^T",[1,4]],"^26",["^2S","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1R","cljs/spec/test/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2J","^2K","^2@","^2L","^J","^@","^H"]]],["^1R","shadow/js.js"],[1630228360071,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/object/object.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/set.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3C","~$goog.structs.Collection","^3X"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^2R","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",4,"^25",["^T",[0,3]],"^26",["^2S","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1R","cljs/stacktrace.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2>","^2@"]]],["^1R","goog/math/long.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","^2["]]],["^1R","goog/events/listener.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.events.ListenableKey"]]],["^1R","cljs/core/async/impl/channels.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2<","^2E","^2C"]]],["^1R","goog/events/listenermap.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.events.Listener","^2J"]]],["^1R","goog/events/eventid.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","taoensso/truss.cljs"],[1630228118689,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$taoensso.truss.impl"]]],["^1R","goog/string/internal.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/fulcrologic/fulcro/algorithms/merge.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$com.fulcrologic.fulcro.algorithms.data-targeting","^2:","^10","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^1A","^13","^15"]]],["^1R","clojure/test/check.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^32","^39","^33","^3:","~$clojure.test.check.impl"]]],["^1R","edn_query_language/core.cljc"],[1630228119293,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@","~$clojure.test.check","^32","~$clojure.test.check.properties"]]],["^1R","goog/functions/functions.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core/async/impl/dispatch.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2C","^35"]]],["^1R","expound/paths.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@","^41"]]],["^1R","taoensso/truss/impl.cljs"],[1630228118689,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^12"]]],["^1R","clojure/walk.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/useragent/product.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2X","^2Z","^2P"]]],["^1R","cljs/core/async/impl/protocols.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/net/eventtype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/map.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1R","goog/net/xhriopool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3@","~$goog.structs.PriorityPool"]]],["^1R","com/cognitect/transit/delimiters.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/queue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G"]]],["^1R","goog/labs/useragent/engine.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2=","^2>"]]],["^1R","com/fulcrologic/fulcro/inspect/transit.cljs"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3Z","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit"]]],["^1R","com/cognitect/transit/impl/decoder.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^38","^4J"]]],["^1R","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^1?"]]],["^1R","cljs/reader.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2J","^3P","^3<","^3>"]]],["^1R","com/fulcrologic/fulcro/mutations.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2:","~$com.fulcrologic.fulcro.dom.events","^R","^13","^15","^1?","^@","^4A","~$com.fulcrologic.fulcro.algorithms.merge","^10","^1:","^2@"]]],["^1R","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2J","~$cljsjs.react","^13","^@","^15","^27","^2@","^1A","^4C","^10","^12"]]],["^1R","com/fulcrologic/fulcro/specs.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@","^1A","^13"]]],["^1R","goog/asserts/asserts.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1R","cljs/core/async/impl/buffers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2<"]]],["^1R","goog/debug/logbuffer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.debug.LogRecord"]]],["^1R","cljs/tagged_literals.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3;"]]],["^1R","goog/uri/uri.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","^2>","^3C","^3X","^3Y","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1R","ghostwheel/threading_macros.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2A","~$ghostwheel.utils"]]],["^1R","goog/net/errorcode.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^2R","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^23",["^ ","^24",0,"^25",["^T",[]],"^26",["^2S"]]],["^1R","ghostwheel/logging.cljc"],[1630228119285,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^J"]]],["^1R","goog/disposable/idisposable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/promise/promise.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Thenable","^2N","^3G","~$goog.async.run","^36","^4Q","~$goog.promise.Resolver"]]],["^1R","cljs/core/async/impl/timers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2<","^2B","^2E"]]],["^1R","cljs/spec/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2J","^27","^H","^2@"]]],["^1R","goog/debug/logrecord.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/base.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",[]]],["^1R","goog/json/hybrid.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.json"]]],["^1R","goog/structs/structs.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2J"]]],["^1R","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3M","^2@","~$cljs.tools.reader.impl.inspect"]]],["^1R","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^R","^L"]]],["^1R","cljsjs/react.cljs"],[1630228358937,"^23",["^ ","^24",null,"^25",["^T",[5]],"^26",["^17","^D","~$module$node_modules$react$index"]]],["^1R","clojure/string.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2>","^3>"]]],["^1R","com/fulcrologic/fulcro/algorithms/tempid.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^15","^27"]]],["^1R","goog/structs/pool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^44","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1R","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","com/fulcrologic/fulcro/inspect/diff.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^@"]]],["^2R","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",1,"^25",["^T",[0]],"^26",["^2S","^4<"]]],["^1R","goog/net/httpstatus.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/cognitect/transit/handlers.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","^4J","~$goog.math.Long"]]],["^1R","goog/structs/heap.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2J","~$goog.structs.Node"]]],["^1R","goog/debug/entrypointregistry.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N"]]],["^1R","goog/string/string.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2Q"]]],["^1R","com/cognitect/transit/types.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","~$com.cognitect.transit.eq","^53"]]],["^1R","goog/reflect/reflect.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/labs/useragent/util.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2Q"]]],["^1R","expound/printer.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^@","^J","^27","^12","^41","^2W"]]],["^1R","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]]],["^1R","com/cognitect/transit/eq.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L"]]],["^1R","goog/debug/debug.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.debug.errorcontext","^2P"]]],["^1R","goog/string/stringbuffer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/debug/errorcontext.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3N","^2>","^3>"]]],["^1R","goog/iter/iter.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","~$goog.functions","~$goog.math"]]],["^1R","goog/async/nexttick.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3H","~$goog.dom.TagName","^57","^2X","^2Y"]]],["^1R","goog/debug/logger.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","~$goog.debug","~$goog.debug.LogBuffer","^4S"]]],["^1R","ghostwheel/core.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^12","^27","^B","^4E","^32","^4F","^@","^F","^H","~$ghostwheel.reporting","~$ghostwheel.unghost","^4V","^2A","~$ghostwheel.threading-macros","^2?","~$cljs.analyzer.api","^29"]]],["^1R","com/cognitect/transit/caching.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4M"]]],["^2R","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^23",["^ ","^24",2,"^25",["^T",[]],"^26",["^2S"]]],["^1R","goog/events/event.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^44","~$goog.events.EventId"]]],["^1R","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3L","^3M","^3N"]]],["^1R","goog/dom/htmlelement.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^53","~$goog.math.Integer","^2>","^2J","^2G","^2M","^3>"]]],["^1R","com/cognitect/transit.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^4J","^55","^37","^38"]]],["^1R","clojure/test/check/random/longs.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","~$clojure.test.check.random.longs.bit-count-impl","^53","^D"]]],["^1R","goog/log/log.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5:","~$goog.debug.LogManager","^4S","~$goog.debug.Logger"]]],["^1R","goog/structs/collection.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/browserevent.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5:","^2O","^45","~$goog.events.EventType","^2[","^2P"]]],["^1R","cljs/analyzer/api.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^28","~$cljs.analyzer"]]],["^1R","goog/math/integer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/node.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","clojure/set.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/uri/utils.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","^2>"]]],["^1R","taoensso/timbre.cljs"],[1630228119105,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^1?","~$taoensso.timbre.appenders.core"]]],["^1R","cljs/analyzer.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2>","^2@","^12","^28","~$cljs.tagged-literals","^3P","^3M","^3;"]]],["^1R","goog/json/json.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/listenable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5@"]]],["^1R","com/cognitect/transit/impl/writer.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","^38","~$com.cognitect.transit.handlers","^4J","^4M","^53"]]],["^1R","goog/net/xmlhttpfactory.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^42"]]],["^1R","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^13"]]],["^1R","ghostwheel/unghost.cljc"],[1630228119555,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","goog/net/xmlhttp.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.net.WrapperXmlHttpFactory","^43"]]],["^1R","cljs/test.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^2@","^J"]]],["^1R","clojure/test/check/results.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D"]]],["^1R","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^13","^10","^2J","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^L","^1?","^15"]]],["^1R","goog/net/xhrlike.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cognitect/transit.cljs"],[1630228118516,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^D","^3[","^4J","^55","^53"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/concurrent.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/protocols.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/test/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/reporting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/printer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/test.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/paths.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/ansi.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/exec/threadpool.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/problems.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/test.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/test/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/dispatch.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async/impl/ioc_macros.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/mutations.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",["^ ","^N","^O","^P","^O","^Q","^R"],"^S",["^T",[]],"^U","^V","^Y",null,"^Z",["^ ","^[","^10","^11","^12","^13","^13","^?","^@","^14","^15","^16","^13","^D","^D","^O","^O","^17","^17","^18","^18","^19","^O","^12","^12","^1:","^1:","~$m","^1;","^1<","^1<","^1=","^1<","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^10","^10","^15","^15","^1@","^1A","^1?","^1?","^@","^@","^1B","^1:","^1A","^1A"],"^1C",["^T",["^1D"]],"~:shadow/js-access-global",["^T",["Error"]],"^1E",["^ ","^1F","^1<","^N","^O","^P","^O","^Q","^R","^1G","^R","~$|","^R"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",138,"^9",8,"^:",138,"^;",17,"~:arglists",["^1J",["~$quote",["^1J",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"~:method-params",["^1J",[["^7X","^7Y","^7Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^1J",[null,null]],"^9",1,"~:variadic?",false,"^8",138,"~:ret-tag",["^T",[null,"~$any"]],"^:",138,"~:max-fixed-arity",3,"~:fn-var",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Y","^7Z"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",526,"^9",8,"^:",526,"^;",35,"^7V",["^1J",["^7W",["^1J",[["^7X","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1L","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",35,"^80",["^1J",[["^7X","^89","~$p__79914"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",526,"^84",["^T",[null,"^85"]],"^:",526,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^8<"],"^1L","^8="]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",548,"^9",8,"^:",548,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1L","^89"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__79923"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",548,"^84",["^T",[null,"^85"]],"^:",548,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",601,"^9",8,"^:",601,"^;",30,"^7V",["^1J",["^7W",["^1J",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1L","^89"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",30,"^80",["^1J",[["~$p__79969","^8G"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",601,"^84",["^T",[null,"^85"]],"^:",601,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8E",["^8F"],"^1L","^89"],"^8G"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",28,"^9",8,"^:",28,"^;",25,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^7X"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",28,"^84",["^T",["~$clj","^85","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",28,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",478,"^9",8,"^:",478,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__79893"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",478,"^84",["^T",[null,"^85"]],"^:",478,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$active-remotes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",617,"^9",8,"^:",617,"^;",22,"^7V",["^1J",["^7W",["^1J",[["~$queue","^8G"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^80",["^1J",[["^8T","^8G"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",617,"^84",["^T",[null,"^85"]],"^:",617,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^8T","^8G"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",493,"^9",8,"^:",493,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^8A"],"^1L","^89"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X","~$p__79901"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",493,"^84",["^T",[null,"^85"]],"^:",493,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W","^8A"],"^1L","^89"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",628,"^9",8,"^:",628,"^;",22,"^7V",["^1J",["^7W",["^1J",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1L","^7X"]]]]]],"^6","Run through the active queue and do a processing step."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^80",["^1J",[["~$p__79980"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",628,"^84","^8O","^:",628,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^90","^91"],"^1L","^7X"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",232,"^9",8,"^:",232,"^;",25,"^7V",["^1J",["^7W",["^1J",[["^89","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^89","^95","^96"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",232,"^84",["^T",["^8L","^85"]],"^:",232,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^89","^95","^96"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$remove-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",368,"^9",8,"^:",368,"^;",20,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"~$remote","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["~$p__79817","^99","^9:","^9;"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",368,"^84",["^T",[null,"^85"]],"^:",368,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^99","^9:","^9;"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",440,"^9",8,"^:",440,"^;",28,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^80",["^1J",[["^7X","^89","~$p__79873"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",440,"^84",["^T",[null,"^85"]],"^:",440,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^9?","^9@","^9A"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",86,"^9",8,"^:",86,"^;",16,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["~$type","~$key","~$children"],"^1L","~$ast"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^80",["^1J",[["~$p__79473"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",86,"^84",["^T",["^8L","^85","^8M"]],"^:",86,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^9E","^9F","^9G"],"^1L","^9H"]]]]]]],"~$schedule-activation!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"~:top-fn",["^ ","^83",false,"~:fixed-arity",2,"^86",2,"^80",["^1J",[["^7X","~$tm"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^9",8,"^8",263,"^:",263,"^7V",["^1J",["^7W",["^1J",[["^7X","^9N"],["^7X"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:jsdoc",["^1J",["@param {...*} var_args"]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^81",null,"^9M",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"~:methods",[["^ ","^9M",2,"^83",false,"~:tag",["^T",["~$js","^8O"]]],["^ ","^9M",1,"^83",false,"^9R",["^T",["^9S","^8O"]]]],"^8",263,"^:",263,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","^9O",["^1J",["@param {...*} var_args"]]],"~$record-result!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^9L",["^ ","^83",false,"^9M",6,"^86",6,"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","~$result","~$result-key"],["^7X","^9:","^9;","^99","^9U"]]],"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]],"^82",["^1J",[null,null]]],"^9",8,"^8",378,"^:",378,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^9O",["^1J",["@param {...*} var_args"]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^9L",["^ ","^83",false,"^9M",6,"^86",6,"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]],"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]],"^81",null,"^9M",6,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9Q",[["^ ","^9M",6,"^83",false,"^9R",["^T",[null,"^85","^8O"]]],["^ ","^9M",5,"^83",false,"^9R",["^T",[null,"^85","^8O"]]]],"^8",378,"^:",378,"^86",6,"^87",true,"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9U","^9V"],["^7X","^9:","^9;","^99","^9U"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^9O",["^1J",["@param {...*} var_args"]]],"~$process-tx-node!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",568,"^9",8,"^:",568,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__79958"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",568,"^84",["^T",["^8L","^85","^8O"]],"^:",568,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]]],"~$add-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",400,"^9",8,"^:",400,"^;",17,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],["^ ","^8E",["~$id","~$options"],"^1L","^89"],"^9;","^99"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^80",["^1J",[["~$p__79859","~$p__79860","^9;","^99"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",400,"^84",["^T",["~$cljs.core/IMap","^8O"]],"^:",400,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],["^ ","^8E",["^:0","^:1"],"^1L","^89"],"^9;","^99"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",45,"^9",8,"^:",45,"^;",18,"^7V",["^1J",["^7W",["^1J",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["^:7","^:8"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",45,"^84",["^T",["~$boolean","^85"]],"^:",45,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:7","^:8"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",59,"^9",8,"^:",59,"^;",18,"^7V",["^1J",["^7W",["^1J",[["^:7"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["^:7"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",59,"^84",["^T",["^::","^85"]],"^:",59,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:7"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",538,"^9",8,"^:",538,"^;",27,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^80",["^1J",[["^7X","~$p__79918"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",538,"^84",["^T",["^8L","^85"]],"^:",538,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",358,"^9",8,"^:",358,"^;",23,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^80",["^1J",[["^7X","~$p__79805"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",358,"^84","^::","^:",358,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]]],"~$schedule-queue-processing!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^9",8,"^8",273,"^:",273,"^7V",["^1J",["^7W",["^1J",[["^7X","^9N"],["^7X"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^9O",["^1J",["@param {...*} var_args"]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^81",null,"^9M",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9Q",[["^ ","^9M",2,"^83",false,"^9R",["^T",["^9S","^8O"]]],["^ ","^9M",1,"^83",false,"^9R",["^T",["^9S","^8O"]]]],"^8",273,"^:",273,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^9O",["^1J",["@param {...*} var_args"]]],"~$app->remotes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",22,"^9",8,"^:",22,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns the remotes map from an app"],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",22,"^84","^85","^:",22,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",330,"^9",8,"^:",330,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:0","^8F"],"^1L","~$node"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X","~$p__79782"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",330,"^84",["^T",["^8L","^85"]],"^:",330,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:0","^8F"],"^1L","^:H"]]]]]]],"~$process-send-queues!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",8,"^:",167,"^;",28,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^80",["^1J",[["~$p__79640"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",167,"^84",["^T",[null,"^85"]],"^:",167,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",466,"^9",8,"^:",466,"^;",25,"^7V",["^1J",["^7W",["^1J",[["~$remote-names",["^ ","^8:",["^9@","^9A"],"^1L","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^:O","~$p__79887"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",466,"^84",["^T",[null,"^85","^8O"]],"^:",466,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:O",["^ ","^8:",["^9@","^9A"],"^1L","^:P"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",34,"^9",8,"^:",34,"^;",24,"^7V",["^1J",["^7W",["^1J",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^:T"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",34,"^84","~$cljs.core/IVector","^:",34,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:T"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$build-env",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",219,"^9",8,"^:",219,"^;",17,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"~$addl"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]],"^9O",["^1J",["@param {...*} var_args"]],"^9L",["^ ","^83",false,"^9M",3,"^86",3,"^80",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^7V",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^9L",["^ ","^83",false,"^9M",3,"^86",3,"^80",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^7V",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^81",null,"^9M",3,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9Q",[["^ ","^9M",3,"^83",false,"^9R",["^T",["^8L","^85","^8O"]]],["^ ","^9M",2,"^83",false,"^9R",["^T",["^8L","^85","^8O"]]]],"^8",219,"^:",219,"^86",3,"^87",true,"^7V",["^1J",[["^7X",["^ ","^8E",["^:1"],"^1L","^89"],"^:X"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^9O",["^1J",["@param {...*} var_args"]]],"~$schedule-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^9",8,"^8",283,"^:",283,"^7V",["^1J",["^7W",["^1J",[["^7X","^9N"],["^7X"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^9O",["^1J",["@param {...*} var_args"]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9N"],["^7X"]]],"^81",null,"^9M",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9Q",[["^ ","^9M",2,"^83",false,"^9R",["^T",["^9S","^8O"]]],["^ ","^9M",1,"^83",false,"^9R",["^T",["^9S","^8O"]]]],"^8",283,"^:",283,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9N"],["^7X"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^9O",["^1J",["@param {...*} var_args"]]],"~$sort-queue-writes-before-reads",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",65,"^9",8,"^:",65,"^;",38,"^7V",["^1J",["^7W",["^1J",[["~$send-queue"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",38,"^80",["^1J",[["^;1"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",65,"^84",["^T",[null,"^8L","^85"]],"^:",65,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^;1"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"~$advance-actions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",292,"^9",8,"^:",292,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:0","^8F"],"^1L","^:H"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__79756"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",292,"^84",["^T",["^8L","^85"]],"^:",292,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:0","^8F"],"^1L","^:H"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",53,"^9",8,"^:",53,"^;",21,"^7V",["^1J",["^7W",["^1J",[["^:7"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^80",["^1J",[["^:7"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",53,"^84",["^T",["^::","^85"]],"^:",53,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:7"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",251,"^9",8,"^:",251,"^;",29,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1L","^7X"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^80",["^1J",[["~$p__79722"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",251,"^84","^85","^:",251,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^;9"],"^1L","^7X"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue."],"~$combine-sends",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",93,"^9",8,"^:",93,"^;",21,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Z","^;1"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^80",["^1J",[["^7X","^7Z","^;1"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",93,"^84","^:5","^:",93,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Z","^;1"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$idle-node?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",8,"^:",456,"^;",18,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Returns true if the given node has no active network operations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["~$p__79877"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",456,"^84","^::","^:",456,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",583,"^9",8,"^:",583,"^;",27,"^7V",["^1J",["^7W",["^1J",[["^7X","^8T"]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^80",["^1J",[["^7X","^8T"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",583,"^84",["^T",[null,"^85"]],"^:",583,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^8T"]]]]]],"~$dispatch-result!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",508,"^9",8,"^:",508,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^9@","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node"],"^1L","^8="],"^99"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","^89","~$p__79907","^99"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",508,"^84",["^T",["^8L","^85"]],"^:",508,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^9@","^;D"],"^1L","^8="],"^99"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^89",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",193,"^9",8,"^:",193,"^;",15,"^7V",["^1J",["^7W",["^1J",[["~$tx"],["^;G","^:1"]]]]],"^9O",["^1J",["@param {...*} var_args"]],"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^;G"],["^;G","^:1"]]],"^7V",["^1J",[["^;G"],["^;G","^:1"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^9L",["^ ","^83",false,"^9M",2,"^86",2,"^80",["^1J",[["^;G"],["^;G","^:1"]]],"^7V",["^1J",[["^;G"],["^;G","^:1"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^;G"],["^;G","^:1"]]],"^81",null,"^9M",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9Q",[["^ ","^9M",1,"^83",false,"^9R","^85"],["^ ","^9M",2,"^83",false,"^9R","^:5"]],"^8",193,"^:",193,"^86",2,"^87",true,"^7V",["^1J",[["^;G"],["^;G","^:1"]]],"^9O",["^1J",["@param {...*} var_args"]]]],"^1H",["^ ","^?","^@","^14","^15","^D","^D","^O","^O","^19","^O","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^15","^15","^1?","^1?","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1C",["^T",["~:remote","~:children","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","~:state-before","^8;","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:ref","~:done?","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:state","~:status-code","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^8A","~:com.fulcrologic.fulcro.application/state-atom","~:state-before-action","~:fatal","~:dispatch","~:transmit!","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:root","~:result","^;9","^9@","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","^9A","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^8W","~:parallel?","~:auto","~:p","~:new-elements","^;D","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^8<","^9?","~:message","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler"]],"~:order",["^<T","^;9","^8W","^<Q","^<Y","^<=","^;[","^;K","^;V","^<W","^<F","^;P","^<Z","^;M","^;T","^;R","^9?","^;Q","^<[","^<O","^<2","^<U","^;L","^<:","^<0","^<I","~:p","^<R","^<8","^<G","^<X","^<K","^;D","^9A","^8<","^8;","^9@","^;O","^<@","^8A","^;W","^<3","^<1","^<B","^<6","^;Z","^<D","^<E","^<P","^;U","^;Y","^;X","^<S","^<H","^<5","^<J","^;N","^<;","^<M","^<7","^<?","^<L","^<9","^<>","^<C","^;J","^<N","^<A","^;S","^<4","^<V","^<<"]],"^1N",["^ ","^1D",["^T",[]]],"^1O",["^ "],"^1P",["^17","^D","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]],"^X","^V","~:ns-specs",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~$cljs.core/any?","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^;L",["^1J",["~$cljs.spec.alpha/coll-of","^<U","~:kind","~$cljs.core/vector?"]],"^8;",["^1J",["~$cljs.spec.alpha/map-of","~$cljs.core/keyword?","^=3"]],"^;O","^=5","^;P","~:edn-query-language.ast/node","^;Q","~$cljs.core/fn?","^;U","~$cljs.core/boolean?","^;Y","^==","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element",["^1J",["~$cljs.spec.alpha/keys","~:req",["^9?","^;D","^9A","^8<","^8;","^9@"],"~:opt",["^<M"]]],"^8A",["^1J",["^=6","^=>","^=7","^=8"]],"~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node",["^1J",["^=?","^=@",["^<F","^;O","^8W","^<@","^8A"],"^=A",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^=4"]]],"^9@","~$cljs.core/map?","^<@","^=8","^9A","~$cljs.core/set?","^<D",["^1J",["^=6","^=B","^=7","^=8"]],"^<E",["^1J",["^=6","^=B","^=7","^=8"]],"^<F","~$cljs.core/uuid?","^=C","^=5","^<K",["^1J",["^=9","~:com.fulcrologic.fulcro.application/remote-name","^;L"]],"^<M",["^1J",["^=9","^=:","^=3"]],"^<P","^==","^8W",["^1J",["^=?","^=A",["^=2"],"~:opt-un",["^=2"]]],"^;D","^;P","^<U",["^1J",["^=?","^=@",["^<F","^9?","^;P","^<[","^;Q","^<W"],"^=A",["^8W"]]],"^<W","^==","^8<","^=E","^9?","~$cljs.core/int?","^<Y","^==","^<[","^=<"],"~:ns-speced-vars",[],"~:compiler-options",["^22",[["^=K","~:static-fns"],true,["^=K","~:elide-asserts"],true,["^=K","~:optimize-constants"],null,["^=K","^1U"],null,["^=K","~:external-config"],null,["^=K","~:tooling-config"],null,["^=K","~:emit-constants"],null,["^=K","~:load-tests"],false,["^=K","~:form-size-threshold"],null,["^=K","~:infer-externs"],true,["^=K","^1W"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^=K","~:fn-invoke-direct"],null,["^=K","~:source-map"],"/dev/null"]]]