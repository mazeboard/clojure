["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.application');\n/**\n * Return the current basis time of the app.\n */\ncom.fulcrologic.fulcro.application.basis_t = (function com$fulcrologic$fulcro$application$basis_t(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Get the current value of the application state database.\n */\ncom.fulcrologic.fulcro.application.current_state = (function com$fulcrologic$fulcro$application$current_state(app_or_component){\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_or_component);\nreturn cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\n});\n/**\n * Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n *   uses this to add metadata to props so it can detect the newer of two version of props.\n */\ncom.fulcrologic.fulcro.application.tick_BANG_ = (function com$fulcrologic$fulcro$application$tick_BANG_(app__$1){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),cljs.core.inc);\n});\n/**\n * Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n * updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n * Context instead of shared.\n */\ncom.fulcrologic.fulcro.application.update_shared_BANG_ = (function com$fulcrologic$fulcro$application$update_shared_BANG_(p__80196){\nvar map__80197 = p__80196;\nvar map__80197__$1 = (((((!((map__80197 == null))))?(((((map__80197.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80197.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80197):map__80197);\nvar app__$1 = map__80197__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80197__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\ntry{var temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"shared-fn\",\"shared-fn\",-180260144));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar shared_fn = temp__5753__auto__;\nvar shared = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"static-shared-props\",\"com.fulcrologic.fulcro.application/static-shared-props\",2140623498).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\nvar state = com.fulcrologic.fulcro.application.current_state(app__$1);\nvar root_class = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(root_class,state);\nvar v = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state,state);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shared,(shared_fn.cljs$core$IFn$_invoke$arity$1 ? shared_fn.cljs$core$IFn$_invoke$arity$1(v) : shared_fn.call(null,v))], 0)));\n} else {\nreturn null;\n}\n}catch (e80199){var e = e80199;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.application\",null,61,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e,map__80197,map__80197__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Cannot compute shared\"], null);\n});})(e,map__80197,map__80197__$1,app__$1,runtime_atom))\n,null)),null,241011445);\n}});\n/**\n * Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n *   render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n *   of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n *   and if it would simply be quicker to keyframe render the entire tree.\n * \n *   This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n *   any way.\n */\ncom.fulcrologic.fulcro.application.root_props_changed_QMARK_ = (function com$fulcrologic$fulcro$application$root_props_changed_QMARK_(app__$1){\nvar map__80206 = app__$1;\nvar map__80206__$1 = (((((!((map__80206 == null))))?(((((map__80206.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80206.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80206):map__80206);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80206__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80206__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar map__80207 = cljs.core.deref(runtime_atom);\nvar map__80207__$1 = (((((!((map__80207 == null))))?(((((map__80207.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80207.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80207):map__80207);\nvar root_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80207__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119));\nvar indexes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80207__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938));\nif(cljs.core.not(com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(root_class,cljs.core.deref(state_atom)))){\nreturn true;\n} else {\nvar state_map = cljs.core.deref(state_atom);\nvar prior_state_map = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar root_props = new cljs.core.Keyword(null,\"root-props\",\"root-props\",-1015460595).cljs$core$IFn$_invoke$arity$1(indexes);\nvar root_old = cljs.core.select_keys(prior_state_map,root_props);\nvar root_new = cljs.core.select_keys(state_map,root_props);\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(root_old,root_new);\n}\n});\n\n/**\n * Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n * \n *   This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n *   this function.  The optimized render is called by this function, which does extra bookkeeping and\n *   other supporting features common to all rendering.\n * \n *   Options include:\n *   - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n *   - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n *   only on `force-root?` and when (shallow) root props change.\n *   \n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.application.render_BANG_ = (function com$fulcrologic$fulcro$application$render_BANG_(var_args){\nvar G__80216 = arguments.length;\nswitch (G__80216) {\ncase 1:\nreturn com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),false], null));\n});\n\ncom.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__80220){\nvar map__80221 = p__80220;\nvar map__80221__$1 = (((((!((map__80221 == null))))?(((((map__80221.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80221.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80221):map__80221);\nvar options = map__80221__$1;\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80221__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\ncom.fulcrologic.fulcro.application.tick_BANG_(app__$1);\n\nvar map__80225 = app__$1;\nvar map__80225__$1 = (((((!((map__80225 == null))))?(((((map__80225.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80225.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80225):map__80225);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80225__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"optimized-render!\",\"optimized-render!\",1504010964));\nvar shared_props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157));\nvar root_props_changed_QMARK_ = com.fulcrologic.fulcro.application.root_props_changed_QMARK_(app__$1);\nvar _STAR_denormalize_time_STAR__orig_val__80228_80383 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\nvar _STAR_app_STAR__orig_val__80229_80384 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\nvar _STAR_shared_STAR__orig_val__80230_80385 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\nvar _STAR_query_state_STAR__orig_val__80231_80386 = com.fulcrologic.fulcro.components._STAR_query_state_STAR_;\nvar _STAR_denormalize_time_STAR__temp_val__80232_80387 = com.fulcrologic.fulcro.application.basis_t(app__$1);\nvar _STAR_app_STAR__temp_val__80233_80388 = app__$1;\nvar _STAR_shared_STAR__temp_val__80234_80389 = shared_props;\nvar _STAR_query_state_STAR__temp_val__80235_80390 = cljs.core.deref(state_atom);\ncom.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__80232_80387;\n\ncom.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__80233_80388;\n\ncom.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__80234_80389;\n\ncom.fulcrologic.fulcro.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__temp_val__80235_80390;\n\ntry{if(cljs.core.truth_((function (){var or__4131__auto__ = force_root_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn root_props_changed_QMARK_;\n}\n})())){\ncom.fulcrologic.fulcro.application.update_shared_BANG_(app__$1);\n} else {\n}\n\nvar G__80237_80392 = app__$1;\nvar G__80238_80393 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835),root_props_changed_QMARK_], null)], 0));\n(render_BANG_.cljs$core$IFn$_invoke$arity$2 ? render_BANG_.cljs$core$IFn$_invoke$arity$2(G__80237_80392,G__80238_80393) : render_BANG_.call(null,G__80237_80392,G__80238_80393));\n}finally {com.fulcrologic.fulcro.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__orig_val__80231_80386;\n\ncom.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__80230_80385;\n\ncom.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__80229_80384;\n\ncom.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__80228_80383;\n}\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441),cljs.core.deref(state_atom));\n\nvar limited_refresh_QMARK_ = cljs.core.seq(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar refresh_QMARK_ = cljs.core.seq(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nif(((refresh_QMARK_) && (limited_refresh_QMARK_))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),cljs.core.PersistentHashSet.EMPTY);\n\nreturn (com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.application.schedule_render_BANG_.call(null,app__$1));\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),cljs.core.PersistentHashSet.EMPTY,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),cljs.core.PersistentHashSet.EMPTY], 0));\n}\n});\n\ncom.fulcrologic.fulcro.application.render_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule a render on the next animation frame.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.application.schedule_render_BANG_ = (function com$fulcrologic$fulcro$application$schedule_render_BANG_(var_args){\nvar G__80244 = arguments.length;\nswitch (G__80244) {\ncase 1:\nreturn com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),false], null));\n});\n\ncom.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,options){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_animation_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"render-scheduled?\",\"com.fulcrologic.fulcro.application/render-scheduled?\",1784576350),(function (){\nreturn com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,options);\n}));\n});\n\ncom.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.application.default_tx_BANG_ = (function com$fulcrologic$fulcro$application$default_tx_BANG_(var_args){\nvar G__80253 = arguments.length;\nswitch (G__80253) {\ncase 2:\nreturn com.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),ghostwheel.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null));\n});\n\ncom.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__80256,tx,options){\nvar map__80257 = p__80256;\nvar map__80257__$1 = (((((!((map__80257 == null))))?(((((map__80257.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80257.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80257):map__80257);\nvar app__$1 = map__80257__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80257__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),ghostwheel.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\n\nvar map__80260 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__80260__$1 = (((((!((map__80260 == null))))?(((((map__80260.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80260.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80260):map__80260);\nvar options__$1 = map__80260__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80260__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80260__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80260__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,map__80257,map__80257__$1,app__$1,runtime_atom){\nreturn (function (p1__80250_SHARP_){\nreturn (((p1__80250_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__80250_SHARP_)));\n});})(map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,map__80257,map__80257__$1,app__$1,runtime_atom))\n,tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = ((function (map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,map__80257,map__80257__$1,app__$1,runtime_atom){\nreturn (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});})(map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,map__80257,map__80257__$1,app__$1,runtime_atom))\n;\nvar refresh__$1 = (function (){var G__80265 = cljs.core.set(refresh);\nvar G__80265__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__80265,follow_on_reads):G__80265);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__80265__$1,ref);\n} else {\nreturn G__80265__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,((function (map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__80257,map__80257__$1,app__$1,runtime_atom){\nreturn (function (s){\nvar G__80266 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),node);\nvar G__80266__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__80266,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__80266);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__80266__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__80266__$1;\n}\n});})(map__80260,map__80260__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__80257,map__80257__$1,app__$1,runtime_atom))\n);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n});\n\ncom.fulcrologic.fulcro.application.default_tx_BANG_.cljs$lang$maxFixedArity = 3;\n\n/**\n * Default detection of network errors. Returns true if the status-code of the given result\n *   map is not 200.\n */\ncom.fulcrologic.fulcro.application.default_remote_error_QMARK_ = (function com$fulcrologic$fulcro$application$default_remote_error_QMARK_(p__80268){\nvar map__80270 = p__80268;\nvar map__80270__$1 = (((((!((map__80270 == null))))?(((((map__80270.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80270.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80270):map__80270);\nvar status_code = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80270__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code);\n});\n/**\n * The default query transform function.  It makes sure the following items on a component query\n *   are never sent to the server:\n * \n *   - Props whose namespace is `ui`\n *   - The form-state configuration join\n * \n *   Takes an AST and returns the modified AST.\n *   \n */\ncom.fulcrologic.fulcro.application.default_global_eql_transform = (function com$fulcrologic$fulcro$application$default_global_eql_transform(ast){\nvar kw_namespace = (function (k){\nvar and__4120__auto__ = (k instanceof cljs.core.Keyword);\nif(and__4120__auto__){\nreturn cljs.core.namespace(k);\n} else {\nreturn and__4120__auto__;\n}\n});\nreturn com.fulcrologic.fulcro.data_fetch.elide_ast_nodes(ast,((function (kw_namespace){\nreturn (function (k){\nvar temp__5753__auto__ = (function (){var G__80274 = k;\nif((G__80274 == null)){\nreturn null;\n} else {\nreturn kw_namespace(G__80274);\n}\n})();\nif(cljs.core.truth_(temp__5753__auto__)){\nvar ns = temp__5753__auto__;\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854))) || (((typeof ns === 'string') && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"ui\",ns)))));\n} else {\nreturn null;\n}\n});})(kw_namespace))\n);\n});\n/**\n * Create a new Fulcro application.\n * \n *   `options`: A map of initial options\n * \n * * `:initial-db` a *map* containing a *normalized* Fulcro app db.  Normally Fulcro will populate app state with\n *   your component tree's initial state.  Use `mount!` options to toggle the initial state pull from root.\n * * `:optimized-render!` - A function that can analyze the state of the application and optimally refresh the screen.\n *   Defaults to `ident-optimized-render/render!`, but can also be set to `keyframe-render/render!`.  Further customizations are\n *   also possible.  Most applications will likely be best with the default (which analyzes changes by ident and targets\n *   refreshes), but applications with a lot of on-screen components may find the keyframe renderer to be faster. Both\n *   get added benefits from Fulcro's default `shouldComponentUpdate`, which will prevent rendering when there are no real\n *   changes.\n * * `default-result-action!` - A `(fn [env])` that will be used in your mutations defined with `defmutation` as the\n *   default `:result-action` when none is supplied. Normally defaults to a function that supports mutation joins, targeting,\n *   and ok/error actions. WARNING: Overriding this is for advanced users and can break important functionality. The\n *   default is value for this option is `com.fulcrologic.fulcro.mutations/default-result-action!`, which could be used\n *   as an element of your own custom implementation.\n * * `:global-eql-transform` - A `(fn [AST] new-AST)` that will be asked to rewrite the AST of all transactions just\n *   before they are placed on the network layer.\n * * `:client-did-mount` - A `(fn [app])` that is called when the application mounts the first time.\n * * `:remotes` - A map from remote name to a remote handler, which is defined as a map that contains at least\n *   a `:transmit!` key whose value is a `(fn [send-node])`. See `networking.http-remote`.\n * * `:shared` - A (static) map of data that should be visible in all components through `comp/shared`.\n * * `:shared-fn` - A function on root props that can select/augment shared whenever a forced root render\n *   or explicit call to `app/update-shared!` happens.\n * * `:props-middleware` - A function that can add data to the 4th (optional) argument of\n *   `defsc`.  Useful for allowing users to quickly destructure extra data created by\n *   component extensions. See the fulcro-garden-css project on github for an example usage.\n * * `:render-middleware` - A `(fn [this real-render])`. If supplied it will be called for every Fulcro component\n *   render, and *must* call (and return the result of) `real-render`.  This can be used to wrap the real render\n *   function in order to do things like measure performance, set dynamic vars, or augment the UI in arbitrary ways.\n *   `this` is the component being rendered.\n * * `:remote-error?` - A `(fn [result] boolean)`. It can examine the network result and should only return\n *   true when the result is an error. The `result` will contain both a `:body` and `:status-code` when using\n *   the normal remotes.  The default version of this returns true if the status code isn't 200.\n * * `:global-error-action` - A `(fn [env] ...)` that is run on any remote error (as defined by `remote-error?`).\n * * `:load-mutation` - A symbol. Defines which mutation to use as an implementation of low-level load operations. See\n *   Developer's Guide\n * * `:query-transform-default` - A `(fn [query] query')`. Defaults to a function that strips `:ui/...` keywords and\n *   form state config joins from load queries.\n * * `:load-marker-default` - A default value to use for load markers. Defaults to false.\n * * `:render-root!` - The function to call in order to render the root of your application. Defaults\n *   to `js/ReactDOM.render`.\n * * `:hydrate-root!` - The function to call in order to hydrate the root of your application. Defaults\n *   to `js/ReactDOM.hydrate`.\n * * `:root-class` - The component class that will be the root. This can be specified just with `mount!`, but\n * giving it here allows you to do a number of tasks against the app before it is actually mounted. You can also use `app/set-root!`.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.application.fulcro_app = (function com$fulcrologic$fulcro$application$fulcro_app(var_args){\nvar G__80280 = arguments.length;\nswitch (G__80280) {\ncase 0:\nreturn com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1 = (function (p__80281){\nvar map__80282 = p__80281;\nvar map__80282__$1 = (((((!((map__80282 == null))))?(((((map__80282.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80282.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80282):map__80282);\nvar options = map__80282__$1;\nvar default_result_action_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nvar global_error_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"global-error-action\",\"global-error-action\",-924822372));\nvar render_middleware = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"render-middleware\",\"render-middleware\",1183628797));\nvar client_did_mount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"client-did-mount\",\"client-did-mount\",-958324226));\nvar initial_db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"initial-db\",\"initial-db\",1939835102));\nvar query_transform_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"query-transform-default\",\"query-transform-default\",-1684574273));\nvar props_middleware = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"props-middleware\",\"props-middleware\",358176739));\nvar load_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"load-mutation\",\"load-mutation\",-2132703225));\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"remotes\",\"remotes\",1132366312));\nvar hydrate_root_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"hydrate-root!\",\"hydrate-root!\",-184171028));\nvar global_eql_transform = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar shared_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"shared-fn\",\"shared-fn\",-180260144));\nvar load_marker_default = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"load-marker-default\",\"load-marker-default\",335781105));\nvar render_root_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"render-root!\",\"render-root!\",820937651));\nvar optimized_render_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"optimized-render!\",\"optimized-render!\",1504010964));\nvar root_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"root-class\",\"root-class\",-267672298));\nvar remote_error_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nvar shared = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80282__$1,new cljs.core.Keyword(null,\"shared\",\"shared\",-384145993));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366),cljs.core.atom.cljs$core$IFn$_invoke$arity$1((function (){var or__4131__auto__ = initial_db;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})()),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"load-marker-default\",\"load-marker-default\",335781105),load_marker_default,new cljs.core.Keyword(null,\"client-did-mount\",\"client-did-mount\",-958324226),(function (){var or__4131__auto__ = client_did_mount;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"started-callback\",\"started-callback\",-1798586951).cljs$core$IFn$_invoke$arity$1(options);\n}\n})(),new cljs.core.Keyword(null,\"query-transform-default\",\"query-transform-default\",-1684574273),query_transform_default,new cljs.core.Keyword(null,\"load-mutation\",\"load-mutation\",-2132703225),load_mutation], null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render!\",\"com.fulcrologic.fulcro.algorithm/render!\",-551944092),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"shared-fn\",\"com.fulcrologic.fulcro.algorithm/shared-fn\",1998173092),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"default-result-action!\",\"com.fulcrologic.fulcro.algorithm/default-result-action!\",762427430),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"props-middleware\",\"com.fulcrologic.fulcro.algorithm/props-middleware\",-1561487353),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"schedule-render!\",\"com.fulcrologic.fulcro.algorithm/schedule-render!\",-881414518),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"global-eql-transform\",\"com.fulcrologic.fulcro.algorithm/global-eql-transform\",2048820336),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"drop-component!\",\"com.fulcrologic.fulcro.algorithm/drop-component!\",2089631024),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"hydrate-root!\",\"com.fulcrologic.fulcro.algorithm/hydrate-root!\",-974092720),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"index-component!\",\"com.fulcrologic.fulcro.algorithm/index-component!\",1187330736),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"remote-error?\",\"com.fulcrologic.fulcro.algorithm/remote-error?\",-1675354477),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render-root!\",\"com.fulcrologic.fulcro.algorithm/render-root!\",1033047),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"global-error-action\",\"com.fulcrologic.fulcro.algorithm/global-error-action\",1947538456),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"optimized-render!\",\"com.fulcrologic.fulcro.algorithm/optimized-render!\",-902323400),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"render-middleware\",\"com.fulcrologic.fulcro.algorithm/render-middleware\",-1105723495),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"index-root!\",\"com.fulcrologic.fulcro.algorithm/index-root!\",1394342330),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"merge*\",\"com.fulcrologic.fulcro.algorithm/merge*\",-1505158659)],[com.fulcrologic.fulcro.application.render_BANG_,(function (){var or__4131__auto__ = shared_fn;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.constantly(cljs.core.PersistentArrayMap.EMPTY);\n}\n})(),(function (){var or__4131__auto__ = default_result_action_BANG_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.mutations.default_result_action_BANG_;\n}\n})(),props_middleware,com.fulcrologic.fulcro.application.schedule_render_BANG_,com.fulcrologic.fulcro.application.default_tx_BANG_,(function (){var or__4131__auto__ = global_eql_transform;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.application.default_global_eql_transform;\n}\n})(),com.fulcrologic.fulcro.algorithms.indexing.drop_component_BANG_,hydrate_root_BANG_,com.fulcrologic.fulcro.algorithms.indexing.index_component_BANG_,(function (){var or__4131__auto__ = remote_error_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.application.default_remote_error_QMARK_;\n}\n})(),render_root_BANG_,global_error_action,(function (){var or__4131__auto__ = optimized_render_BANG_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.rendering.ident_optimized_render.render_BANG_;\n}\n})(),render_middleware,com.fulcrologic.fulcro.algorithms.indexing.index_root_BANG_,com.fulcrologic.fulcro.algorithms.merge.merge_STAR_]),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"mount-node\",\"com.fulcrologic.fulcro.application/mount-node\",557976672),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"last-rendered-state\",\"com.fulcrologic.fulcro.application/last-rendered-state\",1438978441),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"static-shared-props\",\"com.fulcrologic.fulcro.application/static-shared-props\",2140623498),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"mutate\",\"com.fulcrologic.fulcro.application/mutate\",-406635431),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-factory\",\"com.fulcrologic.fulcro.application/root-factory\",1202626682),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005)],[null,false,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224),cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.PersistentArrayMap.EMPTY,shared,false,root_class,(1),cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY,com.fulcrologic.fulcro.mutations.mutate,cljs.core.PersistentArrayMap.EMPTY,null,cljs.core.PersistentArrayMap.EMPTY,false,(function (){var or__4131__auto__ = remotes;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039),((function (or__4131__auto__,map__80282,map__80282__$1,options,default_result_action_BANG_,global_error_action,render_middleware,client_did_mount,initial_db,query_transform_default,props_middleware,load_mutation,remotes,hydrate_root_BANG_,global_eql_transform,shared_fn,load_marker_default,render_root_BANG_,optimized_render_BANG_,root_class,remote_error_QMARK_,shared){\nreturn (function (p__80289){\nvar map__80290 = p__80289;\nvar map__80290__$1 = (((((!((map__80290 == null))))?(((((map__80290.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80290.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80290):map__80290);\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80290__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.application\",null,315,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__80290,map__80290__$1,result_handler,or__4131__auto__,map__80282,map__80282__$1,options,default_result_action_BANG_,global_error_action,render_middleware,client_did_mount,initial_db,query_transform_default,props_middleware,load_mutation,remotes,hydrate_root_BANG_,global_eql_transform,shared_fn,load_marker_default,render_root_BANG_,optimized_render_BANG_,root_class,remote_error_QMARK_,shared){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote requested, but no remote defined.\"], null);\n});})(map__80290,map__80290__$1,result_handler,or__4131__auto__,map__80282,map__80282__$1,options,default_result_action_BANG_,global_error_action,render_middleware,client_did_mount,initial_db,query_transform_default,props_middleware,load_mutation,remotes,hydrate_root_BANG_,global_eql_transform,shared_fn,load_marker_default,render_root_BANG_,optimized_render_BANG_,root_class,remote_error_QMARK_,shared))\n,null)),null,646525199);\n\nvar G__80292 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(418),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null);\nreturn (result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__80292) : result_handler.call(null,G__80292));\n});})(or__4131__auto__,map__80282,map__80282__$1,options,default_result_action_BANG_,global_error_action,render_middleware,client_did_mount,initial_db,query_transform_default,props_middleware,load_mutation,remotes,hydrate_root_BANG_,global_eql_transform,shared_fn,load_marker_default,render_root_BANG_,optimized_render_BANG_,root_class,remote_error_QMARK_,shared))\n], null)], null);\n}\n})(),null]))], null);\n});\n\ncom.fulcrologic.fulcro.application.fulcro_app.cljs$lang$maxFixedArity = 1;\n\n/**\n * Returns true if the given `x` is a Fulcro application.\n */\ncom.fulcrologic.fulcro.application.fulcro_app_QMARK_ = (function com$fulcrologic$fulcro$application$fulcro_app_QMARK_(x){\nreturn cljs.core.boolean$(((cljs.core.map_QMARK_(x)) && (cljs.core.contains_QMARK_(x,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366))) && (cljs.core.contains_QMARK_(x,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772)))));\n});\n/**\n * Is the given app currently mounted on the DOM?\n */\ncom.fulcrologic.fulcro.application.mounted_QMARK_ = (function com$fulcrologic$fulcro$application$mounted_QMARK_(p__80296){\nvar map__80297 = p__80296;\nvar map__80297__$1 = (((((!((map__80297 == null))))?(((((map__80297.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80297.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80297):map__80297);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80297__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nreturn cljs.core.boolean$(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\n});\n/**\n * Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n *   in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n *   state.\n */\ncom.fulcrologic.fulcro.application.initialize_state_BANG_ = (function com$fulcrologic$fulcro$application$initialize_state_BANG_(app__$1,root){\nvar initial_db = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar root_query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(root,initial_db);\nvar initial_tree = com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$1(root);\nvar db_from_ui = (cljs.core.truth_(root_query)?com.fulcrologic.fulcro.algorithms.merge.merge_alternate_union_elements(com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4(root_query,initial_tree,true,com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform.cljs$core$IFn$_invoke$arity$1(initial_tree)),root):initial_tree);\nvar db = com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([initial_db,db_from_ui], 0));\nreturn cljs.core.reset_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),db);\n});\n/**\n * Mount the app.  If called on an already-mounted app this will have the effect of re-installing the root node so that\n *   hot code reload will refresh the UI (useful for development).\n * \n *   - `app`  The Fulcro app\n *   - `root`  The Root UI component\n *   - `node` The (string) ID or DOM node on which to mount.\n *   - `options` An optional map with additional mount options.\n * \n * \n *   `options` can include:\n * \n *   - `:initialize-state?` (default true) - If NOT mounted already: Pulls the initial state tree from root component,\n *   normalizes it, and installs it as the application's state.  If there was data supplied as an initial-db, then this\n *   new initial state will be *merged* with that initial-db.\n *   - `:hydrate?` (default false) - Indicates that the DOM will already contain content from the\n *  server that should be attached instead of overwritten. See ReactDOM.hydrate.\n *   \n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.application.mount_BANG_ = (function com$fulcrologic$fulcro$application$mount_BANG_(var_args){\nvar G__80307 = arguments.length;\nswitch (G__80307) {\ncase 3:\nreturn com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,root,node){\nreturn com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,root,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initialize-state?\",\"initialize-state?\",-189550519),true], null));\n});\n\ncom.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (app__$1,root,node,p__80311){\nvar map__80312 = p__80311;\nvar map__80312__$1 = (((((!((map__80312 == null))))?(((((map__80312.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80312.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80312):map__80312);\nvar initialize_state_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80312__$1,new cljs.core.Keyword(null,\"initialize-state?\",\"initialize-state?\",-189550519));\nvar hydrate_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80312__$1,new cljs.core.Keyword(null,\"hydrate?\",\"hydrate?\",-57042185));\nvar initialize_state_QMARK___$1 = ((cljs.core.boolean_QMARK_(initialize_state_QMARK_))?initialize_state_QMARK_:true);\nvar reset_mountpoint_BANG_ = ((function (initialize_state_QMARK___$1,map__80312,map__80312__$1,initialize_state_QMARK_,hydrate_QMARK_){\nreturn (function (){\nvar dom_node = ((typeof node === 'string')?goog.dom.getElement(node):node);\nvar root_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1(root);\nif((dom_node == null)){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.application\",null,381,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (dom_node,root_factory,initialize_state_QMARK___$1,map__80312,map__80312__$1,initialize_state_QMARK_,hydrate_QMARK_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Mount cannot find DOM node\",node,\"to mount\",com.fulcrologic.fulcro.components.class__GT_registry_key(root)], null);\n});})(dom_node,root_factory,initialize_state_QMARK___$1,map__80312,map__80312__$1,initialize_state_QMARK_,hydrate_QMARK_))\n,null)),null,1917244317);\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"mount-node\",\"com.fulcrologic.fulcro.application/mount-node\",557976672),dom_node,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-factory\",\"com.fulcrologic.fulcro.application/root-factory\",1202626682),root_factory,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119),root], 0));\n\ncom.fulcrologic.fulcro.application.update_shared_BANG_(app__$1);\n\ncom.fulcrologic.fulcro.algorithms.indexing.index_root_BANG_(app__$1);\n\nreturn com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true,new cljs.core.Keyword(null,\"hydrate?\",\"hydrate?\",-57042185),hydrate_QMARK_], null));\n}\n});})(initialize_state_QMARK___$1,map__80312,map__80312__$1,initialize_state_QMARK_,hydrate_QMARK_))\n;\nif(com.fulcrologic.fulcro.application.mounted_QMARK_(app__$1)){\nreturn reset_mountpoint_BANG_();\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.app_started_BANG_(app__$1);\n\nif(initialize_state_QMARK___$1){\ncom.fulcrologic.fulcro.application.initialize_state_BANG_(app__$1,root);\n} else {\n}\n\nreset_mountpoint_BANG_();\n\nvar temp__5753__auto__ = new cljs.core.Keyword(null,\"client-did-mount\",\"client-did-mount\",-958324226).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684).cljs$core$IFn$_invoke$arity$1(app__$1));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar cdm = temp__5753__auto__;\nreturn (cdm.cljs$core$IFn$_invoke$arity$1 ? cdm.cljs$core$IFn$_invoke$arity$1(app__$1) : cdm.call(null,app__$1));\n} else {\nreturn null;\n}\n}\n});\n\ncom.fulcrologic.fulcro.application.mount_BANG_.cljs$lang$maxFixedArity = 4;\n\n/**\n * Returns the current app root, if mounted.\n */\ncom.fulcrologic.fulcro.application.app_root = (function com$fulcrologic$fulcro$application$app_root(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app-root\",\"com.fulcrologic.fulcro.application/app-root\",835379005).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns the current app root class, if mounted.\n */\ncom.fulcrologic.fulcro.application.root_class = (function com$fulcrologic$fulcro$application$root_class(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Force a re-render of the root. Runs a root query, disables shouldComponentUpdate, and renders the root component.\n * This effectively forces React to do a full VDOM diff. Useful for things like UI refresh on hot code reload and\n * changing locales where there are no real data changes, but the UI still needs to refresh.\n * \n * Argument can be anything that any->reconciler accepts.\n * \n * WARNING: This disables all Fulcro rendering optimizations, so it is much slower than other ways of refreshing the app.\n * Use `schedule-render!` to request a normal optimized render.\n */\ncom.fulcrologic.fulcro.application.force_root_render_BANG_ = (function com$fulcrologic$fulcro$application$force_root_render_BANG_(app_ish){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nif(cljs.core.truth_(temp__5753__auto__)){\nvar app__$1 = temp__5753__auto__;\nvar _STAR_blindly_render_STAR__orig_val__80327 = com.fulcrologic.fulcro.components._STAR_blindly_render_STAR_;\nvar _STAR_blindly_render_STAR__temp_val__80328 = true;\ncom.fulcrologic.fulcro.components._STAR_blindly_render_STAR_ = _STAR_blindly_render_STAR__temp_val__80328;\n\ntry{return com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null));\n}finally {com.fulcrologic.fulcro.components._STAR_blindly_render_STAR_ = _STAR_blindly_render_STAR__orig_val__80327;\n}} else {\nreturn null;\n}\n});\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.application.abort_elements_BANG_ = (function com$fulcrologic$fulcro$application$abort_elements_BANG_(p__80337,send_queue,abort_id){\nvar map__80340 = p__80337;\nvar map__80340__$1 = (((((!((map__80340 == null))))?(((((map__80340.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80340.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80340):map__80340);\nvar remote = map__80340__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80340__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__80340,map__80340__$1,remote,abort_BANG_){\nreturn (function (result,p__80351){\nvar map__80353 = p__80351;\nvar map__80353__$1 = (((((!((map__80353 == null))))?(((((map__80353.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80353.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80353):map__80353);\nvar send_node = map__80353__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80353__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80353__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80353__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__4131__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.application\",null,441,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (aid,map__80353,map__80353__$1,send_node,active_QMARK_,options,result_handler,map__80340,map__80340__$1,remote,abort_BANG_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Aborting an ACTIVE network request.\",abort_id], null);\n});})(aid,map__80353,map__80353__$1,send_node,active_QMARK_,options,result_handler,map__80340,map__80340__$1,remote,abort_BANG_))\n,null)),null,1467248460);\n\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.application\",null,445,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (aid,map__80353,map__80353__$1,send_node,active_QMARK_,options,result_handler,map__80340,map__80340__$1,remote,abort_BANG_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Aborting a QUEUED network request.\",abort_id], null);\n});})(aid,map__80353,map__80353__$1,send_node,active_QMARK_,options,result_handler,map__80340,map__80340__$1,remote,abort_BANG_))\n,null)),null,-1997972648);\n\nvar G__80362_80430 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__80362_80430) : result_handler.call(null,G__80362_80430));\n\nreturn result;\n\n}\n}\n});})(map__80340,map__80340__$1,remote,abort_BANG_))\n,cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.application\",null,451,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__80340,map__80340__$1,remote,abort_BANG_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support!\"], null);\n});})(map__80340,map__80340__$1,remote,abort_BANG_))\n,null)),null,-6772157);\n\nreturn send_queue;\n}\n});\n/**\n * Attempt to abort the send queue entries with the given abort ID.  Will notify any aborted operations (e.g. result-handler\n *   will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n *   The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n * \n *   This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n *   made it to the network processing layer (things still in top-level transaction submission queue).\n * \n *   So the sequence of calls:\n * \n *   ```\n *   (comp/transact! this `[(f)] {:abort-id :a})\n *   (app/abort! this :a)\n *   ```\n * \n *   will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n *   mutation `(f)` is still on the submission queue and will not be aborted.\n * \n *   - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n *   - `abort-id`: The abort ID of the operations to be aborted.\n *   \n */\ncom.fulcrologic.fulcro.application.abort_BANG_ = (function com$fulcrologic$fulcro$application$abort_BANG_(app_ish,abort_id){\nvar map__80364 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nvar map__80364__$1 = (((((!((map__80364 == null))))?(((((map__80364.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80364.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80364):map__80364);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80364__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__80365 = runtime_state;\nvar map__80365__$1 = (((((!((map__80365 == null))))?(((((map__80365.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80365.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80365):map__80365);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80365__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80365__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__80364,map__80364__$1,runtime_atom,runtime_state,map__80365,map__80365__$1,remotes,send_queues,remote_names){\nreturn (function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.application.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n});})(map__80364,map__80364__$1,runtime_atom,runtime_state,map__80365,map__80365__$1,remotes,send_queues,remote_names))\n,cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"send-queues\",\"com.fulcrologic.fulcro.application/send-queues\",-966584015),new_send_queues);\n});\n/**\n * Set a root class to use on the app. Doing so allows much of the API to work before mounting the app.\n */\ncom.fulcrologic.fulcro.application.set_root_BANG_ = (function com$fulcrologic$fulcro$application$set_root_BANG_(app__$1,root,p__80370){\nvar map__80371 = p__80370;\nvar map__80371__$1 = (((((!((map__80371 == null))))?(((((map__80371.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80371.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80371):map__80371);\nvar initialize_state_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80371__$1,new cljs.core.Keyword(null,\"initialize-state?\",\"initialize-state?\",-189550519));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"root-class\",\"com.fulcrologic.fulcro.application/root-class\",-719803119),root);\n\nif(cljs.core.truth_(initialize_state_QMARK_)){\nreturn com.fulcrologic.fulcro.application.initialize_state_BANG_(app__$1,root);\n} else {\nreturn null;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/fulcro/application.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",39],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.test","~$cljs.test","~$clojure.core","~$cljs.core","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$>defn","~$ghostwheel.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.application","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^Y","~$goog.dom","^Z","~$com.fulcrologic.fulcro.algorithms.normalize","^[","~$fs","~$com.fulcrologic.fulcro.algorithms.form-state","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^Y","~$com.fulcrologic.fulcro.algorithms.denormalize","^17","~$mut","~$com.fulcrologic.fulcro.mutations","~$fnorm","^[","^C","^C","~$com.fulcrologic.fulcro.inspect.inspect-client","^1;","~$gobj","~$goog.object","~$goog","^1>","^1=","^1=","~$com.fulcrologic.fulcro.specs","^1?","^11","^11","~$inspect","^1;","~$com.fulcrologic.fulcro.algorithms.tempid","^1A","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$com.fulcrologic.fulcro.algorithms.scheduling","^1D","~$gdom","^Z","~$sched","^1D","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","~$indexing","~$com.fulcrologic.fulcro.algorithms.indexing","~$df","~$com.fulcrologic.fulcro.data-fetch","^19","^19","^N","^N","^X","^X","^1L","^1L","~$merge","~$com.fulcrologic.fulcro.algorithms.merge","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","^1O","^1H","^1H","^15","^15","^13","^13","^1N","^1N","~$fdn","^17","~$ident-optimized","^1O","^1J","^1J","~$tempid","^1A","^1C","^1C"],"~:seen",["^P",["~:require"]],"~:uses",["^ ","^M","^N","~$=>","^N","~$|","^N"],"~:require-macros",["^ ","^12","^13","^14","^15","^18","^19","^C","^C","^1;","^1;","^1@","^1;","^19","^19","^N","^N","^15","^15","^13","^13"],"~:form",["~#list",["~$ns","^R",["^1Y",["^1T",["^X","~:as","^W"],["^1L","^1[","^1K"],["^17","^1[","^1P"],["^1J","^1[","^1I"],["^1N","^1[","^1M"],["^1C","^1[","^1B"],["^1A","^1[","^1R"],["^[","^1[","^1:"],["^1D","^1[","^1F"],["^1H","^1[","^1G"],["^11","^1[","^10"],["^15","^1[","^14"],["^19","^1[","^18"],["^1O","^1[","^1Q"],["^1;","^1[","^1@"],["^Y","^1[","^16"],"^1?",["^N","~:refer",["^M","^1V","~$|"]],["^1=","^1[","^1<"],["^Z","^1[","^1E"],["^13","^1[","^12"]]]]],"~:flags",["^ ","^1T",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^1>","^C","^X","^1L","^17","^1J","^1N","^1C","^1A","^[","^1D","^1H","^11","^15","^19","^1O","^1;","^Y","^1?","^N","^1=","^Z","^13"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/application.cljc"],"~:compiled-at",1630228762528,"~:resource-name","com/fulcrologic/fulcro/application.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.application\n  (:require\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.indexing :as indexing]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.normalize :as fnorm]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.mutations :as mut]\n    [com.fulcrologic.fulcro.rendering.ident-optimized-render :as ident-optimized]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect]\n    [edn-query-language.core :as eql]\n    com.fulcrologic.fulcro.specs\n    [ghostwheel.core :refer [>defn => |]]\n    #?@(:cljs [[goog.object :as gobj]\n               [goog.dom :as gdom]])\n    [taoensso.timbre :as log])\n  #?(:clj (:import (clojure.lang IDeref))))\n\n(>defn basis-t\n  \"Return the current basis time of the app.\"\n  [app]\n  [::app => pos-int?]\n  (-> app ::runtime-atom deref ::basis-t))\n\n(>defn current-state\n  \"Get the current value of the application state database.\"\n  [app-or-component]\n  [any? => map?]\n  (let [app (comp/any->app app-or-component)]\n    (-> app ::state-atom deref)))\n\n(>defn tick!\n  \"Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props.\"\n  [app]\n  [::app => any?]\n  (swap! (::runtime-atom app) update ::basis-t inc))\n\n(>defn update-shared!\n  \"Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared.\"\n  [{::keys [runtime-atom] :as app}]\n  [::app => any?]\n  (try\n    (when-let [shared-fn (ah/app-algorithm app :shared-fn)]\n      (let [shared     (-> app ::runtime-atom deref ::static-shared-props)\n            state      (current-state app)\n            root-class (-> app ::runtime-atom deref ::root-class)\n            query      (comp/get-query root-class state)\n            v          (fdn/db->tree query state state)]\n        (swap! runtime-atom assoc ::shared-props (merge shared (shared-fn v)))))\n    (catch #?(:cljs :default :clj Throwable) e\n      (log/error e \"Cannot compute shared\"))))\n\n(>defn root-props-changed?\n  \"Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way.\"\n  [app]\n  [::app => boolean?]\n  (let [{::keys [runtime-atom state-atom]} app\n        {::keys [root-class indexes]} @runtime-atom]\n    (if-not (comp/get-query root-class @state-atom)\n      true\n      (let [state-map       @state-atom\n            prior-state-map (-> runtime-atom deref ::last-rendered-state)\n            root-props      (:root-props indexes)\n            root-old        (select-keys prior-state-map root-props)\n            root-new        (select-keys state-map root-props)]\n        (not= root-old root-new)))))\n\n(declare schedule-render! mounted?)\n\n(>defn render!\n  \"Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  \"\n  ([app]\n   [::app => any?]\n   (render! app {:force-root? false}))\n  ([app {:keys [force-root?] :as options}]\n   [::app map? => any?]\n   (tick! app)\n   (let [{:keys [::runtime-atom ::state-atom]} app\n         render!             (ah/app-algorithm app :optimized-render!)\n         shared-props        (get @runtime-atom ::shared-props)\n         root-props-changed? (root-props-changed? app)]\n     (binding [fdn/*denormalize-time* (basis-t app)\n               comp/*app*             app\n               comp/*shared*          shared-props\n               comp/*query-state*     @state-atom]\n       (when (or force-root? root-props-changed?)\n         (update-shared! app))\n       (render! app (merge options {:root-props-changed? root-props-changed?})))\n\n     (swap! runtime-atom assoc ::last-rendered-state @state-atom)\n\n     (let [limited-refresh? (seq (::only-refresh @runtime-atom))\n           refresh?         (seq (::to-refresh @runtime-atom))]\n       ;; limited refresh can cause missed refreshes. Clear only the limited ones, and schedule one more update.\n       ;; If more limited refreshes arrive before that scheduled update, then they will run and block the requested\n       ;; refreshes again, and cause this to try again.\n       (if (and refresh? limited-refresh?)\n         (do\n           (swap! runtime-atom assoc ::only-refresh #{})\n           (schedule-render! app))\n         (swap! runtime-atom assoc\n           ::to-refresh #{}\n           ::only-refresh #{}))))))\n\n(defn schedule-render!\n  \"Schedule a render on the next animation frame.\"\n  ([app]\n   (schedule-render! app {:force-root? false}))\n  ([app options]\n   (sched/schedule-animation! app ::render-scheduled? #(render! app options))))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [::app ::txn/tx => ::txn/id]\n   (default-tx! app tx {:optimistic? true}))\n  ([{:keys [::runtime-atom] :as app} tx options]\n   [:com.fulcrologic.fulcro.application/app ::txn/tx ::txn/options => ::txn/id]\n   (txn/schedule-activation! app)\n   (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n         follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n         node            (txn/tx-node tx options)\n         accumulate      (fn [r items] (into (set r) items))\n         refresh         (cond-> (set refresh)\n                           (seq follow-on-reads) (into follow-on-reads)\n                           ref (conj ref))]\n     (swap! runtime-atom (fn [s] (cond-> (update s ::txn/submission-queue (fnil conj []) node)\n                                   ;; refresh sets are cumulative because rendering is debounced\n                                   (seq refresh) (update ::to-refresh accumulate refresh)\n                                   (seq only-refresh) (update ::only-refresh accumulate only-refresh))))\n     (::txn/id node))))\n\n(>defn default-remote-error?\n  \"Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200.\"\n  [{:keys [status-code]}]\n  [map? => boolean?]\n  (not= 200 status-code))\n\n(defn default-global-eql-transform\n  \"The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - The form-state configuration join\n\n  Takes an AST and returns the modified AST.\n  \"\n  [ast]\n  (let [kw-namespace (fn [k] (and (keyword? k) (namespace k)))]\n    (df/elide-ast-nodes ast (fn [k]\n                              (when-let [ns (some-> k kw-namespace)]\n                                (or\n                                  (= k ::fs/config)\n                                  (and\n                                    (string? ns)\n                                    (= \"ui\" ns))))))))\n\n(defn fulcro-app\n  \"Create a new Fulcro application.\n\n  `options`: A map of initial options\n\n   * `:initial-db` a *map* containing a *normalized* Fulcro app db.  Normally Fulcro will populate app state with\n     your component tree's initial state.  Use `mount!` options to toggle the initial state pull from root.\n   * `:optimized-render!` - A function that can analyze the state of the application and optimally refresh the screen.\n     Defaults to `ident-optimized-render/render!`, but can also be set to `keyframe-render/render!`.  Further customizations are\n     also possible.  Most applications will likely be best with the default (which analyzes changes by ident and targets\n     refreshes), but applications with a lot of on-screen components may find the keyframe renderer to be faster. Both\n     get added benefits from Fulcro's default `shouldComponentUpdate`, which will prevent rendering when there are no real\n     changes.\n   * `default-result-action!` - A `(fn [env])` that will be used in your mutations defined with `defmutation` as the\n     default `:result-action` when none is supplied. Normally defaults to a function that supports mutation joins, targeting,\n     and ok/error actions. WARNING: Overriding this is for advanced users and can break important functionality. The\n     default is value for this option is `com.fulcrologic.fulcro.mutations/default-result-action!`, which could be used\n     as an element of your own custom implementation.\n   * `:global-eql-transform` - A `(fn [AST] new-AST)` that will be asked to rewrite the AST of all transactions just\n     before they are placed on the network layer.\n   * `:client-did-mount` - A `(fn [app])` that is called when the application mounts the first time.\n   * `:remotes` - A map from remote name to a remote handler, which is defined as a map that contains at least\n     a `:transmit!` key whose value is a `(fn [send-node])`. See `networking.http-remote`.\n   * `:shared` - A (static) map of data that should be visible in all components through `comp/shared`.\n   * `:shared-fn` - A function on root props that can select/augment shared whenever a forced root render\n     or explicit call to `app/update-shared!` happens.\n   * `:props-middleware` - A function that can add data to the 4th (optional) argument of\n     `defsc`.  Useful for allowing users to quickly destructure extra data created by\n     component extensions. See the fulcro-garden-css project on github for an example usage.\n   * `:render-middleware` - A `(fn [this real-render])`. If supplied it will be called for every Fulcro component\n     render, and *must* call (and return the result of) `real-render`.  This can be used to wrap the real render\n     function in order to do things like measure performance, set dynamic vars, or augment the UI in arbitrary ways.\n     `this` is the component being rendered.\n   * `:remote-error?` - A `(fn [result] boolean)`. It can examine the network result and should only return\n     true when the result is an error. The `result` will contain both a `:body` and `:status-code` when using\n     the normal remotes.  The default version of this returns true if the status code isn't 200.\n   * `:global-error-action` - A `(fn [env] ...)` that is run on any remote error (as defined by `remote-error?`).\n   * `:load-mutation` - A symbol. Defines which mutation to use as an implementation of low-level load operations. See\n     Developer's Guide\n   * `:query-transform-default` - A `(fn [query] query')`. Defaults to a function that strips `:ui/...` keywords and\n     form state config joins from load queries.\n   * `:load-marker-default` - A default value to use for load markers. Defaults to false.\n   * `:render-root!` - The function to call in order to render the root of your application. Defaults\n     to `js/ReactDOM.render`.\n   * `:hydrate-root!` - The function to call in order to hydrate the root of your application. Defaults\n     to `js/ReactDOM.hydrate`.\n   * `:root-class` - The component class that will be the root. This can be specified just with `mount!`, but\n   giving it here allows you to do a number of tasks against the app before it is actually mounted. You can also use `app/set-root!`.\"\n  ([] (fulcro-app {}))\n  ([{:keys [props-middleware\n            global-eql-transform\n            global-error-action\n            default-result-action!\n            optimized-render!\n            render-root!\n            hydrate-root!\n            render-middleware\n            initial-db\n            client-did-mount\n            remote-error?\n            remotes\n            query-transform-default\n            load-marker-default\n            load-mutation\n            root-class\n            shared\n            shared-fn] :as options}]\n   {::id           (tempid/uuid)\n    ::state-atom   (atom (or initial-db {}))\n    ::config       {:load-marker-default     load-marker-default\n                    :client-did-mount        (or client-did-mount (:started-callback options))\n                    :query-transform-default query-transform-default\n                    :load-mutation           load-mutation}\n    ::algorithms   {:com.fulcrologic.fulcro.algorithm/tx!                    default-tx!\n                    :com.fulcrologic.fulcro.algorithm/optimized-render!      (or optimized-render! ident-optimized/render!)\n                    :com.fulcrologic.fulcro.algorithm/shared-fn              (or shared-fn (constantly {}))\n                    :com.fulcrologic.fulcro.algorithm/render-root!           render-root!\n                    :com.fulcrologic.fulcro.algorithm/hydrate-root!          hydrate-root!\n                    :com.fulcrologic.fulcro.algorithm/render!                render!\n                    :com.fulcrologic.fulcro.algorithm/remote-error?          (or remote-error? default-remote-error?)\n                    :com.fulcrologic.fulcro.algorithm/global-error-action    global-error-action\n                    :com.fulcrologic.fulcro.algorithm/merge*                 merge/merge*\n                    :com.fulcrologic.fulcro.algorithm/default-result-action! (or default-result-action! mut/default-result-action!)\n                    :com.fulcrologic.fulcro.algorithm/global-eql-transform   (or global-eql-transform default-global-eql-transform)\n                    :com.fulcrologic.fulcro.algorithm/index-root!            indexing/index-root!\n                    :com.fulcrologic.fulcro.algorithm/index-component!       indexing/index-component!\n                    :com.fulcrologic.fulcro.algorithm/drop-component!        indexing/drop-component!\n                    :com.fulcrologic.fulcro.algorithm/props-middleware       props-middleware\n                    :com.fulcrologic.fulcro.algorithm/render-middleware      render-middleware\n                    :com.fulcrologic.fulcro.algorithm/schedule-render!       schedule-render!}\n    ::runtime-atom (atom\n                     {::app-root                        nil\n                      ::mount-node                      nil\n                      ::root-class                      root-class\n                      ::root-factory                    nil\n                      ::basis-t                         1\n                      ::last-rendered-state             {}\n\n                      ::static-shared-props             shared\n                      ::shared-props                    {}\n\n                      ::remotes                         (or remotes\n                                                          {:remote {:transmit! (fn [{::txn/keys [result-handler]}]\n                                                                                 (log/fatal \"Remote requested, but no remote defined.\")\n                                                                                 (result-handler {:status-code 418 :body {}}))}})\n                      ::indexes                         {:ident->components {}}\n                      ::mutate                          mut/mutate\n                      ::txn/activation-scheduled?       false\n                      ::txn/queue-processing-scheduled? false\n                      ::txn/sends-scheduled?            false\n                      ::txn/submission-queue            []\n                      ::txn/active-queue                []\n                      ::txn/send-queues                 {}})}))\n\n(>defn fulcro-app?\n  \"Returns true if the given `x` is a Fulcro application.\"\n  [x]\n  [any? => boolean?]\n  (boolean\n    (and (map? x) (contains? x ::state-atom) (contains? x ::runtime-atom))))\n\n(>defn mounted?\n  \"Is the given app currently mounted on the DOM?\"\n  [{:keys [::runtime-atom]}]\n  [::app => boolean?]\n  (-> runtime-atom deref ::app-root boolean))\n\n(defn initialize-state!\n  \"Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state.\"\n  [app root]\n  (let [initial-db   (-> app ::state-atom deref)\n        root-query   (comp/get-query root initial-db)\n        initial-tree (comp/get-initial-state root)\n        db-from-ui   (if root-query\n                       (-> (fnorm/tree->db root-query initial-tree true (merge/pre-merge-transform initial-tree))\n                         (merge/merge-alternate-union-elements root))\n                       initial-tree)\n        db           (util/deep-merge initial-db db-from-ui)]\n    (reset! (::state-atom app) db)))\n\n(defn mount!\n  \"Mount the app.  If called on an already-mounted app this will have the effect of re-installing the root node so that\n  hot code reload will refresh the UI (useful for development).\n\n  - `app`  The Fulcro app\n  - `root`  The Root UI component\n  - `node` The (string) ID or DOM node on which to mount.\n  - `options` An optional map with additional mount options.\n\n\n  `options` can include:\n\n  - `:initialize-state?` (default true) - If NOT mounted already: Pulls the initial state tree from root component,\n  normalizes it, and installs it as the application's state.  If there was data supplied as an initial-db, then this\n  new initial state will be *merged* with that initial-db.\n  - `:hydrate?` (default false) - Indicates that the DOM will already contain content from the\n    server that should be attached instead of overwritten. See ReactDOM.hydrate.\n  \"\n  ([app root node]\n   (mount! app root node {:initialize-state? true}))\n  ([app root node {:keys [initialize-state? hydrate?]}]\n   #?(:cljs\n      (let [initialize-state? (if (boolean? initialize-state?) initialize-state? true)\n            reset-mountpoint! (fn []\n                                (let [dom-node     (if (string? node) (gdom/getElement node) node)\n                                      root-factory (comp/factory root)]\n                                  (if (nil? dom-node)\n                                    (log/error \"Mount cannot find DOM node\" node \"to mount\" (comp/class->registry-key root))\n                                    (do\n                                      (swap! (::runtime-atom app) assoc\n                                        ::mount-node dom-node\n                                        ::root-factory root-factory\n                                        ::root-class root)\n                                      (update-shared! app)\n                                      (indexing/index-root! app)\n                                      (schedule-render! app {:force-root? true\n                                                             :hydrate?    hydrate?})))))]\n        (if (mounted? app)\n          (reset-mountpoint!)\n          (do\n            (inspect/app-started! app)\n            (when initialize-state?\n              (initialize-state! app root))\n            (reset-mountpoint!)\n            (when-let [cdm (-> app ::config :client-did-mount)]\n              (cdm app))))))))\n\n(defn app-root\n  \"Returns the current app root, if mounted.\"\n  [app]\n  (-> app ::runtime-atom deref ::app-root))\n\n(defn root-class\n  \"Returns the current app root class, if mounted.\"\n  [app]\n  (-> app ::runtime-atom deref ::root-class))\n\n(defn force-root-render!\n  \"Force a re-render of the root. Runs a root query, disables shouldComponentUpdate, and renders the root component.\n   This effectively forces React to do a full VDOM diff. Useful for things like UI refresh on hot code reload and\n   changing locales where there are no real data changes, but the UI still needs to refresh.\n\n   Argument can be anything that any->reconciler accepts.\n\n   WARNING: This disables all Fulcro rendering optimizations, so it is much slower than other ways of refreshing the app.\n   Use `schedule-render!` to request a normal optimized render.\"\n  [app-ish]\n  (when-let [app (comp/any->app app-ish)]\n    (binding [comp/*blindly-render* true]\n      (render! app {:force-root? true}))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::txn/keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::txn/abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (log/debug \"Aborting an ACTIVE network request.\" abort-id)\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (log/debug \"Aborting a QUEUED network request.\" abort-id)\n                         (result-handler {:status-text \"Cancelled\" ::txn/aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support!\")\n      send-queue)))\n\n(defn abort!\n  \"Attempt to abort the send queue entries with the given abort ID.  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  \"\n  [app-ish abort-id]\n  (let [{::keys [runtime-atom]} (comp/any->app app-ish)\n        runtime-state   @runtime-atom\n        {::keys     [remotes]\n         ::txn/keys [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn set-root!\n  \"Set a root class to use on the app. Doing so allows much of the API to work before mounting the app.\"\n  ([app root {:keys [initialize-state?]}]\n   (swap! (::runtime-atom app) assoc ::root-class root)\n   (when initialize-state?\n     (initialize-state! app root))))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAyBA;;;AAAA,AAAOA,AAEJC;AAFH,AAIE,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAmBC;;AAEzB;;;AAAA,AAAOC,AAEJC;AAFH,AAIE,AAAMH,AAAI,AAACI,AAAcD;AAAzB,AACE,AAAA,AAAA,AAAIH,AAAiBC;;AAEzB;;;;AAAA,AAAOI,AAGJL;AAHH,AAKE,AAAA,AAACM,AAAM,AAAA,AAAgBN,AAAKO,AAAiBC;;AAE/C;;;;;AAAA,AAAAC,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAI8BV;AAJ9B,AAAAc,AAAAJ,AAAA,AAIYM;AAJZ,AAME,AAAA,AACE,AAAAE,AAAqB,AAAA,AAACE,AAAiBpB;AAAvC,AAAA,AAAAkB;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAME,AAAW,AAAA,AAAA,AAAA,AAAA,AAAIrB,AAAmBC;AAClCqB,AAAW,AAACpB,AAAcF;AAC1BuB,AAAW,AAAA,AAAA,AAAA,AAAA,AAAIvB,AAAmBC;AAClCuB,AAAW,AAACC,AAAeF,AAAWD;AACtCI,AAAW,AAACC,AAAaH,AAAMF,AAAMA;AAJ3C,AAKE,AAAA,AAAChB,AAAMU,AAAaY,AAAqB,AAACC,AAAMR,AAAO,AAACF,AAAAA,AAAAA,AAAUO,AAAAA;;AANtE;;AADF,AAAAT,AAQ2Ca;AAR3C,AASI,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAWH;;AAAX,AAAA,AAAA;;AAEN;;;;;;;;;AAAA,AAAOI,AAQJlC;AARH,AAUE,AAAAmC,AAAyCnC;AAAzCmC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAA,AAAArB,AAAAqB,AAAA,AAAenB;AAAf,AAAAF,AAAAqB,AAAA,AAA4BE;AAA5BD,AAAA,AAAAnC,AACqCe;AADrCoB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AACeb;AADf,AAAAT,AAAAsB,AAAA,AAC0BE;AAD1B,AAEE,AAAA,AAAAC,AAAQ,AAAA,AAAAtC,AAACwB,AAAeF,AAAYc;AAApC;;AAEE,AAAA,AAAApC,AAAMuC,AAAiBH;AACjBI,AAAgB,AAAA,AAAA,AAAIzB,AAAaf;AACjCyC,AAAgB,AAAA,AAAaJ;AAC7BK,AAAgB,AAACC,AAAYH,AAAgBC;AAC7CG,AAAgB,AAACD,AAAYJ,AAAUE;AAJ7C,AAKE,AAACI,AAAKH,AAASE;;;AAEvB,AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;AAAA,AAAAE,AAAOE;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOD,AAYHjD;AAZJ,AAcG,AAAA,AAAA,AAAA,AAACqD,AAAQrD;;;AAdZ,AAAA,AAAA,AAAAmD,AAAOF,AAeHjD;AAfJ,AAAA,AAAAoD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAAC,AAAAuC,AAAAA;AAAAA,AAeiCG;AAfjC,AAAAzC,AAAAsC,AAAA,AAegBE;AAfhB,AAiBG,AAACjD,AAAML;;AACP,AAAAwD,AAA4CxD;AAA5CwD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7C,AAAA,AAAA6C,AAAA,AAAA,AAAA,AAAA,AAAA5C,AAAAC,AAAA2C,AAAAA;AAAAxC,AAAA,AAAAF,AAAA0C,AAAA;AAAAnB,AAAA,AAAAvB,AAAA0C,AAAA;AACMC,AAAoB,AAAA,AAACrC,AAAiBpB;AACtC0D,AAAoB,AAAA,AAAAzD,AAAA,AAACa,AAAKE;AAC1B2C,AAAoB,AAACzB,AAAoBlC;AAH/C,AAIE,AAAA4D,AAAUQ;AAAVP,AACUQ;AADVP,AAEUQ;AAFVP,AAGUQ;AAHVP,AAAiC,AAACjE,AAAQC;AAA1CiE,AACiCjE;AADjCkE,AAEiCR;AAFjCS,AAAA,AAAAlE,AAGkCoC;AAHlC,AAAA,AAAA2B,AAAUI;;AAAV,AAAAH,AACUI;;AADV,AAAAH,AAEUI;;AAFV,AAAAH,AAGUI;;AAHV,AAAA,AAIE,AAAM,AAAAC,AAAIlB;AAAJ,AAAA,AAAAkB;AAAAA;;AAAgBb;;;AAAtB,AACE,AAAC5C,AAAef;;AADlB;;AAEA,AAAAyE,AAASzE;AAAT0E,AAAa,AAAA,AAAA,AAAC7C,AAAM0B,AAA8BI;AAAlD,AAAA,AAAAc,AAAAC,AAAAD,AAAAC,AAACjB,AAAAA,AAAAA;AANH,AAAA,AAAAM,AAGUQ;;AAHV,AAAAT,AAEUQ;;AAFV,AAAAT,AACUQ;;AADV,AAAAT,AAAUQ;;AAQV,AAAA,AAAA,AAAAnE,AAACK,AAAMU,AAAaY,AAA6BS;;AAEjD,AAAMsC,AAAiB,AAACC,AAAI,AAAA,AAAA,AAAA3E,AAAiBe;AACvC6D,AAAiB,AAACD,AAAI,AAAA,AAAA,AAAA3E,AAAee;AAD3C,AAKE,AAAI,AAAK6D,AAASF;AAChB,AACE,AAAA,AAAA,AAACrE,AAAMU,AAAaY;;AACpB,AAACkD,AAAAA,AAAAA,AAAiB9E,AAAAA;;AACpB,AAAA,AAAA,AAAA,AAAA,AAAC+E,AAAM/D,AAAaY;;;;AAzC7B,AAAA,AAAA,AAAOqB;;AAAP,AA6CA,AAAA;;;;AAAA,AAAAF,AAAM+B;AAAN,AAAA,AAAAE,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAF,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA5B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM4B,AAEF9E;AAFJ,AAGG,AAAA,AAAA,AAAA,AAACiF,AAAiBjF;;;AAHrB,AAAA,AAAA,AAAM8E,AAIF9E,AAAIuD;AAJR,AAKG,AAAA,AAAA,AAAC2B,AAA0BlF;AAA3B,AAAoD,AAACqD,AAAQrD,AAAIuD;;;;AALpE,AAAA,AAAA,AAAMuB;;AAAN,AAOA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA/B,AAAMqC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMkC,AA6BFpF,AAAIuF;AA7BR,AAAA,AAAA,AAAA,AAAA,AA8BmBC;;AAChB,AAAA,AAAA,AAAA,AAACC,AAAYzF,AAAIuF;;;AA/BpB,AAAA,AAAA,AAAAF,AAAMD,AAgC+BG,AAAGhC;AAhCxC,AAAA,AAAA+B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3E,AAAA,AAAA2E,AAAA,AAAA,AAAA,AAAA,AAAA1E,AAAAC,AAAAyE,AAAAA;AAAAA,AAgCgCtF;AAhChCgB,AAAA,AAAAF,AAAAwE,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiCmEE;;AAChE,AAACE,AAAyB1F;;AAC1B,AAAA2F,AAAqD,AAAA,AAAA,AAAA,AAAC9D,AAA0B0B;AAAhFoC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhF,AAAA,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAA/E,AAAAC,AAAA8E,AAAAA;AAAAA,AAA4CpC;AAA5C,AAAAzC,AAAA6E,AAAA,AAAcC;AAAd,AAAA9E,AAAA6E,AAAA,AAAsBE;AAAtB,AAAA/E,AAAA6E,AAAA,AAAmCG;AAC7BC,AAAgB,AAAA,AAACC,AAAS,AAAA,AAACE;AAADD;AAAA,AAAS,AAAI,AAAAA,AAAAE,AAAa,AAAAF,AAACG;;AAAeb;AACpEc,AAAgB,AAACC,AAAYf,AAAGhC;AAChCgD,AAAgB;AAAKC,AAAEC;AAAP,AAAc,AAACT,AAAK,AAACU,AAAIF,AAAGC;;;AAC5Cb,AAAgB,AAAAe,AAAQ,AAACD,AAAId;AAAbe,AAAA,AAAAA,AACE,AAAC/B,AAAImB,AAAiB,AAAAY,AAACX,AAAKD;AAD9B,AAAA,AAEED;AAAI,AAAAa,AAACC,AAAKd;;AAFZa;;;AAJtB,AAOE,AAACE,AAAM7F,AAAa;AAAK8F;AAAL,AAAQ,AAAAC,AAAQ,AAAA,AAACC,AAAOF,AAAyB,AAAA,AAACG,AAAKC,AAASb;AAAxDU,AAAA,AAAAA,AAEE,AAACnC,AAAIgB,AAAS,AAAAmB,AAAA,AAACC,AAAoBT,AAAWX;AAFhD,AAAA,AAGE,AAAChB,AAAIiB;AAAc,AAAAkB,AAAA,AAACC,AAAsBT,AAAWV;;AAHvDkB;;;;;AAI5B,AAAA,AAAUV;;;AA9Cf,AAAA,AAAA,AAAMjB;;AAAN,AAgDA;;;;AAAA,AAAA+B,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzG,AAAA,AAAAyG,AAAA,AAAA,AAAA,AAAA,AAAAxG,AAAAC,AAAAuG,AAAAA;AAAA,AAAAtG,AAAAsG,AAAA,AAGWE;AAHX,AAKE,AAAA,AAACxE,AAASwE;;AAEZ;;;;;;;;;;AAAA,AAAMC,AASHC;AATH,AAUE,AAAMC,AAAa,AAAKC;AAAL,AAAQ,AAAAC,AAAK,AAAAxB,AAAUuB;AAAf,AAAA,AAAAC;AAAkB,AAACC,AAAUF;;AAA7BC;;;AAA3B,AACE,AAACE,AAAmBL,AAAI;AAAKE;AAAL,AACE,AAAAxG,AAAc,AAAA6G,AAAQL;AAAR,AAAA,AAAA,AAAAK,AAAA;AAAA;;AAAA,AAAAA,AAAUN;;;AAAxB,AAAA,AAAAvG;AAAA,AAAA,AAAAA,AAAW4G;AAAX,AACE,AACE,AAAA,AAACE,AAAEN,AACH,AACE,AAASI,AACT,AAAA,AAACE,AAAOF;;AALd;;;;;AAO9B,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA/E,AAAMmF;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhF,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMgF;AAAN,AAgDM,AAAA,AAACG;;;AAhDP,AAAA,AAAA,AAAAF,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzH,AAAA,AAAAyH,AAAA,AAAA,AAAA,AAAA,AAAAxH,AAAAC,AAAAuH,AAAAA;AAAAA,AAkE2B7E;AAlE3B,AAAAzC,AAAAsH,AAAA,AAoDYK;AApDZ,AAAA3H,AAAAsH,AAAA,AAmDYI;AAnDZ,AAAA1H,AAAAsH,AAAA,AAwDYS;AAxDZ,AAAA/H,AAAAsH,AAAA,AA0DYW;AA1DZ,AAAAjI,AAAAsH,AAAA,AAyDYU;AAzDZ,AAAAhI,AAAAsH,AAAA,AA6DYc;AA7DZ,AAAApI,AAAAsH,AAAA,AAiDYE;AAjDZ,AAAAxH,AAAAsH,AAAA,AA+DYgB;AA/DZ,AAAAtI,AAAAsH,AAAA,AA4DYa;AA5DZ,AAAAnI,AAAAsH,AAAA,AAuDYQ;AAvDZ,AAAA9H,AAAAsH,AAAA,AAkDYG;AAlDZ,AAAAzH,AAAAsH,AAAA,AAkEYjH;AAlEZ,AAAAL,AAAAsH,AAAA,AA8DYe;AA9DZ,AAAArI,AAAAsH,AAAA,AAsDYO;AAtDZ,AAAA7H,AAAAsH,AAAA,AAqDYM;AArDZ,AAAA5H,AAAAsH,AAAA,AAgEY7G;AAhEZ,AAAAT,AAAAsH,AAAA,AA2DYY;AA3DZ,AAAAlI,AAAAsH,AAAA,AAiEY/G;AAjEZ,AAAA,AAAA,AAAA,AAmEmB,AAACgI,AACD,AAACC,AAAK,AAAA9E,AAAIsE;AAAJ,AAAA,AAAAtE;AAAAA;;AAAA;;AApEzB,AAAA,AAAA,AAAA,AAqE6C2E,AACA,AAAA3E,AAAIuE;AAAJ,AAAA,AAAAvE;AAAAA;;AAAqB,AAAA,AAAmBjB;;AAtErF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAuE6C2F,AACAE,AAGgC,AAAA5E,AAAIrD,AAGJ8B;AAHA,AAAA,AAAAuB;AAAAA;;AAAc,AAAA,AAACgF;;AAOf,AAAAhF,AAAIiE;AAAJ,AAAA,AAAAjE;AAAAA;;AAA2BkF;;AAT3BtE,AAUA,AAAAZ,AAAI+D,AAIJD,AAEAxD;AANA,AAAA,AAAAN;AAAAA;;AAAyB+C;;AANzBqB,AAEA,AAAApE,AAAIwE,AAMJY,AACAC;AAPA,AAAA,AAAArF;AAAAA;;AAAkB6C;;AALlB,AAAA7C,AAAIkE,AAEJC,AAIAH;AANA,AAAA,AAAAhE;AAAAA;;AAAsB+E;;AA1EnG,AAiF6EE,AAGAE,AAIAd,AAE1D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACS,AAGoC/H,AAKAF,AAGA,AAAAmD,AAAIyE,AAKJiB;AALA,AAAA,AAAA1F;AAAAA;;AAAA,AAAA,AAAA,AAAA,AACuB;AAAAsF;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApJ,AAAA,AAAAoJ,AAAA,AAAA,AAAA,AAAA,AAAAnJ,AAAAC,AAAAkJ,AAAAA;AAAA,AAAAjJ,AAAAiJ,AAAA,AAAkBC;AAAlB,AACE,AAAAjI,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;AACA,AAAAgI,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACD,AAAAA,AAAAA;;;;AAd/D;;;AA1FnB,AAAA,AAAA,AAAM9B;;AAAN,AAkHA;;;AAAA,AAAOiC,AAEJC;AAFH,AAIE,AAACC,AACC,AAAK,AAACC,AAAKF,AAAG,AAAA,AAACG,AAAUH,AAAgB,AAAA,AAACG,AAAUH;;AAExD;;;AAAA,AAAAI,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9J,AAAA,AAAA8J,AAAA,AAAA,AAAA,AAAA,AAAA7J,AAAAC,AAAA4J,AAAAA;AAAAzJ,AAAA,AAAAF,AAAA2J,AAAA;AAAA,AAIE,AAAA,AAAA,AAAA,AAAIzJ,AAAaf,AAAiBoK;;AAEpC;;;;;AAAA,AAAMM,AAIH3K,AAAI4K;AAJP,AAKE,AAAM9B,AAAa,AAAA,AAAA,AAAI9I,AAAiBC;AAClC4K,AAAa,AAACpJ,AAAemJ,AAAK9B;AAClCgC,AAAa,AAACC,AAAuBH;AACrCI,AAAa,AAAIH,AACE,AAAA,AAACI,AAAeJ,AAAWC,AAAkB,AAACI,AAA0BJ,AAC1E,AAACK,AAAqCP,AACxCE;AACfM,AAAa,AAACC,AAAgBvC,AAAWkC;AAP/C,AAQE,AAACM,AAAO,AAAA,AAActL,AAAKoL;;AAE/B,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAArI,AAAMyI;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAtI,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMsI,AAkBFxL,AAAI4K,AAAKvE;AAlBb,AAmBG,AAAA,AAAA,AAAA,AAACsF,AAAO3L,AAAI4K,AAAKvE;;;AAnBpB,AAAA,AAAA,AAAAoF,AAAMD,AAoBFxL,AAAI4K,AAAKvE;AApBb,AAAA,AAAAqF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/K,AAAA,AAAA+K,AAAA,AAAA,AAAA,AAAA,AAAA9K,AAAAC,AAAA6K,AAAAA;AAAA,AAAA5K,AAAA4K,AAAA,AAoB0BE;AApB1B,AAAA9K,AAAA4K,AAAA,AAoB4CG;AApB5C,AAsBM,AAAMD,AAAkB,AAAA,AAAI,AAACE,AAASF,AAAmBA;AACnDG,AAAkB;;AAAA,AACE,AAAMC,AAAa,AAAI,AAAS3F,AAAM,AAAC4F,AAAgB5F,AAAMA;AACvD6F,AAAa,AAACC,AAAavB;AADjC,AAEE,AAAI,AAAA,AAAMoB;AACR,AAAAjK,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAwCoE,AAAgB,AAAC+F,AAAyBxB;;AAAlF,AAAA,AAAA;;AACA,AACE,AAAA,AAAA,AAAA,AAAC7F,AAAM,AAAA,AAAgB/E,AAAK4B,AACboK,AACEE,AACFtB;;AACf,AAAC7J,AAAef;;AAChB,AAAC2J,AAAqB3J;;AACtB,AAAA,AAAA,AAAA,AAAA,AAACiF,AAAiBjF,AACkB6L;;;;AAdpE,AAeE,AAAI,AAACnB,AAAS1K;AACZ,AAAC+L;;AACD,AACE,AAACM,AAAqBrM;;AACtB,AAAM4L;AAAN,AACE,AAACjB,AAAkB3K,AAAI4K;;AADzB;;AAEA,AAACmB;;AACD,AAAA7K,AAAe,AAAA,AAAA,AAAA,AAAIlB;AAAnB,AAAA,AAAAkB;AAAA,AAAA,AAAAA,AAAWoL;AAAX,AACE,AAACA,AAAAA,AAAAA,AAAItM,AAAAA;;AADP;;;;;AA5CZ,AAAA,AAAA,AAAMwL;;AAAN,AA+CA;;;AAAA,AAAMe,AAEHvM;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAmBC;;AAEzB;;;AAAA,AAAMuM,AAEHxM;AAFH,AAGE,AAAA,AAAA,AAAA,AAAA,AAAIA,AAAmBC;;AAEzB;;;;;;;;;;AAAA,AAAMwM,AASHC;AATH,AAUE,AAAAxL,AAAe,AAACd,AAAcsM;AAA9B,AAAA,AAAAxL;AAAA,AAAA,AAAAA,AAAWlB;AAAX,AACE,AAAA2M,AAAUE;AAAVD,AAAA;AAAA,AAAA,AAAAA,AAAUC;;AAAV,AAAA,AACE,AAAA,AAAA,AAAA,AAACxJ,AAAQrD;AADX,AAAA,AAAA2M,AAAUE;;AADZ;;;AAIF;;;;;;;;AAAA,AAAAC,AAAOE,AAOwBG,AAAWC;AAP1C,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApM,AAAA,AAAAoM,AAAA,AAAA,AAAA,AAAA,AAAAnM,AAAAC,AAAAkM,AAAAA;AAAAA,AAOuBG;AAPvB,AAAApM,AAAAiM,AAAA,AAOWE;AAPX,AAQE,AAAIA;AACF,AAACI,AACC;AAAAC,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5M,AAAA,AAAA4M,AAAA,AAAA,AAAA,AAAA,AAAA3M,AAAAC,AAAA0M,AAAAA;AAAAA,AAA6DG;AAA7D,AAAA5M,AAAAyM,AAAA,AAAyBE;AAAzB,AAAA3M,AAAAyM,AAAA,AAAiChK;AAAjC,AAAAzC,AAAAyM,AAAA,AAAyCvD;AAAzC,AACE,AAAM2D,AAAI,AAAAnJ,AAAI,AAAA,AAAIjB;AAAR,AAAA,AAAAiB;AAAAA;;AAAgC,AAAA,AAAIjB;;;AAA9C,AACE,AACE,AAACT,AAAK6K,AAAIP;AAAU,AACE,AAACxG,AAAK4G,AAAOE;;AAFrC,AAGED;AAAQ,AACE,AAAA1L,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAiDmL;;AAAjD,AAAA,AAAA;;AACA,AAACH,AAAAA,AAAAA,AAAOC,AAAAA,AAAOE,AAAAA;;AACfI;;AANZ,AAOa,AACE,AAAAzL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAgDmL;;AAAhD,AAAA,AAAA;;AACA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC5D,AAAAA,AAAAA;;AACDwD;;;;;AAbrB,AAeEL;;AACF,AACE,AAAApL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA;;AACAkL;;;AAEN;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAMU,AAqBHnB,AAAQU;AArBX,AAsBE,AAAAU,AAA8B,AAAC1N,AAAcsM;AAA7CoB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnN,AAAA,AAAAmN,AAAA,AAAA,AAAA,AAAA,AAAAlN,AAAAC,AAAAiN,AAAAA;AAAA,AAAAhN,AAAAgN,AAAA,AAAe9M;AAAf,AAAAf,AACM+N,AAAiBhN;AADvB+M,AAGiCC;AAHjCD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApN,AAAA,AAAAoN,AAAA,AAAA,AAAA,AAAA,AAAAnN,AAAAC,AAAAkN,AAAAA;AAAA,AAAAjN,AAAAiN,AAAA,AAEmB9E;AAFnB,AAAAnI,AAAAiN,AAAA,AAGmBE;AACbC,AAAgB,AAACC,AAAKF;AACtBG,AAAgB,AAACf,AACC;AAAKG,AAAOa;AAAZ,AACE,AAACC,AAAMd,AAAOa,AAAY,AAACrB,AACC,AAAClM,AAAImI,AAAQoF,AACb,AAACvN,AAAImN,AAAYI,AAAajB;;AAJ9D,AAMEc;AAXxB,AAYE,AAAA,AAAC5N,AAAMU,AAAaY,AAAoBwM;;AAE5C;;;AAAA,AAAAG,AAAME,AAEFzO,AAAI4K;AAFR,AAAA,AAAA4D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7N,AAAA,AAAA6N,AAAA,AAAA,AAAA,AAAA,AAAA5N,AAAAC,AAAA2N,AAAAA;AAAA,AAAA1N,AAAA0N,AAAA,AAEqB5C;AAFrB,AAGG,AAAA,AAACtL,AAAM,AAAA,AAAgBN,AAAK4B,AAAmBgJ;;AAC/C,AAAMgB;AAAN,AACE,AAACjB,AAAkB3K,AAAI4K;;AADzB","names",["com.fulcrologic.fulcro.application/basis-t","app","cljs.core/deref","com.fulcrologic.fulcro.application/current-state","app-or-component","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.application/tick!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core/inc","p__80196","map__80197","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.application/update-shared!","runtime-atom","e80199","temp__5753__auto__","shared-fn","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","shared","state","root-class","query","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","v","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","cljs.core/assoc","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","e","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.application/root-props-changed?","map__80206","map__80207","state-atom","indexes","cljs.core/not","state-map","prior-state-map","root-props","root-old","cljs.core/select-keys","root-new","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","var_args","G__80216","com.fulcrologic.fulcro.application/render!","js/Error","p__80220","map__80221","com.fulcrologic.fulcro.application.render_BANG_.cljs$core$IFn$_invoke$arity$2","force-root?","options","map__80225","render!","shared-props","root-props-changed?","*denormalize-time*-orig-val__80228","*app*-orig-val__80229","*shared*-orig-val__80230","*query-state*-orig-val__80231","*denormalize-time*-temp-val__80232","*app*-temp-val__80233","*shared*-temp-val__80234","*query-state*-temp-val__80235","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components/*query-state*","or__4131__auto__","G__80237","G__80238","limited-refresh?","cljs.core/seq","refresh?","com.fulcrologic.fulcro.application/schedule-render!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__80244","com.fulcrologic.fulcro.application.schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.scheduling/schedule-animation!","G__80253","com.fulcrologic.fulcro.application/default-tx!","p__80256","map__80257","tx","ghostwheel.core/=>","com.fulcrologic.fulcro.application.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1","map__80260","refresh","only-refresh","ref","follow-on-reads","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__80250#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/Keyword","edn-query-language.core/ident?","node","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2","accumulate","r","items","cljs.core/set","G__80265","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","G__80266","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","p__80268","map__80270","com.fulcrologic.fulcro.application/default-remote-error?","status-code","com.fulcrologic.fulcro.application/default-global-eql-transform","ast","kw-namespace","k","and__4120__auto__","cljs.core/namespace","com.fulcrologic.fulcro.data-fetch/elide-ast-nodes","ns","G__80274","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__80280","com.fulcrologic.fulcro.application/fulcro-app","p__80281","map__80282","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1","props-middleware","global-eql-transform","global-error-action","default-result-action!","optimized-render!","render-root!","hydrate-root!","render-middleware","initial-db","client-did-mount","remote-error?","remotes","query-transform-default","load-marker-default","load-mutation","com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.rendering.ident-optimized-render/render!","cljs.core/constantly","com.fulcrologic.fulcro.algorithms.merge/merge*","com.fulcrologic.fulcro.mutations/default-result-action!","com.fulcrologic.fulcro.algorithms.indexing/index-root!","com.fulcrologic.fulcro.algorithms.indexing/index-component!","com.fulcrologic.fulcro.algorithms.indexing/drop-component!","p__80289","map__80290","result-handler","G__80292","com.fulcrologic.fulcro.mutations/mutate","com.fulcrologic.fulcro.application/fulcro-app?","x","cljs.core/boolean","cljs.core/map?","cljs.core/contains?","p__80296","map__80297","com.fulcrologic.fulcro.application/mounted?","com.fulcrologic.fulcro.application/initialize-state!","root","root-query","initial-tree","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$1","db-from-ui","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.merge/merge-alternate-union-elements","db","com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/reset!","G__80307","com.fulcrologic.fulcro.application/mount!","p__80311","map__80312","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$4","initialize-state?","hydrate?","cljs.core/boolean?","reset-mountpoint!","dom-node","goog.dom/getElement","root-factory","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","cdm","com.fulcrologic.fulcro.application/app-root","com.fulcrologic.fulcro.application/root-class","com.fulcrologic.fulcro.application/force-root-render!","app-ish","*blindly-render*-orig-val__80327","*blindly-render*-temp-val__80328","com.fulcrologic.fulcro.components/*blindly-render*","p__80337","map__80340","com.fulcrologic.fulcro.application/abort-elements!","abort!","remote","send-queue","abort-id","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__80351","map__80353","result","active?","send-node","aid","G__80362","com.fulcrologic.fulcro.application/abort!","map__80364","map__80365","runtime-state","send-queues","remote-names","cljs.core/keys","new-send-queues","remote-name","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__80370","map__80371","com.fulcrologic.fulcro.application/set-root!"]]],"~:cache-keys",["~#cmap",[["^25","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^1>","^C","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^25","com/fulcrologic/fulcro/algorithms/normalize.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1C","^Y","^13","^15"]]],["^25","goog/dom/tagname.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.dom.HtmlElement"]]],["^25","goog/async/freelist.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cljs/core/async/impl/ioc_helpers.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$cljs.core.async.impl.protocols"]]],["^25","goog/labs/useragent/platform.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.labs.userAgent.util","~$goog.string"]]],["^25","expound/util.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","ghostwheel/reporting.cljc"],[1630228119207,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","^E","^A","~$expound.alpha","~$clojure.string","~$ghostwheel.logging"]]],["^25","cljs/core/async.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2J","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^25","goog/timer/timer.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.Promise","~$goog.events.EventTarget"]]],["^25","orchestra_cljs/spec/test.cljs"],[1630228119080,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1=","~$goog.userAgent.product","^2N","~$cljs.stacktrace","^I","^?","^G"]]],["^25","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^13"]]],["^25","cljs/spec/gen/alpha.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$goog.Uri"]]],["^25","com/fulcrologic/fulcro/algorithms/indexing.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^15","^1C","^17","^N","~$clojure.set","^Y","~$taoensso.encore","^13"]]],["^25","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^2L"]]],["^25","goog/math/math.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","~$goog.asserts"]]],["^25","goog/string/stringformat.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2L"]]],["^25","cljs/env.cljc"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/events/eventtype.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^25","goog/labs/useragent/browser.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^2K","^1=","~$goog.string.internal"]]],["^25","goog/html/safeurl.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^34"]]],["^25","goog/array/array.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^2B",["^ ","^2C",3,"^2D",["^P",[2]],"^2E",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^25","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^13","^Y","^1=","^?"]]],["^25","expound/problems.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$expound.paths","^?","^2F","^2N","~$expound.printer","~$expound.ansi"]]],["^25","goog/useragent/useragent.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2K","~$goog.reflect","^2L"]]],["^25","goog/structs/prioritypool.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^25","clojure/test/check/properties.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^25","goog/async/run.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^25","com/cognitect/transit/impl/reader.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^25","clojure/test/check/generators.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^2L"]]],["^25","taoensso/encore.cljs"],[1630228119299,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^2[","~$cljs.reader","~$cljs.tools.reader.edn","^1=","^2L","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^25","goog/debug/error.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/async/workqueue.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.async.FreeList"]]],["^25","com/fulcrologic/fulcro/dom/events.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/events/events.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^32","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^25","goog/promise/resolver.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/events/browserfeature.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^33"]]],["^25","cljs/tools/reader/edn.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2L","^3S"]]],["^25","clojure/test/check/random/doubles.cljs"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$clojure.test.check.random.longs"]]],["^25","goog/structs/priorityqueue.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.structs.Heap"]]],["^25","goog/net/xhrio.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.Timer","^2U","^31","^41","^2W","~$goog.json.hybrid","~$goog.log","^3Z","^3Y","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1=","^2L","^3X","~$goog.structs.Map","~$goog.uri.utils","^33"]]],["^25","goog/promise/thenable.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","com/fulcrologic/fulcro/application.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^X","^1L","^17","^1J","^1N","^1C","^1A","^[","^1D","^1H","^11","^15","^19","^1O","^1;","^Y","^1?","^N","^1=","^Z","^13"]]],["^25","com/fulcrologic/fulcro/algorithms/transit.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$cognitect.transit","~$com.cognitect.transit","^1A"]]],["^25","goog/dom/nodetype.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","com/cognitect/transit/util.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^1="]]],["^25","cljs/pprint.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^2L","^3S"]]],["^25","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","^2[","^N","^13","^Y"]]],["^25","cljs/tools/reader.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^46","^47","^48","^45","^2U","^2L","^3S"]]],["^25","expound/alpha.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$expound.problems","^?","^2N","^2[","^2F","^3R","^2L","^3?","~$expound.util","^3@","^G"]]],["^25","clojure/test/check/rose_tree.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","clojure/test/check/impl.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^25","goog/events/eventtarget.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.Disposable","^31","^3T","~$goog.events.Event","^43","^44","^1="]]],["^25","clojure/test/check/random.cljs"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$clojure.test.check.random.doubles","^4:"]]],["^25","goog/disposable/disposable.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.disposable.IDisposable"]]],["^25","expound/ansi.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N"]]],["^25","goog/string/typedstring.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^3;","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^2B",["^ ","^2C",5,"^2D",["^P",[1,4]],"^2E",["^3<","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^25","cljs/spec/test/alpha.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1=","^2X","^2N","^2Y","^I","^?","^G"]]],["^25","shadow/js.js"],[1630228360071,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/object/object.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/dom/asserts.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31"]]],["^25","goog/structs/set.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^3X","~$goog.structs.Collection","^4A"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^3;","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^2B",["^ ","^2C",4,"^2D",["^P",[0,3]],"^2E",["^3<","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^25","cljs/stacktrace.cljc"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2L","^2N"]]],["^25","goog/math/long.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","^3D"]]],["^25","goog/events/listener.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.events.ListenableKey"]]],["^25","goog/html/trustedresourceurl.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","^37","^38","^39","^3:"]]],["^25","cljs/core/async/impl/channels.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2J","^2S","^2Q"]]],["^25","goog/events/listenermap.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","~$goog.events.Listener","^1="]]],["^25","goog/events/eventid.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","taoensso/truss.cljs"],[1630228118689,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$taoensso.truss.impl"]]],["^25","goog/string/internal.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","com/fulcrologic/fulcro/algorithms/merge.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$com.fulcrologic.fulcro.algorithms.data-targeting","^15","^X","^[","^17","^1C","^Y","^13"]]],["^25","clojure/test/check.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^3G","^3N","^3H","^3O","~$clojure.test.check.impl"]]],["^25","edn_query_language/core.cljc"],[1630228119293,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","~$clojure.test.check","^3G","~$clojure.test.check.properties"]]],["^25","goog/functions/functions.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cljs/core/async/impl/dispatch.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2Q","^3J"]]],["^25","goog/html/safestyle.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","~$goog.html.SafeUrl","^39","^3:","^34"]]],["^25","goog/dom/safe.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^4Z","^36","^39","^34"]]],["^25","expound/paths.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","^4F"]]],["^25","taoensso/truss/impl.cljs"],[1630228118689,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2["]]],["^25","clojure/walk.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/useragent/product.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^3A","^3C","^33"]]],["^25","cljs/core/async/impl/protocols.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/net/eventtype.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/structs/map.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^25","goog/net/xhriopool.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^3U","~$goog.structs.PriorityPool"]]],["^25","com/cognitect/transit/delimiters.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/html/safehtml.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","~$goog.dom.TagName","~$goog.dom.tags","^52","^53","~$goog.html.SafeStyleSheet","^4Z","^36","^37","^38","^3A","^1=","^39","^3:","^34"]]],["^25","goog/dom/tags.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^1="]]],["^25","goog/math/size.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/structs/queue.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U"]]],["^25","goog/labs/useragent/engine.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^2K","^2L"]]],["^25","com/fulcrologic/fulcro/inspect/transit.cljs"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^4C","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit"]]],["^25","com/cognitect/transit/impl/decoder.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^3M","^5:"]]],["^25","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^30"]]],["^25","cljs/reader.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1=","^49","^3Q","^3S"]]],["^25","com/fulcrologic/fulcro/mutations.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^15","~$com.fulcrologic.fulcro.dom.events","^N","^Y","^13","^30","^?","^4V","^1N","^X","^1A","^2N"]]],["^25","goog/dom/dom.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^57","~$goog.dom.safe","^51","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^1=","^2L","~$goog.string.Unicode","^33"]]],["^25","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1=","~$cljsjs.react","^Y","^?","^13","^2F","^2N","^1C","^17","^X","^2["]]],["^25","com/fulcrologic/fulcro/specs.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","^1C","^Y"]]],["^25","goog/asserts/asserts.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.debug.Error","^5@"]]],["^25","cljs/core/async/impl/buffers.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2J"]]],["^25","goog/debug/logbuffer.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.debug.LogRecord"]]],["^25","cljs/tagged_literals.cljc"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^3P"]]],["^25","goog/uri/uri.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","^2L","^3X","^4A","^4B","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^25","ghostwheel/threading_macros.cljc"],[1630228119207,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2O","~$ghostwheel.utils"]]],["^25","goog/net/errorcode.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/i18n/bidi.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^3;","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^2B",["^ ","^2C",0,"^2D",["^P",[]],"^2E",["^3<"]]],["^25","ghostwheel/logging.cljc"],[1630228119285,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^I"]]],["^25","goog/disposable/idisposable.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/promise/promise.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.Thenable","^31","^40","~$goog.async.run","^3K","^5G","~$goog.promise.Resolver"]]],["^25","cljs/core/async/impl/timers.cljs"],[1630228358733,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2J","^2P","^2S"]]],["^25","cljs/spec/alpha.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^1=","^2F","^G","^2N"]]],["^25","goog/fs/url.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/debug/logrecord.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/base.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",[]]],["^25","goog/json/hybrid.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.json"]]],["^25","goog/structs/structs.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^1="]]],["^25","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^46","^2N","~$cljs.tools.reader.impl.inspect"]]],["^25","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^N","^K"]]],["^25","cljsjs/react.cljs"],[1630228358937,"^2B",["^ ","^2C",null,"^2D",["^P",[5]],"^2E",["^1>","^C","~$module$node_modules$react$index"]]],["^25","clojure/string.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2L","^3S"]]],["^25","com/fulcrologic/fulcro/algorithms/tempid.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^13","^2F"]]],["^25","goog/structs/pool.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^4I","~$goog.structs.Queue","~$goog.structs.Set"]]],["^25","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","com/fulcrologic/fulcro/inspect/diff.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?"]]],["^3;","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^2B",["^ ","^2C",1,"^2D",["^P",[0]],"^2E",["^3<","^4Q"]]],["^25","goog/net/httpstatus.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","com/cognitect/transit/handlers.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5<","^5:","~$goog.math.Long"]]],["^25","goog/structs/heap.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^1=","~$goog.structs.Node"]]],["^25","goog/debug/entrypointregistry.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31"]]],["^25","goog/string/string.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^34"]]],["^25","com/cognitect/transit/types.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5<","~$com.cognitect.transit.eq","^5T"]]],["^25","com/fulcrologic/fulcro/algorithms/form_state.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^?","^2[","^13","^Y","^N","^1A","^19","^15"]]],["^25","goog/reflect/reflect.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^17","^X","^15"]]],["^25","goog/labs/useragent/util.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^34"]]],["^25","expound/printer.cljc"],[1630228118972,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^?","^I","^2F","^2[","^4F","^3@"]]],["^25","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2[","^?","^X","^1A","^1C","^1D","^19","^1?","^1;","^N","^Y","^30","^13"]]],["^25","com/cognitect/transit/eq.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5<"]]],["^25","goog/debug/debug.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","~$goog.debug.errorcontext","^33"]]],["^25","goog/string/stringbuffer.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/math/coordinate.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","~$goog.math"]]],["^25","goog/debug/errorcontext.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^47","^2L","^3S"]]],["^25","goog/iter/iter.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","^50","^5X"]]],["^25","goog/async/nexttick.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^41","^57","^50","^3A","^3B"]]],["^25","goog/html/uncheckedconversions.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","^51","^52","^53","^59","^4Z","^36","^39","^34"]]],["^25","com/fulcrologic/fulcro/data_fetch.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2F","^4V","^1H","^1N","^15","^19","^?","^N","^Y","^13","^X"]]],["^25","goog/debug/logger.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","~$goog.debug","~$goog.debug.LogBuffer","^5H"]]],["^25","ghostwheel/core.cljc"],[1630228119207,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^2[","^2F","^A","^4X","^3G","^4Y","^?","^E","^G","~$ghostwheel.reporting","~$ghostwheel.unghost","^5K","^2O","~$ghostwheel.threading-macros","^2M","~$cljs.analyzer.api","^2H"]]],["^25","com/cognitect/transit/caching.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5="]]],["^3;","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^2B",["^ ","^2C",2,"^2D",["^P",[]],"^2E",["^3<"]]],["^25","goog/events/event.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^4I","~$goog.events.EventId"]]],["^25","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^45","^46","^47"]]],["^25","goog/dom/htmlelement.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cljs/core.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^5T","~$goog.math.Integer","^2L","^1=","^2U","^2Z","^3S"]]],["^25","com/cognitect/transit.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5<","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^5:","^5V","^3L","^3M"]]],["^25","goog/html/safescript.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","^39","^3:"]]],["^25","clojure/test/check/random/longs.cljs"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$clojure.test.check.random.longs.bit-count-impl","^5T","^C"]]],["^25","goog/log/log.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5Y","~$goog.debug.LogManager","^5H","~$goog.debug.Logger"]]],["^25","goog/html/safestylesheet.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","^53","^1=","^39","^3:","^34"]]],["^25","goog/structs/collection.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/events/browserevent.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5Y","^32","^4J","~$goog.events.EventType","^3D","^33"]]],["^25","cljs/analyzer/api.cljc"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2G","~$cljs.analyzer"]]],["^25","goog/math/integer.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/structs/node.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/dom/browserfeature.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^33"]]],["^25","clojure/set.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/uri/utils.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^2U","^31","^2L"]]],["^25","goog/string/const.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","^3:"]]],["^25","taoensso/timbre.cljs"],[1630228119105,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^30","~$taoensso.timbre.appenders.core"]]],["^25","cljs/analyzer.cljc"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2L","^2N","^2[","^2G","~$cljs.tagged-literals","^49","^46","^3P"]]],["^25","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","~$com.fulcrologic.fulcro.rendering.keyframe-render","^17","^15","^2[","^Y","^13"]]],["^25","goog/json/json.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","goog/events/listenable.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^63"]]],["^25","com/cognitect/transit/impl/writer.js"],[1630228118604,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^5<","^3M","~$com.cognitect.transit.handlers","^5:","^5=","^5T"]]],["^25","goog/net/xmlhttpfactory.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^4G"]]],["^25","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^Y"]]],["^25","ghostwheel/unghost.cljc"],[1630228119555,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","goog/net/xmlhttp.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^31","~$goog.net.WrapperXmlHttpFactory","^4H"]]],["^25","cljs/test.cljs"],[1630228118934,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^2N","^I"]]],["^25","clojure/test/check/results.cljc"],[1630228119162,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C"]]],["^25","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],[1630228119420,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^Y","^X","^1=","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^K","^30","^13"]]],["^25","goog/net/xhrlike.js"],[1630228359392,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>"]]],["^25","cognitect/transit.cljs"],[1630228118516,"^2B",["^ ","^2C",null,"^2D",["^P",[]],"^2E",["^1>","^C","^4D","^5:","^5V","^5T"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/concurrent.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/protocols.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/test/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/reporting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/printer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/test.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/paths.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/ansi.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/exec/threadpool.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/problems.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/test.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/test/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/dispatch.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async/impl/ioc_macros.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/mutations.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",1,"^8",5,"^9",1,"^:",39],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",["^ ","^M","^N"],"^O",["^P",[]],"^Q","^R","^U",null,"^V",["^ ","^W","^X","^Y","^Y","^Z","^Z","^[","^[","^10","^11","^12","^13","^14","^15","^16","^Y","^17","^17","^18","^19","^1:","^[","^C","^C","^1;","^1;","^1<","^1=","^1>","^1>","^1=","^1=","^1?","^1?","^11","^11","^1@","^1;","^1A","^1A","^1B","^1C","^1D","^1D","^1E","^Z","^1F","^1D","^1G","^1H","^1I","^1J","^1K","^1L","^19","^19","^N","^N","^X","^X","^1L","^1L","^1M","^1N","^1O","^1O","^1H","^1H","^15","^15","^13","^13","^1N","^1N","^1P","^17","^1Q","^1O","^1J","^1J","^1R","^1A","^1C","^1C"],"^1S",["^P",["^1T"]],"~:shadow/js-access-global",["^P",["Error"]],"^1U",["^ ","^M","^N","^1V","^N","~$|","^N"],"~:defs",["^ ","~$force-root-render!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",411,"^8",7,"^9",411,"^:",25,"~:arglists",["^1Y",["~$quote",["^1Y",[["~$app-ish"]]]]],"~:doc","Force a re-render of the root. Runs a root query, disables shouldComponentUpdate, and renders the root component.\n   This effectively forces React to do a full VDOM diff. Useful for things like UI refresh on hot code reload and\n   changing locales where there are no real data changes, but the UI still needs to refresh.\n\n   Argument can be anything that any->reconciler accepts.\n\n   WARNING: This disables all Fulcro rendering optimizations, so it is much slower than other ways of refreshing the app.\n   Use `schedule-render!` to request a normal optimized render."],"^Q","~$com.fulcrologic.fulcro.application/force-root-render!","^6","com/fulcrologic/fulcro/application.cljc","^:",25,"~:method-params",["^1Y",[["^8L"]]],"~:protocol-impl",null,"~:arglists-meta",["^1Y",[null,null]],"^8",1,"~:variadic?",false,"^7",411,"~:ret-tag",["^P",[null,"~$clj-nil"]],"^9",411,"~:max-fixed-arity",1,"~:fn-var",true,"^8J",["^1Y",["^8K",["^1Y",[["^8L"]]]]],"^8M","Force a re-render of the root. Runs a root query, disables shouldComponentUpdate, and renders the root component.\n   This effectively forces React to do a full VDOM diff. Useful for things like UI refresh on hot code reload and\n   changing locales where there are no real data changes, but the UI still needs to refresh.\n\n   Argument can be anything that any->reconciler accepts.\n\n   WARNING: This disables all Fulcro rendering optimizations, so it is much slower than other ways of refreshing the app.\n   Use `schedule-render!` to request a normal optimized render."],"~$abort-elements!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",425,"^8",8,"^9",425,"^:",23,"~:private",true,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","~:keys",["~$abort!"],"^1[","~$remote"],"~$send-queue","~$abort-id"]]]]],"^8M","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^8X",true,"^Q","~$com.fulcrologic.fulcro.application/abort-elements!","^6","com/fulcrologic/fulcro/application.cljc","^:",23,"^8O",["^1Y",[["~$p__80337","^90","^91"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",425,"^8S",["^P",[null,"~$any"]],"^9",425,"^8U",3,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^8Y",["^8Z"],"^1[","^8["],"^90","^91"]]]]],"^8M","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$default-global-eql-transform",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",193,"^8",7,"^9",193,"^:",35,"^8J",["^1Y",["^8K",["^1Y",[["~$ast"]]]]],"^8M","The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - The form-state configuration join\n\n  Takes an AST and returns the modified AST.\n  "],"^Q","~$com.fulcrologic.fulcro.application/default-global-eql-transform","^6","com/fulcrologic/fulcro/application.cljc","^:",35,"^8O",["^1Y",[["^96"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",193,"^8S",["^P",["~$clj","^94","^8T"]],"^9",193,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^96"]]]]],"^8M","The default query transform function.  It makes sure the following items on a component query\n  are never sent to the server:\n\n  - Props whose namespace is `ui`\n  - The form-state configuration join\n\n  Takes an AST and returns the modified AST.\n  "],"~$set-root!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",490,"^8",7,"^9",490,"^:",16,"^8J",["^1Y",["^8K",["^1Y",[["~$app","~$root",["^ ","^8Y",["~$initialize-state?"]]]]]]],"^8M","Set a root class to use on the app. Doing so allows much of the API to work before mounting the app."],"^Q","~$com.fulcrologic.fulcro.application/set-root!","^6","com/fulcrologic/fulcro/application.cljc","^:",16,"^8O",["^1Y",[["^9:","^9;","~$p__80370"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",490,"^8S",["^P",[null,"^94","^8T"]],"^9",490,"^8U",3,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:","^9;",["^ ","^8Y",["^9<"]]]]]]],"^8M","Set a root class to use on the app. Doing so allows much of the API to work before mounting the app."],"~$mount!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^:",13,"~:top-fn",["^ ","^8R",false,"~:fixed-arity",4,"^8U",4,"^8O",["^1Y",[["^9:","^9;","~$node"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","~$hydrate?"]]]]],"^8J",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]],"^8Q",["^1Y",[null,null]]],"^8",7,"^7",354,"^9",354,"^8J",["^1Y",["^8K",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]]]],"^8M","Mount the app.  If called on an already-mounted app this will have the effect of re-installing the root node so that\n  hot code reload will refresh the UI (useful for development).\n\n  - `app`  The Fulcro app\n  - `root`  The Root UI component\n  - `node` The (string) ID or DOM node on which to mount.\n  - `options` An optional map with additional mount options.\n\n\n  `options` can include:\n\n  - `:initialize-state?` (default true) - If NOT mounted already: Pulls the initial state tree from root component,\n  normalizes it, and installs it as the application's state.  If there was data supplied as an initial-db, then this\n  new initial state will be *merged* with that initial-db.\n  - `:hydrate?` (default false) - Indicates that the DOM will already contain content from the\n    server that should be attached instead of overwritten. See ReactDOM.hydrate.\n  ","~:jsdoc",["^1Y",["@param {...*} var_args"]]],"^Q","~$com.fulcrologic.fulcro.application/mount!","^6","com/fulcrologic/fulcro/application.cljc","^:",13,"^9@",["^ ","^8R",false,"^9A",4,"^8U",4,"^8O",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]],"^8J",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]],"^8Q",["^1Y",[null,null]]],"^8O",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]],"^8P",null,"^9A",4,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"~:methods",[["^ ","^9A",3,"^8R",false,"~:tag","^94"],["^ ","^9A",4,"^8R",false,"^9G",["^P",["^94","~$js","^8T"]]]],"^7",354,"^9",354,"^8U",4,"^8V",true,"^8J",["^1Y",[["^9:","^9;","^9B"],["^9:","^9;","^9B",["^ ","^8Y",["^9<","^9C"]]]]],"^8M","Mount the app.  If called on an already-mounted app this will have the effect of re-installing the root node so that\n  hot code reload will refresh the UI (useful for development).\n\n  - `app`  The Fulcro app\n  - `root`  The Root UI component\n  - `node` The (string) ID or DOM node on which to mount.\n  - `options` An optional map with additional mount options.\n\n\n  `options` can include:\n\n  - `:initialize-state?` (default true) - If NOT mounted already: Pulls the initial state tree from root component,\n  normalizes it, and installs it as the application's state.  If there was data supplied as an initial-db, then this\n  new initial state will be *merged* with that initial-db.\n  - `:hydrate?` (default false) - Indicates that the DOM will already contain content from the\n    server that should be attached instead of overwritten. See ReactDOM.hydrate.\n  ","^9D",["^1Y",["@param {...*} var_args"]]],"~$app-root",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",401,"^8",7,"^9",401,"^:",15,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns the current app root, if mounted."],"^Q","~$com.fulcrologic.fulcro.application/app-root","^6","com/fulcrologic/fulcro/application.cljc","^:",15,"^8O",["^1Y",[["^9:"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",401,"^8S","^94","^9",401,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns the current app root, if mounted."],"~$fulcro-app?",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",326,"^8",8,"^9",326,"^:",19,"^8J",["^1Y",["^8K",["^1Y",[["~$x"]]]]],"^8M","Returns true if the given `x` is a Fulcro application."],"^Q","~$com.fulcrologic.fulcro.application/fulcro-app?","^6","com/fulcrologic/fulcro/application.cljc","^:",19,"^8O",["^1Y",[["~$x"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",326,"^8S","~$boolean","^9",326,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["~$x"]]]]],"^8M","Returns true if the given `x` is a Fulcro application."],"~$current-state",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",32,"^8",8,"^9",32,"^:",21,"^8J",["^1Y",["^8K",["^1Y",[["~$app-or-component"]]]]],"^8M","Get the current value of the application state database."],"^Q","~$com.fulcrologic.fulcro.application/current-state","^6","com/fulcrologic/fulcro/application.cljc","^:",21,"^8O",["^1Y",[["^9O"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",32,"^8S","^94","^9",32,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9O"]]]]],"^8M","Get the current value of the application state database."],"~$initialize-state!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",339,"^8",7,"^9",339,"^:",24,"^8J",["^1Y",["^8K",["^1Y",[["^9:","^9;"]]]]],"^8M","Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state."],"^Q","~$com.fulcrologic.fulcro.application/initialize-state!","^6","com/fulcrologic/fulcro/application.cljc","^:",24,"^8O",["^1Y",[["^9:","^9;"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",339,"^8S",["^P",[null,"^94"]],"^9",339,"^8U",2,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:","^9;"]]]]],"^8M","Initialize the app state using `root` component's app state. This will deep merge against any data that is already\n  in the state atom of the app. Can be called before `mount!`, in which case you should tell mount not to (re) initialize\n  state."],"~$mounted?",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",333,"^8",8,"^9",333,"^:",16,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^8Y",["~:com.fulcrologic.fulcro.application/runtime-atom"]]]]]]],"^8M","Is the given app currently mounted on the DOM?"],"^Q","~$com.fulcrologic.fulcro.application/mounted?","^6","com/fulcrologic/fulcro/application.cljc","^:",16,"^8O",["^1Y",[["~$p__80296"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",333,"^8S","^9M","^9",333,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^8Y",["^9T"]]]]]]],"^8M","Is the given app currently mounted on the DOM?"],"~$render!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^:",15,"^9@",["^ ","^8R",false,"^9A",2,"^8U",2,"^8O",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["~$force-root?"],"^1[","~$options"]]]],"^8J",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]],"^8Q",["^1Y",[null,null]]],"^8",8,"^7",86,"^9",86,"^8J",["^1Y",["^8K",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]]]],"^8M","Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  ","^9D",["^1Y",["@param {...*} var_args"]]],"^Q","~$com.fulcrologic.fulcro.application/render!","^6","com/fulcrologic/fulcro/application.cljc","^:",15,"^9@",["^ ","^8R",false,"^9A",2,"^8U",2,"^8O",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]],"^8J",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]],"^8Q",["^1Y",[null,null]]],"^8O",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]],"^8P",null,"^9A",2,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^9F",[["^ ","^9A",1,"^8R",false,"^9G","^94"],["^ ","^9A",2,"^8R",false,"^9G",["^P",[null,"^94"]]]],"^7",86,"^9",86,"^8U",2,"^8V",true,"^8J",["^1Y",[["^9:"],["^9:",["^ ","^8Y",["^9X"],"^1[","^9Y"]]]],"^8M","Render the application immediately.  Prefer `schedule-render!`, which will ensure no more than 60fps.\n\n  This is the central processing for render and cannot be overridden. `schedule-render!` will always invoke\n  this function.  The optimized render is called by this function, which does extra bookkeeping and\n  other supporting features common to all rendering.\n\n  Options include:\n  - `force-root?`: boolean.  When true disables all optimizations and forces a full root re-render.\n  - anything your selected rendering optization system allows.  Shared props are updated via `shared-fn`\n  only on `force-root?` and when (shallow) root props change.\n  ","^9D",["^1Y",["@param {...*} var_args"]]],"~$fulcro-app",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^:",17,"^9@",["^ ","^8R",false,"^9A",1,"^8U",1,"^8O",["^1Y",[[],[["^ ","^8Y",["~$props-middleware","~$global-eql-transform","~$global-error-action","~$default-result-action!","~$optimized-render!","~$render-root!","~$hydrate-root!","~$render-middleware","~$initial-db","~$client-did-mount","~$remote-error?","~$remotes","~$query-transform-default","~$load-marker-default","~$load-mutation","~$root-class","~$shared","~$shared-fn"],"^1[","^9Y"]]]],"^8J",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]],"^8Q",["^1Y",[null,null]]],"^8",7,"^7",212,"^9",212,"^8J",["^1Y",["^8K",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]]]],"^8M","Create a new Fulcro application.\n\n  `options`: A map of initial options\n\n   * `:initial-db` a *map* containing a *normalized* Fulcro app db.  Normally Fulcro will populate app state with\n     your component tree's initial state.  Use `mount!` options to toggle the initial state pull from root.\n   * `:optimized-render!` - A function that can analyze the state of the application and optimally refresh the screen.\n     Defaults to `ident-optimized-render/render!`, but can also be set to `keyframe-render/render!`.  Further customizations are\n     also possible.  Most applications will likely be best with the default (which analyzes changes by ident and targets\n     refreshes), but applications with a lot of on-screen components may find the keyframe renderer to be faster. Both\n     get added benefits from Fulcro's default `shouldComponentUpdate`, which will prevent rendering when there are no real\n     changes.\n   * `default-result-action!` - A `(fn [env])` that will be used in your mutations defined with `defmutation` as the\n     default `:result-action` when none is supplied. Normally defaults to a function that supports mutation joins, targeting,\n     and ok/error actions. WARNING: Overriding this is for advanced users and can break important functionality. The\n     default is value for this option is `com.fulcrologic.fulcro.mutations/default-result-action!`, which could be used\n     as an element of your own custom implementation.\n   * `:global-eql-transform` - A `(fn [AST] new-AST)` that will be asked to rewrite the AST of all transactions just\n     before they are placed on the network layer.\n   * `:client-did-mount` - A `(fn [app])` that is called when the application mounts the first time.\n   * `:remotes` - A map from remote name to a remote handler, which is defined as a map that contains at least\n     a `:transmit!` key whose value is a `(fn [send-node])`. See `networking.http-remote`.\n   * `:shared` - A (static) map of data that should be visible in all components through `comp/shared`.\n   * `:shared-fn` - A function on root props that can select/augment shared whenever a forced root render\n     or explicit call to `app/update-shared!` happens.\n   * `:props-middleware` - A function that can add data to the 4th (optional) argument of\n     `defsc`.  Useful for allowing users to quickly destructure extra data created by\n     component extensions. See the fulcro-garden-css project on github for an example usage.\n   * `:render-middleware` - A `(fn [this real-render])`. If supplied it will be called for every Fulcro component\n     render, and *must* call (and return the result of) `real-render`.  This can be used to wrap the real render\n     function in order to do things like measure performance, set dynamic vars, or augment the UI in arbitrary ways.\n     `this` is the component being rendered.\n   * `:remote-error?` - A `(fn [result] boolean)`. It can examine the network result and should only return\n     true when the result is an error. The `result` will contain both a `:body` and `:status-code` when using\n     the normal remotes.  The default version of this returns true if the status code isn't 200.\n   * `:global-error-action` - A `(fn [env] ...)` that is run on any remote error (as defined by `remote-error?`).\n   * `:load-mutation` - A symbol. Defines which mutation to use as an implementation of low-level load operations. See\n     Developer's Guide\n   * `:query-transform-default` - A `(fn [query] query')`. Defaults to a function that strips `:ui/...` keywords and\n     form state config joins from load queries.\n   * `:load-marker-default` - A default value to use for load markers. Defaults to false.\n   * `:render-root!` - The function to call in order to render the root of your application. Defaults\n     to `js/ReactDOM.render`.\n   * `:hydrate-root!` - The function to call in order to hydrate the root of your application. Defaults\n     to `js/ReactDOM.hydrate`.\n   * `:root-class` - The component class that will be the root. This can be specified just with `mount!`, but\n   giving it here allows you to do a number of tasks against the app before it is actually mounted. You can also use `app/set-root!`.","^9D",["^1Y",["@param {...*} var_args"]]],"^Q","~$com.fulcrologic.fulcro.application/fulcro-app","^6","com/fulcrologic/fulcro/application.cljc","^:",17,"^9@",["^ ","^8R",false,"^9A",1,"^8U",1,"^8O",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]],"^8J",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]],"^8Q",["^1Y",[null,null]]],"^8O",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]],"^8P",null,"^9A",1,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^9F",[["^ ","^9A",0,"^8R",false,"^9G","^94"],["^ ","^9A",1,"^8R",false,"^9G","~$cljs.core/IMap"]],"^7",212,"^9",212,"^8U",1,"^8V",true,"^8J",["^1Y",[[],[["^ ","^8Y",["^:0","^:1","^:2","^:3","^:4","^:5","^:6","^:7","^:8","^:9","^::","^:;","^:<","^:=","^:>","^:?","^:@","^:A"],"^1[","^9Y"]]]],"^8M","Create a new Fulcro application.\n\n  `options`: A map of initial options\n\n   * `:initial-db` a *map* containing a *normalized* Fulcro app db.  Normally Fulcro will populate app state with\n     your component tree's initial state.  Use `mount!` options to toggle the initial state pull from root.\n   * `:optimized-render!` - A function that can analyze the state of the application and optimally refresh the screen.\n     Defaults to `ident-optimized-render/render!`, but can also be set to `keyframe-render/render!`.  Further customizations are\n     also possible.  Most applications will likely be best with the default (which analyzes changes by ident and targets\n     refreshes), but applications with a lot of on-screen components may find the keyframe renderer to be faster. Both\n     get added benefits from Fulcro's default `shouldComponentUpdate`, which will prevent rendering when there are no real\n     changes.\n   * `default-result-action!` - A `(fn [env])` that will be used in your mutations defined with `defmutation` as the\n     default `:result-action` when none is supplied. Normally defaults to a function that supports mutation joins, targeting,\n     and ok/error actions. WARNING: Overriding this is for advanced users and can break important functionality. The\n     default is value for this option is `com.fulcrologic.fulcro.mutations/default-result-action!`, which could be used\n     as an element of your own custom implementation.\n   * `:global-eql-transform` - A `(fn [AST] new-AST)` that will be asked to rewrite the AST of all transactions just\n     before they are placed on the network layer.\n   * `:client-did-mount` - A `(fn [app])` that is called when the application mounts the first time.\n   * `:remotes` - A map from remote name to a remote handler, which is defined as a map that contains at least\n     a `:transmit!` key whose value is a `(fn [send-node])`. See `networking.http-remote`.\n   * `:shared` - A (static) map of data that should be visible in all components through `comp/shared`.\n   * `:shared-fn` - A function on root props that can select/augment shared whenever a forced root render\n     or explicit call to `app/update-shared!` happens.\n   * `:props-middleware` - A function that can add data to the 4th (optional) argument of\n     `defsc`.  Useful for allowing users to quickly destructure extra data created by\n     component extensions. See the fulcro-garden-css project on github for an example usage.\n   * `:render-middleware` - A `(fn [this real-render])`. If supplied it will be called for every Fulcro component\n     render, and *must* call (and return the result of) `real-render`.  This can be used to wrap the real render\n     function in order to do things like measure performance, set dynamic vars, or augment the UI in arbitrary ways.\n     `this` is the component being rendered.\n   * `:remote-error?` - A `(fn [result] boolean)`. It can examine the network result and should only return\n     true when the result is an error. The `result` will contain both a `:body` and `:status-code` when using\n     the normal remotes.  The default version of this returns true if the status code isn't 200.\n   * `:global-error-action` - A `(fn [env] ...)` that is run on any remote error (as defined by `remote-error?`).\n   * `:load-mutation` - A symbol. Defines which mutation to use as an implementation of low-level load operations. See\n     Developer's Guide\n   * `:query-transform-default` - A `(fn [query] query')`. Defaults to a function that strips `:ui/...` keywords and\n     form state config joins from load queries.\n   * `:load-marker-default` - A default value to use for load markers. Defaults to false.\n   * `:render-root!` - The function to call in order to render the root of your application. Defaults\n     to `js/ReactDOM.render`.\n   * `:hydrate-root!` - The function to call in order to hydrate the root of your application. Defaults\n     to `js/ReactDOM.hydrate`.\n   * `:root-class` - The component class that will be the root. This can be specified just with `mount!`, but\n   giving it here allows you to do a number of tasks against the app before it is actually mounted. You can also use `app/set-root!`.","^9D",["^1Y",["@param {...*} var_args"]]],"~$schedule-render!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^:",23,"^9@",["^ ","^8R",false,"^9A",2,"^8U",2,"^8O",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8J",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8Q",["^1Y",[null,null]]],"^8",7,"^7",131,"^9",131,"^8J",["^1Y",["^8K",["^1Y",[["^9:"],["^9:","^9Y"]]]]],"^8M","Schedule a render on the next animation frame.","^9D",["^1Y",["@param {...*} var_args"]]],"^Q","~$com.fulcrologic.fulcro.application/schedule-render!","^6","com/fulcrologic/fulcro/application.cljc","^:",23,"^9@",["^ ","^8R",false,"^9A",2,"^8U",2,"^8O",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8J",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8Q",["^1Y",[null,null]]],"^8O",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8P",null,"^9A",2,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^9F",[["^ ","^9A",1,"^8R",false,"^9G","^94"],["^ ","^9A",2,"^8R",false,"^9G",["^P",["^9H","^8T"]]]],"^7",131,"^9",131,"^8U",2,"^8V",true,"^8J",["^1Y",[["^9:"],["^9:","^9Y"]]],"^8M","Schedule a render on the next animation frame.","^9D",["^1Y",["@param {...*} var_args"]]],"~$tick!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",39,"^8",8,"^9",39,"^:",13,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props."],"^Q","~$com.fulcrologic.fulcro.application/tick!","^6","com/fulcrologic/fulcro/application.cljc","^:",13,"^8O",["^1Y",[["^9:"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",39,"^8S",["^P",[null,"^94"]],"^9",39,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Move the basis-t forward one tick. For internal use in internal algorithms. Fulcro\n  uses this to add metadata to props so it can detect the newer of two version of props."],"~$basis-t",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",26,"^8",8,"^9",26,"^:",15,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Return the current basis time of the app."],"^Q","~$com.fulcrologic.fulcro.application/basis-t","^6","com/fulcrologic/fulcro/application.cljc","^:",15,"^8O",["^1Y",[["^9:"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",26,"^8S","^94","^9",26,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Return the current basis time of the app."],"^8Z",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",454,"^8",7,"^9",454,"^:",13,"^8J",["^1Y",["^8K",["^1Y",[["^8L","^91"]]]]],"^8M","Attempt to abort the send queue entries with the given abort ID.  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  "],"^Q","~$com.fulcrologic.fulcro.application/abort!","^6","com/fulcrologic/fulcro/application.cljc","^:",13,"^8O",["^1Y",[["^8L","^91"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",454,"^8S",["^P",[null,"^94"]],"^9",454,"^8U",2,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^8L","^91"]]]]],"^8M","Attempt to abort the send queue entries with the given abort ID.  Will notify any aborted operations (e.g. result-handler\n  will be invoked, remote-error? will be used to decide if you consider that an error, etc.).\n  The result map from an abort will include `{::txn/aborted? true}`, but will not include `:status-code` or `:body`.\n\n  This function affects both started and non-started items in the send queues, but will not affect submissions that have not yet\n  made it to the network processing layer (things still in top-level transaction submission queue).\n\n  So the sequence of calls:\n\n  ```\n  (comp/transact! this `[(f)] {:abort-id :a})\n  (app/abort! this :a)\n  ```\n\n  will cancel anything active with abort id `:a`, but since you've held the thread the entire time the submission of\n  mutation `(f)` is still on the submission queue and will not be aborted.\n\n  - `app-ish`: Anything that can be coerced to an app with comp/any->app.\n  - `abort-id`: The abort ID of the operations to be aborted.\n  "],"~$update-shared!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",46,"^8",8,"^9",46,"^:",22,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$runtime-atom"],"^1[","^9:"]]]]]],"^8M","Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared."],"^Q","~$com.fulcrologic.fulcro.application/update-shared!","^6","com/fulcrologic/fulcro/application.cljc","^:",22,"^8O",["^1Y",[["~$p__80196"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",46,"^9",46,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^:L",["^:M"],"^1[","^9:"]]]]]],"^8M","Force shared props to be recalculated. This updates the shared props on the app, and future renders will see the\n   updated values. This is a no-op if no shared-fn is defined on the app. If you're using React 16+ consider using\n   Context instead of shared."],"~$default-remote-error?",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",186,"^8",8,"^9",186,"^:",29,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^8Y",["~$status-code"]]]]]]],"^8M","Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200."],"^Q","~$com.fulcrologic.fulcro.application/default-remote-error?","^6","com/fulcrologic/fulcro/application.cljc","^:",29,"^8O",["^1Y",[["~$p__80268"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",186,"^8S","^9M","^9",186,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[[["^ ","^8Y",["^:Q"]]]]]]],"^8M","Default detection of network errors. Returns true if the status-code of the given result\n  map is not 200."],"~$root-props-changed?",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",63,"^8",8,"^9",63,"^:",27,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way."],"^Q","~$com.fulcrologic.fulcro.application/root-props-changed?","^6","com/fulcrologic/fulcro/application.cljc","^:",27,"^8O",["^1Y",[["^9:"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",63,"^8S","^9M","^9",63,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns true if the props queries directly by the root component of the app (if mounted) have changed since the last\n  render.  This is a shallow analysis such that, for example, a join from root (in a normalized db) will be checked as a difference\n  of idents that the root prop points to.  This can be used for determining if things like shared-fn need to be re-run,\n  and if it would simply be quicker to keyframe render the entire tree.\n\n  This is a naiv√© algorithm that is essentially `select-keys` on the root props. It does not interpret the query in\n  any way."],"~$default-tx!",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^:",18,"^9@",["^ ","^8R",false,"^9A",3,"^8U",3,"^8O",["^1Y",[["^9:","~$tx"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8J",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8Q",["^1Y",[null,null]]],"^8",7,"^7",138,"^9",138,"^8J",["^1Y",["^8K",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]]]],"^8M","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^9D",["^1Y",["@param {...*} var_args"]]],"^Q","~$com.fulcrologic.fulcro.application/default-tx!","^6","com/fulcrologic/fulcro/application.cljc","^:",18,"^9@",["^ ","^8R",false,"^9A",3,"^8U",3,"^8O",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8J",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8Q",["^1Y",[null,null]]],"^8O",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8P",null,"^9A",3,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^9F",[["^ ","^9A",2,"^8R",false,"^9G","^94"],["^ ","^9A",3,"^8R",false,"^9G","^94"]],"^7",138,"^9",138,"^8U",3,"^8V",true,"^8J",["^1Y",[["^9:","^:W"],[["^ ","^8Y",["^9T"],"^1[","^9:"],"^:W","^9Y"]]],"^8M","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^9D",["^1Y",["@param {...*} var_args"]]],"^:?",["^ ","^8I",null,"^5",["^ ","^6","com/fulcrologic/fulcro/application.cljc","^7",406,"^8",7,"^9",406,"^:",17,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns the current app root class, if mounted."],"^Q","~$com.fulcrologic.fulcro.application/root-class","^6","com/fulcrologic/fulcro/application.cljc","^:",17,"^8O",["^1Y",[["^9:"]]],"^8P",null,"^8Q",["^1Y",[null,null]],"^8",1,"^8R",false,"^7",406,"^8S","^94","^9",406,"^8U",1,"^8V",true,"^8J",["^1Y",["^8K",["^1Y",[["^9:"]]]]],"^8M","Returns the current app root class, if mounted."]],"^1W",["^ ","^12","^13","^14","^15","^18","^19","^C","^C","^1;","^1;","^1@","^1;","^19","^19","^N","^N","^15","^15","^13","^13"],"~:cljs.analyzer/constants",["^ ","^1S",["^P",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:com.fulcrologic.fulcro.application/mount-node","~:remote","~:only-refresh","~:props-middleware","~:com.fulcrologic.fulcro.algorithm/render!","~:com.fulcrologic.fulcro.application/config","~:com.fulcrologic.fulcro.algorithm/shared-fn","~:refresh","~:com.fulcrologic.fulcro.algorithm/default-result-action!","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:com.fulcrologic.fulcro.application/indexes","~:load-mutation","~:com.fulcrologic.fulcro.algorithm/props-middleware","~:ref","~:remotes","~:initialize-state?","~:com.fulcrologic.fulcro.application/last-rendered-state","~:status-text","~:com.fulcrologic.fulcro.algorithm/schedule-render!","~:com.fulcrologic.fulcro.application/static-shared-props","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:hydrate-root!","~:global-eql-transform","~:debug","~:root-props","~:com.fulcrologic.fulcro.algorithm/tx!","~:force-root?","~:status-code","~:com.fulcrologic.fulcro.algorithms.form-state/config","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:abort!","~:otherwise","~:com.fulcrologic.fulcro.application/id","~:com.fulcrologic.fulcro.algorithm/global-eql-transform","~:fatal","~:com.fulcrologic.fulcro.algorithm/drop-component!","~:com.fulcrologic.fulcro.algorithm/hydrate-root!","~:com.fulcrologic.fulcro.algorithm/index-component!","~:shared-fn","~:com.fulcrologic.fulcro.application/app","~:load-marker-default","~:transmit!","~:com.fulcrologic.fulcro.application/root-class","~:com.fulcrologic.fulcro.application/send-queues","~:com.fulcrologic.fulcro.application/to-refresh","~:com.fulcrologic.fulcro.application/basis-t","~:com.fulcrologic.fulcro.algorithm/remote-error?","~:root-props-changed?","~:render-root!","^9T","~:optimized-render!","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:root-class","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.application/algorithms","~:shared","~:remote-error?","~:hydrate?","~:com.fulcrologic.fulcro.algorithm/render-root!","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:com.fulcrologic.fulcro.algorithm/global-error-action","~:error","~:ident->components","~:com.fulcrologic.fulcro.algorithm/optimized-render!","~:com.fulcrologic.fulcro.application/mutate","~:started-callback","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:com.fulcrologic.fulcro.algorithm/render-middleware","~:com.fulcrologic.fulcro.application/root-factory","~:default-result-action!","~:com.fulcrologic.fulcro.algorithm/index-root!","~:body","~:com.fulcrologic.fulcro.application/shared-props","~:abort-id","~:global-error-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:auto","~:p","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithm/merge*","~:render-middleware","~:com.fulcrologic.fulcro.application/app-root","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","~:initial-db","~:com.fulcrologic.fulcro.application/render-scheduled?","~:client-did-mount","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:query-transform-default"]],"~:order",["^<3","^9T","^;N","^<D","~:p","^<T","^;X","^;D","^<0","^<O","^;;","^;A","^;I","^;K","^<7","^<5","^;O","^<2","^<[","^;Y","^<9","^<B","^<8","^<S","^;7","^;2","^;>","^<;","^;L","^;M","^<L","^<Q","^<W","^=0","^<Z","^=2","^;3","^;<","^;?","^;F","^;G","^;Z","^<6","^<:","^<?","^<>","^;R","^;5","^<=","^<H","^;4","^;6","^;8","^;=","^;C","^;J","^;S","^;U","^;V","^;W","^<4","^<A","^<C","^<F","^<J","^<M","^<V","^;0","^;9","^;E","^<<","^<G","^<I","^<K","^<R","^<U","^<X","^<E","^;1","^;[","^=1","^;T","^<N","^;@","^<@","^;P","^<Y","^:[","^<P","^;H","^;Q","^;B","^;:","^<1"]],"^21",["^ ","^1T",["^P",[]]],"^22",["^ "],"^23",["^1>","^C","^X","^1L","^17","^1J","^1N","^1C","^1A","^[","^1D","^1H","^11","^15","^19","^1O","^1;","^Y","^1?","^N","^1=","^Z","^13"]],"^T","^R","~:ns-specs",["^ ","^;;",["^1Y",["~$cljs.spec.alpha/keys","~:opt-un",["~:com.fulcrologic.fulcro.application/ident->components","~:com.fulcrologic.fulcro.application/keyword->components","~:com.fulcrologic.fulcro.application/idents-in-joins","~:com.fulcrologic.fulcro.application/class->components"]]],"^=:",["^1Y",["~$cljs.spec.alpha/map-of","~$cljs.core/keyword?","~$cljs.core/set?"]],"^;A","~$cljs.core/map?","^=9",["^1Y",["~$cljs.spec.alpha/coll-of","~$edn-query-language.core/ident?","~:kind","^=="]],"^=7",["^1Y",["^=;","^=@","^=="]],"^;N","~$com.fulcrologic.fulcro.algorithms.do-not-use/atom?","^;Y",["^1Y",["^=5","~:req",["^;N","^<=","^9T"]]],"^<3","~$cljs.core/pos-int?","^9T","^=B","~:com.fulcrologic.fulcro.application/prop->classes",["^1Y",["^=;",["^1Y",["~$cljs.spec.alpha/or","~:keyword","^=<","~:ident","^=@"]],"^=="]],"^<=",["^1Y",["^=5","^=C",["^;8","^;U","^;W","^<M","^<V","^<F","^<4","^;4","^;C","^;J"],"~:opt",["^;S","^<C","^;=","^<J","^;6"]]],"~:com.fulcrologic.fulcro.application/runtime-state",["^1Y",["^=5","^=C",["^<X","^;;","^<U","^<3","^;A","^<R","^;9","^;E","^<;","^<<","^<I"]]],"~:com.fulcrologic.fulcro.application/remote-name","^=<","^<U",["^1Y",["^=;","^=K","^=>"]],"^<X",["^1Y",["~$cljs.spec.alpha/nilable","~$cljs.core/any?"]],"~:com.fulcrologic.fulcro.application/active-remotes",["^1Y",["^=?","^=K","^=A","^=="]],"~:com.fulcrologic.fulcro.application/remote-names",["^1Y",["^=?","^=<","^=A","^=="]]],"~:ns-speced-vars",[],"~:compiler-options",["^2A",[["^=Q","~:static-fns"],true,["^=Q","~:elide-asserts"],true,["^=Q","~:optimize-constants"],null,["^=Q","^28"],null,["^=Q","~:external-config"],null,["^=Q","~:tooling-config"],null,["^=Q","~:emit-constants"],null,["^=Q","~:load-tests"],false,["^=Q","~:form-size-threshold"],null,["^=Q","~:infer-externs"],true,["^=Q","^2:"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^=Q","~:fn-invoke-direct"],null,["^=Q","~:source-map"],"/dev/null"]]]