["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.dom');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncom.fulcrologic.fulcro.dom.element_marker = (function (){var G__78362 = React.createElement(\"div\",null);\nvar G__78363 = \"$$typeof\";\nreturn goog.object.get(G__78362,G__78363);\n})();\n/**\n * Returns true if the given arg is a react element.\n */\ncom.fulcrologic.fulcro.dom.element_QMARK_ = (function com$fulcrologic$fulcro$dom$element_QMARK_(x){\nreturn ((cljs.core.object_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.dom.element_marker,goog.object.get(x,\"$$typeof\"))));\n});\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"css\",\"css\",1135045163),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null))))))),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"css\",\"css\",1135045163),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.maybe_impl(cljs.core.keyword_QMARK_,new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.spec.alpha.maybe_impl(cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nil_QMARK_,(function (p1__78366_SHARP_){\nreturn ((cljs.core.map_QMARK_(p1__78366_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__78366_SHARP_)))));\n}),(function (p1__78367_SHARP_){\nreturn ((cljs.core.object_QMARK_(p1__78367_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__78367_SHARP_)))));\n})], null),null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null))))))),cljs.spec.alpha.rep_impl(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.string_QMARK_,cljs.core.number_QMARK_,(function (p1__78368_SHARP_){\nreturn ((cljs.core.vector_QMARK_(p1__78368_SHARP_)) || (cljs.core.seq_QMARK_(p1__78368_SHARP_)) || (cljs.core.array_QMARK_(p1__78368_SHARP_)));\n}),cljs.core.nil_QMARK_,com.fulcrologic.fulcro.dom.element_QMARK_], null),null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78366#\",\"p1__78366#\",1119301218,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__78367#\",\"p1__78367#\",-1581018258,null))))))),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__78368#\",\"p1__78368#\",1252599389,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))], null)));\n/**\n * Equivalent to React.render\n */\ncom.fulcrologic.fulcro.dom.render = (function com$fulcrologic$fulcro$dom$render(component,el){\nreturn ReactDOM.render(component,el);\n});\n/**\n * Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\n */\ncom.fulcrologic.fulcro.dom.render_to_str = (function com$fulcrologic$fulcro$dom$render_to_str(c){\nreturn ReactDOMServer.renderToString(c);\n});\n/**\n * Returns the dom node associated with a component's React ref.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.node = (function com$fulcrologic$fulcro$dom$node(var_args){\nvar G__78417 = arguments.length;\nswitch (G__78417) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn ReactDOM.findDOMNode(component);\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2 = (function (component,name){\nvar G__78425 = component.refs;\nvar G__78425__$1 = (((G__78425 == null))?null:goog.object.get(G__78425,name));\nif((G__78425__$1 == null)){\nreturn null;\n} else {\nreturn ReactDOM.findDOMNode(G__78425__$1);\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$lang$maxFixedArity = 2;\n\n/**\n * Create a DOM element for which there exists no corresponding function.\n * Useful to create DOM elements not included in React.DOM. Equivalent\n * to calling `js/React.createElement`\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.create_element = (function com$fulcrologic$fulcro$dom$create_element(var_args){\nvar G__78436 = arguments.length;\nswitch (G__78436) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___80463 = arguments.length;\nvar i__4731__auto___80464 = (0);\nwhile(true){\nif((i__4731__auto___80464 < len__4730__auto___80463)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___80464]));\n\nvar G__80465 = (i__4731__auto___80464 + (1));\ni__4731__auto___80464 = G__80465;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1 = (function (tag){\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2(tag,null);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2 = (function (tag,opts){\nreturn React.createElement(tag,opts);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic = (function (tag,opts,children){\nreturn React.createElement(tag,opts,children);\n});\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$applyTo = (function (seq78433){\nvar G__78434 = cljs.core.first(seq78433);\nvar seq78433__$1 = cljs.core.next(seq78433);\nvar G__78435 = cljs.core.first(seq78433__$1);\nvar seq78433__$2 = cljs.core.next(seq78433__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__78434,G__78435,seq78433__$2);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$maxFixedArity = (2);\n\n/**\n * Given props, which can be nil, a js-obj or a clj map: returns a js object.\n */\ncom.fulcrologic.fulcro.dom.convert_props = (function com$fulcrologic$fulcro$dom$convert_props(props){\nif((props == null)){\nreturn ({});\n} else {\nif(cljs.core.map_QMARK_(props)){\nreturn cljs.core.clj__GT_js(props);\n} else {\nreturn props;\n\n}\n}\n});\n/**\n * Used internally by the DOM element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_element_STAR_ = (function com$fulcrologic$fulcro$dom$macro_create_element_STAR_(arr){\n\nreturn React.createElement.apply(null,arr);\n});\n/**\n * Updates the state of the wrapped input element.\n */\ncom.fulcrologic.fulcro.dom.update_state = (function com$fulcrologic$fulcro$dom$update_state(component,next_props,value){\nvar on_change = goog.object.getValueByKeys(component,\"state\",\"onChange\");\nvar next_state = ({});\nvar inputRef = goog.object.get(next_props,\"inputRef\");\nvar G__78446_80466 = next_state;\nvar G__78447_80467 = next_props;\nvar G__78448_80468 = ({\"onChange\": on_change});\ngoog.object.extend(G__78446_80466,G__78447_80467,G__78448_80468);\n\ngoog.object.set(next_state,\"value\",value);\n\nif(cljs.core.truth_(inputRef)){\ngoog.object.remove(next_state,\"inputRef\");\n\ngoog.object.set(next_state,\"ref\",inputRef);\n} else {\n}\n\nreturn component.setState(next_state);\n});\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.dom !== 'undefined') && (typeof com.fulcrologic.fulcro.dom.form_elements_QMARK_ !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.dom.form_elements_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [\"option\",null,\"select\",null,\"input\",null,\"textarea\",null], null), null);\n}\ncom.fulcrologic.fulcro.dom.is_form_element_QMARK_ = (function com$fulcrologic$fulcro$dom$is_form_element_QMARK_(element){\nvar tag = element.tagName;\nvar and__4120__auto__ = tag;\nif(cljs.core.truth_(and__4120__auto__)){\nvar G__78456 = clojure.string.lower_case(tag);\nreturn (com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(G__78456) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,G__78456));\n} else {\nreturn and__4120__auto__;\n}\n});\ncom.fulcrologic.fulcro.dom.wrap_form_element = (function com$fulcrologic$fulcro$dom$wrap_form_element(element){\nvar ctor = (function (props){\nvar this$ = this;\nthis$.state = (function (){var state = ({\"ref\": goog.object.get(props,\"inputRef\")});\nvar G__78461_80469 = state;\nvar G__78462_80470 = props;\nvar G__78463_80471 = ({\"onChange\": (function (){var G__78468 = goog.object.get(this$,\"onChange\");\nvar G__78469 = this$;\nreturn goog.bind(G__78468,G__78469);\n})()});\ngoog.object.extend(G__78461_80469,G__78462_80470,G__78463_80471);\n\ngoog.object.remove(state,\"inputRef\");\n\nreturn state;\n})();\n\nreturn React.Component.apply(this$,arguments);\n});\nctor.displayName = [\"wrapped-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(element)].join('');\n\ngoog.inherits(ctor,React.Component);\n\nvar x78470_80472 = ctor.prototype;\nx78470_80472.onChange = ((function (x78470_80472,ctor){\nreturn (function (event){\nvar this$ = this;\nvar temp__5753__auto__ = this$.props.onChange;\nif(cljs.core.truth_(temp__5753__auto__)){\nvar handler = temp__5753__auto__;\n(handler.cljs$core$IFn$_invoke$arity$1 ? handler.cljs$core$IFn$_invoke$arity$1(event) : handler.call(null,event));\n\nreturn com.fulcrologic.fulcro.dom.update_state(this$,this$.props,goog.object.getValueByKeys(event,\"target\",\"value\"));\n} else {\nreturn null;\n}\n});})(x78470_80472,ctor))\n;\n\nx78470_80472.componentWillReceiveProps = ((function (x78470_80472,ctor){\nreturn (function (new_props){\nvar this$ = this;\nvar state_value = goog.object.getValueByKeys(this$,\"state\",\"value\");\nvar this_node = ReactDOM.findDOMNode(this$);\nvar value_node = (cljs.core.truth_(com.fulcrologic.fulcro.dom.is_form_element_QMARK_(this_node))?this_node:(function (){var G__78472 = this_node;\nvar G__78473 = ((function (G__78472,state_value,this_node,this$,x78470_80472,ctor){\nreturn (function (p1__78458_SHARP_){\nreturn com.fulcrologic.fulcro.dom.is_form_element_QMARK_(p1__78458_SHARP_);\n});})(G__78472,state_value,this_node,this$,x78470_80472,ctor))\n;\nreturn goog.dom.findNode(G__78472,G__78473);\n})());\nvar element_value = goog.object.get(value_node,\"value\");\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core.truth_((function (){var and__4120__auto__ = state_value;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = element_value;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.type(state_value),cljs.core.type(element_value));\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.dom\",null,149,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (state_value,this_node,value_node,element_value,this$,x78470_80472,ctor){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"There is a mismatch for the data type of the value on an input with value \",element_value,\". This will cause the input to miss refreshes. In general you should force the :value of an input to\\n                be a string since that is how values are stored on most real DOM elements.\"], null);\n});})(state_value,this_node,value_node,element_value,this$,x78470_80472,ctor))\n,null)),null,-501408580);\n} else {\n}\n} else {\n}\n\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(state_value,element_value)){\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,element_value);\n} else {\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,goog.object.get(new_props,\"value\"));\n}\n});})(x78470_80472,ctor))\n;\n\nx78470_80472.render = ((function (x78470_80472,ctor){\nreturn (function (){\nvar this$ = this;\nreturn React.createElement(element,this$.state);\n});})(x78470_80472,ctor))\n;\n\n\nvar real_factory = React.createFactory(ctor);\nreturn ((function (real_factory,ctor){\nreturn (function() { \nvar G__80473__delegate = function (props,children){\nvar temp__5751__auto__ = goog.object.get(props,\"ref\");\nif(cljs.core.truth_(temp__5751__auto__)){\nvar r = temp__5751__auto__;\nif(typeof r === 'string'){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n} else {\nvar p = ({});\ngoog.object.extend(p,props);\n\ngoog.object.set(p,\"inputRef\",r);\n\ngoog.object.remove(p,\"ref\");\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,p,children);\n}\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n}\n};\nvar G__80473 = function (props,var_args){\nvar children = null;\nif (arguments.length > 1) {\nvar G__80474__i = 0, G__80474__a = new Array(arguments.length -  1);\nwhile (G__80474__i < G__80474__a.length) {G__80474__a[G__80474__i] = arguments[G__80474__i + 1]; ++G__80474__i;}\n  children = new cljs.core.IndexedSeq(G__80474__a,0,null);\n} \nreturn G__80473__delegate.call(this,props,children);};\nG__80473.cljs$lang$maxFixedArity = 1;\nG__80473.cljs$lang$applyTo = (function (arglist__80475){\nvar props = cljs.core.first(arglist__80475);\nvar children = cljs.core.rest(arglist__80475);\nreturn G__80473__delegate(props,children);\n});\nG__80473.cljs$core$IFn$_invoke$arity$variadic = G__80473__delegate;\nreturn G__80473;\n})()\n;\n;})(real_factory,ctor))\n});\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_input = com.fulcrologic.fulcro.dom.wrap_form_element(\"input\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_textarea = com.fulcrologic.fulcro.dom.wrap_form_element(\"textarea\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_option = com.fulcrologic.fulcro.dom.wrap_form_element(\"option\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_select = com.fulcrologic.fulcro.dom.wrap_form_element(\"select\");\ncom.fulcrologic.fulcro.dom.arr_append_STAR_ = (function com$fulcrologic$fulcro$dom$arr_append_STAR_(arr,x){\narr.push(x);\n\nreturn arr;\n});\ncom.fulcrologic.fulcro.dom.arr_append = (function com$fulcrologic$fulcro$dom$arr_append(arr,tail){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.arr_append_STAR_,arr,com.fulcrologic.fulcro.components.force_children(tail));\n});\n/**\n * Used internally by element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_wrapped_form_element = (function com$fulcrologic$fulcro$dom$macro_create_wrapped_form_element(opts){\nvar tag = (opts[(0)]);\nvar props = (opts[(1)]);\nvar children = opts.splice((2));\nvar G__78490 = tag;\nswitch (G__78490) {\ncase \"input\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_input,props,children);\n\nbreak;\ncase \"textarea\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_textarea,props,children);\n\nbreak;\ncase \"select\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_select,props,children);\n\nbreak;\ncase \"option\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_option,props,children);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__78490)].join('')));\n\n}\n});\n/**\n * Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.macro_create_element = (function com$fulcrologic$fulcro$dom$macro_create_element(var_args){\nvar G__78499 = arguments.length;\nswitch (G__78499) {\ncase 2:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2 = (function (type,args){\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(type,args,null);\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3 = (function (type,args,csskw){\nvar vec__78502 = args;\nvar seq__78503 = cljs.core.seq(vec__78502);\nvar first__78504 = cljs.core.first(seq__78503);\nvar seq__78503__$1 = cljs.core.next(seq__78503);\nvar head = first__78504;\nvar tail = seq__78503__$1;\nvar f = (cljs.core.truth_((com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(type) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,type)))?com.fulcrologic.fulcro.dom.macro_create_wrapped_form_element:com.fulcrologic.fulcro.dom.macro_create_element_STAR_);\nif((head == null)){\nvar G__78505 = (function (){var G__78506 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__78506,tail);\n\nreturn G__78506;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__78505) : f.call(null,G__78505));\n} else {\nif(com.fulcrologic.fulcro.dom.element_QMARK_(head)){\nvar G__78508 = (function (){var G__78509 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__78509,args);\n\nreturn G__78509;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__78508) : f.call(null,G__78508));\n} else {\nif(cljs.core.object_QMARK_(head)){\nvar G__78510 = (function (){var G__78511 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(head,csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__78511,tail);\n\nreturn G__78511;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__78510) : f.call(null,G__78510));\n} else {\nif(cljs.core.map_QMARK_(head)){\nvar G__78513 = (function (){var G__78514 = [type,cljs.core.clj__GT_js(com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(com.fulcrologic.fulcro.dom_common.interpret_classes(head),csskw))];\ncom.fulcrologic.fulcro.dom.arr_append(G__78514,tail);\n\nreturn G__78514;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__78513) : f.call(null,G__78513));\n} else {\nvar G__78516 = (function (){var G__78517 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__78517,args);\n\nreturn G__78517;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__78516) : f.call(null,G__78516));\n\n}\n}\n}\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (form \"hello\")\n * (form nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (form {:onClick f} \"hello\")\n * (form #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (form :#the-id.klass.other-klass \"hello\")\n * (form :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.form = (function com$fulcrologic$fulcro$dom$form(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80478 = arguments.length;\nvar i__4731__auto___80479 = (0);\nwhile(true){\nif((i__4731__auto___80479 < len__4730__auto___80478)){\nargs__4736__auto__.push((arguments[i__4731__auto___80479]));\n\nvar G__80480 = (i__4731__auto___80479 + (1));\ni__4731__auto___80479 = G__80480;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78541 = conformed_args__59513__auto__;\nvar map__78541__$1 = (((((!((map__78541 == null))))?(((((map__78541.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78541.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78541):map__78541);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78541__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78541__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78541__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"form\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.form.cljs$lang$applyTo = (function (seq78534){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78534));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (audio \"hello\")\n * (audio nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (audio {:onClick f} \"hello\")\n * (audio #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (audio :#the-id.klass.other-klass \"hello\")\n * (audio :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.audio = (function com$fulcrologic$fulcro$dom$audio(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80481 = arguments.length;\nvar i__4731__auto___80482 = (0);\nwhile(true){\nif((i__4731__auto___80482 < len__4730__auto___80481)){\nargs__4736__auto__.push((arguments[i__4731__auto___80482]));\n\nvar G__80483 = (i__4731__auto___80482 + (1));\ni__4731__auto___80482 = G__80483;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78566 = conformed_args__59513__auto__;\nvar map__78566__$1 = (((((!((map__78566 == null))))?(((((map__78566.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78566.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78566):map__78566);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78566__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78566__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78566__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"audio\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$applyTo = (function (seq78555){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78555));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (input \"hello\")\n * (input nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (input {:onClick f} \"hello\")\n * (input #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (input :#the-id.klass.other-klass \"hello\")\n * (input :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.input = (function com$fulcrologic$fulcro$dom$input(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80484 = arguments.length;\nvar i__4731__auto___80485 = (0);\nwhile(true){\nif((i__4731__auto___80485 < len__4730__auto___80484)){\nargs__4736__auto__.push((arguments[i__4731__auto___80485]));\n\nvar G__80486 = (i__4731__auto___80485 + (1));\ni__4731__auto___80485 = G__80486;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78583 = conformed_args__59513__auto__;\nvar map__78583__$1 = (((((!((map__78583 == null))))?(((((map__78583.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78583.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78583):map__78583);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78583__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78583__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78583__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"input\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.input.cljs$lang$applyTo = (function (seq78577){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78577));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menuitem \"hello\")\n * (menuitem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menuitem {:onClick f} \"hello\")\n * (menuitem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menuitem :#the-id.klass.other-klass \"hello\")\n * (menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.menuitem = (function com$fulcrologic$fulcro$dom$menuitem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80487 = arguments.length;\nvar i__4731__auto___80488 = (0);\nwhile(true){\nif((i__4731__auto___80488 < len__4730__auto___80487)){\nargs__4736__auto__.push((arguments[i__4731__auto___80488]));\n\nvar G__80489 = (i__4731__auto___80488 + (1));\ni__4731__auto___80488 = G__80489;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78596 = conformed_args__59513__auto__;\nvar map__78596__$1 = (((((!((map__78596 == null))))?(((((map__78596.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78596.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78596):map__78596);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78596__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78596__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78596__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menuitem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$applyTo = (function (seq78591){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78591));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (radialGradient \"hello\")\n * (radialGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (radialGradient {:onClick f} \"hello\")\n * (radialGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (radialGradient :#the-id.klass.other-klass \"hello\")\n * (radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.radialGradient = (function com$fulcrologic$fulcro$dom$radialGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80490 = arguments.length;\nvar i__4731__auto___80491 = (0);\nwhile(true){\nif((i__4731__auto___80491 < len__4730__auto___80490)){\nargs__4736__auto__.push((arguments[i__4731__auto___80491]));\n\nvar G__80492 = (i__4731__auto___80491 + (1));\ni__4731__auto___80491 = G__80492;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78616 = conformed_args__59513__auto__;\nvar map__78616__$1 = (((((!((map__78616 == null))))?(((((map__78616.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78616.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78616):map__78616);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78616__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78616__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78616__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"radialGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$applyTo = (function (seq78608){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78608));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMerge \"hello\")\n * (feMerge nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMerge {:onClick f} \"hello\")\n * (feMerge #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMerge :#the-id.klass.other-klass \"hello\")\n * (feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feMerge = (function com$fulcrologic$fulcro$dom$feMerge(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80493 = arguments.length;\nvar i__4731__auto___80494 = (0);\nwhile(true){\nif((i__4731__auto___80494 < len__4730__auto___80493)){\nargs__4736__auto__.push((arguments[i__4731__auto___80494]));\n\nvar G__80495 = (i__4731__auto___80494 + (1));\ni__4731__auto___80494 = G__80495;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78630 = conformed_args__59513__auto__;\nvar map__78630__$1 = (((((!((map__78630 == null))))?(((((map__78630.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78630.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78630):map__78630);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78630__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78630__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78630__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMerge\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$applyTo = (function (seq78626){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78626));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (set \"hello\")\n * (set nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (set {:onClick f} \"hello\")\n * (set #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (set :#the-id.klass.other-klass \"hello\")\n * (set :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.set = (function com$fulcrologic$fulcro$dom$set(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80496 = arguments.length;\nvar i__4731__auto___80497 = (0);\nwhile(true){\nif((i__4731__auto___80497 < len__4730__auto___80496)){\nargs__4736__auto__.push((arguments[i__4731__auto___80497]));\n\nvar G__80498 = (i__4731__auto___80497 + (1));\ni__4731__auto___80497 = G__80498;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78644 = conformed_args__59513__auto__;\nvar map__78644__$1 = (((((!((map__78644 == null))))?(((((map__78644.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78644.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78644):map__78644);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78644__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78644__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78644__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"set\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.set.cljs$lang$applyTo = (function (seq78637){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78637));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting \"hello\")\n * (feSpecularLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting {:onClick f} \"hello\")\n * (feSpecularLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpecularLighting :#the-id.klass.other-klass \"hello\")\n * (feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feSpecularLighting = (function com$fulcrologic$fulcro$dom$feSpecularLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80499 = arguments.length;\nvar i__4731__auto___80500 = (0);\nwhile(true){\nif((i__4731__auto___80500 < len__4730__auto___80499)){\nargs__4736__auto__.push((arguments[i__4731__auto___80500]));\n\nvar G__80501 = (i__4731__auto___80500 + (1));\ni__4731__auto___80500 = G__80501;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78667 = conformed_args__59513__auto__;\nvar map__78667__$1 = (((((!((map__78667 == null))))?(((((map__78667.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78667.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78667):map__78667);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78667__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78667__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78667__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpecularLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$applyTo = (function (seq78659){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78659));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (base \"hello\")\n * (base nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (base {:onClick f} \"hello\")\n * (base #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (base :#the-id.klass.other-klass \"hello\")\n * (base :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.base = (function com$fulcrologic$fulcro$dom$base(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80502 = arguments.length;\nvar i__4731__auto___80503 = (0);\nwhile(true){\nif((i__4731__auto___80503 < len__4730__auto___80502)){\nargs__4736__auto__.push((arguments[i__4731__auto___80503]));\n\nvar G__80504 = (i__4731__auto___80503 + (1));\ni__4731__auto___80503 = G__80504;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78700 = conformed_args__59513__auto__;\nvar map__78700__$1 = (((((!((map__78700 == null))))?(((((map__78700.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78700.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78700):map__78700);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78700__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78700__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78700__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"base\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.base.cljs$lang$applyTo = (function (seq78683){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78683));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h1 \"hello\")\n * (h1 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h1 {:onClick f} \"hello\")\n * (h1 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h1 :#the-id.klass.other-klass \"hello\")\n * (h1 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h1 = (function com$fulcrologic$fulcro$dom$h1(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80505 = arguments.length;\nvar i__4731__auto___80506 = (0);\nwhile(true){\nif((i__4731__auto___80506 < len__4730__auto___80505)){\nargs__4736__auto__.push((arguments[i__4731__auto___80506]));\n\nvar G__80507 = (i__4731__auto___80506 + (1));\ni__4731__auto___80506 = G__80507;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78722 = conformed_args__59513__auto__;\nvar map__78722__$1 = (((((!((map__78722 == null))))?(((((map__78722.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78722.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78722):map__78722);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78722__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78722__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78722__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h1\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$applyTo = (function (seq78717){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78717));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feOffset \"hello\")\n * (feOffset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feOffset {:onClick f} \"hello\")\n * (feOffset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feOffset :#the-id.klass.other-klass \"hello\")\n * (feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feOffset = (function com$fulcrologic$fulcro$dom$feOffset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80508 = arguments.length;\nvar i__4731__auto___80509 = (0);\nwhile(true){\nif((i__4731__auto___80509 < len__4730__auto___80508)){\nargs__4736__auto__.push((arguments[i__4731__auto___80509]));\n\nvar G__80510 = (i__4731__auto___80509 + (1));\ni__4731__auto___80509 = G__80510;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78734 = conformed_args__59513__auto__;\nvar map__78734__$1 = (((((!((map__78734 == null))))?(((((map__78734.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78734.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78734):map__78734);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78734__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78734__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78734__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feOffset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$applyTo = (function (seq78728){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78728));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (embed \"hello\")\n * (embed nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (embed {:onClick f} \"hello\")\n * (embed #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (embed :#the-id.klass.other-klass \"hello\")\n * (embed :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.embed = (function com$fulcrologic$fulcro$dom$embed(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80511 = arguments.length;\nvar i__4731__auto___80512 = (0);\nwhile(true){\nif((i__4731__auto___80512 < len__4730__auto___80511)){\nargs__4736__auto__.push((arguments[i__4731__auto___80512]));\n\nvar G__80513 = (i__4731__auto___80512 + (1));\ni__4731__auto___80512 = G__80513;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78739 = conformed_args__59513__auto__;\nvar map__78739__$1 = (((((!((map__78739 == null))))?(((((map__78739.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78739.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78739):map__78739);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78739__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78739__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78739__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"embed\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$applyTo = (function (seq78738){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78738));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateMotion \"hello\")\n * (animateMotion nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateMotion {:onClick f} \"hello\")\n * (animateMotion #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateMotion :#the-id.klass.other-klass \"hello\")\n * (animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.animateMotion = (function com$fulcrologic$fulcro$dom$animateMotion(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80514 = arguments.length;\nvar i__4731__auto___80515 = (0);\nwhile(true){\nif((i__4731__auto___80515 < len__4730__auto___80514)){\nargs__4736__auto__.push((arguments[i__4731__auto___80515]));\n\nvar G__80516 = (i__4731__auto___80515 + (1));\ni__4731__auto___80515 = G__80516;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78742 = conformed_args__59513__auto__;\nvar map__78742__$1 = (((((!((map__78742 == null))))?(((((map__78742.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78742.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78742):map__78742);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78742__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78742__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78742__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateMotion\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$applyTo = (function (seq78741){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78741));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h3 \"hello\")\n * (h3 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h3 {:onClick f} \"hello\")\n * (h3 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h3 :#the-id.klass.other-klass \"hello\")\n * (h3 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h3 = (function com$fulcrologic$fulcro$dom$h3(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80517 = arguments.length;\nvar i__4731__auto___80518 = (0);\nwhile(true){\nif((i__4731__auto___80518 < len__4730__auto___80517)){\nargs__4736__auto__.push((arguments[i__4731__auto___80518]));\n\nvar G__80519 = (i__4731__auto___80518 + (1));\ni__4731__auto___80518 = G__80519;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78767 = conformed_args__59513__auto__;\nvar map__78767__$1 = (((((!((map__78767 == null))))?(((((map__78767.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78767.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78767):map__78767);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78767__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78767__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78767__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h3\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$applyTo = (function (seq78759){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78759));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (body \"hello\")\n * (body nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (body {:onClick f} \"hello\")\n * (body #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (body :#the-id.klass.other-klass \"hello\")\n * (body :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.body = (function com$fulcrologic$fulcro$dom$body(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80520 = arguments.length;\nvar i__4731__auto___80521 = (0);\nwhile(true){\nif((i__4731__auto___80521 < len__4730__auto___80520)){\nargs__4736__auto__.push((arguments[i__4731__auto___80521]));\n\nvar G__80522 = (i__4731__auto___80521 + (1));\ni__4731__auto___80521 = G__80522;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78794 = conformed_args__59513__auto__;\nvar map__78794__$1 = (((((!((map__78794 == null))))?(((((map__78794.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78794.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78794):map__78794);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78794__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78794__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78794__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"body\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.body.cljs$lang$applyTo = (function (seq78779){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78779));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hkern \"hello\")\n * (hkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hkern {:onClick f} \"hello\")\n * (hkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hkern :#the-id.klass.other-klass \"hello\")\n * (hkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.hkern = (function com$fulcrologic$fulcro$dom$hkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80523 = arguments.length;\nvar i__4731__auto___80524 = (0);\nwhile(true){\nif((i__4731__auto___80524 < len__4730__auto___80523)){\nargs__4736__auto__.push((arguments[i__4731__auto___80524]));\n\nvar G__80525 = (i__4731__auto___80524 + (1));\ni__4731__auto___80524 = G__80525;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78804 = conformed_args__59513__auto__;\nvar map__78804__$1 = (((((!((map__78804 == null))))?(((((map__78804.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78804.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78804):map__78804);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78804__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78804__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78804__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$applyTo = (function (seq78799){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78799));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (keygen \"hello\")\n * (keygen nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (keygen {:onClick f} \"hello\")\n * (keygen #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (keygen :#the-id.klass.other-klass \"hello\")\n * (keygen :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.keygen = (function com$fulcrologic$fulcro$dom$keygen(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80526 = arguments.length;\nvar i__4731__auto___80527 = (0);\nwhile(true){\nif((i__4731__auto___80527 < len__4730__auto___80526)){\nargs__4736__auto__.push((arguments[i__4731__auto___80527]));\n\nvar G__80528 = (i__4731__auto___80527 + (1));\ni__4731__auto___80527 = G__80528;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78815 = conformed_args__59513__auto__;\nvar map__78815__$1 = (((((!((map__78815 == null))))?(((((map__78815.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78815.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78815):map__78815);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78815__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78815__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78815__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"keygen\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$applyTo = (function (seq78812){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78812));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-format \"hello\")\n * (font-face-format nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-format {:onClick f} \"hello\")\n * (font-face-format #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-format :#the-id.klass.other-klass \"hello\")\n * (font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font_face_format = (function com$fulcrologic$fulcro$dom$font_face_format(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80529 = arguments.length;\nvar i__4731__auto___80530 = (0);\nwhile(true){\nif((i__4731__auto___80530 < len__4730__auto___80529)){\nargs__4736__auto__.push((arguments[i__4731__auto___80530]));\n\nvar G__80531 = (i__4731__auto___80530 + (1));\ni__4731__auto___80530 = G__80531;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78843 = conformed_args__59513__auto__;\nvar map__78843__$1 = (((((!((map__78843 == null))))?(((((map__78843.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78843.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78843):map__78843);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78843__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78843__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78843__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-format\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$applyTo = (function (seq78824){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78824));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncA \"hello\")\n * (feFuncA nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncA {:onClick f} \"hello\")\n * (feFuncA #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncA :#the-id.klass.other-klass \"hello\")\n * (feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feFuncA = (function com$fulcrologic$fulcro$dom$feFuncA(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80532 = arguments.length;\nvar i__4731__auto___80533 = (0);\nwhile(true){\nif((i__4731__auto___80533 < len__4730__auto___80532)){\nargs__4736__auto__.push((arguments[i__4731__auto___80533]));\n\nvar G__80534 = (i__4731__auto___80533 + (1));\ni__4731__auto___80533 = G__80534;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78854 = conformed_args__59513__auto__;\nvar map__78854__$1 = (((((!((map__78854 == null))))?(((((map__78854.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78854.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78854):map__78854);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78854__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78854__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78854__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncA\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$applyTo = (function (seq78853){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78853));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (progress \"hello\")\n * (progress nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (progress {:onClick f} \"hello\")\n * (progress #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (progress :#the-id.klass.other-klass \"hello\")\n * (progress :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.progress = (function com$fulcrologic$fulcro$dom$progress(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80535 = arguments.length;\nvar i__4731__auto___80536 = (0);\nwhile(true){\nif((i__4731__auto___80536 < len__4730__auto___80535)){\nargs__4736__auto__.push((arguments[i__4731__auto___80536]));\n\nvar G__80537 = (i__4731__auto___80536 + (1));\ni__4731__auto___80536 = G__80537;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78865 = conformed_args__59513__auto__;\nvar map__78865__$1 = (((((!((map__78865 == null))))?(((((map__78865.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78865.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78865):map__78865);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78865__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78865__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78865__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"progress\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$applyTo = (function (seq78860){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78860));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (main \"hello\")\n * (main nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (main {:onClick f} \"hello\")\n * (main #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (main :#the-id.klass.other-klass \"hello\")\n * (main :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.main = (function com$fulcrologic$fulcro$dom$main(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80538 = arguments.length;\nvar i__4731__auto___80539 = (0);\nwhile(true){\nif((i__4731__auto___80539 < len__4730__auto___80538)){\nargs__4736__auto__.push((arguments[i__4731__auto___80539]));\n\nvar G__80540 = (i__4731__auto___80539 + (1));\ni__4731__auto___80539 = G__80540;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78876 = conformed_args__59513__auto__;\nvar map__78876__$1 = (((((!((map__78876 == null))))?(((((map__78876.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78876.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78876):map__78876);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78876__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78876__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78876__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"main\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.main.cljs$lang$applyTo = (function (seq78872){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78872));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cite \"hello\")\n * (cite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cite {:onClick f} \"hello\")\n * (cite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cite :#the-id.klass.other-klass \"hello\")\n * (cite :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.cite = (function com$fulcrologic$fulcro$dom$cite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80541 = arguments.length;\nvar i__4731__auto___80542 = (0);\nwhile(true){\nif((i__4731__auto___80542 < len__4730__auto___80541)){\nargs__4736__auto__.push((arguments[i__4731__auto___80542]));\n\nvar G__80543 = (i__4731__auto___80542 + (1));\ni__4731__auto___80542 = G__80543;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78881 = conformed_args__59513__auto__;\nvar map__78881__$1 = (((((!((map__78881 == null))))?(((((map__78881.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78881.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78881):map__78881);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78881__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78881__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78881__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$applyTo = (function (seq78880){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78880));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rect \"hello\")\n * (rect nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rect {:onClick f} \"hello\")\n * (rect #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rect :#the-id.klass.other-klass \"hello\")\n * (rect :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.rect = (function com$fulcrologic$fulcro$dom$rect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80544 = arguments.length;\nvar i__4731__auto___80545 = (0);\nwhile(true){\nif((i__4731__auto___80545 < len__4730__auto___80544)){\nargs__4736__auto__.push((arguments[i__4731__auto___80545]));\n\nvar G__80546 = (i__4731__auto___80545 + (1));\ni__4731__auto___80545 = G__80546;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78893 = conformed_args__59513__auto__;\nvar map__78893__$1 = (((((!((map__78893 == null))))?(((((map__78893.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78893.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78893):map__78893);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78893__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78893__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78893__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rect\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$applyTo = (function (seq78888){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78888));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tref \"hello\")\n * (tref nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tref {:onClick f} \"hello\")\n * (tref #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tref :#the-id.klass.other-klass \"hello\")\n * (tref :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.tref = (function com$fulcrologic$fulcro$dom$tref(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80547 = arguments.length;\nvar i__4731__auto___80548 = (0);\nwhile(true){\nif((i__4731__auto___80548 < len__4730__auto___80547)){\nargs__4736__auto__.push((arguments[i__4731__auto___80548]));\n\nvar G__80549 = (i__4731__auto___80548 + (1));\ni__4731__auto___80548 = G__80549;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78902 = conformed_args__59513__auto__;\nvar map__78902__$1 = (((((!((map__78902 == null))))?(((((map__78902.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78902.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78902):map__78902);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78902__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78902__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78902__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tref\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$applyTo = (function (seq78899){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78899));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshpatch \"hello\")\n * (meshpatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshpatch {:onClick f} \"hello\")\n * (meshpatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshpatch :#the-id.klass.other-klass \"hello\")\n * (meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.meshpatch = (function com$fulcrologic$fulcro$dom$meshpatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80550 = arguments.length;\nvar i__4731__auto___80551 = (0);\nwhile(true){\nif((i__4731__auto___80551 < len__4730__auto___80550)){\nargs__4736__auto__.push((arguments[i__4731__auto___80551]));\n\nvar G__80552 = (i__4731__auto___80551 + (1));\ni__4731__auto___80551 = G__80552;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78907 = conformed_args__59513__auto__;\nvar map__78907__$1 = (((((!((map__78907 == null))))?(((((map__78907.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78907.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78907):map__78907);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78907__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78907__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78907__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshpatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$applyTo = (function (seq78904){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78904));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polyline \"hello\")\n * (polyline nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polyline {:onClick f} \"hello\")\n * (polyline #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polyline :#the-id.klass.other-klass \"hello\")\n * (polyline :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.polyline = (function com$fulcrologic$fulcro$dom$polyline(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80553 = arguments.length;\nvar i__4731__auto___80554 = (0);\nwhile(true){\nif((i__4731__auto___80554 < len__4730__auto___80553)){\nargs__4736__auto__.push((arguments[i__4731__auto___80554]));\n\nvar G__80555 = (i__4731__auto___80554 + (1));\ni__4731__auto___80554 = G__80555;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78910 = conformed_args__59513__auto__;\nvar map__78910__$1 = (((((!((map__78910 == null))))?(((((map__78910.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78910.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78910):map__78910);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78910__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78910__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78910__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polyline\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$applyTo = (function (seq78909){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78909));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (metadata \"hello\")\n * (metadata nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (metadata {:onClick f} \"hello\")\n * (metadata #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (metadata :#the-id.klass.other-klass \"hello\")\n * (metadata :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.metadata = (function com$fulcrologic$fulcro$dom$metadata(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80556 = arguments.length;\nvar i__4731__auto___80557 = (0);\nwhile(true){\nif((i__4731__auto___80557 < len__4730__auto___80556)){\nargs__4736__auto__.push((arguments[i__4731__auto___80557]));\n\nvar G__80558 = (i__4731__auto___80557 + (1));\ni__4731__auto___80557 = G__80558;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78915 = conformed_args__59513__auto__;\nvar map__78915__$1 = (((((!((map__78915 == null))))?(((((map__78915.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78915.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78915):map__78915);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78915__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78915__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78915__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"metadata\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$applyTo = (function (seq78912){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78912));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (map \"hello\")\n * (map nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (map {:onClick f} \"hello\")\n * (map #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (map :#the-id.klass.other-klass \"hello\")\n * (map :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.map = (function com$fulcrologic$fulcro$dom$map(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80559 = arguments.length;\nvar i__4731__auto___80560 = (0);\nwhile(true){\nif((i__4731__auto___80560 < len__4730__auto___80559)){\nargs__4736__auto__.push((arguments[i__4731__auto___80560]));\n\nvar G__80561 = (i__4731__auto___80560 + (1));\ni__4731__auto___80560 = G__80561;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78918 = conformed_args__59513__auto__;\nvar map__78918__$1 = (((((!((map__78918 == null))))?(((((map__78918.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78918.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78918):map__78918);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78918__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78918__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78918__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"map\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.map.cljs$lang$applyTo = (function (seq78917){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78917));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (object \"hello\")\n * (object nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (object {:onClick f} \"hello\")\n * (object #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (object :#the-id.klass.other-klass \"hello\")\n * (object :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.object = (function com$fulcrologic$fulcro$dom$object(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80562 = arguments.length;\nvar i__4731__auto___80563 = (0);\nwhile(true){\nif((i__4731__auto___80563 < len__4730__auto___80562)){\nargs__4736__auto__.push((arguments[i__4731__auto___80563]));\n\nvar G__80564 = (i__4731__auto___80563 + (1));\ni__4731__auto___80563 = G__80564;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78921 = conformed_args__59513__auto__;\nvar map__78921__$1 = (((((!((map__78921 == null))))?(((((map__78921.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78921.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78921):map__78921);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78921__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78921__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78921__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"object\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.object.cljs$lang$applyTo = (function (seq78920){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78920));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (i \"hello\")\n * (i nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (i {:onClick f} \"hello\")\n * (i #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (i :#the-id.klass.other-klass \"hello\")\n * (i :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.i = (function com$fulcrologic$fulcro$dom$i(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80565 = arguments.length;\nvar i__4731__auto___80566 = (0);\nwhile(true){\nif((i__4731__auto___80566 < len__4730__auto___80565)){\nargs__4736__auto__.push((arguments[i__4731__auto___80566]));\n\nvar G__80567 = (i__4731__auto___80566 + (1));\ni__4731__auto___80566 = G__80567;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78924 = conformed_args__59513__auto__;\nvar map__78924__$1 = (((((!((map__78924 == null))))?(((((map__78924.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78924.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78924):map__78924);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78924__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78924__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78924__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"i\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.i.cljs$lang$applyTo = (function (seq78923){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78923));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-name \"hello\")\n * (font-face-name nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-name {:onClick f} \"hello\")\n * (font-face-name #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-name :#the-id.klass.other-klass \"hello\")\n * (font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font_face_name = (function com$fulcrologic$fulcro$dom$font_face_name(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80568 = arguments.length;\nvar i__4731__auto___80569 = (0);\nwhile(true){\nif((i__4731__auto___80569 < len__4730__auto___80568)){\nargs__4736__auto__.push((arguments[i__4731__auto___80569]));\n\nvar G__80570 = (i__4731__auto___80569 + (1));\ni__4731__auto___80569 = G__80570;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78931 = conformed_args__59513__auto__;\nvar map__78931__$1 = (((((!((map__78931 == null))))?(((((map__78931.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78931.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78931):map__78931);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78931__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78931__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78931__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-name\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$applyTo = (function (seq78926){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78926));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (p \"hello\")\n * (p nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (p {:onClick f} \"hello\")\n * (p #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (p :#the-id.klass.other-klass \"hello\")\n * (p :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.p = (function com$fulcrologic$fulcro$dom$p(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80571 = arguments.length;\nvar i__4731__auto___80572 = (0);\nwhile(true){\nif((i__4731__auto___80572 < len__4730__auto___80571)){\nargs__4736__auto__.push((arguments[i__4731__auto___80572]));\n\nvar G__80573 = (i__4731__auto___80572 + (1));\ni__4731__auto___80572 = G__80573;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78949 = conformed_args__59513__auto__;\nvar map__78949__$1 = (((((!((map__78949 == null))))?(((((map__78949.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78949.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78949):map__78949);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78949__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78949__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78949__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"p\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.p.cljs$lang$applyTo = (function (seq78945){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78945));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncR \"hello\")\n * (feFuncR nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncR {:onClick f} \"hello\")\n * (feFuncR #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncR :#the-id.klass.other-klass \"hello\")\n * (feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feFuncR = (function com$fulcrologic$fulcro$dom$feFuncR(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80574 = arguments.length;\nvar i__4731__auto___80575 = (0);\nwhile(true){\nif((i__4731__auto___80575 < len__4730__auto___80574)){\nargs__4736__auto__.push((arguments[i__4731__auto___80575]));\n\nvar G__80576 = (i__4731__auto___80575 + (1));\ni__4731__auto___80575 = G__80576;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78958 = conformed_args__59513__auto__;\nvar map__78958__$1 = (((((!((map__78958 == null))))?(((((map__78958.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78958.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78958):map__78958);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78958__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78958__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78958__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncR\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$applyTo = (function (seq78957){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78957));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatchpath \"hello\")\n * (hatchpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatchpath {:onClick f} \"hello\")\n * (hatchpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatchpath :#the-id.klass.other-klass \"hello\")\n * (hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.hatchpath = (function com$fulcrologic$fulcro$dom$hatchpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80577 = arguments.length;\nvar i__4731__auto___80578 = (0);\nwhile(true){\nif((i__4731__auto___80578 < len__4730__auto___80577)){\nargs__4736__auto__.push((arguments[i__4731__auto___80578]));\n\nvar G__80579 = (i__4731__auto___80578 + (1));\ni__4731__auto___80578 = G__80579;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78961 = conformed_args__59513__auto__;\nvar map__78961__$1 = (((((!((map__78961 == null))))?(((((map__78961.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78961.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78961):map__78961);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78961__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78961__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78961__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatchpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$applyTo = (function (seq78960){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78960));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphItem \"hello\")\n * (altGlyphItem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphItem {:onClick f} \"hello\")\n * (altGlyphItem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphItem :#the-id.klass.other-klass \"hello\")\n * (altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.altGlyphItem = (function com$fulcrologic$fulcro$dom$altGlyphItem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80580 = arguments.length;\nvar i__4731__auto___80581 = (0);\nwhile(true){\nif((i__4731__auto___80581 < len__4730__auto___80580)){\nargs__4736__auto__.push((arguments[i__4731__auto___80581]));\n\nvar G__80582 = (i__4731__auto___80581 + (1));\ni__4731__auto___80581 = G__80582;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78978 = conformed_args__59513__auto__;\nvar map__78978__$1 = (((((!((map__78978 == null))))?(((((map__78978.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78978.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78978):map__78978);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78978__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78978__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78978__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphItem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$applyTo = (function (seq78971){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78971));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (nav \"hello\")\n * (nav nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (nav {:onClick f} \"hello\")\n * (nav #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (nav :#the-id.klass.other-klass \"hello\")\n * (nav :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.nav = (function com$fulcrologic$fulcro$dom$nav(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80583 = arguments.length;\nvar i__4731__auto___80584 = (0);\nwhile(true){\nif((i__4731__auto___80584 < len__4730__auto___80583)){\nargs__4736__auto__.push((arguments[i__4731__auto___80584]));\n\nvar G__80585 = (i__4731__auto___80584 + (1));\ni__4731__auto___80584 = G__80585;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__78989 = conformed_args__59513__auto__;\nvar map__78989__$1 = (((((!((map__78989 == null))))?(((((map__78989.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__78989.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__78989):map__78989);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78989__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78989__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__78989__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"nav\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$applyTo = (function (seq78984){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78984));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ruby \"hello\")\n * (ruby nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ruby {:onClick f} \"hello\")\n * (ruby #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ruby :#the-id.klass.other-klass \"hello\")\n * (ruby :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.ruby = (function com$fulcrologic$fulcro$dom$ruby(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80586 = arguments.length;\nvar i__4731__auto___80587 = (0);\nwhile(true){\nif((i__4731__auto___80587 < len__4730__auto___80586)){\nargs__4736__auto__.push((arguments[i__4731__auto___80587]));\n\nvar G__80588 = (i__4731__auto___80587 + (1));\ni__4731__auto___80587 = G__80588;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79001 = conformed_args__59513__auto__;\nvar map__79001__$1 = (((((!((map__79001 == null))))?(((((map__79001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79001):map__79001);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79001__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79001__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79001__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ruby\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$applyTo = (function (seq78999){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq78999));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (switch \"hello\")\n * (switch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (switch {:onClick f} \"hello\")\n * (switch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (switch :#the-id.klass.other-klass \"hello\")\n * (switch :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.switch$ = (function com$fulcrologic$fulcro$dom$switch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80589 = arguments.length;\nvar i__4731__auto___80590 = (0);\nwhile(true){\nif((i__4731__auto___80590 < len__4730__auto___80589)){\nargs__4736__auto__.push((arguments[i__4731__auto___80590]));\n\nvar G__80591 = (i__4731__auto___80590 + (1));\ni__4731__auto___80590 = G__80591;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79011 = conformed_args__59513__auto__;\nvar map__79011__$1 = (((((!((map__79011 == null))))?(((((map__79011.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79011.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79011):map__79011);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79011__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79011__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79011__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"switch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$applyTo = (function (seq79007){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79007));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (a \"hello\")\n * (a nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (a {:onClick f} \"hello\")\n * (a #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (a :#the-id.klass.other-klass \"hello\")\n * (a :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.a = (function com$fulcrologic$fulcro$dom$a(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80592 = arguments.length;\nvar i__4731__auto___80593 = (0);\nwhile(true){\nif((i__4731__auto___80593 < len__4730__auto___80592)){\nargs__4736__auto__.push((arguments[i__4731__auto___80593]));\n\nvar G__80594 = (i__4731__auto___80593 + (1));\ni__4731__auto___80593 = G__80594;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79017 = conformed_args__59513__auto__;\nvar map__79017__$1 = (((((!((map__79017 == null))))?(((((map__79017.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79017.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79017):map__79017);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79017__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79017__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79017__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"a\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.a.cljs$lang$applyTo = (function (seq79016){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79016));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (view \"hello\")\n * (view nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (view {:onClick f} \"hello\")\n * (view #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (view :#the-id.klass.other-klass \"hello\")\n * (view :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.view = (function com$fulcrologic$fulcro$dom$view(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80595 = arguments.length;\nvar i__4731__auto___80596 = (0);\nwhile(true){\nif((i__4731__auto___80596 < len__4730__auto___80595)){\nargs__4736__auto__.push((arguments[i__4731__auto___80596]));\n\nvar G__80597 = (i__4731__auto___80596 + (1));\ni__4731__auto___80596 = G__80597;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79027 = conformed_args__59513__auto__;\nvar map__79027__$1 = (((((!((map__79027 == null))))?(((((map__79027.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79027.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79027):map__79027);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79027__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79027__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79027__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"view\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.view.cljs$lang$applyTo = (function (seq79022){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79022));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menu \"hello\")\n * (menu nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menu {:onClick f} \"hello\")\n * (menu #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menu :#the-id.klass.other-klass \"hello\")\n * (menu :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.menu = (function com$fulcrologic$fulcro$dom$menu(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80598 = arguments.length;\nvar i__4731__auto___80599 = (0);\nwhile(true){\nif((i__4731__auto___80599 < len__4730__auto___80598)){\nargs__4736__auto__.push((arguments[i__4731__auto___80599]));\n\nvar G__80600 = (i__4731__auto___80599 + (1));\ni__4731__auto___80599 = G__80600;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79032 = conformed_args__59513__auto__;\nvar map__79032__$1 = (((((!((map__79032 == null))))?(((((map__79032.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79032.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79032):map__79032);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79032__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79032__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79032__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menu\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$applyTo = (function (seq79031){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79031));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (blockquote \"hello\")\n * (blockquote nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (blockquote {:onClick f} \"hello\")\n * (blockquote #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (blockquote :#the-id.klass.other-klass \"hello\")\n * (blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.blockquote = (function com$fulcrologic$fulcro$dom$blockquote(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80601 = arguments.length;\nvar i__4731__auto___80602 = (0);\nwhile(true){\nif((i__4731__auto___80602 < len__4730__auto___80601)){\nargs__4736__auto__.push((arguments[i__4731__auto___80602]));\n\nvar G__80603 = (i__4731__auto___80602 + (1));\ni__4731__auto___80602 = G__80603;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79039 = conformed_args__59513__auto__;\nvar map__79039__$1 = (((((!((map__79039 == null))))?(((((map__79039.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79039.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79039):map__79039);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79039__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79039__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79039__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"blockquote\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$applyTo = (function (seq79038){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79038));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (img \"hello\")\n * (img nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (img {:onClick f} \"hello\")\n * (img #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (img :#the-id.klass.other-klass \"hello\")\n * (img :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.img = (function com$fulcrologic$fulcro$dom$img(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80604 = arguments.length;\nvar i__4731__auto___80605 = (0);\nwhile(true){\nif((i__4731__auto___80605 < len__4730__auto___80604)){\nargs__4736__auto__.push((arguments[i__4731__auto___80605]));\n\nvar G__80606 = (i__4731__auto___80605 + (1));\ni__4731__auto___80605 = G__80606;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79045 = conformed_args__59513__auto__;\nvar map__79045__$1 = (((((!((map__79045 == null))))?(((((map__79045.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79045.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79045):map__79045);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79045__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79045__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79045__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"img\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.img.cljs$lang$applyTo = (function (seq79041){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79041));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncG \"hello\")\n * (feFuncG nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncG {:onClick f} \"hello\")\n * (feFuncG #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncG :#the-id.klass.other-klass \"hello\")\n * (feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feFuncG = (function com$fulcrologic$fulcro$dom$feFuncG(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80607 = arguments.length;\nvar i__4731__auto___80608 = (0);\nwhile(true){\nif((i__4731__auto___80608 < len__4730__auto___80607)){\nargs__4736__auto__.push((arguments[i__4731__auto___80608]));\n\nvar G__80609 = (i__4731__auto___80608 + (1));\ni__4731__auto___80608 = G__80609;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79053 = conformed_args__59513__auto__;\nvar map__79053__$1 = (((((!((map__79053 == null))))?(((((map__79053.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79053.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79053):map__79053);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79053__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79053__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79053__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncG\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$applyTo = (function (seq79048){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79048));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (text \"hello\")\n * (text nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (text {:onClick f} \"hello\")\n * (text #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (text :#the-id.klass.other-klass \"hello\")\n * (text :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.text = (function com$fulcrologic$fulcro$dom$text(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80610 = arguments.length;\nvar i__4731__auto___80611 = (0);\nwhile(true){\nif((i__4731__auto___80611 < len__4730__auto___80610)){\nargs__4736__auto__.push((arguments[i__4731__auto___80611]));\n\nvar G__80612 = (i__4731__auto___80611 + (1));\ni__4731__auto___80611 = G__80612;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79060 = conformed_args__59513__auto__;\nvar map__79060__$1 = (((((!((map__79060 == null))))?(((((map__79060.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79060.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79060):map__79060);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79060__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79060__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79060__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"text\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.text.cljs$lang$applyTo = (function (seq79058){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79058));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (span \"hello\")\n * (span nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (span {:onClick f} \"hello\")\n * (span #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (span :#the-id.klass.other-klass \"hello\")\n * (span :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.span = (function com$fulcrologic$fulcro$dom$span(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80613 = arguments.length;\nvar i__4731__auto___80614 = (0);\nwhile(true){\nif((i__4731__auto___80614 < len__4730__auto___80613)){\nargs__4736__auto__.push((arguments[i__4731__auto___80614]));\n\nvar G__80615 = (i__4731__auto___80614 + (1));\ni__4731__auto___80614 = G__80615;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79064 = conformed_args__59513__auto__;\nvar map__79064__$1 = (((((!((map__79064 == null))))?(((((map__79064.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79064.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79064):map__79064);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79064__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79064__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79064__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"span\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.span.cljs$lang$applyTo = (function (seq79063){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79063));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (track \"hello\")\n * (track nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (track {:onClick f} \"hello\")\n * (track #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (track :#the-id.klass.other-klass \"hello\")\n * (track :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.track = (function com$fulcrologic$fulcro$dom$track(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80616 = arguments.length;\nvar i__4731__auto___80617 = (0);\nwhile(true){\nif((i__4731__auto___80617 < len__4730__auto___80616)){\nargs__4736__auto__.push((arguments[i__4731__auto___80617]));\n\nvar G__80618 = (i__4731__auto___80617 + (1));\ni__4731__auto___80617 = G__80618;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79067 = conformed_args__59513__auto__;\nvar map__79067__$1 = (((((!((map__79067 == null))))?(((((map__79067.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79067.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79067):map__79067);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79067__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79067__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79067__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"track\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.track.cljs$lang$applyTo = (function (seq79066){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79066));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (data \"hello\")\n * (data nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (data {:onClick f} \"hello\")\n * (data #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (data :#the-id.klass.other-klass \"hello\")\n * (data :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.data = (function com$fulcrologic$fulcro$dom$data(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80619 = arguments.length;\nvar i__4731__auto___80620 = (0);\nwhile(true){\nif((i__4731__auto___80620 < len__4730__auto___80619)){\nargs__4736__auto__.push((arguments[i__4731__auto___80620]));\n\nvar G__80621 = (i__4731__auto___80620 + (1));\ni__4731__auto___80620 = G__80621;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79070 = conformed_args__59513__auto__;\nvar map__79070__$1 = (((((!((map__79070 == null))))?(((((map__79070.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79070.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79070):map__79070);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79070__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79070__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79070__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"data\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.data.cljs$lang$applyTo = (function (seq79069){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79069));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (u \"hello\")\n * (u nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (u {:onClick f} \"hello\")\n * (u #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (u :#the-id.klass.other-klass \"hello\")\n * (u :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.u = (function com$fulcrologic$fulcro$dom$u(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80622 = arguments.length;\nvar i__4731__auto___80623 = (0);\nwhile(true){\nif((i__4731__auto___80623 < len__4730__auto___80622)){\nargs__4736__auto__.push((arguments[i__4731__auto___80623]));\n\nvar G__80624 = (i__4731__auto___80623 + (1));\ni__4731__auto___80623 = G__80624;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79077 = conformed_args__59513__auto__;\nvar map__79077__$1 = (((((!((map__79077 == null))))?(((((map__79077.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79077.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79077):map__79077);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79077__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79077__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79077__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"u\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.u.cljs$lang$applyTo = (function (seq79074){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79074));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dl \"hello\")\n * (dl nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dl {:onClick f} \"hello\")\n * (dl #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dl :#the-id.klass.other-klass \"hello\")\n * (dl :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.dl = (function com$fulcrologic$fulcro$dom$dl(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80625 = arguments.length;\nvar i__4731__auto___80626 = (0);\nwhile(true){\nif((i__4731__auto___80626 < len__4730__auto___80625)){\nargs__4736__auto__.push((arguments[i__4731__auto___80626]));\n\nvar G__80627 = (i__4731__auto___80626 + (1));\ni__4731__auto___80626 = G__80627;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79084 = conformed_args__59513__auto__;\nvar map__79084__$1 = (((((!((map__79084 == null))))?(((((map__79084.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79084.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79084):map__79084);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79084__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79084__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79084__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dl\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$applyTo = (function (seq79081){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79081));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (select \"hello\")\n * (select nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (select {:onClick f} \"hello\")\n * (select #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (select :#the-id.klass.other-klass \"hello\")\n * (select :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.select = (function com$fulcrologic$fulcro$dom$select(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80628 = arguments.length;\nvar i__4731__auto___80629 = (0);\nwhile(true){\nif((i__4731__auto___80629 < len__4730__auto___80628)){\nargs__4736__auto__.push((arguments[i__4731__auto___80629]));\n\nvar G__80630 = (i__4731__auto___80629 + (1));\ni__4731__auto___80629 = G__80630;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79095 = conformed_args__59513__auto__;\nvar map__79095__$1 = (((((!((map__79095 == null))))?(((((map__79095.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79095.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79095):map__79095);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79095__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79095__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79095__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"select\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.select.cljs$lang$applyTo = (function (seq79090){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79090));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polygon \"hello\")\n * (polygon nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polygon {:onClick f} \"hello\")\n * (polygon #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polygon :#the-id.klass.other-klass \"hello\")\n * (polygon :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.polygon = (function com$fulcrologic$fulcro$dom$polygon(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80631 = arguments.length;\nvar i__4731__auto___80632 = (0);\nwhile(true){\nif((i__4731__auto___80632 < len__4730__auto___80631)){\nargs__4736__auto__.push((arguments[i__4731__auto___80632]));\n\nvar G__80633 = (i__4731__auto___80632 + (1));\ni__4731__auto___80632 = G__80633;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79110 = conformed_args__59513__auto__;\nvar map__79110__$1 = (((((!((map__79110 == null))))?(((((map__79110.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79110.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79110):map__79110);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79110__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79110__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79110__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polygon\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$applyTo = (function (seq79106){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79106));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pattern \"hello\")\n * (pattern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pattern {:onClick f} \"hello\")\n * (pattern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pattern :#the-id.klass.other-klass \"hello\")\n * (pattern :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.pattern = (function com$fulcrologic$fulcro$dom$pattern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80634 = arguments.length;\nvar i__4731__auto___80635 = (0);\nwhile(true){\nif((i__4731__auto___80635 < len__4730__auto___80634)){\nargs__4736__auto__.push((arguments[i__4731__auto___80635]));\n\nvar G__80636 = (i__4731__auto___80635 + (1));\ni__4731__auto___80635 = G__80636;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79119 = conformed_args__59513__auto__;\nvar map__79119__$1 = (((((!((map__79119 == null))))?(((((map__79119.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79119.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79119):map__79119);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79119__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79119__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79119__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pattern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$applyTo = (function (seq79115){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79115));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (html \"hello\")\n * (html nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (html {:onClick f} \"hello\")\n * (html #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (html :#the-id.klass.other-klass \"hello\")\n * (html :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.html = (function com$fulcrologic$fulcro$dom$html(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80637 = arguments.length;\nvar i__4731__auto___80638 = (0);\nwhile(true){\nif((i__4731__auto___80638 < len__4730__auto___80637)){\nargs__4736__auto__.push((arguments[i__4731__auto___80638]));\n\nvar G__80639 = (i__4731__auto___80638 + (1));\ni__4731__auto___80638 = G__80639;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79124 = conformed_args__59513__auto__;\nvar map__79124__$1 = (((((!((map__79124 == null))))?(((((map__79124.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79124.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79124):map__79124);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79124__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79124__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79124__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"html\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.html.cljs$lang$applyTo = (function (seq79123){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79123));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (foreignObject \"hello\")\n * (foreignObject nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (foreignObject {:onClick f} \"hello\")\n * (foreignObject #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (foreignObject :#the-id.klass.other-klass \"hello\")\n * (foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.foreignObject = (function com$fulcrologic$fulcro$dom$foreignObject(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80640 = arguments.length;\nvar i__4731__auto___80641 = (0);\nwhile(true){\nif((i__4731__auto___80641 < len__4730__auto___80640)){\nargs__4736__auto__.push((arguments[i__4731__auto___80641]));\n\nvar G__80642 = (i__4731__auto___80641 + (1));\ni__4731__auto___80641 = G__80642;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79133 = conformed_args__59513__auto__;\nvar map__79133__$1 = (((((!((map__79133 == null))))?(((((map__79133.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79133.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79133):map__79133);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79133__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79133__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79133__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"foreignObject\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$applyTo = (function (seq79128){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79128));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (thead \"hello\")\n * (thead nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (thead {:onClick f} \"hello\")\n * (thead #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (thead :#the-id.klass.other-klass \"hello\")\n * (thead :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.thead = (function com$fulcrologic$fulcro$dom$thead(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80643 = arguments.length;\nvar i__4731__auto___80644 = (0);\nwhile(true){\nif((i__4731__auto___80644 < len__4730__auto___80643)){\nargs__4736__auto__.push((arguments[i__4731__auto___80644]));\n\nvar G__80645 = (i__4731__auto___80644 + (1));\ni__4731__auto___80644 = G__80645;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79138 = conformed_args__59513__auto__;\nvar map__79138__$1 = (((((!((map__79138 == null))))?(((((map__79138.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79138.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79138):map__79138);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79138__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79138__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79138__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"thead\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$applyTo = (function (seq79136){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79136));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (path \"hello\")\n * (path nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (path {:onClick f} \"hello\")\n * (path #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (path :#the-id.klass.other-klass \"hello\")\n * (path :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.path = (function com$fulcrologic$fulcro$dom$path(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80646 = arguments.length;\nvar i__4731__auto___80647 = (0);\nwhile(true){\nif((i__4731__auto___80647 < len__4730__auto___80646)){\nargs__4736__auto__.push((arguments[i__4731__auto___80647]));\n\nvar G__80648 = (i__4731__auto___80647 + (1));\ni__4731__auto___80647 = G__80648;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79150 = conformed_args__59513__auto__;\nvar map__79150__$1 = (((((!((map__79150 == null))))?(((((map__79150.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79150.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79150):map__79150);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79150__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79150__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79150__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"path\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.path.cljs$lang$applyTo = (function (seq79143){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79143));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (del \"hello\")\n * (del nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (del {:onClick f} \"hello\")\n * (del #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (del :#the-id.klass.other-klass \"hello\")\n * (del :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.del = (function com$fulcrologic$fulcro$dom$del(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80649 = arguments.length;\nvar i__4731__auto___80650 = (0);\nwhile(true){\nif((i__4731__auto___80650 < len__4730__auto___80649)){\nargs__4736__auto__.push((arguments[i__4731__auto___80650]));\n\nvar G__80651 = (i__4731__auto___80650 + (1));\ni__4731__auto___80650 = G__80651;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79165 = conformed_args__59513__auto__;\nvar map__79165__$1 = (((((!((map__79165 == null))))?(((((map__79165.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79165.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79165):map__79165);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79165__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79165__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79165__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"del\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.del.cljs$lang$applyTo = (function (seq79156){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79156));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyph \"hello\")\n * (altGlyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyph {:onClick f} \"hello\")\n * (altGlyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyph :#the-id.klass.other-klass \"hello\")\n * (altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.altGlyph = (function com$fulcrologic$fulcro$dom$altGlyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80652 = arguments.length;\nvar i__4731__auto___80653 = (0);\nwhile(true){\nif((i__4731__auto___80653 < len__4730__auto___80652)){\nargs__4736__auto__.push((arguments[i__4731__auto___80653]));\n\nvar G__80654 = (i__4731__auto___80653 + (1));\ni__4731__auto___80653 = G__80654;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79177 = conformed_args__59513__auto__;\nvar map__79177__$1 = (((((!((map__79177 == null))))?(((((map__79177.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79177.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79177):map__79177);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79177__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79177__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79177__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$applyTo = (function (seq79170){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79170));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fieldset \"hello\")\n * (fieldset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fieldset {:onClick f} \"hello\")\n * (fieldset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fieldset :#the-id.klass.other-klass \"hello\")\n * (fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.fieldset = (function com$fulcrologic$fulcro$dom$fieldset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80655 = arguments.length;\nvar i__4731__auto___80656 = (0);\nwhile(true){\nif((i__4731__auto___80656 < len__4730__auto___80655)){\nargs__4736__auto__.push((arguments[i__4731__auto___80656]));\n\nvar G__80657 = (i__4731__auto___80656 + (1));\ni__4731__auto___80656 = G__80657;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79183 = conformed_args__59513__auto__;\nvar map__79183__$1 = (((((!((map__79183 == null))))?(((((map__79183.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79183.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79183):map__79183);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79183__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79183__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79183__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fieldset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$applyTo = (function (seq79180){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79180));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (aside \"hello\")\n * (aside nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (aside {:onClick f} \"hello\")\n * (aside #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (aside :#the-id.klass.other-klass \"hello\")\n * (aside :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.aside = (function com$fulcrologic$fulcro$dom$aside(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80658 = arguments.length;\nvar i__4731__auto___80659 = (0);\nwhile(true){\nif((i__4731__auto___80659 < len__4730__auto___80658)){\nargs__4736__auto__.push((arguments[i__4731__auto___80659]));\n\nvar G__80660 = (i__4731__auto___80659 + (1));\ni__4731__auto___80659 = G__80660;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79191 = conformed_args__59513__auto__;\nvar map__79191__$1 = (((((!((map__79191 == null))))?(((((map__79191.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79191.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79191):map__79191);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79191__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79191__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79191__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"aside\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$applyTo = (function (seq79190){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79190));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feBlend \"hello\")\n * (feBlend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feBlend {:onClick f} \"hello\")\n * (feBlend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feBlend :#the-id.klass.other-klass \"hello\")\n * (feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feBlend = (function com$fulcrologic$fulcro$dom$feBlend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80661 = arguments.length;\nvar i__4731__auto___80662 = (0);\nwhile(true){\nif((i__4731__auto___80662 < len__4730__auto___80661)){\nargs__4736__auto__.push((arguments[i__4731__auto___80662]));\n\nvar G__80663 = (i__4731__auto___80662 + (1));\ni__4731__auto___80662 = G__80663;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79201 = conformed_args__59513__auto__;\nvar map__79201__$1 = (((((!((map__79201 == null))))?(((((map__79201.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79201.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79201):map__79201);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79201__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79201__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79201__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feBlend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$applyTo = (function (seq79196){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79196));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figure \"hello\")\n * (figure nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figure {:onClick f} \"hello\")\n * (figure #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figure :#the-id.klass.other-klass \"hello\")\n * (figure :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.figure = (function com$fulcrologic$fulcro$dom$figure(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80664 = arguments.length;\nvar i__4731__auto___80665 = (0);\nwhile(true){\nif((i__4731__auto___80665 < len__4730__auto___80664)){\nargs__4736__auto__.push((arguments[i__4731__auto___80665]));\n\nvar G__80666 = (i__4731__auto___80665 + (1));\ni__4731__auto___80665 = G__80666;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79204 = conformed_args__59513__auto__;\nvar map__79204__$1 = (((((!((map__79204 == null))))?(((((map__79204.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79204.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79204):map__79204);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79204__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79204__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79204__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figure\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$applyTo = (function (seq79203){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79203));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textPath \"hello\")\n * (textPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textPath {:onClick f} \"hello\")\n * (textPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textPath :#the-id.klass.other-klass \"hello\")\n * (textPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.textPath = (function com$fulcrologic$fulcro$dom$textPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80667 = arguments.length;\nvar i__4731__auto___80668 = (0);\nwhile(true){\nif((i__4731__auto___80668 < len__4730__auto___80667)){\nargs__4736__auto__.push((arguments[i__4731__auto___80668]));\n\nvar G__80669 = (i__4731__auto___80668 + (1));\ni__4731__auto___80668 = G__80669;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79219 = conformed_args__59513__auto__;\nvar map__79219__$1 = (((((!((map__79219 == null))))?(((((map__79219.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79219.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79219):map__79219);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79219__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79219__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79219__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$applyTo = (function (seq79212){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79212));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figcaption \"hello\")\n * (figcaption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figcaption {:onClick f} \"hello\")\n * (figcaption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figcaption :#the-id.klass.other-klass \"hello\")\n * (figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.figcaption = (function com$fulcrologic$fulcro$dom$figcaption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80670 = arguments.length;\nvar i__4731__auto___80671 = (0);\nwhile(true){\nif((i__4731__auto___80671 < len__4730__auto___80670)){\nargs__4736__auto__.push((arguments[i__4731__auto___80671]));\n\nvar G__80672 = (i__4731__auto___80671 + (1));\ni__4731__auto___80671 = G__80672;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79231 = conformed_args__59513__auto__;\nvar map__79231__$1 = (((((!((map__79231 == null))))?(((((map__79231.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79231.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79231):map__79231);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79231__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79231__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79231__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figcaption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$applyTo = (function (seq79224){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79224));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mask \"hello\")\n * (mask nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mask {:onClick f} \"hello\")\n * (mask #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mask :#the-id.klass.other-klass \"hello\")\n * (mask :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.mask = (function com$fulcrologic$fulcro$dom$mask(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80673 = arguments.length;\nvar i__4731__auto___80674 = (0);\nwhile(true){\nif((i__4731__auto___80674 < len__4730__auto___80673)){\nargs__4736__auto__.push((arguments[i__4731__auto___80674]));\n\nvar G__80675 = (i__4731__auto___80674 + (1));\ni__4731__auto___80674 = G__80675;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79238 = conformed_args__59513__auto__;\nvar map__79238__$1 = (((((!((map__79238 == null))))?(((((map__79238.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79238.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79238):map__79238);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79238__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79238__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79238__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mask\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$applyTo = (function (seq79237){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79237));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (q \"hello\")\n * (q nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (q {:onClick f} \"hello\")\n * (q #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (q :#the-id.klass.other-klass \"hello\")\n * (q :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.q = (function com$fulcrologic$fulcro$dom$q(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80676 = arguments.length;\nvar i__4731__auto___80677 = (0);\nwhile(true){\nif((i__4731__auto___80677 < len__4730__auto___80676)){\nargs__4736__auto__.push((arguments[i__4731__auto___80677]));\n\nvar G__80678 = (i__4731__auto___80677 + (1));\ni__4731__auto___80677 = G__80678;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79252 = conformed_args__59513__auto__;\nvar map__79252__$1 = (((((!((map__79252 == null))))?(((((map__79252.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79252.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79252):map__79252);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79252__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79252__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79252__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"q\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.q.cljs$lang$applyTo = (function (seq79250){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79250));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdi \"hello\")\n * (bdi nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdi {:onClick f} \"hello\")\n * (bdi #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdi :#the-id.klass.other-klass \"hello\")\n * (bdi :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.bdi = (function com$fulcrologic$fulcro$dom$bdi(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80679 = arguments.length;\nvar i__4731__auto___80680 = (0);\nwhile(true){\nif((i__4731__auto___80680 < len__4730__auto___80679)){\nargs__4736__auto__.push((arguments[i__4731__auto___80680]));\n\nvar G__80681 = (i__4731__auto___80680 + (1));\ni__4731__auto___80680 = G__80681;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79255 = conformed_args__59513__auto__;\nvar map__79255__$1 = (((((!((map__79255 == null))))?(((((map__79255.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79255.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79255):map__79255);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79255__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79255__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79255__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdi\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$applyTo = (function (seq79254){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79254));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDistantLight \"hello\")\n * (feDistantLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDistantLight {:onClick f} \"hello\")\n * (feDistantLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDistantLight :#the-id.klass.other-klass \"hello\")\n * (feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feDistantLight = (function com$fulcrologic$fulcro$dom$feDistantLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80682 = arguments.length;\nvar i__4731__auto___80683 = (0);\nwhile(true){\nif((i__4731__auto___80683 < len__4730__auto___80682)){\nargs__4736__auto__.push((arguments[i__4731__auto___80683]));\n\nvar G__80684 = (i__4731__auto___80683 + (1));\ni__4731__auto___80683 = G__80684;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79259 = conformed_args__59513__auto__;\nvar map__79259__$1 = (((((!((map__79259 == null))))?(((((map__79259.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79259.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79259):map__79259);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79259__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79259__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79259__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDistantLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$applyTo = (function (seq79257){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79257));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (video \"hello\")\n * (video nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (video {:onClick f} \"hello\")\n * (video #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (video :#the-id.klass.other-klass \"hello\")\n * (video :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.video = (function com$fulcrologic$fulcro$dom$video(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80685 = arguments.length;\nvar i__4731__auto___80686 = (0);\nwhile(true){\nif((i__4731__auto___80686 < len__4730__auto___80685)){\nargs__4736__auto__.push((arguments[i__4731__auto___80686]));\n\nvar G__80687 = (i__4731__auto___80686 + (1));\ni__4731__auto___80686 = G__80687;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79263 = conformed_args__59513__auto__;\nvar map__79263__$1 = (((((!((map__79263 == null))))?(((((map__79263.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79263.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79263):map__79263);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79263__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79263__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79263__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"video\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.video.cljs$lang$applyTo = (function (seq79262){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79262));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (address \"hello\")\n * (address nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (address {:onClick f} \"hello\")\n * (address #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (address :#the-id.klass.other-klass \"hello\")\n * (address :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.address = (function com$fulcrologic$fulcro$dom$address(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80688 = arguments.length;\nvar i__4731__auto___80689 = (0);\nwhile(true){\nif((i__4731__auto___80689 < len__4730__auto___80688)){\nargs__4736__auto__.push((arguments[i__4731__auto___80689]));\n\nvar G__80690 = (i__4731__auto___80689 + (1));\ni__4731__auto___80689 = G__80690;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79268 = conformed_args__59513__auto__;\nvar map__79268__$1 = (((((!((map__79268 == null))))?(((((map__79268.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79268.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79268):map__79268);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79268__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79268__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79268__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"address\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.address.cljs$lang$applyTo = (function (seq79265){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79265));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (caption \"hello\")\n * (caption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (caption {:onClick f} \"hello\")\n * (caption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (caption :#the-id.klass.other-klass \"hello\")\n * (caption :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.caption = (function com$fulcrologic$fulcro$dom$caption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80691 = arguments.length;\nvar i__4731__auto___80692 = (0);\nwhile(true){\nif((i__4731__auto___80692 < len__4730__auto___80691)){\nargs__4736__auto__.push((arguments[i__4731__auto___80692]));\n\nvar G__80693 = (i__4731__auto___80692 + (1));\ni__4731__auto___80692 = G__80693;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79273 = conformed_args__59513__auto__;\nvar map__79273__$1 = (((((!((map__79273 == null))))?(((((map__79273.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79273.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79273):map__79273);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79273__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79273__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79273__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"caption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$applyTo = (function (seq79271){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79271));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dd \"hello\")\n * (dd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dd {:onClick f} \"hello\")\n * (dd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dd :#the-id.klass.other-klass \"hello\")\n * (dd :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.dd = (function com$fulcrologic$fulcro$dom$dd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80694 = arguments.length;\nvar i__4731__auto___80695 = (0);\nwhile(true){\nif((i__4731__auto___80695 < len__4730__auto___80694)){\nargs__4736__auto__.push((arguments[i__4731__auto___80695]));\n\nvar G__80696 = (i__4731__auto___80695 + (1));\ni__4731__auto___80695 = G__80696;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79282 = conformed_args__59513__auto__;\nvar map__79282__$1 = (((((!((map__79282 == null))))?(((((map__79282.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79282.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79282):map__79282);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79282__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79282__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79282__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$applyTo = (function (seq79279){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79279));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rp \"hello\")\n * (rp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rp {:onClick f} \"hello\")\n * (rp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rp :#the-id.klass.other-klass \"hello\")\n * (rp :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.rp = (function com$fulcrologic$fulcro$dom$rp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80697 = arguments.length;\nvar i__4731__auto___80698 = (0);\nwhile(true){\nif((i__4731__auto___80698 < len__4730__auto___80697)){\nargs__4736__auto__.push((arguments[i__4731__auto___80698]));\n\nvar G__80699 = (i__4731__auto___80698 + (1));\ni__4731__auto___80698 = G__80699;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79295 = conformed_args__59513__auto__;\nvar map__79295__$1 = (((((!((map__79295 == null))))?(((((map__79295.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79295.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79295):map__79295);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79295__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79295__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79295__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$applyTo = (function (seq79287){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79287));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hr \"hello\")\n * (hr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hr {:onClick f} \"hello\")\n * (hr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hr :#the-id.klass.other-klass \"hello\")\n * (hr :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.hr = (function com$fulcrologic$fulcro$dom$hr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80700 = arguments.length;\nvar i__4731__auto___80701 = (0);\nwhile(true){\nif((i__4731__auto___80701 < len__4730__auto___80700)){\nargs__4736__auto__.push((arguments[i__4731__auto___80701]));\n\nvar G__80702 = (i__4731__auto___80701 + (1));\ni__4731__auto___80701 = G__80702;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79304 = conformed_args__59513__auto__;\nvar map__79304__$1 = (((((!((map__79304 == null))))?(((((map__79304.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79304.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79304):map__79304);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79304__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79304__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79304__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$applyTo = (function (seq79300){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79300));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meta \"hello\")\n * (meta nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meta {:onClick f} \"hello\")\n * (meta #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meta :#the-id.klass.other-klass \"hello\")\n * (meta :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.meta = (function com$fulcrologic$fulcro$dom$meta(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80703 = arguments.length;\nvar i__4731__auto___80704 = (0);\nwhile(true){\nif((i__4731__auto___80704 < len__4730__auto___80703)){\nargs__4736__auto__.push((arguments[i__4731__auto___80704]));\n\nvar G__80705 = (i__4731__auto___80704 + (1));\ni__4731__auto___80704 = G__80705;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79312 = conformed_args__59513__auto__;\nvar map__79312__$1 = (((((!((map__79312 == null))))?(((((map__79312.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79312.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79312):map__79312);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79312__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79312__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79312__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meta\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$applyTo = (function (seq79308){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79308));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tbody \"hello\")\n * (tbody nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tbody {:onClick f} \"hello\")\n * (tbody #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tbody :#the-id.klass.other-klass \"hello\")\n * (tbody :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.tbody = (function com$fulcrologic$fulcro$dom$tbody(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80706 = arguments.length;\nvar i__4731__auto___80707 = (0);\nwhile(true){\nif((i__4731__auto___80707 < len__4730__auto___80706)){\nargs__4736__auto__.push((arguments[i__4731__auto___80707]));\n\nvar G__80708 = (i__4731__auto___80707 + (1));\ni__4731__auto___80707 = G__80708;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79318 = conformed_args__59513__auto__;\nvar map__79318__$1 = (((((!((map__79318 == null))))?(((((map__79318.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79318.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79318):map__79318);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79318__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79318__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79318__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tbody\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$applyTo = (function (seq79317){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79317));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (desc \"hello\")\n * (desc nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (desc {:onClick f} \"hello\")\n * (desc #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (desc :#the-id.klass.other-klass \"hello\")\n * (desc :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.desc = (function com$fulcrologic$fulcro$dom$desc(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80709 = arguments.length;\nvar i__4731__auto___80710 = (0);\nwhile(true){\nif((i__4731__auto___80710 < len__4730__auto___80709)){\nargs__4736__auto__.push((arguments[i__4731__auto___80710]));\n\nvar G__80711 = (i__4731__auto___80710 + (1));\ni__4731__auto___80710 = G__80711;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79327 = conformed_args__59513__auto__;\nvar map__79327__$1 = (((((!((map__79327 == null))))?(((((map__79327.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79327.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79327):map__79327);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79327__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79327__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79327__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"desc\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$applyTo = (function (seq79322){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79322));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (table \"hello\")\n * (table nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (table {:onClick f} \"hello\")\n * (table #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (table :#the-id.klass.other-klass \"hello\")\n * (table :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.table = (function com$fulcrologic$fulcro$dom$table(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80712 = arguments.length;\nvar i__4731__auto___80713 = (0);\nwhile(true){\nif((i__4731__auto___80713 < len__4730__auto___80712)){\nargs__4736__auto__.push((arguments[i__4731__auto___80713]));\n\nvar G__80714 = (i__4731__auto___80713 + (1));\ni__4731__auto___80713 = G__80714;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79332 = conformed_args__59513__auto__;\nvar map__79332__$1 = (((((!((map__79332 == null))))?(((((map__79332.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79332.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79332):map__79332);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79332__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79332__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79332__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"table\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.table.cljs$lang$applyTo = (function (seq79329){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79329));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pre \"hello\")\n * (pre nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pre {:onClick f} \"hello\")\n * (pre #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pre :#the-id.klass.other-klass \"hello\")\n * (pre :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.pre = (function com$fulcrologic$fulcro$dom$pre(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80715 = arguments.length;\nvar i__4731__auto___80716 = (0);\nwhile(true){\nif((i__4731__auto___80716 < len__4730__auto___80715)){\nargs__4736__auto__.push((arguments[i__4731__auto___80716]));\n\nvar G__80717 = (i__4731__auto___80716 + (1));\ni__4731__auto___80716 = G__80717;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79345 = conformed_args__59513__auto__;\nvar map__79345__$1 = (((((!((map__79345 == null))))?(((((map__79345.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79345.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79345):map__79345);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79345__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79345__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79345__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pre\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$applyTo = (function (seq79337){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79337));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ul \"hello\")\n * (ul nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ul {:onClick f} \"hello\")\n * (ul #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ul :#the-id.klass.other-klass \"hello\")\n * (ul :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.ul = (function com$fulcrologic$fulcro$dom$ul(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80718 = arguments.length;\nvar i__4731__auto___80719 = (0);\nwhile(true){\nif((i__4731__auto___80719 < len__4730__auto___80718)){\nargs__4736__auto__.push((arguments[i__4731__auto___80719]));\n\nvar G__80720 = (i__4731__auto___80719 + (1));\ni__4731__auto___80719 = G__80720;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79356 = conformed_args__59513__auto__;\nvar map__79356__$1 = (((((!((map__79356 == null))))?(((((map__79356.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79356.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79356):map__79356);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79356__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79356__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79356__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ul\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$applyTo = (function (seq79355){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79355));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix \"hello\")\n * (feConvolveMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix {:onClick f} \"hello\")\n * (feConvolveMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n * (feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix = (function com$fulcrologic$fulcro$dom$feConvolveMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80721 = arguments.length;\nvar i__4731__auto___80722 = (0);\nwhile(true){\nif((i__4731__auto___80722 < len__4730__auto___80721)){\nargs__4736__auto__.push((arguments[i__4731__auto___80722]));\n\nvar G__80723 = (i__4731__auto___80722 + (1));\ni__4731__auto___80722 = G__80723;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79365 = conformed_args__59513__auto__;\nvar map__79365__$1 = (((((!((map__79365 == null))))?(((((map__79365.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79365.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79365):map__79365);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79365__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79365__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79365__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feConvolveMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$applyTo = (function (seq79363){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79363));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sup \"hello\")\n * (sup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sup {:onClick f} \"hello\")\n * (sup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sup :#the-id.klass.other-klass \"hello\")\n * (sup :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.sup = (function com$fulcrologic$fulcro$dom$sup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80724 = arguments.length;\nvar i__4731__auto___80725 = (0);\nwhile(true){\nif((i__4731__auto___80725 < len__4730__auto___80724)){\nargs__4736__auto__.push((arguments[i__4731__auto___80725]));\n\nvar G__80726 = (i__4731__auto___80725 + (1));\ni__4731__auto___80725 = G__80726;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79373 = conformed_args__59513__auto__;\nvar map__79373__$1 = (((((!((map__79373 == null))))?(((((map__79373.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79373.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79373):map__79373);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79373__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79373__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79373__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$applyTo = (function (seq79372){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79372));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dfn \"hello\")\n * (dfn nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dfn {:onClick f} \"hello\")\n * (dfn #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dfn :#the-id.klass.other-klass \"hello\")\n * (dfn :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.dfn = (function com$fulcrologic$fulcro$dom$dfn(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80727 = arguments.length;\nvar i__4731__auto___80728 = (0);\nwhile(true){\nif((i__4731__auto___80728 < len__4730__auto___80727)){\nargs__4736__auto__.push((arguments[i__4731__auto___80728]));\n\nvar G__80729 = (i__4731__auto___80728 + (1));\ni__4731__auto___80728 = G__80729;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79383 = conformed_args__59513__auto__;\nvar map__79383__$1 = (((((!((map__79383 == null))))?(((((map__79383.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79383.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79383):map__79383);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79383__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79383__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79383__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dfn\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$applyTo = (function (seq79381){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79381));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sub \"hello\")\n * (sub nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sub {:onClick f} \"hello\")\n * (sub #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sub :#the-id.klass.other-klass \"hello\")\n * (sub :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.sub = (function com$fulcrologic$fulcro$dom$sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80730 = arguments.length;\nvar i__4731__auto___80731 = (0);\nwhile(true){\nif((i__4731__auto___80731 < len__4730__auto___80730)){\nargs__4736__auto__.push((arguments[i__4731__auto___80731]));\n\nvar G__80732 = (i__4731__auto___80731 + (1));\ni__4731__auto___80731 = G__80732;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79395 = conformed_args__59513__auto__;\nvar map__79395__$1 = (((((!((map__79395 == null))))?(((((map__79395.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79395.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79395):map__79395);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79395__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79395__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79395__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sub\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$applyTo = (function (seq79391){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79391));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mark \"hello\")\n * (mark nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mark {:onClick f} \"hello\")\n * (mark #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mark :#the-id.klass.other-klass \"hello\")\n * (mark :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.mark = (function com$fulcrologic$fulcro$dom$mark(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80733 = arguments.length;\nvar i__4731__auto___80734 = (0);\nwhile(true){\nif((i__4731__auto___80734 < len__4730__auto___80733)){\nargs__4736__auto__.push((arguments[i__4731__auto___80734]));\n\nvar G__80735 = (i__4731__auto___80734 + (1));\ni__4731__auto___80734 = G__80735;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79404 = conformed_args__59513__auto__;\nvar map__79404__$1 = (((((!((map__79404 == null))))?(((((map__79404.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79404.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79404):map__79404);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79404__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79404__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79404__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mark\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$applyTo = (function (seq79398){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79398));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap \"hello\")\n * (feDisplacementMap nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap {:onClick f} \"hello\")\n * (feDisplacementMap #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDisplacementMap :#the-id.klass.other-klass \"hello\")\n * (feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feDisplacementMap = (function com$fulcrologic$fulcro$dom$feDisplacementMap(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80736 = arguments.length;\nvar i__4731__auto___80737 = (0);\nwhile(true){\nif((i__4731__auto___80737 < len__4730__auto___80736)){\nargs__4736__auto__.push((arguments[i__4731__auto___80737]));\n\nvar G__80738 = (i__4731__auto___80737 + (1));\ni__4731__auto___80737 = G__80738;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79413 = conformed_args__59513__auto__;\nvar map__79413__$1 = (((((!((map__79413 == null))))?(((((map__79413.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79413.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79413):map__79413);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79413__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79413__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79413__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDisplacementMap\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$applyTo = (function (seq79410){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79410));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (unknown \"hello\")\n * (unknown nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (unknown {:onClick f} \"hello\")\n * (unknown #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (unknown :#the-id.klass.other-klass \"hello\")\n * (unknown :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.unknown = (function com$fulcrologic$fulcro$dom$unknown(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80739 = arguments.length;\nvar i__4731__auto___80740 = (0);\nwhile(true){\nif((i__4731__auto___80740 < len__4730__auto___80739)){\nargs__4736__auto__.push((arguments[i__4731__auto___80740]));\n\nvar G__80741 = (i__4731__auto___80740 + (1));\ni__4731__auto___80740 = G__80741;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79416 = conformed_args__59513__auto__;\nvar map__79416__$1 = (((((!((map__79416 == null))))?(((((map__79416.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79416.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79416):map__79416);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79416__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79416__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79416__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"unknown\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$applyTo = (function (seq79415){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79415));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (script \"hello\")\n * (script nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (script {:onClick f} \"hello\")\n * (script #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (script :#the-id.klass.other-klass \"hello\")\n * (script :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.script = (function com$fulcrologic$fulcro$dom$script(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80742 = arguments.length;\nvar i__4731__auto___80743 = (0);\nwhile(true){\nif((i__4731__auto___80743 < len__4730__auto___80742)){\nargs__4736__auto__.push((arguments[i__4731__auto___80743]));\n\nvar G__80744 = (i__4731__auto___80743 + (1));\ni__4731__auto___80743 = G__80744;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79421 = conformed_args__59513__auto__;\nvar map__79421__$1 = (((((!((map__79421 == null))))?(((((map__79421.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79421.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79421):map__79421);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79421__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79421__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79421__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"script\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.script.cljs$lang$applyTo = (function (seq79419){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79419));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTurbulence \"hello\")\n * (feTurbulence nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTurbulence {:onClick f} \"hello\")\n * (feTurbulence #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTurbulence :#the-id.klass.other-klass \"hello\")\n * (feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feTurbulence = (function com$fulcrologic$fulcro$dom$feTurbulence(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80745 = arguments.length;\nvar i__4731__auto___80746 = (0);\nwhile(true){\nif((i__4731__auto___80746 < len__4730__auto___80745)){\nargs__4736__auto__.push((arguments[i__4731__auto___80746]));\n\nvar G__80747 = (i__4731__auto___80746 + (1));\ni__4731__auto___80746 = G__80747;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79426 = conformed_args__59513__auto__;\nvar map__79426__$1 = (((((!((map__79426 == null))))?(((((map__79426.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79426.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79426):map__79426);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79426__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79426__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79426__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTurbulence\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$applyTo = (function (seq79423){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79423));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (big \"hello\")\n * (big nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (big {:onClick f} \"hello\")\n * (big #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (big :#the-id.klass.other-klass \"hello\")\n * (big :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.big = (function com$fulcrologic$fulcro$dom$big(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80748 = arguments.length;\nvar i__4731__auto___80749 = (0);\nwhile(true){\nif((i__4731__auto___80749 < len__4730__auto___80748)){\nargs__4736__auto__.push((arguments[i__4731__auto___80749]));\n\nvar G__80750 = (i__4731__auto___80749 + (1));\ni__4731__auto___80749 = G__80750;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79439 = conformed_args__59513__auto__;\nvar map__79439__$1 = (((((!((map__79439 == null))))?(((((map__79439.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79439.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79439):map__79439);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79439__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79439__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79439__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"big\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.big.cljs$lang$applyTo = (function (seq79430){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79430));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (button \"hello\")\n * (button nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (button {:onClick f} \"hello\")\n * (button #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (button :#the-id.klass.other-klass \"hello\")\n * (button :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.button = (function com$fulcrologic$fulcro$dom$button(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80751 = arguments.length;\nvar i__4731__auto___80752 = (0);\nwhile(true){\nif((i__4731__auto___80752 < len__4730__auto___80751)){\nargs__4736__auto__.push((arguments[i__4731__auto___80752]));\n\nvar G__80753 = (i__4731__auto___80752 + (1));\ni__4731__auto___80752 = G__80753;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79450 = conformed_args__59513__auto__;\nvar map__79450__$1 = (((((!((map__79450 == null))))?(((((map__79450.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79450.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79450):map__79450);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79450__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79450__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79450__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"button\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.button.cljs$lang$applyTo = (function (seq79448){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79448));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-uri \"hello\")\n * (font-face-uri nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-uri {:onClick f} \"hello\")\n * (font-face-uri #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-uri :#the-id.klass.other-klass \"hello\")\n * (font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font_face_uri = (function com$fulcrologic$fulcro$dom$font_face_uri(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80754 = arguments.length;\nvar i__4731__auto___80755 = (0);\nwhile(true){\nif((i__4731__auto___80755 < len__4730__auto___80754)){\nargs__4736__auto__.push((arguments[i__4731__auto___80755]));\n\nvar G__80756 = (i__4731__auto___80755 + (1));\ni__4731__auto___80755 = G__80756;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79455 = conformed_args__59513__auto__;\nvar map__79455__$1 = (((((!((map__79455 == null))))?(((((map__79455.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79455.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79455):map__79455);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79455__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79455__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79455__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-uri\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$applyTo = (function (seq79454){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79454));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (wbr \"hello\")\n * (wbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (wbr {:onClick f} \"hello\")\n * (wbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (wbr :#the-id.klass.other-klass \"hello\")\n * (wbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.wbr = (function com$fulcrologic$fulcro$dom$wbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80757 = arguments.length;\nvar i__4731__auto___80758 = (0);\nwhile(true){\nif((i__4731__auto___80758 < len__4730__auto___80757)){\nargs__4736__auto__.push((arguments[i__4731__auto___80758]));\n\nvar G__80759 = (i__4731__auto___80758 + (1));\ni__4731__auto___80758 = G__80759;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79468 = conformed_args__59513__auto__;\nvar map__79468__$1 = (((((!((map__79468 == null))))?(((((map__79468.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79468.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79468):map__79468);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79468__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79468__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79468__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"wbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$applyTo = (function (seq79461){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79461));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (symbol \"hello\")\n * (symbol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (symbol {:onClick f} \"hello\")\n * (symbol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (symbol :#the-id.klass.other-klass \"hello\")\n * (symbol :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.symbol = (function com$fulcrologic$fulcro$dom$symbol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80760 = arguments.length;\nvar i__4731__auto___80761 = (0);\nwhile(true){\nif((i__4731__auto___80761 < len__4730__auto___80760)){\nargs__4736__auto__.push((arguments[i__4731__auto___80761]));\n\nvar G__80762 = (i__4731__auto___80761 + (1));\ni__4731__auto___80761 = G__80762;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79476 = conformed_args__59513__auto__;\nvar map__79476__$1 = (((((!((map__79476 == null))))?(((((map__79476.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79476.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79476):map__79476);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79476__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79476__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79476__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"symbol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$applyTo = (function (seq79472){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79472));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (strong \"hello\")\n * (strong nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (strong {:onClick f} \"hello\")\n * (strong #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (strong :#the-id.klass.other-klass \"hello\")\n * (strong :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.strong = (function com$fulcrologic$fulcro$dom$strong(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80763 = arguments.length;\nvar i__4731__auto___80764 = (0);\nwhile(true){\nif((i__4731__auto___80764 < len__4730__auto___80763)){\nargs__4736__auto__.push((arguments[i__4731__auto___80764]));\n\nvar G__80765 = (i__4731__auto___80764 + (1));\ni__4731__auto___80764 = G__80765;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79489 = conformed_args__59513__auto__;\nvar map__79489__$1 = (((((!((map__79489 == null))))?(((((map__79489.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79489.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79489):map__79489);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79489__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79489__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79489__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"strong\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$applyTo = (function (seq79479){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79479));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (use \"hello\")\n * (use nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (use {:onClick f} \"hello\")\n * (use #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (use :#the-id.klass.other-klass \"hello\")\n * (use :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.use = (function com$fulcrologic$fulcro$dom$use(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80766 = arguments.length;\nvar i__4731__auto___80767 = (0);\nwhile(true){\nif((i__4731__auto___80767 < len__4730__auto___80766)){\nargs__4736__auto__.push((arguments[i__4731__auto___80767]));\n\nvar G__80768 = (i__4731__auto___80767 + (1));\ni__4731__auto___80767 = G__80768;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79507 = conformed_args__59513__auto__;\nvar map__79507__$1 = (((((!((map__79507 == null))))?(((((map__79507.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79507.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79507):map__79507);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79507__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79507__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79507__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"use\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.use.cljs$lang$applyTo = (function (seq79497){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79497));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (solidcolor \"hello\")\n * (solidcolor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (solidcolor {:onClick f} \"hello\")\n * (solidcolor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (solidcolor :#the-id.klass.other-klass \"hello\")\n * (solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.solidcolor = (function com$fulcrologic$fulcro$dom$solidcolor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80769 = arguments.length;\nvar i__4731__auto___80770 = (0);\nwhile(true){\nif((i__4731__auto___80770 < len__4730__auto___80769)){\nargs__4736__auto__.push((arguments[i__4731__auto___80770]));\n\nvar G__80771 = (i__4731__auto___80770 + (1));\ni__4731__auto___80770 = G__80771;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79524 = conformed_args__59513__auto__;\nvar map__79524__$1 = (((((!((map__79524 == null))))?(((((map__79524.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79524.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79524):map__79524);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79524__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79524__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79524__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"solidcolor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$applyTo = (function (seq79520){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79520));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fePointLight \"hello\")\n * (fePointLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fePointLight {:onClick f} \"hello\")\n * (fePointLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fePointLight :#the-id.klass.other-klass \"hello\")\n * (fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.fePointLight = (function com$fulcrologic$fulcro$dom$fePointLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80772 = arguments.length;\nvar i__4731__auto___80773 = (0);\nwhile(true){\nif((i__4731__auto___80773 < len__4730__auto___80772)){\nargs__4736__auto__.push((arguments[i__4731__auto___80773]));\n\nvar G__80774 = (i__4731__auto___80773 + (1));\ni__4731__auto___80773 = G__80774;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79558 = conformed_args__59513__auto__;\nvar map__79558__$1 = (((((!((map__79558 == null))))?(((((map__79558.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79558.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79558):map__79558);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79558__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79558__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79558__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fePointLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$applyTo = (function (seq79535){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79535));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (li \"hello\")\n * (li nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (li {:onClick f} \"hello\")\n * (li #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (li :#the-id.klass.other-klass \"hello\")\n * (li :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.li = (function com$fulcrologic$fulcro$dom$li(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80775 = arguments.length;\nvar i__4731__auto___80776 = (0);\nwhile(true){\nif((i__4731__auto___80776 < len__4730__auto___80775)){\nargs__4736__auto__.push((arguments[i__4731__auto___80776]));\n\nvar G__80777 = (i__4731__auto___80776 + (1));\ni__4731__auto___80776 = G__80777;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79582 = conformed_args__59513__auto__;\nvar map__79582__$1 = (((((!((map__79582 == null))))?(((((map__79582.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79582.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79582):map__79582);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79582__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79582__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79582__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"li\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.li.cljs$lang$applyTo = (function (seq79579){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79579));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dt \"hello\")\n * (dt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dt {:onClick f} \"hello\")\n * (dt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dt :#the-id.klass.other-klass \"hello\")\n * (dt :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.dt = (function com$fulcrologic$fulcro$dom$dt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80778 = arguments.length;\nvar i__4731__auto___80779 = (0);\nwhile(true){\nif((i__4731__auto___80779 < len__4730__auto___80778)){\nargs__4736__auto__.push((arguments[i__4731__auto___80779]));\n\nvar G__80780 = (i__4731__auto___80779 + (1));\ni__4731__auto___80779 = G__80780;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79599 = conformed_args__59513__auto__;\nvar map__79599__$1 = (((((!((map__79599 == null))))?(((((map__79599.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79599.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79599):map__79599);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79599__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79599__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79599__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$applyTo = (function (seq79591){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79591));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncB \"hello\")\n * (feFuncB nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncB {:onClick f} \"hello\")\n * (feFuncB #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncB :#the-id.klass.other-klass \"hello\")\n * (feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feFuncB = (function com$fulcrologic$fulcro$dom$feFuncB(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80781 = arguments.length;\nvar i__4731__auto___80782 = (0);\nwhile(true){\nif((i__4731__auto___80782 < len__4730__auto___80781)){\nargs__4736__auto__.push((arguments[i__4731__auto___80782]));\n\nvar G__80783 = (i__4731__auto___80782 + (1));\ni__4731__auto___80782 = G__80783;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79609 = conformed_args__59513__auto__;\nvar map__79609__$1 = (((((!((map__79609 == null))))?(((((map__79609.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79609.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79609):map__79609);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79609__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79609__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79609__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncB\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$applyTo = (function (seq79603){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79603));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (marker \"hello\")\n * (marker nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (marker {:onClick f} \"hello\")\n * (marker #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (marker :#the-id.klass.other-klass \"hello\")\n * (marker :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.marker = (function com$fulcrologic$fulcro$dom$marker(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80784 = arguments.length;\nvar i__4731__auto___80785 = (0);\nwhile(true){\nif((i__4731__auto___80785 < len__4730__auto___80784)){\nargs__4736__auto__.push((arguments[i__4731__auto___80785]));\n\nvar G__80786 = (i__4731__auto___80785 + (1));\ni__4731__auto___80785 = G__80786;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79616 = conformed_args__59513__auto__;\nvar map__79616__$1 = (((((!((map__79616 == null))))?(((((map__79616.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79616.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79616):map__79616);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79616__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79616__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79616__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"marker\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$applyTo = (function (seq79611){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79611));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer \"hello\")\n * (feComponentTransfer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer {:onClick f} \"hello\")\n * (feComponentTransfer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComponentTransfer :#the-id.klass.other-klass \"hello\")\n * (feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feComponentTransfer = (function com$fulcrologic$fulcro$dom$feComponentTransfer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80787 = arguments.length;\nvar i__4731__auto___80788 = (0);\nwhile(true){\nif((i__4731__auto___80788 < len__4730__auto___80787)){\nargs__4736__auto__.push((arguments[i__4731__auto___80788]));\n\nvar G__80789 = (i__4731__auto___80788 + (1));\ni__4731__auto___80788 = G__80789;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79631 = conformed_args__59513__auto__;\nvar map__79631__$1 = (((((!((map__79631 == null))))?(((((map__79631.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79631.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79631):map__79631);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79631__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79631__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79631__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComponentTransfer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$applyTo = (function (seq79625){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79625));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (td \"hello\")\n * (td nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (td {:onClick f} \"hello\")\n * (td #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (td :#the-id.klass.other-klass \"hello\")\n * (td :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.td = (function com$fulcrologic$fulcro$dom$td(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80790 = arguments.length;\nvar i__4731__auto___80791 = (0);\nwhile(true){\nif((i__4731__auto___80791 < len__4730__auto___80790)){\nargs__4736__auto__.push((arguments[i__4731__auto___80791]));\n\nvar G__80792 = (i__4731__auto___80791 + (1));\ni__4731__auto___80791 = G__80792;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79645 = conformed_args__59513__auto__;\nvar map__79645__$1 = (((((!((map__79645 == null))))?(((((map__79645.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79645.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79645):map__79645);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79645__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79645__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79645__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"td\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.td.cljs$lang$applyTo = (function (seq79637){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79637));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tr \"hello\")\n * (tr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tr {:onClick f} \"hello\")\n * (tr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tr :#the-id.klass.other-klass \"hello\")\n * (tr :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.tr = (function com$fulcrologic$fulcro$dom$tr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80793 = arguments.length;\nvar i__4731__auto___80794 = (0);\nwhile(true){\nif((i__4731__auto___80794 < len__4730__auto___80793)){\nargs__4736__auto__.push((arguments[i__4731__auto___80794]));\n\nvar G__80795 = (i__4731__auto___80794 + (1));\ni__4731__auto___80794 = G__80795;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79662 = conformed_args__59513__auto__;\nvar map__79662__$1 = (((((!((map__79662 == null))))?(((((map__79662.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79662.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79662):map__79662);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79662__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79662__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79662__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$applyTo = (function (seq79661){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79661));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (circle \"hello\")\n * (circle nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (circle {:onClick f} \"hello\")\n * (circle #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (circle :#the-id.klass.other-klass \"hello\")\n * (circle :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.circle = (function com$fulcrologic$fulcro$dom$circle(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80796 = arguments.length;\nvar i__4731__auto___80797 = (0);\nwhile(true){\nif((i__4731__auto___80797 < len__4730__auto___80796)){\nargs__4736__auto__.push((arguments[i__4731__auto___80797]));\n\nvar G__80798 = (i__4731__auto___80797 + (1));\ni__4731__auto___80797 = G__80798;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79670 = conformed_args__59513__auto__;\nvar map__79670__$1 = (((((!((map__79670 == null))))?(((((map__79670.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79670.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79670):map__79670);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79670__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79670__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79670__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"circle\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$applyTo = (function (seq79667){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79667));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (section \"hello\")\n * (section nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (section {:onClick f} \"hello\")\n * (section #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (section :#the-id.klass.other-klass \"hello\")\n * (section :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.section = (function com$fulcrologic$fulcro$dom$section(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80799 = arguments.length;\nvar i__4731__auto___80800 = (0);\nwhile(true){\nif((i__4731__auto___80800 < len__4730__auto___80799)){\nargs__4736__auto__.push((arguments[i__4731__auto___80800]));\n\nvar G__80801 = (i__4731__auto___80800 + (1));\ni__4731__auto___80800 = G__80801;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79685 = conformed_args__59513__auto__;\nvar map__79685__$1 = (((((!((map__79685 == null))))?(((((map__79685.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79685.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79685):map__79685);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79685__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79685__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79685__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"section\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.section.cljs$lang$applyTo = (function (seq79678){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79678));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDropShadow \"hello\")\n * (feDropShadow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDropShadow {:onClick f} \"hello\")\n * (feDropShadow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDropShadow :#the-id.klass.other-klass \"hello\")\n * (feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feDropShadow = (function com$fulcrologic$fulcro$dom$feDropShadow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80802 = arguments.length;\nvar i__4731__auto___80803 = (0);\nwhile(true){\nif((i__4731__auto___80803 < len__4730__auto___80802)){\nargs__4736__auto__.push((arguments[i__4731__auto___80803]));\n\nvar G__80804 = (i__4731__auto___80803 + (1));\ni__4731__auto___80803 = G__80804;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79699 = conformed_args__59513__auto__;\nvar map__79699__$1 = (((((!((map__79699 == null))))?(((((map__79699.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79699.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79699):map__79699);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79699__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79699__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79699__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDropShadow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$applyTo = (function (seq79694){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79694));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (th \"hello\")\n * (th nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (th {:onClick f} \"hello\")\n * (th #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (th :#the-id.klass.other-klass \"hello\")\n * (th :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.th = (function com$fulcrologic$fulcro$dom$th(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80805 = arguments.length;\nvar i__4731__auto___80806 = (0);\nwhile(true){\nif((i__4731__auto___80806 < len__4730__auto___80805)){\nargs__4736__auto__.push((arguments[i__4731__auto___80806]));\n\nvar G__80807 = (i__4731__auto___80806 + (1));\ni__4731__auto___80806 = G__80807;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79711 = conformed_args__59513__auto__;\nvar map__79711__$1 = (((((!((map__79711 == null))))?(((((map__79711.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79711.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79711):map__79711);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79711__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79711__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79711__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"th\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.th.cljs$lang$applyTo = (function (seq79703){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79703));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (time \"hello\")\n * (time nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (time {:onClick f} \"hello\")\n * (time #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (time :#the-id.klass.other-klass \"hello\")\n * (time :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.time = (function com$fulcrologic$fulcro$dom$time(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80808 = arguments.length;\nvar i__4731__auto___80809 = (0);\nwhile(true){\nif((i__4731__auto___80809 < len__4730__auto___80808)){\nargs__4736__auto__.push((arguments[i__4731__auto___80809]));\n\nvar G__80810 = (i__4731__auto___80809 + (1));\ni__4731__auto___80809 = G__80810;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79726 = conformed_args__59513__auto__;\nvar map__79726__$1 = (((((!((map__79726 == null))))?(((((map__79726.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79726.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79726):map__79726);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79726__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79726__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79726__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"time\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.time.cljs$lang$applyTo = (function (seq79720){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79720));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (optgroup \"hello\")\n * (optgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (optgroup {:onClick f} \"hello\")\n * (optgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (optgroup :#the-id.klass.other-klass \"hello\")\n * (optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.optgroup = (function com$fulcrologic$fulcro$dom$optgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80811 = arguments.length;\nvar i__4731__auto___80812 = (0);\nwhile(true){\nif((i__4731__auto___80812 < len__4730__auto___80811)){\nargs__4736__auto__.push((arguments[i__4731__auto___80812]));\n\nvar G__80813 = (i__4731__auto___80812 + (1));\ni__4731__auto___80812 = G__80813;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79736 = conformed_args__59513__auto__;\nvar map__79736__$1 = (((((!((map__79736 == null))))?(((((map__79736.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79736.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79736):map__79736);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79736__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79736__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79736__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"optgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$applyTo = (function (seq79728){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79728));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (iframe \"hello\")\n * (iframe nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (iframe {:onClick f} \"hello\")\n * (iframe #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (iframe :#the-id.klass.other-klass \"hello\")\n * (iframe :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.iframe = (function com$fulcrologic$fulcro$dom$iframe(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80814 = arguments.length;\nvar i__4731__auto___80815 = (0);\nwhile(true){\nif((i__4731__auto___80815 < len__4730__auto___80814)){\nargs__4736__auto__.push((arguments[i__4731__auto___80815]));\n\nvar G__80816 = (i__4731__auto___80815 + (1));\ni__4731__auto___80815 = G__80816;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79748 = conformed_args__59513__auto__;\nvar map__79748__$1 = (((((!((map__79748 == null))))?(((((map__79748.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79748.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79748):map__79748);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79748__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79748__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79748__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"iframe\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$applyTo = (function (seq79744){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79744));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (color-profile \"hello\")\n * (color-profile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (color-profile {:onClick f} \"hello\")\n * (color-profile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (color-profile :#the-id.klass.other-klass \"hello\")\n * (color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.color_profile = (function com$fulcrologic$fulcro$dom$color_profile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80817 = arguments.length;\nvar i__4731__auto___80818 = (0);\nwhile(true){\nif((i__4731__auto___80818 < len__4730__auto___80817)){\nargs__4736__auto__.push((arguments[i__4731__auto___80818]));\n\nvar G__80819 = (i__4731__auto___80818 + (1));\ni__4731__auto___80818 = G__80819;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79754 = conformed_args__59513__auto__;\nvar map__79754__$1 = (((((!((map__79754 == null))))?(((((map__79754.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79754.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79754):map__79754);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79754__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79754__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79754__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"color-profile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$applyTo = (function (seq79753){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79753));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (legend \"hello\")\n * (legend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (legend {:onClick f} \"hello\")\n * (legend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (legend :#the-id.klass.other-klass \"hello\")\n * (legend :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.legend = (function com$fulcrologic$fulcro$dom$legend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80820 = arguments.length;\nvar i__4731__auto___80821 = (0);\nwhile(true){\nif((i__4731__auto___80821 < len__4730__auto___80820)){\nargs__4736__auto__.push((arguments[i__4731__auto___80821]));\n\nvar G__80822 = (i__4731__auto___80821 + (1));\ni__4731__auto___80821 = G__80822;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79765 = conformed_args__59513__auto__;\nvar map__79765__$1 = (((((!((map__79765 == null))))?(((((map__79765.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79765.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79765):map__79765);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79765__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79765__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79765__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"legend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$applyTo = (function (seq79759){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79759));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (em \"hello\")\n * (em nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (em {:onClick f} \"hello\")\n * (em #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (em :#the-id.klass.other-klass \"hello\")\n * (em :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.em = (function com$fulcrologic$fulcro$dom$em(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80823 = arguments.length;\nvar i__4731__auto___80824 = (0);\nwhile(true){\nif((i__4731__auto___80824 < len__4730__auto___80823)){\nargs__4736__auto__.push((arguments[i__4731__auto___80824]));\n\nvar G__80825 = (i__4731__auto___80824 + (1));\ni__4731__auto___80824 = G__80825;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79776 = conformed_args__59513__auto__;\nvar map__79776__$1 = (((((!((map__79776 == null))))?(((((map__79776.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79776.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79776):map__79776);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79776__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79776__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79776__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"em\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.em.cljs$lang$applyTo = (function (seq79773){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79773));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (kbd \"hello\")\n * (kbd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (kbd {:onClick f} \"hello\")\n * (kbd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (kbd :#the-id.klass.other-klass \"hello\")\n * (kbd :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.kbd = (function com$fulcrologic$fulcro$dom$kbd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80826 = arguments.length;\nvar i__4731__auto___80827 = (0);\nwhile(true){\nif((i__4731__auto___80827 < len__4730__auto___80826)){\nargs__4736__auto__.push((arguments[i__4731__auto___80827]));\n\nvar G__80828 = (i__4731__auto___80827 + (1));\ni__4731__auto___80827 = G__80828;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79785 = conformed_args__59513__auto__;\nvar map__79785__$1 = (((((!((map__79785 == null))))?(((((map__79785.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79785.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79785):map__79785);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79785__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79785__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79785__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"kbd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$applyTo = (function (seq79781){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79781));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (article \"hello\")\n * (article nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (article {:onClick f} \"hello\")\n * (article #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (article :#the-id.klass.other-klass \"hello\")\n * (article :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.article = (function com$fulcrologic$fulcro$dom$article(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80829 = arguments.length;\nvar i__4731__auto___80830 = (0);\nwhile(true){\nif((i__4731__auto___80830 < len__4730__auto___80829)){\nargs__4736__auto__.push((arguments[i__4731__auto___80830]));\n\nvar G__80831 = (i__4731__auto___80830 + (1));\ni__4731__auto___80830 = G__80831;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79798 = conformed_args__59513__auto__;\nvar map__79798__$1 = (((((!((map__79798 == null))))?(((((map__79798.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79798.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79798):map__79798);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79798__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79798__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79798__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"article\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.article.cljs$lang$applyTo = (function (seq79791){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79791));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateColor \"hello\")\n * (animateColor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateColor {:onClick f} \"hello\")\n * (animateColor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateColor :#the-id.klass.other-klass \"hello\")\n * (animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.animateColor = (function com$fulcrologic$fulcro$dom$animateColor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80832 = arguments.length;\nvar i__4731__auto___80833 = (0);\nwhile(true){\nif((i__4731__auto___80833 < len__4730__auto___80832)){\nargs__4736__auto__.push((arguments[i__4731__auto___80833]));\n\nvar G__80834 = (i__4731__auto___80833 + (1));\ni__4731__auto___80833 = G__80834;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79812 = conformed_args__59513__auto__;\nvar map__79812__$1 = (((((!((map__79812 == null))))?(((((map__79812.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79812.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79812):map__79812);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79812__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79812__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79812__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateColor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$applyTo = (function (seq79804){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79804));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (clipPath \"hello\")\n * (clipPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (clipPath {:onClick f} \"hello\")\n * (clipPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (clipPath :#the-id.klass.other-klass \"hello\")\n * (clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.clipPath = (function com$fulcrologic$fulcro$dom$clipPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80835 = arguments.length;\nvar i__4731__auto___80836 = (0);\nwhile(true){\nif((i__4731__auto___80836 < len__4730__auto___80835)){\nargs__4736__auto__.push((arguments[i__4731__auto___80836]));\n\nvar G__80837 = (i__4731__auto___80836 + (1));\ni__4731__auto___80836 = G__80837;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79827 = conformed_args__59513__auto__;\nvar map__79827__$1 = (((((!((map__79827 == null))))?(((((map__79827.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79827.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79827):map__79827);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79827__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79827__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79827__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"clipPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$applyTo = (function (seq79816){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79816));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (abbr \"hello\")\n * (abbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (abbr {:onClick f} \"hello\")\n * (abbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (abbr :#the-id.klass.other-klass \"hello\")\n * (abbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.abbr = (function com$fulcrologic$fulcro$dom$abbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80838 = arguments.length;\nvar i__4731__auto___80839 = (0);\nwhile(true){\nif((i__4731__auto___80839 < len__4730__auto___80838)){\nargs__4736__auto__.push((arguments[i__4731__auto___80839]));\n\nvar G__80840 = (i__4731__auto___80839 + (1));\ni__4731__auto___80839 = G__80840;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79835 = conformed_args__59513__auto__;\nvar map__79835__$1 = (((((!((map__79835 == null))))?(((((map__79835.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79835.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79835):map__79835);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79835__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79835__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79835__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"abbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$applyTo = (function (seq79832){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79832));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphDef \"hello\")\n * (altGlyphDef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphDef {:onClick f} \"hello\")\n * (altGlyphDef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphDef :#the-id.klass.other-klass \"hello\")\n * (altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.altGlyphDef = (function com$fulcrologic$fulcro$dom$altGlyphDef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80841 = arguments.length;\nvar i__4731__auto___80842 = (0);\nwhile(true){\nif((i__4731__auto___80842 < len__4730__auto___80841)){\nargs__4736__auto__.push((arguments[i__4731__auto___80842]));\n\nvar G__80843 = (i__4731__auto___80842 + (1));\ni__4731__auto___80842 = G__80843;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79848 = conformed_args__59513__auto__;\nvar map__79848__$1 = (((((!((map__79848 == null))))?(((((map__79848.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79848.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79848):map__79848);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79848__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79848__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79848__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphDef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$applyTo = (function (seq79842){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79842));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshrow \"hello\")\n * (meshrow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshrow {:onClick f} \"hello\")\n * (meshrow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshrow :#the-id.klass.other-klass \"hello\")\n * (meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.meshrow = (function com$fulcrologic$fulcro$dom$meshrow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80844 = arguments.length;\nvar i__4731__auto___80845 = (0);\nwhile(true){\nif((i__4731__auto___80845 < len__4730__auto___80844)){\nargs__4736__auto__.push((arguments[i__4731__auto___80845]));\n\nvar G__80846 = (i__4731__auto___80845 + (1));\ni__4731__auto___80845 = G__80846;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79857 = conformed_args__59513__auto__;\nvar map__79857__$1 = (((((!((map__79857 == null))))?(((((map__79857.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79857.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79857):map__79857);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79857__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79857__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79857__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshrow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$applyTo = (function (seq79856){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79856));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cursor \"hello\")\n * (cursor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cursor {:onClick f} \"hello\")\n * (cursor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cursor :#the-id.klass.other-klass \"hello\")\n * (cursor :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.cursor = (function com$fulcrologic$fulcro$dom$cursor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80847 = arguments.length;\nvar i__4731__auto___80848 = (0);\nwhile(true){\nif((i__4731__auto___80848 < len__4730__auto___80847)){\nargs__4736__auto__.push((arguments[i__4731__auto___80848]));\n\nvar G__80849 = (i__4731__auto___80848 + (1));\ni__4731__auto___80848 = G__80849;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79867 = conformed_args__59513__auto__;\nvar map__79867__$1 = (((((!((map__79867 == null))))?(((((map__79867.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79867.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79867):map__79867);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79867__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79867__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79867__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cursor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$applyTo = (function (seq79865){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79865));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animate \"hello\")\n * (animate nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animate {:onClick f} \"hello\")\n * (animate #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animate :#the-id.klass.other-klass \"hello\")\n * (animate :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.animate = (function com$fulcrologic$fulcro$dom$animate(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80850 = arguments.length;\nvar i__4731__auto___80851 = (0);\nwhile(true){\nif((i__4731__auto___80851 < len__4730__auto___80850)){\nargs__4736__auto__.push((arguments[i__4731__auto___80851]));\n\nvar G__80852 = (i__4731__auto___80851 + (1));\ni__4731__auto___80851 = G__80852;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79871 = conformed_args__59513__auto__;\nvar map__79871__$1 = (((((!((map__79871 == null))))?(((((map__79871.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79871.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79871):map__79871);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79871__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79871__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79871__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animate\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$applyTo = (function (seq79870){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79870));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (source \"hello\")\n * (source nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (source {:onClick f} \"hello\")\n * (source #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (source :#the-id.klass.other-klass \"hello\")\n * (source :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.source = (function com$fulcrologic$fulcro$dom$source(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80853 = arguments.length;\nvar i__4731__auto___80854 = (0);\nwhile(true){\nif((i__4731__auto___80854 < len__4730__auto___80853)){\nargs__4736__auto__.push((arguments[i__4731__auto___80854]));\n\nvar G__80855 = (i__4731__auto___80854 + (1));\ni__4731__auto___80854 = G__80855;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79880 = conformed_args__59513__auto__;\nvar map__79880__$1 = (((((!((map__79880 == null))))?(((((map__79880.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79880.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79880):map__79880);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79880__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79880__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79880__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"source\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.source.cljs$lang$applyTo = (function (seq79876){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79876));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (output \"hello\")\n * (output nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (output {:onClick f} \"hello\")\n * (output #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (output :#the-id.klass.other-klass \"hello\")\n * (output :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.output = (function com$fulcrologic$fulcro$dom$output(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80856 = arguments.length;\nvar i__4731__auto___80857 = (0);\nwhile(true){\nif((i__4731__auto___80857 < len__4730__auto___80856)){\nargs__4736__auto__.push((arguments[i__4731__auto___80857]));\n\nvar G__80858 = (i__4731__auto___80857 + (1));\ni__4731__auto___80857 = G__80858;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79890 = conformed_args__59513__auto__;\nvar map__79890__$1 = (((((!((map__79890 == null))))?(((((map__79890.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79890.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79890):map__79890);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79890__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79890__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79890__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"output\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.output.cljs$lang$applyTo = (function (seq79886){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79886));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face \"hello\")\n * (font-face nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face {:onClick f} \"hello\")\n * (font-face #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face :#the-id.klass.other-klass \"hello\")\n * (font-face :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font_face = (function com$fulcrologic$fulcro$dom$font_face(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80859 = arguments.length;\nvar i__4731__auto___80860 = (0);\nwhile(true){\nif((i__4731__auto___80860 < len__4730__auto___80859)){\nargs__4736__auto__.push((arguments[i__4731__auto___80860]));\n\nvar G__80861 = (i__4731__auto___80860 + (1));\ni__4731__auto___80860 = G__80861;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79898 = conformed_args__59513__auto__;\nvar map__79898__$1 = (((((!((map__79898 == null))))?(((((map__79898.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79898.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79898):map__79898);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79898__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79898__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79898__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$applyTo = (function (seq79892){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79892));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMergeNode \"hello\")\n * (feMergeNode nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMergeNode {:onClick f} \"hello\")\n * (feMergeNode #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMergeNode :#the-id.klass.other-klass \"hello\")\n * (feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feMergeNode = (function com$fulcrologic$fulcro$dom$feMergeNode(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80862 = arguments.length;\nvar i__4731__auto___80863 = (0);\nwhile(true){\nif((i__4731__auto___80863 < len__4730__auto___80862)){\nargs__4736__auto__.push((arguments[i__4731__auto___80863]));\n\nvar G__80864 = (i__4731__auto___80863 + (1));\ni__4731__auto___80863 = G__80864;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79905 = conformed_args__59513__auto__;\nvar map__79905__$1 = (((((!((map__79905 == null))))?(((((map__79905.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79905.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79905):map__79905);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79905__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79905__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79905__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMergeNode\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$applyTo = (function (seq79904){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79904));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpotLight \"hello\")\n * (feSpotLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpotLight {:onClick f} \"hello\")\n * (feSpotLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpotLight :#the-id.klass.other-klass \"hello\")\n * (feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feSpotLight = (function com$fulcrologic$fulcro$dom$feSpotLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80865 = arguments.length;\nvar i__4731__auto___80866 = (0);\nwhile(true){\nif((i__4731__auto___80866 < len__4730__auto___80865)){\nargs__4736__auto__.push((arguments[i__4731__auto___80866]));\n\nvar G__80867 = (i__4731__auto___80866 + (1));\ni__4731__auto___80866 = G__80867;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79912 = conformed_args__59513__auto__;\nvar map__79912__$1 = (((((!((map__79912 == null))))?(((((map__79912.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79912.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79912):map__79912);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79912__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79912__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79912__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpotLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$applyTo = (function (seq79910){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79910));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (header \"hello\")\n * (header nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (header {:onClick f} \"hello\")\n * (header #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (header :#the-id.klass.other-klass \"hello\")\n * (header :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.header = (function com$fulcrologic$fulcro$dom$header(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80868 = arguments.length;\nvar i__4731__auto___80869 = (0);\nwhile(true){\nif((i__4731__auto___80869 < len__4730__auto___80868)){\nargs__4736__auto__.push((arguments[i__4731__auto___80869]));\n\nvar G__80870 = (i__4731__auto___80869 + (1));\ni__4731__auto___80869 = G__80870;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79919 = conformed_args__59513__auto__;\nvar map__79919__$1 = (((((!((map__79919 == null))))?(((((map__79919.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79919.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79919):map__79919);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79919__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79919__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79919__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"header\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.header.cljs$lang$applyTo = (function (seq79917){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79917));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (datalist \"hello\")\n * (datalist nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (datalist {:onClick f} \"hello\")\n * (datalist #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (datalist :#the-id.klass.other-klass \"hello\")\n * (datalist :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.datalist = (function com$fulcrologic$fulcro$dom$datalist(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80871 = arguments.length;\nvar i__4731__auto___80872 = (0);\nwhile(true){\nif((i__4731__auto___80872 < len__4730__auto___80871)){\nargs__4736__auto__.push((arguments[i__4731__auto___80872]));\n\nvar G__80873 = (i__4731__auto___80872 + (1));\ni__4731__auto___80872 = G__80873;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79930 = conformed_args__59513__auto__;\nvar map__79930__$1 = (((((!((map__79930 == null))))?(((((map__79930.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79930.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79930):map__79930);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79930__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79930__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79930__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"datalist\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$applyTo = (function (seq79926){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79926));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tfoot \"hello\")\n * (tfoot nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tfoot {:onClick f} \"hello\")\n * (tfoot #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tfoot :#the-id.klass.other-klass \"hello\")\n * (tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.tfoot = (function com$fulcrologic$fulcro$dom$tfoot(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80874 = arguments.length;\nvar i__4731__auto___80875 = (0);\nwhile(true){\nif((i__4731__auto___80875 < len__4730__auto___80874)){\nargs__4736__auto__.push((arguments[i__4731__auto___80875]));\n\nvar G__80876 = (i__4731__auto___80875 + (1));\ni__4731__auto___80875 = G__80876;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79945 = conformed_args__59513__auto__;\nvar map__79945__$1 = (((((!((map__79945 == null))))?(((((map__79945.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79945.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79945):map__79945);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79945__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79945__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79945__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tfoot\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$applyTo = (function (seq79940){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79940));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (s \"hello\")\n * (s nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (s {:onClick f} \"hello\")\n * (s #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (s :#the-id.klass.other-klass \"hello\")\n * (s :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.s = (function com$fulcrologic$fulcro$dom$s(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80877 = arguments.length;\nvar i__4731__auto___80878 = (0);\nwhile(true){\nif((i__4731__auto___80878 < len__4730__auto___80877)){\nargs__4736__auto__.push((arguments[i__4731__auto___80878]));\n\nvar G__80879 = (i__4731__auto___80878 + (1));\ni__4731__auto___80878 = G__80879;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79956 = conformed_args__59513__auto__;\nvar map__79956__$1 = (((((!((map__79956 == null))))?(((((map__79956.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79956.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79956):map__79956);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79956__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79956__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79956__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"s\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.s.cljs$lang$applyTo = (function (seq79954){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79954));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatch \"hello\")\n * (hatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatch {:onClick f} \"hello\")\n * (hatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatch :#the-id.klass.other-klass \"hello\")\n * (hatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.hatch = (function com$fulcrologic$fulcro$dom$hatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80880 = arguments.length;\nvar i__4731__auto___80881 = (0);\nwhile(true){\nif((i__4731__auto___80881 < len__4730__auto___80880)){\nargs__4736__auto__.push((arguments[i__4731__auto___80881]));\n\nvar G__80882 = (i__4731__auto___80881 + (1));\ni__4731__auto___80881 = G__80882;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79964 = conformed_args__59513__auto__;\nvar map__79964__$1 = (((((!((map__79964 == null))))?(((((map__79964.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79964.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79964):map__79964);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79964__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79964__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79964__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$applyTo = (function (seq79963){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79963));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ins \"hello\")\n * (ins nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ins {:onClick f} \"hello\")\n * (ins #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ins :#the-id.klass.other-klass \"hello\")\n * (ins :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.ins = (function com$fulcrologic$fulcro$dom$ins(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80883 = arguments.length;\nvar i__4731__auto___80884 = (0);\nwhile(true){\nif((i__4731__auto___80884 < len__4730__auto___80883)){\nargs__4736__auto__.push((arguments[i__4731__auto___80884]));\n\nvar G__80885 = (i__4731__auto___80884 + (1));\ni__4731__auto___80884 = G__80885;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79972 = conformed_args__59513__auto__;\nvar map__79972__$1 = (((((!((map__79972 == null))))?(((((map__79972.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79972.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79972):map__79972);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79972__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79972__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79972__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ins\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$applyTo = (function (seq79968){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79968));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (footer \"hello\")\n * (footer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (footer {:onClick f} \"hello\")\n * (footer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (footer :#the-id.klass.other-klass \"hello\")\n * (footer :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.footer = (function com$fulcrologic$fulcro$dom$footer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80886 = arguments.length;\nvar i__4731__auto___80887 = (0);\nwhile(true){\nif((i__4731__auto___80887 < len__4730__auto___80886)){\nargs__4736__auto__.push((arguments[i__4731__auto___80887]));\n\nvar G__80888 = (i__4731__auto___80887 + (1));\ni__4731__auto___80887 = G__80888;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79978 = conformed_args__59513__auto__;\nvar map__79978__$1 = (((((!((map__79978 == null))))?(((((map__79978.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79978.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79978):map__79978);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79978__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79978__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79978__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"footer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$applyTo = (function (seq79977){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79977));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mpath \"hello\")\n * (mpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mpath {:onClick f} \"hello\")\n * (mpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mpath :#the-id.klass.other-klass \"hello\")\n * (mpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.mpath = (function com$fulcrologic$fulcro$dom$mpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80889 = arguments.length;\nvar i__4731__auto___80890 = (0);\nwhile(true){\nif((i__4731__auto___80890 < len__4730__auto___80889)){\nargs__4736__auto__.push((arguments[i__4731__auto___80890]));\n\nvar G__80891 = (i__4731__auto___80890 + (1));\ni__4731__auto___80890 = G__80891;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79986 = conformed_args__59513__auto__;\nvar map__79986__$1 = (((((!((map__79986 == null))))?(((((map__79986.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79986.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79986):map__79986);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79986__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79986__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79986__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$applyTo = (function (seq79983){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79983));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (title \"hello\")\n * (title nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (title {:onClick f} \"hello\")\n * (title #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (title :#the-id.klass.other-klass \"hello\")\n * (title :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.title = (function com$fulcrologic$fulcro$dom$title(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80892 = arguments.length;\nvar i__4731__auto___80893 = (0);\nwhile(true){\nif((i__4731__auto___80893 < len__4730__auto___80892)){\nargs__4736__auto__.push((arguments[i__4731__auto___80893]));\n\nvar G__80894 = (i__4731__auto___80893 + (1));\ni__4731__auto___80893 = G__80894;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79991 = conformed_args__59513__auto__;\nvar map__79991__$1 = (((((!((map__79991 == null))))?(((((map__79991.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79991.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79991):map__79991);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79991__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79991__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79991__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"title\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.title.cljs$lang$applyTo = (function (seq79989){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79989));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h5 \"hello\")\n * (h5 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h5 {:onClick f} \"hello\")\n * (h5 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h5 :#the-id.klass.other-klass \"hello\")\n * (h5 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h5 = (function com$fulcrologic$fulcro$dom$h5(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80895 = arguments.length;\nvar i__4731__auto___80896 = (0);\nwhile(true){\nif((i__4731__auto___80896 < len__4730__auto___80895)){\nargs__4736__auto__.push((arguments[i__4731__auto___80896]));\n\nvar G__80897 = (i__4731__auto___80896 + (1));\ni__4731__auto___80896 = G__80897;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__79997 = conformed_args__59513__auto__;\nvar map__79997__$1 = (((((!((map__79997 == null))))?(((((map__79997.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79997.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79997):map__79997);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79997__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79997__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79997__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h5\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$applyTo = (function (seq79996){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79996));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshgradient \"hello\")\n * (meshgradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshgradient {:onClick f} \"hello\")\n * (meshgradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshgradient :#the-id.klass.other-klass \"hello\")\n * (meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.meshgradient = (function com$fulcrologic$fulcro$dom$meshgradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80898 = arguments.length;\nvar i__4731__auto___80899 = (0);\nwhile(true){\nif((i__4731__auto___80899 < len__4730__auto___80898)){\nargs__4736__auto__.push((arguments[i__4731__auto___80899]));\n\nvar G__80900 = (i__4731__auto___80899 + (1));\ni__4731__auto___80899 = G__80900;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80000 = conformed_args__59513__auto__;\nvar map__80000__$1 = (((((!((map__80000 == null))))?(((((map__80000.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80000.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80000):map__80000);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80000__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80000__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80000__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshgradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$applyTo = (function (seq79999){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79999));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (canvas \"hello\")\n * (canvas nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (canvas {:onClick f} \"hello\")\n * (canvas #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (canvas :#the-id.klass.other-klass \"hello\")\n * (canvas :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.canvas = (function com$fulcrologic$fulcro$dom$canvas(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80901 = arguments.length;\nvar i__4731__auto___80902 = (0);\nwhile(true){\nif((i__4731__auto___80902 < len__4730__auto___80901)){\nargs__4736__auto__.push((arguments[i__4731__auto___80902]));\n\nvar G__80903 = (i__4731__auto___80902 + (1));\ni__4731__auto___80902 = G__80903;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80003 = conformed_args__59513__auto__;\nvar map__80003__$1 = (((((!((map__80003 == null))))?(((((map__80003.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80003.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80003):map__80003);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80003__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80003__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80003__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"canvas\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$applyTo = (function (seq80002){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80002));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (param \"hello\")\n * (param nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (param {:onClick f} \"hello\")\n * (param #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (param :#the-id.klass.other-klass \"hello\")\n * (param :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.param = (function com$fulcrologic$fulcro$dom$param(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80904 = arguments.length;\nvar i__4731__auto___80905 = (0);\nwhile(true){\nif((i__4731__auto___80905 < len__4730__auto___80904)){\nargs__4736__auto__.push((arguments[i__4731__auto___80905]));\n\nvar G__80906 = (i__4731__auto___80905 + (1));\ni__4731__auto___80905 = G__80906;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80010 = conformed_args__59513__auto__;\nvar map__80010__$1 = (((((!((map__80010 == null))))?(((((map__80010.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80010.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80010):map__80010);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80010__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80010__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80010__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"param\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.param.cljs$lang$applyTo = (function (seq80009){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80009));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font \"hello\")\n * (font nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font {:onClick f} \"hello\")\n * (font #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font :#the-id.klass.other-klass \"hello\")\n * (font :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font = (function com$fulcrologic$fulcro$dom$font(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80907 = arguments.length;\nvar i__4731__auto___80908 = (0);\nwhile(true){\nif((i__4731__auto___80908 < len__4730__auto___80907)){\nargs__4736__auto__.push((arguments[i__4731__auto___80908]));\n\nvar G__80909 = (i__4731__auto___80908 + (1));\ni__4731__auto___80908 = G__80909;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80018 = conformed_args__59513__auto__;\nvar map__80018__$1 = (((((!((map__80018 == null))))?(((((map__80018.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80018.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80018):map__80018);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80018__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80018__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80018__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font.cljs$lang$applyTo = (function (seq80012){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80012));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (div \"hello\")\n * (div nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (div {:onClick f} \"hello\")\n * (div #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (div :#the-id.klass.other-klass \"hello\")\n * (div :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.div = (function com$fulcrologic$fulcro$dom$div(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80910 = arguments.length;\nvar i__4731__auto___80911 = (0);\nwhile(true){\nif((i__4731__auto___80911 < len__4730__auto___80910)){\nargs__4736__auto__.push((arguments[i__4731__auto___80911]));\n\nvar G__80912 = (i__4731__auto___80911 + (1));\ni__4731__auto___80911 = G__80912;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80040 = conformed_args__59513__auto__;\nvar map__80040__$1 = (((((!((map__80040 == null))))?(((((map__80040.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80040.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80040):map__80040);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80040__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80040__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80040__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"div\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.div.cljs$lang$applyTo = (function (seq80030){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80030));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (option \"hello\")\n * (option nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (option {:onClick f} \"hello\")\n * (option #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (option :#the-id.klass.other-klass \"hello\")\n * (option :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.option = (function com$fulcrologic$fulcro$dom$option(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80913 = arguments.length;\nvar i__4731__auto___80914 = (0);\nwhile(true){\nif((i__4731__auto___80914 < len__4730__auto___80913)){\nargs__4736__auto__.push((arguments[i__4731__auto___80914]));\n\nvar G__80915 = (i__4731__auto___80914 + (1));\ni__4731__auto___80914 = G__80915;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80072 = conformed_args__59513__auto__;\nvar map__80072__$1 = (((((!((map__80072 == null))))?(((((map__80072.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80072.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80072):map__80072);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80072__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80072__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80072__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"option\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.option.cljs$lang$applyTo = (function (seq80056){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80056));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFlood \"hello\")\n * (feFlood nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFlood {:onClick f} \"hello\")\n * (feFlood #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFlood :#the-id.klass.other-klass \"hello\")\n * (feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feFlood = (function com$fulcrologic$fulcro$dom$feFlood(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80916 = arguments.length;\nvar i__4731__auto___80917 = (0);\nwhile(true){\nif((i__4731__auto___80917 < len__4730__auto___80916)){\nargs__4736__auto__.push((arguments[i__4731__auto___80917]));\n\nvar G__80918 = (i__4731__auto___80917 + (1));\ni__4731__auto___80917 = G__80918;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80093 = conformed_args__59513__auto__;\nvar map__80093__$1 = (((((!((map__80093 == null))))?(((((map__80093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80093):map__80093);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80093__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80093__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80093__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFlood\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$applyTo = (function (seq80086){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80086));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (summary \"hello\")\n * (summary nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (summary {:onClick f} \"hello\")\n * (summary #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (summary :#the-id.klass.other-klass \"hello\")\n * (summary :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.summary = (function com$fulcrologic$fulcro$dom$summary(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80919 = arguments.length;\nvar i__4731__auto___80920 = (0);\nwhile(true){\nif((i__4731__auto___80920 < len__4730__auto___80919)){\nargs__4736__auto__.push((arguments[i__4731__auto___80920]));\n\nvar G__80921 = (i__4731__auto___80920 + (1));\ni__4731__auto___80920 = G__80921;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80104 = conformed_args__59513__auto__;\nvar map__80104__$1 = (((((!((map__80104 == null))))?(((((map__80104.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80104.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80104):map__80104);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80104__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80104__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80104__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"summary\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$applyTo = (function (seq80101){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80101));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMorphology \"hello\")\n * (feMorphology nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMorphology {:onClick f} \"hello\")\n * (feMorphology #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMorphology :#the-id.klass.other-klass \"hello\")\n * (feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feMorphology = (function com$fulcrologic$fulcro$dom$feMorphology(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80922 = arguments.length;\nvar i__4731__auto___80923 = (0);\nwhile(true){\nif((i__4731__auto___80923 < len__4730__auto___80922)){\nargs__4736__auto__.push((arguments[i__4731__auto___80923]));\n\nvar G__80924 = (i__4731__auto___80923 + (1));\ni__4731__auto___80923 = G__80924;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80112 = conformed_args__59513__auto__;\nvar map__80112__$1 = (((((!((map__80112 == null))))?(((((map__80112.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80112.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80112):map__80112);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80112__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80112__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80112__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMorphology\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$applyTo = (function (seq80106){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80106));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (samp \"hello\")\n * (samp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (samp {:onClick f} \"hello\")\n * (samp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (samp :#the-id.klass.other-klass \"hello\")\n * (samp :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.samp = (function com$fulcrologic$fulcro$dom$samp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80925 = arguments.length;\nvar i__4731__auto___80926 = (0);\nwhile(true){\nif((i__4731__auto___80926 < len__4730__auto___80925)){\nargs__4736__auto__.push((arguments[i__4731__auto___80926]));\n\nvar G__80927 = (i__4731__auto___80926 + (1));\ni__4731__auto___80926 = G__80927;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80116 = conformed_args__59513__auto__;\nvar map__80116__$1 = (((((!((map__80116 == null))))?(((((map__80116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80116):map__80116);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80116__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80116__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80116__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"samp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$applyTo = (function (seq80115){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80115));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyphRef \"hello\")\n * (glyphRef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyphRef {:onClick f} \"hello\")\n * (glyphRef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyphRef :#the-id.klass.other-klass \"hello\")\n * (glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.glyphRef = (function com$fulcrologic$fulcro$dom$glyphRef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80928 = arguments.length;\nvar i__4731__auto___80929 = (0);\nwhile(true){\nif((i__4731__auto___80929 < len__4730__auto___80928)){\nargs__4736__auto__.push((arguments[i__4731__auto___80929]));\n\nvar G__80930 = (i__4731__auto___80929 + (1));\ni__4731__auto___80929 = G__80930;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80136 = conformed_args__59513__auto__;\nvar map__80136__$1 = (((((!((map__80136 == null))))?(((((map__80136.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80136.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80136):map__80136);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80136__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80136__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80136__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyphRef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$applyTo = (function (seq80123){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80123));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (small \"hello\")\n * (small nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (small {:onClick f} \"hello\")\n * (small #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (small :#the-id.klass.other-klass \"hello\")\n * (small :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.small = (function com$fulcrologic$fulcro$dom$small(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80931 = arguments.length;\nvar i__4731__auto___80932 = (0);\nwhile(true){\nif((i__4731__auto___80932 < len__4730__auto___80931)){\nargs__4736__auto__.push((arguments[i__4731__auto___80932]));\n\nvar G__80933 = (i__4731__auto___80932 + (1));\ni__4731__auto___80932 = G__80933;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80158 = conformed_args__59513__auto__;\nvar map__80158__$1 = (((((!((map__80158 == null))))?(((((map__80158.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80158.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80158):map__80158);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80158__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80158__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80158__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"small\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.small.cljs$lang$applyTo = (function (seq80153){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80153));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (style \"hello\")\n * (style nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (style {:onClick f} \"hello\")\n * (style #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (style :#the-id.klass.other-klass \"hello\")\n * (style :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.style = (function com$fulcrologic$fulcro$dom$style(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80934 = arguments.length;\nvar i__4731__auto___80935 = (0);\nwhile(true){\nif((i__4731__auto___80935 < len__4730__auto___80934)){\nargs__4736__auto__.push((arguments[i__4731__auto___80935]));\n\nvar G__80936 = (i__4731__auto___80935 + (1));\ni__4731__auto___80935 = G__80936;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80164 = conformed_args__59513__auto__;\nvar map__80164__$1 = (((((!((map__80164 == null))))?(((((map__80164.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80164.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80164):map__80164);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80164__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80164__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80164__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"style\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.style.cljs$lang$applyTo = (function (seq80160){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80160));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textarea \"hello\")\n * (textarea nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textarea {:onClick f} \"hello\")\n * (textarea #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textarea :#the-id.klass.other-klass \"hello\")\n * (textarea :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.textarea = (function com$fulcrologic$fulcro$dom$textarea(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80937 = arguments.length;\nvar i__4731__auto___80938 = (0);\nwhile(true){\nif((i__4731__auto___80938 < len__4730__auto___80937)){\nargs__4736__auto__.push((arguments[i__4731__auto___80938]));\n\nvar G__80939 = (i__4731__auto___80938 + (1));\ni__4731__auto___80938 = G__80939;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80173 = conformed_args__59513__auto__;\nvar map__80173__$1 = (((((!((map__80173 == null))))?(((((map__80173.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80173.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80173):map__80173);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80173__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80173__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80173__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textarea\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$applyTo = (function (seq80171){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80171));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur \"hello\")\n * (feGaussianBlur nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur {:onClick f} \"hello\")\n * (feGaussianBlur #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feGaussianBlur :#the-id.klass.other-klass \"hello\")\n * (feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feGaussianBlur = (function com$fulcrologic$fulcro$dom$feGaussianBlur(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80940 = arguments.length;\nvar i__4731__auto___80941 = (0);\nwhile(true){\nif((i__4731__auto___80941 < len__4730__auto___80940)){\nargs__4736__auto__.push((arguments[i__4731__auto___80941]));\n\nvar G__80942 = (i__4731__auto___80941 + (1));\ni__4731__auto___80941 = G__80942;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80182 = conformed_args__59513__auto__;\nvar map__80182__$1 = (((((!((map__80182 == null))))?(((((map__80182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80182):map__80182);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80182__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80182__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80182__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feGaussianBlur\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$applyTo = (function (seq80178){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80178));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h4 \"hello\")\n * (h4 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h4 {:onClick f} \"hello\")\n * (h4 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h4 :#the-id.klass.other-klass \"hello\")\n * (h4 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h4 = (function com$fulcrologic$fulcro$dom$h4(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80943 = arguments.length;\nvar i__4731__auto___80944 = (0);\nwhile(true){\nif((i__4731__auto___80944 < len__4730__auto___80943)){\nargs__4736__auto__.push((arguments[i__4731__auto___80944]));\n\nvar G__80945 = (i__4731__auto___80944 + (1));\ni__4731__auto___80944 = G__80945;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80187 = conformed_args__59513__auto__;\nvar map__80187__$1 = (((((!((map__80187 == null))))?(((((map__80187.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80187.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80187):map__80187);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80187__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80187__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80187__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h4\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$applyTo = (function (seq80184){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80184));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (head \"hello\")\n * (head nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (head {:onClick f} \"hello\")\n * (head #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (head :#the-id.klass.other-klass \"hello\")\n * (head :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.head = (function com$fulcrologic$fulcro$dom$head(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80946 = arguments.length;\nvar i__4731__auto___80947 = (0);\nwhile(true){\nif((i__4731__auto___80947 < len__4730__auto___80946)){\nargs__4736__auto__.push((arguments[i__4731__auto___80947]));\n\nvar G__80948 = (i__4731__auto___80947 + (1));\ni__4731__auto___80947 = G__80948;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80191 = conformed_args__59513__auto__;\nvar map__80191__$1 = (((((!((map__80191 == null))))?(((((map__80191.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80191.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80191):map__80191);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80191__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80191__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80191__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"head\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.head.cljs$lang$applyTo = (function (seq80190){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80190));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (g \"hello\")\n * (g nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (g {:onClick f} \"hello\")\n * (g #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (g :#the-id.klass.other-klass \"hello\")\n * (g :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.g = (function com$fulcrologic$fulcro$dom$g(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80949 = arguments.length;\nvar i__4731__auto___80950 = (0);\nwhile(true){\nif((i__4731__auto___80950 < len__4730__auto___80949)){\nargs__4736__auto__.push((arguments[i__4731__auto___80950]));\n\nvar G__80951 = (i__4731__auto___80950 + (1));\ni__4731__auto___80950 = G__80951;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80194 = conformed_args__59513__auto__;\nvar map__80194__$1 = (((((!((map__80194 == null))))?(((((map__80194.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80194.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80194):map__80194);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80194__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80194__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80194__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"g\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.g.cljs$lang$applyTo = (function (seq80193){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80193));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (missing-glyph \"hello\")\n * (missing-glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (missing-glyph {:onClick f} \"hello\")\n * (missing-glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (missing-glyph :#the-id.klass.other-klass \"hello\")\n * (missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.missing_glyph = (function com$fulcrologic$fulcro$dom$missing_glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80952 = arguments.length;\nvar i__4731__auto___80953 = (0);\nwhile(true){\nif((i__4731__auto___80953 < len__4730__auto___80952)){\nargs__4736__auto__.push((arguments[i__4731__auto___80953]));\n\nvar G__80954 = (i__4731__auto___80953 + (1));\ni__4731__auto___80953 = G__80954;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80203 = conformed_args__59513__auto__;\nvar map__80203__$1 = (((((!((map__80203 == null))))?(((((map__80203.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80203.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80203):map__80203);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80203__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80203__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80203__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"missing-glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$applyTo = (function (seq80200){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80200));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (stop \"hello\")\n * (stop nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (stop {:onClick f} \"hello\")\n * (stop #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (stop :#the-id.klass.other-klass \"hello\")\n * (stop :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.stop = (function com$fulcrologic$fulcro$dom$stop(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80955 = arguments.length;\nvar i__4731__auto___80956 = (0);\nwhile(true){\nif((i__4731__auto___80956 < len__4730__auto___80955)){\nargs__4736__auto__.push((arguments[i__4731__auto___80956]));\n\nvar G__80957 = (i__4731__auto___80956 + (1));\ni__4731__auto___80956 = G__80957;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80211 = conformed_args__59513__auto__;\nvar map__80211__$1 = (((((!((map__80211 == null))))?(((((map__80211.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80211.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80211):map__80211);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80211__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80211__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80211__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"stop\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$applyTo = (function (seq80209){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80209));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting \"hello\")\n * (feDiffuseLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting {:onClick f} \"hello\")\n * (feDiffuseLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n * (feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting = (function com$fulcrologic$fulcro$dom$feDiffuseLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80958 = arguments.length;\nvar i__4731__auto___80959 = (0);\nwhile(true){\nif((i__4731__auto___80959 < len__4730__auto___80958)){\nargs__4736__auto__.push((arguments[i__4731__auto___80959]));\n\nvar G__80960 = (i__4731__auto___80959 + (1));\ni__4731__auto___80959 = G__80960;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80217 = conformed_args__59513__auto__;\nvar map__80217__$1 = (((((!((map__80217 == null))))?(((((map__80217.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80217.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80217):map__80217);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80217__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80217__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80217__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDiffuseLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$applyTo = (function (seq80213){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80213));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (filter \"hello\")\n * (filter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (filter {:onClick f} \"hello\")\n * (filter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (filter :#the-id.klass.other-klass \"hello\")\n * (filter :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.filter = (function com$fulcrologic$fulcro$dom$filter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80961 = arguments.length;\nvar i__4731__auto___80962 = (0);\nwhile(true){\nif((i__4731__auto___80962 < len__4730__auto___80961)){\nargs__4736__auto__.push((arguments[i__4731__auto___80962]));\n\nvar G__80963 = (i__4731__auto___80962 + (1));\ni__4731__auto___80962 = G__80963;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80227 = conformed_args__59513__auto__;\nvar map__80227__$1 = (((((!((map__80227 == null))))?(((((map__80227.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80227.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80227):map__80227);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80227__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80227__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80227__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"filter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$applyTo = (function (seq80224){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80224));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComposite \"hello\")\n * (feComposite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComposite {:onClick f} \"hello\")\n * (feComposite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComposite :#the-id.klass.other-klass \"hello\")\n * (feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feComposite = (function com$fulcrologic$fulcro$dom$feComposite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80964 = arguments.length;\nvar i__4731__auto___80965 = (0);\nwhile(true){\nif((i__4731__auto___80965 < len__4730__auto___80964)){\nargs__4736__auto__.push((arguments[i__4731__auto___80965]));\n\nvar G__80966 = (i__4731__auto___80965 + (1));\ni__4731__auto___80965 = G__80966;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80240 = conformed_args__59513__auto__;\nvar map__80240__$1 = (((((!((map__80240 == null))))?(((((map__80240.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80240.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80240):map__80240);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80240__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80240__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80240__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComposite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$applyTo = (function (seq80239){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80239));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mesh \"hello\")\n * (mesh nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mesh {:onClick f} \"hello\")\n * (mesh #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mesh :#the-id.klass.other-klass \"hello\")\n * (mesh :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.mesh = (function com$fulcrologic$fulcro$dom$mesh(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80967 = arguments.length;\nvar i__4731__auto___80968 = (0);\nwhile(true){\nif((i__4731__auto___80968 < len__4730__auto___80967)){\nargs__4736__auto__.push((arguments[i__4731__auto___80968]));\n\nvar G__80969 = (i__4731__auto___80968 + (1));\ni__4731__auto___80968 = G__80969;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80248 = conformed_args__59513__auto__;\nvar map__80248__$1 = (((((!((map__80248 == null))))?(((((map__80248.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80248.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80248):map__80248);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80248__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80248__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80248__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mesh\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$applyTo = (function (seq80245){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80245));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (var \"hello\")\n * (var nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (var {:onClick f} \"hello\")\n * (var #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (var :#the-id.klass.other-klass \"hello\")\n * (var :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.var$ = (function com$fulcrologic$fulcro$dom$var(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80970 = arguments.length;\nvar i__4731__auto___80971 = (0);\nwhile(true){\nif((i__4731__auto___80971 < len__4730__auto___80970)){\nargs__4736__auto__.push((arguments[i__4731__auto___80971]));\n\nvar G__80972 = (i__4731__auto___80971 + (1));\ni__4731__auto___80971 = G__80972;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80254 = conformed_args__59513__auto__;\nvar map__80254__$1 = (((((!((map__80254 == null))))?(((((map__80254.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80254.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80254):map__80254);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80254__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80254__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80254__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"var\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$applyTo = (function (seq80252){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80252));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tspan \"hello\")\n * (tspan nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tspan {:onClick f} \"hello\")\n * (tspan #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tspan :#the-id.klass.other-klass \"hello\")\n * (tspan :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.tspan = (function com$fulcrologic$fulcro$dom$tspan(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80973 = arguments.length;\nvar i__4731__auto___80974 = (0);\nwhile(true){\nif((i__4731__auto___80974 < len__4730__auto___80973)){\nargs__4736__auto__.push((arguments[i__4731__auto___80974]));\n\nvar G__80975 = (i__4731__auto___80974 + (1));\ni__4731__auto___80974 = G__80975;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80263 = conformed_args__59513__auto__;\nvar map__80263__$1 = (((((!((map__80263 == null))))?(((((map__80263.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80263.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80263):map__80263);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80263__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80263__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80263__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tspan\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$applyTo = (function (seq80259){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80259));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ol \"hello\")\n * (ol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ol {:onClick f} \"hello\")\n * (ol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ol :#the-id.klass.other-klass \"hello\")\n * (ol :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.ol = (function com$fulcrologic$fulcro$dom$ol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80976 = arguments.length;\nvar i__4731__auto___80977 = (0);\nwhile(true){\nif((i__4731__auto___80977 < len__4730__auto___80976)){\nargs__4736__auto__.push((arguments[i__4731__auto___80977]));\n\nvar G__80978 = (i__4731__auto___80977 + (1));\ni__4731__auto___80977 = G__80978;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80269 = conformed_args__59513__auto__;\nvar map__80269__$1 = (((((!((map__80269 == null))))?(((((map__80269.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80269.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80269):map__80269);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80269__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80269__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80269__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$applyTo = (function (seq80267){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80267));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (details \"hello\")\n * (details nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (details {:onClick f} \"hello\")\n * (details #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (details :#the-id.klass.other-klass \"hello\")\n * (details :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.details = (function com$fulcrologic$fulcro$dom$details(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80979 = arguments.length;\nvar i__4731__auto___80980 = (0);\nwhile(true){\nif((i__4731__auto___80980 < len__4730__auto___80979)){\nargs__4736__auto__.push((arguments[i__4731__auto___80980]));\n\nvar G__80981 = (i__4731__auto___80980 + (1));\ni__4731__auto___80980 = G__80981;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80276 = conformed_args__59513__auto__;\nvar map__80276__$1 = (((((!((map__80276 == null))))?(((((map__80276.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80276.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80276):map__80276);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80276__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80276__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80276__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"details\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.details.cljs$lang$applyTo = (function (seq80273){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80273));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (line \"hello\")\n * (line nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (line {:onClick f} \"hello\")\n * (line #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (line :#the-id.klass.other-klass \"hello\")\n * (line :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.line = (function com$fulcrologic$fulcro$dom$line(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80982 = arguments.length;\nvar i__4731__auto___80983 = (0);\nwhile(true){\nif((i__4731__auto___80983 < len__4730__auto___80982)){\nargs__4736__auto__.push((arguments[i__4731__auto___80983]));\n\nvar G__80984 = (i__4731__auto___80983 + (1));\ni__4731__auto___80983 = G__80984;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80283 = conformed_args__59513__auto__;\nvar map__80283__$1 = (((((!((map__80283 == null))))?(((((map__80283.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80283.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80283):map__80283);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80283__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80283__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80283__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"line\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.line.cljs$lang$applyTo = (function (seq80279){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80279));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (col \"hello\")\n * (col nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (col {:onClick f} \"hello\")\n * (col #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (col :#the-id.klass.other-klass \"hello\")\n * (col :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.col = (function com$fulcrologic$fulcro$dom$col(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80985 = arguments.length;\nvar i__4731__auto___80986 = (0);\nwhile(true){\nif((i__4731__auto___80986 < len__4730__auto___80985)){\nargs__4736__auto__.push((arguments[i__4731__auto___80986]));\n\nvar G__80987 = (i__4731__auto___80986 + (1));\ni__4731__auto___80986 = G__80987;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80287 = conformed_args__59513__auto__;\nvar map__80287__$1 = (((((!((map__80287 == null))))?(((((map__80287.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80287.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80287):map__80287);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80287__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80287__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80287__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"col\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.col.cljs$lang$applyTo = (function (seq80286){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80286));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (label \"hello\")\n * (label nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (label {:onClick f} \"hello\")\n * (label #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (label :#the-id.klass.other-klass \"hello\")\n * (label :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.label = (function com$fulcrologic$fulcro$dom$label(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80988 = arguments.length;\nvar i__4731__auto___80989 = (0);\nwhile(true){\nif((i__4731__auto___80989 < len__4730__auto___80988)){\nargs__4736__auto__.push((arguments[i__4731__auto___80989]));\n\nvar G__80990 = (i__4731__auto___80989 + (1));\ni__4731__auto___80989 = G__80990;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80294 = conformed_args__59513__auto__;\nvar map__80294__$1 = (((((!((map__80294 == null))))?(((((map__80294.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80294.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80294):map__80294);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80294__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80294__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80294__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"label\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.label.cljs$lang$applyTo = (function (seq80293){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80293));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (picture \"hello\")\n * (picture nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (picture {:onClick f} \"hello\")\n * (picture #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (picture :#the-id.klass.other-klass \"hello\")\n * (picture :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.picture = (function com$fulcrologic$fulcro$dom$picture(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80991 = arguments.length;\nvar i__4731__auto___80992 = (0);\nwhile(true){\nif((i__4731__auto___80992 < len__4730__auto___80991)){\nargs__4736__auto__.push((arguments[i__4731__auto___80992]));\n\nvar G__80993 = (i__4731__auto___80992 + (1));\ni__4731__auto___80992 = G__80993;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80304 = conformed_args__59513__auto__;\nvar map__80304__$1 = (((((!((map__80304 == null))))?(((((map__80304.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80304.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80304):map__80304);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80304__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80304__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80304__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"picture\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$applyTo = (function (seq80302){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80302));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rt \"hello\")\n * (rt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rt {:onClick f} \"hello\")\n * (rt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rt :#the-id.klass.other-klass \"hello\")\n * (rt :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.rt = (function com$fulcrologic$fulcro$dom$rt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80994 = arguments.length;\nvar i__4731__auto___80995 = (0);\nwhile(true){\nif((i__4731__auto___80995 < len__4730__auto___80994)){\nargs__4736__auto__.push((arguments[i__4731__auto___80995]));\n\nvar G__80996 = (i__4731__auto___80995 + (1));\ni__4731__auto___80995 = G__80996;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80309 = conformed_args__59513__auto__;\nvar map__80309__$1 = (((((!((map__80309 == null))))?(((((map__80309.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80309.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80309):map__80309);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80309__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80309__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80309__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$applyTo = (function (seq80308){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80308));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h6 \"hello\")\n * (h6 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h6 {:onClick f} \"hello\")\n * (h6 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h6 :#the-id.klass.other-klass \"hello\")\n * (h6 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h6 = (function com$fulcrologic$fulcro$dom$h6(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___80997 = arguments.length;\nvar i__4731__auto___80998 = (0);\nwhile(true){\nif((i__4731__auto___80998 < len__4730__auto___80997)){\nargs__4736__auto__.push((arguments[i__4731__auto___80998]));\n\nvar G__80999 = (i__4731__auto___80998 + (1));\ni__4731__auto___80998 = G__80999;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80315 = conformed_args__59513__auto__;\nvar map__80315__$1 = (((((!((map__80315 == null))))?(((((map__80315.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80315.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80315):map__80315);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80315__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80315__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80315__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h6\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$applyTo = (function (seq80314){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80314));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (vkern \"hello\")\n * (vkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (vkern {:onClick f} \"hello\")\n * (vkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (vkern :#the-id.klass.other-klass \"hello\")\n * (vkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.vkern = (function com$fulcrologic$fulcro$dom$vkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81000 = arguments.length;\nvar i__4731__auto___81001 = (0);\nwhile(true){\nif((i__4731__auto___81001 < len__4730__auto___81000)){\nargs__4736__auto__.push((arguments[i__4731__auto___81001]));\n\nvar G__81002 = (i__4731__auto___81001 + (1));\ni__4731__auto___81001 = G__81002;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80330 = conformed_args__59513__auto__;\nvar map__80330__$1 = (((((!((map__80330 == null))))?(((((map__80330.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80330.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80330):map__80330);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80330__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80330__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80330__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"vkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$applyTo = (function (seq80324){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80324));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (link \"hello\")\n * (link nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (link {:onClick f} \"hello\")\n * (link #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (link :#the-id.klass.other-klass \"hello\")\n * (link :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.link = (function com$fulcrologic$fulcro$dom$link(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81003 = arguments.length;\nvar i__4731__auto___81004 = (0);\nwhile(true){\nif((i__4731__auto___81004 < len__4730__auto___81003)){\nargs__4736__auto__.push((arguments[i__4731__auto___81004]));\n\nvar G__81005 = (i__4731__auto___81004 + (1));\ni__4731__auto___81004 = G__81005;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80360 = conformed_args__59513__auto__;\nvar map__80360__$1 = (((((!((map__80360 == null))))?(((((map__80360.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80360.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80360):map__80360);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80360__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80360__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80360__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"link\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.link.cljs$lang$applyTo = (function (seq80355){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80355));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (defs \"hello\")\n * (defs nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (defs {:onClick f} \"hello\")\n * (defs #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (defs :#the-id.klass.other-klass \"hello\")\n * (defs :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.defs = (function com$fulcrologic$fulcro$dom$defs(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81006 = arguments.length;\nvar i__4731__auto___81007 = (0);\nwhile(true){\nif((i__4731__auto___81007 < len__4730__auto___81006)){\nargs__4736__auto__.push((arguments[i__4731__auto___81007]));\n\nvar G__81008 = (i__4731__auto___81007 + (1));\ni__4731__auto___81007 = G__81008;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80368 = conformed_args__59513__auto__;\nvar map__80368__$1 = (((((!((map__80368 == null))))?(((((map__80368.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80368.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80368):map__80368);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80368__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80368__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80368__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"defs\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$applyTo = (function (seq80363){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80363));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyph \"hello\")\n * (glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyph {:onClick f} \"hello\")\n * (glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyph :#the-id.klass.other-klass \"hello\")\n * (glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.glyph = (function com$fulcrologic$fulcro$dom$glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81009 = arguments.length;\nvar i__4731__auto___81010 = (0);\nwhile(true){\nif((i__4731__auto___81010 < len__4730__auto___81009)){\nargs__4736__auto__.push((arguments[i__4731__auto___81010]));\n\nvar G__81011 = (i__4731__auto___81010 + (1));\ni__4731__auto___81010 = G__81011;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80374 = conformed_args__59513__auto__;\nvar map__80374__$1 = (((((!((map__80374 == null))))?(((((map__80374.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80374.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80374):map__80374);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80374__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80374__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80374__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$applyTo = (function (seq80373){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80373));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (colgroup \"hello\")\n * (colgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (colgroup {:onClick f} \"hello\")\n * (colgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (colgroup :#the-id.klass.other-klass \"hello\")\n * (colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.colgroup = (function com$fulcrologic$fulcro$dom$colgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81012 = arguments.length;\nvar i__4731__auto___81013 = (0);\nwhile(true){\nif((i__4731__auto___81013 < len__4730__auto___81012)){\nargs__4736__auto__.push((arguments[i__4731__auto___81013]));\n\nvar G__81014 = (i__4731__auto___81013 + (1));\ni__4731__auto___81013 = G__81014;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80377 = conformed_args__59513__auto__;\nvar map__80377__$1 = (((((!((map__80377 == null))))?(((((map__80377.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80377.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80377):map__80377);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80377__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80377__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80377__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"colgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$applyTo = (function (seq80376){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80376));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meter \"hello\")\n * (meter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meter {:onClick f} \"hello\")\n * (meter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meter :#the-id.klass.other-klass \"hello\")\n * (meter :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.meter = (function com$fulcrologic$fulcro$dom$meter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81015 = arguments.length;\nvar i__4731__auto___81016 = (0);\nwhile(true){\nif((i__4731__auto___81016 < len__4730__auto___81015)){\nargs__4736__auto__.push((arguments[i__4731__auto___81016]));\n\nvar G__81017 = (i__4731__auto___81016 + (1));\ni__4731__auto___81016 = G__81017;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80381 = conformed_args__59513__auto__;\nvar map__80381__$1 = (((((!((map__80381 == null))))?(((((map__80381.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80381.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80381):map__80381);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80381__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80381__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80381__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$applyTo = (function (seq80379){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80379));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdo \"hello\")\n * (bdo nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdo {:onClick f} \"hello\")\n * (bdo #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdo :#the-id.klass.other-klass \"hello\")\n * (bdo :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.bdo = (function com$fulcrologic$fulcro$dom$bdo(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81018 = arguments.length;\nvar i__4731__auto___81019 = (0);\nwhile(true){\nif((i__4731__auto___81019 < len__4730__auto___81018)){\nargs__4736__auto__.push((arguments[i__4731__auto___81019]));\n\nvar G__81020 = (i__4731__auto___81019 + (1));\ni__4731__auto___81019 = G__81020;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80394 = conformed_args__59513__auto__;\nvar map__80394__$1 = (((((!((map__80394 == null))))?(((((map__80394.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80394.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80394):map__80394);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80394__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80394__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80394__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdo\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$applyTo = (function (seq80391){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80391));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feImage \"hello\")\n * (feImage nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feImage {:onClick f} \"hello\")\n * (feImage #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feImage :#the-id.klass.other-klass \"hello\")\n * (feImage :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feImage = (function com$fulcrologic$fulcro$dom$feImage(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81021 = arguments.length;\nvar i__4731__auto___81022 = (0);\nwhile(true){\nif((i__4731__auto___81022 < len__4730__auto___81021)){\nargs__4736__auto__.push((arguments[i__4731__auto___81022]));\n\nvar G__81023 = (i__4731__auto___81022 + (1));\ni__4731__auto___81022 = G__81023;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80398 = conformed_args__59513__auto__;\nvar map__80398__$1 = (((((!((map__80398 == null))))?(((((map__80398.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80398.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80398):map__80398);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80398__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80398__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80398__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feImage\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$applyTo = (function (seq80396){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80396));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (b \"hello\")\n * (b nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (b {:onClick f} \"hello\")\n * (b #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (b :#the-id.klass.other-klass \"hello\")\n * (b :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.b = (function com$fulcrologic$fulcro$dom$b(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81024 = arguments.length;\nvar i__4731__auto___81025 = (0);\nwhile(true){\nif((i__4731__auto___81025 < len__4730__auto___81024)){\nargs__4736__auto__.push((arguments[i__4731__auto___81025]));\n\nvar G__81026 = (i__4731__auto___81025 + (1));\ni__4731__auto___81025 = G__81026;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80402 = conformed_args__59513__auto__;\nvar map__80402__$1 = (((((!((map__80402 == null))))?(((((map__80402.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80402.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80402):map__80402);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80402__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80402__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80402__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"b\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.b.cljs$lang$applyTo = (function (seq80401){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80401));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (svg \"hello\")\n * (svg nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (svg {:onClick f} \"hello\")\n * (svg #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (svg :#the-id.klass.other-klass \"hello\")\n * (svg :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.svg = (function com$fulcrologic$fulcro$dom$svg(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81027 = arguments.length;\nvar i__4731__auto___81028 = (0);\nwhile(true){\nif((i__4731__auto___81028 < len__4730__auto___81027)){\nargs__4736__auto__.push((arguments[i__4731__auto___81028]));\n\nvar G__81029 = (i__4731__auto___81028 + (1));\ni__4731__auto___81028 = G__81029;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80405 = conformed_args__59513__auto__;\nvar map__80405__$1 = (((((!((map__80405 == null))))?(((((map__80405.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80405.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80405):map__80405);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80405__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80405__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80405__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"svg\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$applyTo = (function (seq80404){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80404));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTile \"hello\")\n * (feTile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTile {:onClick f} \"hello\")\n * (feTile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTile :#the-id.klass.other-klass \"hello\")\n * (feTile :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feTile = (function com$fulcrologic$fulcro$dom$feTile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81030 = arguments.length;\nvar i__4731__auto___81031 = (0);\nwhile(true){\nif((i__4731__auto___81031 < len__4730__auto___81030)){\nargs__4736__auto__.push((arguments[i__4731__auto___81031]));\n\nvar G__81032 = (i__4731__auto___81031 + (1));\ni__4731__auto___81031 = G__81032;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80409 = conformed_args__59513__auto__;\nvar map__80409__$1 = (((((!((map__80409 == null))))?(((((map__80409.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80409.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80409):map__80409);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80409__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80409__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80409__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$applyTo = (function (seq80407){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80407));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ellipse \"hello\")\n * (ellipse nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ellipse {:onClick f} \"hello\")\n * (ellipse #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ellipse :#the-id.klass.other-klass \"hello\")\n * (ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.ellipse = (function com$fulcrologic$fulcro$dom$ellipse(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81033 = arguments.length;\nvar i__4731__auto___81034 = (0);\nwhile(true){\nif((i__4731__auto___81034 < len__4730__auto___81033)){\nargs__4736__auto__.push((arguments[i__4731__auto___81034]));\n\nvar G__81035 = (i__4731__auto___81034 + (1));\ni__4731__auto___81034 = G__81035;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80412 = conformed_args__59513__auto__;\nvar map__80412__$1 = (((((!((map__80412 == null))))?(((((map__80412.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80412.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80412):map__80412);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80412__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80412__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80412__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ellipse\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$applyTo = (function (seq80411){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80411));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (code \"hello\")\n * (code nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (code {:onClick f} \"hello\")\n * (code #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (code :#the-id.klass.other-klass \"hello\")\n * (code :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.code = (function com$fulcrologic$fulcro$dom$code(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81036 = arguments.length;\nvar i__4731__auto___81037 = (0);\nwhile(true){\nif((i__4731__auto___81037 < len__4730__auto___81036)){\nargs__4736__auto__.push((arguments[i__4731__auto___81037]));\n\nvar G__81038 = (i__4731__auto___81037 + (1));\ni__4731__auto___81037 = G__81038;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80415 = conformed_args__59513__auto__;\nvar map__80415__$1 = (((((!((map__80415 == null))))?(((((map__80415.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80415.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80415):map__80415);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80415__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80415__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80415__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"code\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.code.cljs$lang$applyTo = (function (seq80414){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80414));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dialog \"hello\")\n * (dialog nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dialog {:onClick f} \"hello\")\n * (dialog #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dialog :#the-id.klass.other-klass \"hello\")\n * (dialog :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.dialog = (function com$fulcrologic$fulcro$dom$dialog(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81039 = arguments.length;\nvar i__4731__auto___81040 = (0);\nwhile(true){\nif((i__4731__auto___81040 < len__4730__auto___81039)){\nargs__4736__auto__.push((arguments[i__4731__auto___81040]));\n\nvar G__81041 = (i__4731__auto___81040 + (1));\ni__4731__auto___81040 = G__81041;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80418 = conformed_args__59513__auto__;\nvar map__80418__$1 = (((((!((map__80418 == null))))?(((((map__80418.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80418.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80418):map__80418);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80418__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80418__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80418__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dialog\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$applyTo = (function (seq80417){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80417));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (linearGradient \"hello\")\n * (linearGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (linearGradient {:onClick f} \"hello\")\n * (linearGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (linearGradient :#the-id.klass.other-klass \"hello\")\n * (linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.linearGradient = (function com$fulcrologic$fulcro$dom$linearGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81042 = arguments.length;\nvar i__4731__auto___81043 = (0);\nwhile(true){\nif((i__4731__auto___81043 < len__4730__auto___81042)){\nargs__4736__auto__.push((arguments[i__4731__auto___81043]));\n\nvar G__81044 = (i__4731__auto___81043 + (1));\ni__4731__auto___81043 = G__81044;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80422 = conformed_args__59513__auto__;\nvar map__80422__$1 = (((((!((map__80422 == null))))?(((((map__80422.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80422.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80422):map__80422);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80422__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80422__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80422__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"linearGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$applyTo = (function (seq80421){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80421));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (discard \"hello\")\n * (discard nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (discard {:onClick f} \"hello\")\n * (discard #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (discard :#the-id.klass.other-klass \"hello\")\n * (discard :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.discard = (function com$fulcrologic$fulcro$dom$discard(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81045 = arguments.length;\nvar i__4731__auto___81046 = (0);\nwhile(true){\nif((i__4731__auto___81046 < len__4730__auto___81045)){\nargs__4736__auto__.push((arguments[i__4731__auto___81046]));\n\nvar G__81047 = (i__4731__auto___81046 + (1));\ni__4731__auto___81046 = G__81047;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80425 = conformed_args__59513__auto__;\nvar map__80425__$1 = (((((!((map__80425 == null))))?(((((map__80425.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80425.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80425):map__80425);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80425__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80425__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80425__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"discard\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$applyTo = (function (seq80424){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80424));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-src \"hello\")\n * (font-face-src nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-src {:onClick f} \"hello\")\n * (font-face-src #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-src :#the-id.klass.other-klass \"hello\")\n * (font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.font_face_src = (function com$fulcrologic$fulcro$dom$font_face_src(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81048 = arguments.length;\nvar i__4731__auto___81049 = (0);\nwhile(true){\nif((i__4731__auto___81049 < len__4730__auto___81048)){\nargs__4736__auto__.push((arguments[i__4731__auto___81049]));\n\nvar G__81050 = (i__4731__auto___81049 + (1));\ni__4731__auto___81049 = G__81050;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80428 = conformed_args__59513__auto__;\nvar map__80428__$1 = (((((!((map__80428 == null))))?(((((map__80428.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80428.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80428):map__80428);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80428__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80428__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80428__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-src\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$applyTo = (function (seq80427){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80427));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (noscript \"hello\")\n * (noscript nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (noscript {:onClick f} \"hello\")\n * (noscript #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (noscript :#the-id.klass.other-klass \"hello\")\n * (noscript :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.noscript = (function com$fulcrologic$fulcro$dom$noscript(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81051 = arguments.length;\nvar i__4731__auto___81052 = (0);\nwhile(true){\nif((i__4731__auto___81052 < len__4730__auto___81051)){\nargs__4736__auto__.push((arguments[i__4731__auto___81052]));\n\nvar G__81053 = (i__4731__auto___81052 + (1));\ni__4731__auto___81052 = G__81053;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80432 = conformed_args__59513__auto__;\nvar map__80432__$1 = (((((!((map__80432 == null))))?(((((map__80432.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80432.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80432):map__80432);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80432__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80432__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80432__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"noscript\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$applyTo = (function (seq80431){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80431));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateTransform \"hello\")\n * (animateTransform nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateTransform {:onClick f} \"hello\")\n * (animateTransform #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateTransform :#the-id.klass.other-klass \"hello\")\n * (animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.animateTransform = (function com$fulcrologic$fulcro$dom$animateTransform(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81054 = arguments.length;\nvar i__4731__auto___81055 = (0);\nwhile(true){\nif((i__4731__auto___81055 < len__4730__auto___81054)){\nargs__4736__auto__.push((arguments[i__4731__auto___81055]));\n\nvar G__81056 = (i__4731__auto___81055 + (1));\ni__4731__auto___81055 = G__81056;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80435 = conformed_args__59513__auto__;\nvar map__80435__$1 = (((((!((map__80435 == null))))?(((((map__80435.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80435.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80435):map__80435);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80435__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80435__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80435__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateTransform\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$applyTo = (function (seq80434){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80434));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feColorMatrix \"hello\")\n * (feColorMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feColorMatrix {:onClick f} \"hello\")\n * (feColorMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feColorMatrix :#the-id.klass.other-klass \"hello\")\n * (feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.feColorMatrix = (function com$fulcrologic$fulcro$dom$feColorMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81057 = arguments.length;\nvar i__4731__auto___81058 = (0);\nwhile(true){\nif((i__4731__auto___81058 < len__4730__auto___81057)){\nargs__4736__auto__.push((arguments[i__4731__auto___81058]));\n\nvar G__81059 = (i__4731__auto___81058 + (1));\ni__4731__auto___81058 = G__81059;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80438 = conformed_args__59513__auto__;\nvar map__80438__$1 = (((((!((map__80438 == null))))?(((((map__80438.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80438.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80438):map__80438);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80438__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80438__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80438__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feColorMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$applyTo = (function (seq80437){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80437));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h2 \"hello\")\n * (h2 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h2 {:onClick f} \"hello\")\n * (h2 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h2 :#the-id.klass.other-klass \"hello\")\n * (h2 :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.h2 = (function com$fulcrologic$fulcro$dom$h2(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81060 = arguments.length;\nvar i__4731__auto___81061 = (0);\nwhile(true){\nif((i__4731__auto___81061 < len__4730__auto___81060)){\nargs__4736__auto__.push((arguments[i__4731__auto___81061]));\n\nvar G__81062 = (i__4731__auto___81061 + (1));\ni__4731__auto___81061 = G__81062;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80441 = conformed_args__59513__auto__;\nvar map__80441__$1 = (((((!((map__80441 == null))))?(((((map__80441.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80441.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80441):map__80441);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80441__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80441__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80441__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h2\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$applyTo = (function (seq80440){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80440));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (area \"hello\")\n * (area nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (area {:onClick f} \"hello\")\n * (area #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (area :#the-id.klass.other-klass \"hello\")\n * (area :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.area = (function com$fulcrologic$fulcro$dom$area(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81063 = arguments.length;\nvar i__4731__auto___81064 = (0);\nwhile(true){\nif((i__4731__auto___81064 < len__4730__auto___81063)){\nargs__4736__auto__.push((arguments[i__4731__auto___81064]));\n\nvar G__81065 = (i__4731__auto___81064 + (1));\ni__4731__auto___81064 = G__81065;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80444 = conformed_args__59513__auto__;\nvar map__80444__$1 = (((((!((map__80444 == null))))?(((((map__80444.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80444.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80444):map__80444);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80444__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80444__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80444__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"area\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.area.cljs$lang$applyTo = (function (seq80443){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80443));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (br \"hello\")\n * (br nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (br {:onClick f} \"hello\")\n * (br #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (br :#the-id.klass.other-klass \"hello\")\n * (br :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.br = (function com$fulcrologic$fulcro$dom$br(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81066 = arguments.length;\nvar i__4731__auto___81067 = (0);\nwhile(true){\nif((i__4731__auto___81067 < len__4730__auto___81066)){\nargs__4736__auto__.push((arguments[i__4731__auto___81067]));\n\nvar G__81068 = (i__4731__auto___81067 + (1));\ni__4731__auto___81067 = G__81068;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80447 = conformed_args__59513__auto__;\nvar map__80447__$1 = (((((!((map__80447 == null))))?(((((map__80447.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80447.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80447):map__80447);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80447__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80447__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80447__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"br\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.br.cljs$lang$applyTo = (function (seq80446){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80446));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (image \"hello\")\n * (image nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (image {:onClick f} \"hello\")\n * (image #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (image :#the-id.klass.other-klass \"hello\")\n * (image :#the-id.klass.other-klass {:onClick f} \"hello\")\n * @param {...*} var_args\n */\ncom.fulcrologic.fulcro.dom.image = (function com$fulcrologic$fulcro$dom$image(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___81069 = arguments.length;\nvar i__4731__auto___81070 = (0);\nwhile(true){\nif((i__4731__auto___81070 < len__4730__auto___81069)){\nargs__4736__auto__.push((arguments[i__4731__auto___81070]));\n\nvar G__81071 = (i__4731__auto___81070 + (1));\ni__4731__auto___81070 = G__81071;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__80450 = conformed_args__59513__auto__;\nvar map__80450__$1 = (((((!((map__80450 == null))))?(((((map__80450.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__80450.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__80450):map__80450);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80450__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80450__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80450__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"image\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.image.cljs$lang$applyTo = (function (seq80449){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq80449));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","~:file","com/fulcrologic/fulcro/dom.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.test","~$cljs.test","~$clojure.core","~$cljs.core","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$set","~$map","~$select","~$mask","~$meta","~$symbol","~$use","~$time","~$filter"]],"~:macros",["^ ","~$form",["^ ","~:arglists",["~#list",[["~$&","~$args"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","~:name","~$com.fulcrologic.fulcro.dom/form","~:ns","~$com.fulcrologic.fulcro.dom","~:macro",true],"~$audio",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/audio","^14","^15","^16",true],"~$input",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/input","^14","^15","^16",true],"~$menuitem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menuitem","^14","^15","^16",true],"~$radialGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/radialGradient","^14","^15","^16",true],"~$feMerge",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMerge","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/set","^14","^15","^16",true],"~$feSpecularLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpecularLighting","^14","^15","^16",true],"~$base",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/base","^14","^15","^16",true],"~$h1",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h1","^14","^15","^16",true],"~$feOffset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feOffset","^14","^15","^16",true],"~$embed",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/embed","^14","^15","^16",true],"~$animateMotion",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateMotion","^14","^15","^16",true],"~$h3",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h3","^14","^15","^16",true],"~$body",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/body","^14","^15","^16",true],"~$hkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hkern","^14","^15","^16",true],"~$keygen",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/keygen","^14","^15","^16",true],"~$font-face-format",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-format","^14","^15","^16",true],"~$feFuncA",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncA","^14","^15","^16",true],"~$progress",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/progress","^14","^15","^16",true],"~$main",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/main","^14","^15","^16",true],"~$cite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cite","^14","^15","^16",true],"~$rect",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rect","^14","^15","^16",true],"~$tref",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tref","^14","^15","^16",true],"~$meshpatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshpatch","^14","^15","^16",true],"~$polyline",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polyline","^14","^15","^16",true],"~$metadata",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/metadata","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/map","^14","^15","^16",true],"~$object",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/object","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/i","^14","^15","^16",true],"~$font-face-name",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-name","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/p","^14","^15","^16",true],"~$feFuncR",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncR","^14","^15","^16",true],"~$hatchpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatchpath","^14","^15","^16",true],"~$altGlyphItem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphItem","^14","^15","^16",true],"~$nav",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/nav","^14","^15","^16",true],"~$ruby",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ruby","^14","^15","^16",true],"~$switch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/switch","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/a","^14","^15","^16",true],"~$gen-dom-macros",["^ ","^[",["^10",[["~$emitter"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-dom-macros","^14","^15","^16",true],"~$view",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/view","^14","^15","^16",true],"~$menu",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menu","^14","^15","^16",true],"~$blockquote",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/blockquote","^14","^15","^16",true],"~$img",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/img","^14","^15","^16",true],"~$feFuncG",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncG","^14","^15","^16",true],"~$text",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/text","^14","^15","^16",true],"~$span",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/span","^14","^15","^16",true],"~$track",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/track","^14","^15","^16",true],"~$data",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/data","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/u","^14","^15","^16",true],"~$dl",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dl","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/select","^14","^15","^16",true],"~$polygon",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polygon","^14","^15","^16",true],"~$pattern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pattern","^14","^15","^16",true],"~$html",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/html","^14","^15","^16",true],"~$foreignObject",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/foreignObject","^14","^15","^16",true],"~$thead",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/thead","^14","^15","^16",true],"~$path",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/path","^14","^15","^16",true],"~$del",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/del","^14","^15","^16",true],"~$altGlyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyph","^14","^15","^16",true],"~$fieldset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fieldset","^14","^15","^16",true],"~$aside",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/aside","^14","^15","^16",true],"~$feBlend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feBlend","^14","^15","^16",true],"~$figure",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figure","^14","^15","^16",true],"~$textPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textPath","^14","^15","^16",true],"~$figcaption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figcaption","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mask","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/q","^14","^15","^16",true],"~$bdi",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdi","^14","^15","^16",true],"~$feDistantLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDistantLight","^14","^15","^16",true],"~$video",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/video","^14","^15","^16",true],"~$address",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/address","^14","^15","^16",true],"~$caption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/caption","^14","^15","^16",true],"~$dd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dd","^14","^15","^16",true],"~$rp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rp","^14","^15","^16",true],"~$hr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hr","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meta","^14","^15","^16",true],"~$tbody",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tbody","^14","^15","^16",true],"~$desc",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/desc","^14","^15","^16",true],"~$table",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/table","^14","^15","^16",true],"~$pre",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pre","^14","^15","^16",true],"~$ul",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ul","^14","^15","^16",true],"~$feConvolveMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feConvolveMatrix","^14","^15","^16",true],"~$sup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sup","^14","^15","^16",true],"~$dfn",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dfn","^14","^15","^16",true],"~$sub",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sub","^14","^15","^16",true],"~$mark",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mark","^14","^15","^16",true],"~$feDisplacementMap",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDisplacementMap","^14","^15","^16",true],"~$unknown",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/unknown","^14","^15","^16",true],"~$script",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/script","^14","^15","^16",true],"~$feTurbulence",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTurbulence","^14","^15","^16",true],"~$big",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/big","^14","^15","^16",true],"~$button",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/button","^14","^15","^16",true],"~$font-face-uri",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-uri","^14","^15","^16",true],"~$wbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/wbr","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/symbol","^14","^15","^16",true],"~$strong",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/strong","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/use","^14","^15","^16",true],"~$solidcolor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/solidcolor","^14","^15","^16",true],"~$fePointLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fePointLight","^14","^15","^16",true],"~$li",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/li","^14","^15","^16",true],"~$dt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dt","^14","^15","^16",true],"~$feFuncB",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncB","^14","^15","^16",true],"~$marker",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/marker","^14","^15","^16",true],"~$feComponentTransfer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComponentTransfer","^14","^15","^16",true],"~$td",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/td","^14","^15","^16",true],"~$tr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tr","^14","^15","^16",true],"~$circle",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/circle","^14","^15","^16",true],"~$section",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/section","^14","^15","^16",true],"~$feDropShadow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDropShadow","^14","^15","^16",true],"~$th",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/th","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/time","^14","^15","^16",true],"~$optgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/optgroup","^14","^15","^16",true],"~$iframe",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/iframe","^14","^15","^16",true],"~$color-profile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/color-profile","^14","^15","^16",true],"~$legend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/legend","^14","^15","^16",true],"~$em",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/em","^14","^15","^16",true],"~$kbd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/kbd","^14","^15","^16",true],"~$article",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/article","^14","^15","^16",true],"~$animateColor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateColor","^14","^15","^16",true],"~$clipPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/clipPath","^14","^15","^16",true],"~$abbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/abbr","^14","^15","^16",true],"~$altGlyphDef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphDef","^14","^15","^16",true],"~$meshrow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshrow","^14","^15","^16",true],"~$cursor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cursor","^14","^15","^16",true],"~$animate",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animate","^14","^15","^16",true],"~$source",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/source","^14","^15","^16",true],"~$output",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/output","^14","^15","^16",true],"~$font-face",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face","^14","^15","^16",true],"~$feMergeNode",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMergeNode","^14","^15","^16",true],"~$feSpotLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpotLight","^14","^15","^16",true],"~$header",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/header","^14","^15","^16",true],"~$gen-client-dom-fns",["^ ","^[",["^10",[["~$create-element-sym"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-client-dom-fns","^14","^15","^16",true],"~$datalist",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/datalist","^14","^15","^16",true],"~$tfoot",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tfoot","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/s","^14","^15","^16",true],"~$hatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatch","^14","^15","^16",true],"~$ins",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ins","^14","^15","^16",true],"~$footer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/footer","^14","^15","^16",true],"~$mpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mpath","^14","^15","^16",true],"~$title",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/title","^14","^15","^16",true],"~$h5",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h5","^14","^15","^16",true],"~$meshgradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshgradient","^14","^15","^16",true],"~$canvas",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/canvas","^14","^15","^16",true],"~$param",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/param","^14","^15","^16",true],"~$font",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font","^14","^15","^16",true],"~$div",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/div","^14","^15","^16",true],"~$option",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/option","^14","^15","^16",true],"~$feFlood",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFlood","^14","^15","^16",true],"~$summary",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/summary","^14","^15","^16",true],"~$feMorphology",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMorphology","^14","^15","^16",true],"~$samp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/samp","^14","^15","^16",true],"~$glyphRef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyphRef","^14","^15","^16",true],"~$small",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/small","^14","^15","^16",true],"~$style",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/style","^14","^15","^16",true],"~$textarea",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textarea","^14","^15","^16",true],"~$feGaussianBlur",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feGaussianBlur","^14","^15","^16",true],"~$h4",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h4","^14","^15","^16",true],"~$head",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/head","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/g","^14","^15","^16",true],"~$missing-glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/missing-glyph","^14","^15","^16",true],"~$stop",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/stop","^14","^15","^16",true],"~$feDiffuseLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDiffuseLighting","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/filter","^14","^15","^16",true],"~$feComposite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComposite","^14","^15","^16",true],"~$mesh",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mesh","^14","^15","^16",true],"~$var",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/var","^14","^15","^16",true],"~$tspan",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tspan","^14","^15","^16",true],"~$ol",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ol","^14","^15","^16",true],"~$details",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/details","^14","^15","^16",true],"~$line",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/line","^14","^15","^16",true],"~$col",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/col","^14","^15","^16",true],"~$label",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/label","^14","^15","^16",true],"~$picture",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/picture","^14","^15","^16",true],"~$rt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rt","^14","^15","^16",true],"~$h6",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h6","^14","^15","^16",true],"~$vkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/vkern","^14","^15","^16",true],"~$link",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/link","^14","^15","^16",true],"~$defs",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/defs","^14","^15","^16",true],"~$glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyph","^14","^15","^16",true],"~$colgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/colgroup","^14","^15","^16",true],"~$meter",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meter","^14","^15","^16",true],"~$bdo",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdo","^14","^15","^16",true],"~$feImage",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feImage","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/b","^14","^15","^16",true],"~$svg",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/svg","^14","^15","^16",true],"~$feTile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTile","^14","^15","^16",true],"~$ellipse",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ellipse","^14","^15","^16",true],"~$code",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/code","^14","^15","^16",true],"~$dialog",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dialog","^14","^15","^16",true],"~$linearGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/linearGradient","^14","^15","^16",true],"~$discard",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/discard","^14","^15","^16",true],"~$font-face-src",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-src","^14","^15","^16",true],"~$noscript",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/noscript","^14","^15","^16",true],"~$animateTransform",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateTransform","^14","^15","^16",true],"~$feColorMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feColorMatrix","^14","^15","^16",true],"~$h2",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h2","^14","^15","^16",true],"~$area",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/area","^14","^15","^16",true],"~$br",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/br","^14","^15","^16",true],"~$image",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/image","^14","^15","^16",true]],"^12","^15","~:op","^14","~:imports",null,"~:requires",["^ ","^?","^@","~$goog.dom","^9Y","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","^D","^D","~$gobj","~$goog.object","~$goog","^:4","^:3","^:3","~$com.fulcrologic.fulcro.dom-common","^:5","~$cljsjs.react","^:6","~$cljsjs.react.dom","^:7","~$cdom","^:5","~$gdom","^9Y","~$s","^@","^:1","^:1","^9[","^9[","~$str","~$clojure.string","^:;","^:;","^@","^@"],"~:seen",["^O",["~:require","~:require-macros"]],"~:uses",null,"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^D","^D","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:form",["^10",["~$ns","^15","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server",["^10",["~:refer-clojure","~:exclude",["^Q","^T","^W","^S","^R","^V","^P","^U","^X"]]],["^10",["^:>",["^15"]]],["^10",["^:=",["^?","~:as","~$s"],["^:;","^:D","^::"],["^:1","^:D","^:0"],["^:6"],["^:7"],["^:3","^:D","^:2"],["^9Y","^:D","^:9"],["^:5","^:D","^:8"],["^9[","^:D","^9Z"]]]]],"~:flags",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^:4","^D","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/dom.cljs"],"~:compiled-at",1630228762914,"~:resource-name","com/fulcrologic/fulcro/dom.cljs","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.dom\n  \"Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server\"\n  (:refer-clojure :exclude [map meta time mask select use set symbol filter])\n  (:require-macros [com.fulcrologic.fulcro.dom])\n  (:require\n    [clojure.spec.alpha :as s]\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.components :as comp]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [goog.dom :as gdom]\n    [com.fulcrologic.fulcro.dom-common :as cdom]\n    [taoensso.timbre :as log]))\n\n(declare a abbr address altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform area\n  article aside audio b base bdi bdo big blockquote body br button canvas caption circle cite clipPath code\n  col colgroup color-profile cursor data datalist dd defs del desc details dfn dialog discard div dl dt\n  ellipse em embed feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting\n  feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur\n  feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence\n  fieldset figcaption figure filter font font-face font-face-format font-face-name font-face-src font-face-uri\n  footer foreignObject form g glyph glyphRef h1 h2 h3 h4 h5 h6 hatch hatchpath head header hkern hr html\n  i iframe image img input ins kbd keygen label legend li line linearGradient link main map mark marker mask\n  menu menuitem mesh meshgradient meshpatch meshrow meta metadata meter missing-glyph\n  mpath nav noscript object ol optgroup option output p param path pattern picture polygon polyline pre progress q radialGradient\n  rect rp rt ruby s samp script section select set small solidcolor source span stop strong style sub summary\n  sup svg switch symbol table tbody td text textPath textarea tfoot th thead time title tr track tref tspan\n  u ul unknown use var video view vkern wbr)\n\n(def ^{:private true} element-marker\n  (-> (js/React.createElement \"div\" nil)\n    (gobj/get \"$$typeof\")))\n\n(defn element? \"Returns true if the given arg is a react element.\"\n  [x]\n  (and (object? x) (= element-marker (gobj/get x \"$$typeof\"))))\n\n(s/def ::dom-element-args\n  (s/cat\n    :css (s/? keyword?)\n    :attrs (s/? (s/or\n                  :nil nil?\n                  :map #(and (map? %) (not (element? %)))\n                  :js-object #(and (object? %) (not (element? %)))))\n    :children (s/* (s/or\n                     :string string?\n                     :number number?\n                     :collection #(or (vector? %) (seq? %) (array? %))\n                     :nil nil?\n                     :element element?))))\n\n(defn render\n  \"Equivalent to React.render\"\n  [component el]\n  (js/ReactDOM.render component el))\n\n(defn render-to-str\n  \"Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\"\n  [c]\n  (js/ReactDOMServer.renderToString c))\n\n(defn node\n  \"Returns the dom node associated with a component's React ref.\"\n  ([component]\n   (js/ReactDOM.findDOMNode component))\n  ([component name]\n   (some-> (.-refs component) (gobj/get name) (js/ReactDOM.findDOMNode))))\n\n(defn create-element\n  \"Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`\"\n  ([tag]\n   (create-element tag nil))\n  ([tag opts]\n   (js/React.createElement tag opts))\n  ([tag opts & children]\n   (js/React.createElement tag opts children)))\n\n(defn convert-props\n  \"Given props, which can be nil, a js-obj or a clj map: returns a js object.\"\n  [props]\n  (cond\n    (nil? props)\n    #js {}\n    (map? props)\n    (clj->js props)\n    :else\n    props))\n\n;; called from macro\n;; react v16 is really picky, the old direct .children prop trick no longer works\n(defn macro-create-element*\n  \"Used internally by the DOM element generation.\"\n  [arr]\n  {:pre [(array? arr)]}\n  (.apply js/React.createElement nil arr))\n\n(defn- update-state\n  \"Updates the state of the wrapped input element.\"\n  [component next-props value]\n  (let [on-change  (gobj/getValueByKeys component \"state\" \"onChange\")\n        next-state #js {}\n        inputRef   (gobj/get next-props \"inputRef\")]\n    (gobj/extend next-state next-props #js {:onChange on-change})\n    (gobj/set next-state \"value\" value)\n    (when inputRef\n      (gobj/remove next-state \"inputRef\")\n      (gobj/set next-state \"ref\" inputRef))\n    (.setState component next-state)))\n\n(defonce form-elements? #{\"input\" \"select\" \"option\" \"textarea\"})\n\n(defn is-form-element? [element]\n  (let [tag (.-tagName element)]\n    (and tag (form-elements? (str/lower-case tag)))))\n\n(defn wrap-form-element [element]\n  (let [ctor (fn [props]\n               (this-as this\n                 (set! (.-state this)\n                   (let [state #js {:ref (gobj/get props \"inputRef\")}]\n                     (->> #js {:onChange (goog/bind (gobj/get this \"onChange\") this)}\n                       (gobj/extend state props))\n                     (gobj/remove state \"inputRef\")\n                     state))\n                 (.apply js/React.Component this (js-arguments))))]\n    (set! (.-displayName ctor) (str \"wrapped-\" element))\n    (goog.inherits ctor js/React.Component)\n    (specify! (.-prototype ctor)\n      Object\n      (onChange [this event]\n        (when-let [handler (.-onChange (.-props this))]\n          (handler event)\n          (update-state\n            this (.-props this)\n            (gobj/getValueByKeys event \"target\" \"value\"))))\n\n      (componentWillReceiveProps [this new-props]\n        (let [state-value   (gobj/getValueByKeys this \"state\" \"value\")\n              this-node     (js/ReactDOM.findDOMNode this)\n              value-node    (if (is-form-element? this-node)\n                              this-node\n                              (gdom/findNode this-node #(is-form-element? %)))\n              element-value (gobj/get value-node \"value\")]\n          (when goog.DEBUG\n            (when (and state-value element-value (not= (type state-value) (type element-value)))\n              (log/warn \"There is a mismatch for the data type of the value on an input with value \" element-value\n                \". This will cause the input to miss refreshes. In general you should force the :value of an input to\n                be a string since that is how values are stored on most real DOM elements.\")))\n          (if (not= state-value element-value)\n            (update-state this new-props element-value)\n            (update-state this new-props (gobj/get new-props \"value\")))))\n\n      (render [this]\n        (js/React.createElement element (.-state this))))\n    (let [real-factory (js/React.createFactory ctor)]\n      (fn [props & children]\n        (if-let [r (gobj/get props \"ref\")]\n          (if (string? r)\n            (apply real-factory props children)\n            (let [p #js{}]\n              (gobj/extend p props)\n              (gobj/set p \"inputRef\" r)\n              (gobj/remove p \"ref\")\n              (apply real-factory p children)))\n          (apply real-factory props children))))))\n\n\n(def wrapped-input \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"input\"))\n(def wrapped-textarea \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"textarea\"))\n(def wrapped-option \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"option\"))\n(def wrapped-select \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"select\"))\n\n(defn- arr-append* [arr x]\n  (.push arr x)\n  arr)\n\n(defn- arr-append [arr tail]\n  (reduce arr-append* arr (comp/force-children tail)))\n\n(defn macro-create-wrapped-form-element\n  \"Used internally by element generation.\"\n  [opts]\n  (let [tag      (aget opts 0)\n        props    (aget opts 1)\n        children (.splice opts 2)]\n    (case tag\n      \"input\" (apply wrapped-input props children)\n      \"textarea\" (apply wrapped-textarea props children)\n      \"select\" (apply wrapped-select props children)\n      \"option\" (apply wrapped-option props children))))\n\n\n;; fallback if the macro didn't do this\n(defn macro-create-element\n  \"Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\"\n  ([type args] (macro-create-element type args nil))\n  ([type args csskw]\n   (let [[head & tail] args\n         f (if (form-elements? type)\n             macro-create-wrapped-form-element\n             macro-create-element*)]\n     (cond\n       (nil? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append tail)))\n\n       (element? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))\n\n       (object? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props head csskw)]\n            (arr-append tail)))\n\n       (map? head)\n       (f (doto #js [type (clj->js (cdom/add-kwprops-to-props (cdom/interpret-classes head) csskw))]\n            (arr-append tail)))\n\n       :else\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))))))\n\n(com.fulcrologic.fulcro.dom/gen-client-dom-fns com.fulcrologic.fulcro.dom/macro-create-element)\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.dom/element-marker","js/React.createElement","G__78362","G__78363","goog.object/get","com.fulcrologic.fulcro.dom/element?","x","cljs.core/object?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/keyword?","cljs.spec.alpha/or-spec-impl","p1__78366#","p1__78367#","cljs.core/nil?","cljs.core/map?","cljs.spec.alpha/rep-impl","p1__78368#","cljs.core/string?","cljs.core/number?","cljs.core/vector?","cljs.core/seq?","cljs.core/array?","com.fulcrologic.fulcro.dom/render","component","el","js/ReactDOM.render","com.fulcrologic.fulcro.dom/render-to-str","c","js/ReactDOMServer.renderToString","var_args","G__78417","com.fulcrologic.fulcro.dom/node","js/Error","js/ReactDOM.findDOMNode","name","G__78425","G__78436","com.fulcrologic.fulcro.dom/create-element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq78433","G__78434","cljs.core/first","cljs.core/next","G__78435","self__4717__auto__","tag","com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2","opts","children","com.fulcrologic.fulcro.dom/convert-props","props","cljs.core/clj->js","com.fulcrologic.fulcro.dom/macro-create-element*","arr","com.fulcrologic.fulcro.dom/update-state","next-props","value","on-change","goog.object/getValueByKeys","next-state","inputRef","G__78446","G__78447","G__78448","goog.object/extend","goog.object/set","goog.object/remove","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.dom","js/com.fulcrologic.fulcro.dom.form-elements?","com.fulcrologic.fulcro.dom/form-elements?","com.fulcrologic.fulcro.dom/is-form-element?","element","and__4120__auto__","G__78456","clojure.string/lower-case","com.fulcrologic.fulcro.dom/wrap-form-element","ctor","this","state","G__78468","G__78469","goog/bind","G__78461","G__78462","G__78463","js/React.Component","js/goog.inherits","x78470","event","temp__5753__auto__","handler","new-props","state-value","this-node","value-node","G__78472","G__78473","p1__78458#","goog.dom/findNode","element-value","js/goog.DEBUG","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","real-factory","js/React.createFactory","temp__5751__auto__","r","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","p","com.fulcrologic.fulcro.dom/wrapped-input","com.fulcrologic.fulcro.dom/wrapped-textarea","com.fulcrologic.fulcro.dom/wrapped-option","com.fulcrologic.fulcro.dom/wrapped-select","com.fulcrologic.fulcro.dom/arr-append*","com.fulcrologic.fulcro.dom/arr-append","tail","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","G__78490","G__78499","com.fulcrologic.fulcro.dom/macro-create-element","type","args","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","csskw","vec__78502","seq__78503","cljs.core/seq","first__78504","head","f","G__78505","G__78506","com.fulcrologic.fulcro.dom-common/add-kwprops-to-props","G__78508","G__78509","G__78510","G__78511","G__78513","G__78514","com.fulcrologic.fulcro.dom-common/interpret-classes","G__78516","G__78517","com.fulcrologic.fulcro.dom/form","args__4736__auto__","argseq__4737__auto__","conformed-args__59513__auto__","com.fulcrologic.fulcro.algorithms.do-not-use/conform!","map__78541","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","children__59515__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","attrs__59514__auto__","css__59516__auto__","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/second","attrs-value__59517__auto__","or__4131__auto__","cljs.core.into.cljs$core$IFn$_invoke$arity$2","seq78534","self__4718__auto__","com.fulcrologic.fulcro.dom/audio","map__78566","seq78555","com.fulcrologic.fulcro.dom/input","map__78583","seq78577","com.fulcrologic.fulcro.dom/menuitem","map__78596","seq78591","com.fulcrologic.fulcro.dom/radialGradient","map__78616","seq78608","com.fulcrologic.fulcro.dom/feMerge","map__78630","seq78626","com.fulcrologic.fulcro.dom/set","map__78644","seq78637","com.fulcrologic.fulcro.dom/feSpecularLighting","map__78667","seq78659","com.fulcrologic.fulcro.dom/base","map__78700","seq78683","com.fulcrologic.fulcro.dom/h1","map__78722","seq78717","com.fulcrologic.fulcro.dom/feOffset","map__78734","seq78728","com.fulcrologic.fulcro.dom/embed","map__78739","seq78738","com.fulcrologic.fulcro.dom/animateMotion","map__78742","seq78741","com.fulcrologic.fulcro.dom/h3","map__78767","seq78759","com.fulcrologic.fulcro.dom/body","map__78794","seq78779","com.fulcrologic.fulcro.dom/hkern","map__78804","seq78799","com.fulcrologic.fulcro.dom/keygen","map__78815","seq78812","com.fulcrologic.fulcro.dom/font-face-format","map__78843","seq78824","com.fulcrologic.fulcro.dom/feFuncA","map__78854","seq78853","com.fulcrologic.fulcro.dom/progress","map__78865","seq78860","com.fulcrologic.fulcro.dom/main","map__78876","seq78872","com.fulcrologic.fulcro.dom/cite","map__78881","seq78880","com.fulcrologic.fulcro.dom/rect","map__78893","seq78888","com.fulcrologic.fulcro.dom/tref","map__78902","seq78899","com.fulcrologic.fulcro.dom/meshpatch","map__78907","seq78904","com.fulcrologic.fulcro.dom/polyline","map__78910","seq78909","com.fulcrologic.fulcro.dom/metadata","map__78915","seq78912","com.fulcrologic.fulcro.dom/map","map__78918","seq78917","com.fulcrologic.fulcro.dom/object","map__78921","seq78920","com.fulcrologic.fulcro.dom/i","map__78924","seq78923","com.fulcrologic.fulcro.dom/font-face-name","map__78931","seq78926","com.fulcrologic.fulcro.dom/p","map__78949","seq78945","com.fulcrologic.fulcro.dom/feFuncR","map__78958","seq78957","com.fulcrologic.fulcro.dom/hatchpath","map__78961","seq78960","com.fulcrologic.fulcro.dom/altGlyphItem","map__78978","seq78971","com.fulcrologic.fulcro.dom/nav","map__78989","seq78984","com.fulcrologic.fulcro.dom/ruby","map__79001","seq78999","com.fulcrologic.fulcro.dom/switch","map__79011","seq79007","com.fulcrologic.fulcro.dom/a","map__79017","seq79016","com.fulcrologic.fulcro.dom/view","map__79027","seq79022","com.fulcrologic.fulcro.dom/menu","map__79032","seq79031","com.fulcrologic.fulcro.dom/blockquote","map__79039","seq79038","com.fulcrologic.fulcro.dom/img","map__79045","seq79041","com.fulcrologic.fulcro.dom/feFuncG","map__79053","seq79048","com.fulcrologic.fulcro.dom/text","map__79060","seq79058","com.fulcrologic.fulcro.dom/span","map__79064","seq79063","com.fulcrologic.fulcro.dom/track","map__79067","seq79066","com.fulcrologic.fulcro.dom/data","map__79070","seq79069","com.fulcrologic.fulcro.dom/u","map__79077","seq79074","com.fulcrologic.fulcro.dom/dl","map__79084","seq79081","com.fulcrologic.fulcro.dom/select","map__79095","seq79090","com.fulcrologic.fulcro.dom/polygon","map__79110","seq79106","com.fulcrologic.fulcro.dom/pattern","map__79119","seq79115","com.fulcrologic.fulcro.dom/html","map__79124","seq79123","com.fulcrologic.fulcro.dom/foreignObject","map__79133","seq79128","com.fulcrologic.fulcro.dom/thead","map__79138","seq79136","com.fulcrologic.fulcro.dom/path","map__79150","seq79143","com.fulcrologic.fulcro.dom/del","map__79165","seq79156","com.fulcrologic.fulcro.dom/altGlyph","map__79177","seq79170","com.fulcrologic.fulcro.dom/fieldset","map__79183","seq79180","com.fulcrologic.fulcro.dom/aside","map__79191","seq79190","com.fulcrologic.fulcro.dom/feBlend","map__79201","seq79196","com.fulcrologic.fulcro.dom/figure","map__79204","seq79203","com.fulcrologic.fulcro.dom/textPath","map__79219","seq79212","com.fulcrologic.fulcro.dom/figcaption","map__79231","seq79224","com.fulcrologic.fulcro.dom/mask","map__79238","seq79237","com.fulcrologic.fulcro.dom/q","map__79252","seq79250","com.fulcrologic.fulcro.dom/bdi","map__79255","seq79254","com.fulcrologic.fulcro.dom/feDistantLight","map__79259","seq79257","com.fulcrologic.fulcro.dom/video","map__79263","seq79262","com.fulcrologic.fulcro.dom/address","map__79268","seq79265","com.fulcrologic.fulcro.dom/caption","map__79273","seq79271","com.fulcrologic.fulcro.dom/dd","map__79282","seq79279","com.fulcrologic.fulcro.dom/rp","map__79295","seq79287","com.fulcrologic.fulcro.dom/hr","map__79304","seq79300","com.fulcrologic.fulcro.dom/meta","map__79312","seq79308","com.fulcrologic.fulcro.dom/tbody","map__79318","seq79317","com.fulcrologic.fulcro.dom/desc","map__79327","seq79322","com.fulcrologic.fulcro.dom/table","map__79332","seq79329","com.fulcrologic.fulcro.dom/pre","map__79345","seq79337","com.fulcrologic.fulcro.dom/ul","map__79356","seq79355","com.fulcrologic.fulcro.dom/feConvolveMatrix","map__79365","seq79363","com.fulcrologic.fulcro.dom/sup","map__79373","seq79372","com.fulcrologic.fulcro.dom/dfn","map__79383","seq79381","com.fulcrologic.fulcro.dom/sub","map__79395","seq79391","com.fulcrologic.fulcro.dom/mark","map__79404","seq79398","com.fulcrologic.fulcro.dom/feDisplacementMap","map__79413","seq79410","com.fulcrologic.fulcro.dom/unknown","map__79416","seq79415","com.fulcrologic.fulcro.dom/script","map__79421","seq79419","com.fulcrologic.fulcro.dom/feTurbulence","map__79426","seq79423","com.fulcrologic.fulcro.dom/big","map__79439","seq79430","com.fulcrologic.fulcro.dom/button","map__79450","seq79448","com.fulcrologic.fulcro.dom/font-face-uri","map__79455","seq79454","com.fulcrologic.fulcro.dom/wbr","map__79468","seq79461","com.fulcrologic.fulcro.dom/symbol","map__79476","seq79472","com.fulcrologic.fulcro.dom/strong","map__79489","seq79479","com.fulcrologic.fulcro.dom/use","map__79507","seq79497","com.fulcrologic.fulcro.dom/solidcolor","map__79524","seq79520","com.fulcrologic.fulcro.dom/fePointLight","map__79558","seq79535","com.fulcrologic.fulcro.dom/li","map__79582","seq79579","com.fulcrologic.fulcro.dom/dt","map__79599","seq79591","com.fulcrologic.fulcro.dom/feFuncB","map__79609","seq79603","com.fulcrologic.fulcro.dom/marker","map__79616","seq79611","com.fulcrologic.fulcro.dom/feComponentTransfer","map__79631","seq79625","com.fulcrologic.fulcro.dom/td","map__79645","seq79637","com.fulcrologic.fulcro.dom/tr","map__79662","seq79661","com.fulcrologic.fulcro.dom/circle","map__79670","seq79667","com.fulcrologic.fulcro.dom/section","map__79685","seq79678","com.fulcrologic.fulcro.dom/feDropShadow","map__79699","seq79694","com.fulcrologic.fulcro.dom/th","map__79711","seq79703","com.fulcrologic.fulcro.dom/time","map__79726","seq79720","com.fulcrologic.fulcro.dom/optgroup","map__79736","seq79728","com.fulcrologic.fulcro.dom/iframe","map__79748","seq79744","com.fulcrologic.fulcro.dom/color-profile","map__79754","seq79753","com.fulcrologic.fulcro.dom/legend","map__79765","seq79759","com.fulcrologic.fulcro.dom/em","map__79776","seq79773","com.fulcrologic.fulcro.dom/kbd","map__79785","seq79781","com.fulcrologic.fulcro.dom/article","map__79798","seq79791","com.fulcrologic.fulcro.dom/animateColor","map__79812","seq79804","com.fulcrologic.fulcro.dom/clipPath","map__79827","seq79816","com.fulcrologic.fulcro.dom/abbr","map__79835","seq79832","com.fulcrologic.fulcro.dom/altGlyphDef","map__79848","seq79842","com.fulcrologic.fulcro.dom/meshrow","map__79857","seq79856","com.fulcrologic.fulcro.dom/cursor","map__79867","seq79865","com.fulcrologic.fulcro.dom/animate","map__79871","seq79870","com.fulcrologic.fulcro.dom/source","map__79880","seq79876","com.fulcrologic.fulcro.dom/output","map__79890","seq79886","com.fulcrologic.fulcro.dom/font-face","map__79898","seq79892","com.fulcrologic.fulcro.dom/feMergeNode","map__79905","seq79904","com.fulcrologic.fulcro.dom/feSpotLight","map__79912","seq79910","com.fulcrologic.fulcro.dom/header","map__79919","seq79917","com.fulcrologic.fulcro.dom/datalist","map__79930","seq79926","com.fulcrologic.fulcro.dom/tfoot","map__79945","seq79940","com.fulcrologic.fulcro.dom/s","map__79956","seq79954","com.fulcrologic.fulcro.dom/hatch","map__79964","seq79963","com.fulcrologic.fulcro.dom/ins","map__79972","seq79968","com.fulcrologic.fulcro.dom/footer","map__79978","seq79977","com.fulcrologic.fulcro.dom/mpath","map__79986","seq79983","com.fulcrologic.fulcro.dom/title","map__79991","seq79989","com.fulcrologic.fulcro.dom/h5","map__79997","seq79996","com.fulcrologic.fulcro.dom/meshgradient","map__80000","seq79999","com.fulcrologic.fulcro.dom/canvas","map__80003","seq80002","com.fulcrologic.fulcro.dom/param","map__80010","seq80009","com.fulcrologic.fulcro.dom/font","map__80018","seq80012","com.fulcrologic.fulcro.dom/div","map__80040","seq80030","com.fulcrologic.fulcro.dom/option","map__80072","seq80056","com.fulcrologic.fulcro.dom/feFlood","map__80093","seq80086","com.fulcrologic.fulcro.dom/summary","map__80104","seq80101","com.fulcrologic.fulcro.dom/feMorphology","map__80112","seq80106","com.fulcrologic.fulcro.dom/samp","map__80116","seq80115","com.fulcrologic.fulcro.dom/glyphRef","map__80136","seq80123","com.fulcrologic.fulcro.dom/small","map__80158","seq80153","com.fulcrologic.fulcro.dom/style","map__80164","seq80160","com.fulcrologic.fulcro.dom/textarea","map__80173","seq80171","com.fulcrologic.fulcro.dom/feGaussianBlur","map__80182","seq80178","com.fulcrologic.fulcro.dom/h4","map__80187","seq80184","com.fulcrologic.fulcro.dom/head","map__80191","seq80190","com.fulcrologic.fulcro.dom/g","map__80194","seq80193","com.fulcrologic.fulcro.dom/missing-glyph","map__80203","seq80200","com.fulcrologic.fulcro.dom/stop","map__80211","seq80209","com.fulcrologic.fulcro.dom/feDiffuseLighting","map__80217","seq80213","com.fulcrologic.fulcro.dom/filter","map__80227","seq80224","com.fulcrologic.fulcro.dom/feComposite","map__80240","seq80239","com.fulcrologic.fulcro.dom/mesh","map__80248","seq80245","com.fulcrologic.fulcro.dom/var","map__80254","seq80252","com.fulcrologic.fulcro.dom/tspan","map__80263","seq80259","com.fulcrologic.fulcro.dom/ol","map__80269","seq80267","com.fulcrologic.fulcro.dom/details","map__80276","seq80273","com.fulcrologic.fulcro.dom/line","map__80283","seq80279","com.fulcrologic.fulcro.dom/col","map__80287","seq80286","com.fulcrologic.fulcro.dom/label","map__80294","seq80293","com.fulcrologic.fulcro.dom/picture","map__80304","seq80302","com.fulcrologic.fulcro.dom/rt","map__80309","seq80308","com.fulcrologic.fulcro.dom/h6","map__80315","seq80314","com.fulcrologic.fulcro.dom/vkern","map__80330","seq80324","com.fulcrologic.fulcro.dom/link","map__80360","seq80355","com.fulcrologic.fulcro.dom/defs","map__80368","seq80363","com.fulcrologic.fulcro.dom/glyph","map__80374","seq80373","com.fulcrologic.fulcro.dom/colgroup","map__80377","seq80376","com.fulcrologic.fulcro.dom/meter","map__80381","seq80379","com.fulcrologic.fulcro.dom/bdo","map__80394","seq80391","com.fulcrologic.fulcro.dom/feImage","map__80398","seq80396","com.fulcrologic.fulcro.dom/b","map__80402","seq80401","com.fulcrologic.fulcro.dom/svg","map__80405","seq80404","com.fulcrologic.fulcro.dom/feTile","map__80409","seq80407","com.fulcrologic.fulcro.dom/ellipse","map__80412","seq80411","com.fulcrologic.fulcro.dom/code","map__80415","seq80414","com.fulcrologic.fulcro.dom/dialog","map__80418","seq80417","com.fulcrologic.fulcro.dom/linearGradient","map__80422","seq80421","com.fulcrologic.fulcro.dom/discard","map__80425","seq80424","com.fulcrologic.fulcro.dom/font-face-src","map__80428","seq80427","com.fulcrologic.fulcro.dom/noscript","map__80432","seq80431","com.fulcrologic.fulcro.dom/animateTransform","map__80435","seq80434","com.fulcrologic.fulcro.dom/feColorMatrix","map__80438","seq80437","com.fulcrologic.fulcro.dom/h2","map__80441","seq80440","com.fulcrologic.fulcro.dom/area","map__80444","seq80443","com.fulcrologic.fulcro.dom/br","map__80447","seq80446","com.fulcrologic.fulcro.dom/image","map__80450","seq80449"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1630228360000,1630228360000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",14,"~:deps-ids",["^O",[13,9]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^:I","goog/dom/tagname.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.dom.HtmlElement"]]],["^:I","goog/async/freelist.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/platform.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.util","~$goog.string"]]],["^:I","goog/timer/timer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Promise","~$goog.events.EventTarget"]]],["^:I","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^9["]]],["^:I","cljs/spec/gen/alpha.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$goog.Uri"]]],["^:I","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","^;4"]]],["^:I","goog/math/math.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.array","~$goog.asserts"]]],["^:I","goog/string/stringformat.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;4"]]],["^:I","goog/events/eventtype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^:I","goog/labs/useragent/browser.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^:3","~$goog.string.internal"]]],["^:I","goog/html/safeurl.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^;<"]]],["^:I","goog/array/array.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:V","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^:W",["^ ","^:X",3,"^:Y",["^O",[2]],"^:Z",["^:[","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^:I","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^9[","~$edn-query-language.core","^:3","^@"]]],["^:I","goog/useragent/useragent.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^;3","~$goog.reflect","^;4"]]],["^:I","goog/structs/prioritypool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^:I","clojure/test/check/properties.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^:I","goog/async/run.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^:I","clojure/test/check/generators.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^;4"]]],["^:I","taoensso/encore.cljs"],[1630228119299,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^:3","^;4","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^:I","goog/debug/error.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/async/workqueue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.async.FreeList"]]],["^:I","goog/events/events.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^;:","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^:I","goog/promise/resolver.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/browserfeature.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:I","cljs/tools/reader/edn.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^;4","^;V"]]],["^:I","clojure/test/check/random/doubles.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$clojure.test.check.random.longs"]]],["^:I","goog/structs/priorityqueue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Heap"]]],["^:I","goog/net/xhrio.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Timer","^;8","^;9","^<4","^;6","~$goog.json.hybrid","~$goog.log","^<1","^<0","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^:3","^;4","^;[","~$goog.structs.Map","~$goog.uri.utils","^;;"]]],["^:I","goog/promise/thenable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/nodetype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","cljs/tools/reader.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^<9","^<:","^<;","^<8","^;8","^;4","^;V"]]],["^:V","node_modules/scheduler/cjs/scheduler.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",7,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","clojure/test/check/rose_tree.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","clojure/test/check/impl.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^:V","node_modules/scheduler/cjs/scheduler.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",6,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/events/eventtarget.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Disposable","^;9","^;W","~$goog.events.Event","^<6","^<7","^:3"]]],["^:I","clojure/test/check/random.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$clojure.test.check.random.doubles","^<="]]],["^:I","goog/disposable/disposable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.disposable.IDisposable"]]],["^:I","goog/string/typedstring.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",10,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:V","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",5,"^:Y",["^O",[1,4]],"^:Z",["^:[","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^:I","shadow/js.js"],[1630228360071,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/object/object.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/asserts.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:V","node_modules/react-dom/cjs/react-dom.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",9,"^:Y",["^O",[0,5,8]],"^:Z",["^:[","~$module$node_modules$react$index","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],["^:I","goog/structs/set.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;[","~$goog.structs.Collection","^<D"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^:V","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",4,"^:Y",["^O",[0,3]],"^:Z",["^:[","^<O","~$module$node_modules$prop_types$checkPropTypes"]]],["^:I","goog/math/long.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;H"]]],["^:I","goog/events/listener.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.ListenableKey"]]],["^:I","goog/html/trustedresourceurl.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;?","^;@","^;A","^;B"]]],["^:I","goog/events/listenermap.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.events.Listener","^:3"]]],["^:I","goog/events/eventid.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","taoensso/truss.cljs"],[1630228118689,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$taoensso.truss.impl"]]],["^:I","goog/string/internal.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",11,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","clojure/test/check.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^;K","^;P","^;L","^;Q","~$clojure.test.check.impl"]]],["^:I","edn_query_language/core.cljc"],[1630228119293,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^@","~$clojure.test.check","^;K","~$clojure.test.check.properties"]]],["^:I","goog/functions/functions.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/html/safestyle.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.html.SafeUrl","^;A","^;B","^;<"]]],["^:I","goog/dom/safe.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^<Z","^;>","^;A","^;<"]]],["^:I","taoensso/truss/impl.cljs"],[1630228118689,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^;R"]]],["^:I","clojure/walk.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","goog/net/eventtype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/map.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^:I","goog/net/xhriopool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;X","~$goog.structs.PriorityPool"]]],["^:I","goog/html/safehtml.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.TagName","~$goog.dom.tags","^=2","^=3","~$goog.html.SafeStyleSheet","^<Z","^;>","^;?","^;@","^;E","^:3","^;A","^;B","^;<"]]],["^:I","goog/dom/tags.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^:3"]]],["^:I","goog/math/size.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/index.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",8,"^:Y",["^O",[7,6]],"^:Z",["^:[","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^:I","goog/structs/queue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8"]]],["^:I","goog/labs/useragent/engine.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^;4"]]],["^:I","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","~$taoensso.encore"]]],["^:I","cljs/reader.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:3","^<<","^;T","^;V"]]],["^:I","goog/dom/dom.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^=7","~$goog.dom.safe","^=1","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^:3","^;4","~$goog.string.Unicode","^;;"]]],["^:I","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:3","^:6","^;D","^@","^9[","~$clojure.walk","^:;","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$com.fulcrologic.fulcro.algorithms.denormalize","~$com.fulcrologic.fulcro.algorithms.lookup","^;R"]]],["^:I","goog/asserts/asserts.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.debug.Error","^=>"]]],["^:I","goog/debug/logbuffer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.LogRecord"]]],["^:I","goog/uri/uri.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4","^;[","^<D","^<E","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^:I","goog/net/errorcode.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/i18n/bidi.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^:W",["^ ","^:X",0,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/disposable/idisposable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/promise/promise.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Thenable","^;9","^<3","~$goog.async.run","^;O","^=H","~$goog.promise.Resolver"]]],["^:I","cljs/spec/alpha.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:3","^=D","^H","^:;"]]],["^:I","goog/fs/url.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/debug/logrecord.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/base.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",[]]],["^:I","goog/json/hybrid.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.json"]]],["^:I","goog/structs/structs.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3"]]],["^:I","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^<9","^:;","~$cljs.tools.reader.impl.inspect"]]],["^:I","cljsjs/react.cljs"],[1630228358937,"^:W",["^ ","^:X",null,"^:Y",["^O",[5]],"^:Z",["^:4","^D","^<N"]]],["^:I","clojure/string.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^;4","^;V"]]],["^:I","goog/structs/pool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<H","~$goog.structs.Queue","~$goog.structs.Set"]]],["^:I","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:V","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",1,"^:Y",["^O",[0]],"^:Z",["^:[","^<O"]]],["^:I","goog/net/httpstatus.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","com/fulcrologic/fulcro/dom_common.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","^:3"]]],["^:I","goog/structs/heap.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3","~$goog.structs.Node"]]],["^:I","goog/debug/entrypointregistry.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:I","goog/string/string.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","goog/reflect/reflect.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/util.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","com/fulcrologic/fulcro/dom.cljs"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]]],["^:I","goog/debug/debug.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.debug.errorcontext","^;;"]]],["^:I","goog/string/stringbuffer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/math/coordinate.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.math"]]],["^:I","goog/debug/errorcontext.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^<:","^;4","^;V"]]],["^:I","goog/iter/iter.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^=0","^=U"]]],["^:I","goog/async/nexttick.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<4","^=7","^=0","^;E","^;F"]]],["^:I","goog/html/uncheckedconversions.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^=1","^=2","^=3","^=9","^<Z","^;>","^;A","^;<"]]],["^:I","goog/debug/logger.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.debug","~$goog.debug.LogBuffer","^=I"]]],["^:V","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^:W",["^ ","^:X",2,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/events/event.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<H","~$goog.events.EventId"]]],["^:I","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^<8","^<9","^<:"]]],["^:I","goog/dom/htmlelement.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/core.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["~$goog.math.Long","~$goog.math.Integer","^;4","^:3","^;8","^;7","^;V"]]],["^:I","goog/html/safescript.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;A","^;B"]]],["^:I","clojure/test/check/random/longs.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","~$clojure.test.check.random.longs.bit-count-impl","^=Y","^D"]]],["^:I","goog/log/log.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=V","~$goog.debug.LogManager","^=I","~$goog.debug.Logger"]]],["^:I","goog/html/safestylesheet.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^=3","^:3","^;A","^;B","^;<"]]],["^:I","goog/structs/collection.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljsjs/react/dom.cljs"],[1630228358937,"^:W",["^ ","^:X",null,"^:Y",["^O",[5,14]],"^:Z",["^:4","^D","^<N","~$module$node_modules$react_dom$index"]]],["^:I","goog/events/browserevent.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=V","^;:","^<I","~$goog.events.EventType","^;H","^;;"]]],["^:I","goog/math/integer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/node.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/browserfeature.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:V","node_modules/scheduler/tracing.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",12,"^:Y",["^O",[11,10]],"^:Z",["^:[","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^:V","node_modules/react-dom/cjs/react-dom.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",13,"^:Y",["^O",[0,3,12,5,8]],"^:Z",["^:[","^<N","^<O","^<P","^<S","~$module$node_modules$scheduler$tracing"]]],["^:I","clojure/set.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","goog/uri/utils.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4"]]],["^:I","goog/string/const.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;B"]]],["^:I","taoensso/timbre.cljs"],[1630228119105,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^:;","^=<","~$taoensso.timbre.appenders.core"]]],["^:I","goog/json/json.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/listenable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=X"]]],["^:I","goog/net/xmlhttpfactory.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<F"]]],["^:I","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D","^;D"]]],["^:I","goog/net/xmlhttp.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.net.WrapperXmlHttpFactory","^<G"]]],["^:I","clojure/test/check/results.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^D"]]],["^:I","goog/net/xhrlike.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom_common.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","^7","com/fulcrologic/fulcro/dom.cljs","^8",1,"^9",5,"^:",1,"^;",31],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P","^Q","^R","^S","^T","^U","^V","^W","^X"]],"^Y",["^ ","^Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^13","^14","^15","^16",true],"^17",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^18","^14","^15","^16",true],"^19",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1:","^14","^15","^16",true],"^1;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1<","^14","^15","^16",true],"^1=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1>","^14","^15","^16",true],"^1?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1@","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1A","^14","^15","^16",true],"^1B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1C","^14","^15","^16",true],"^1D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1E","^14","^15","^16",true],"^1F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1G","^14","^15","^16",true],"^1H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1I","^14","^15","^16",true],"^1J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1K","^14","^15","^16",true],"^1L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1M","^14","^15","^16",true],"^1N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1O","^14","^15","^16",true],"^1P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Q","^14","^15","^16",true],"^1R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1S","^14","^15","^16",true],"^1T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1U","^14","^15","^16",true],"^1V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1W","^14","^15","^16",true],"^1X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Y","^14","^15","^16",true],"^1Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1[","^14","^15","^16",true],"^20",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^21","^14","^15","^16",true],"^22",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^23","^14","^15","^16",true],"^24",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^25","^14","^15","^16",true],"^26",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^27","^14","^15","^16",true],"^28",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^29","^14","^15","^16",true],"^2:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2;","^14","^15","^16",true],"^2<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2=","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2>","^14","^15","^16",true],"^2?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2@","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2A","^14","^15","^16",true],"^2B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2C","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2D","^14","^15","^16",true],"^2E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2F","^14","^15","^16",true],"^2G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2H","^14","^15","^16",true],"^2I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2J","^14","^15","^16",true],"^2K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2L","^14","^15","^16",true],"^2M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2N","^14","^15","^16",true],"^2O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2P","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Q","^14","^15","^16",true],"^2R",["^ ","^[",["^10",[["^2S"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2T","^14","^15","^16",true],"^2U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2V","^14","^15","^16",true],"^2W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2X","^14","^15","^16",true],"^2Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Z","^14","^15","^16",true],"^2[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^30","^14","^15","^16",true],"^31",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^32","^14","^15","^16",true],"^33",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^34","^14","^15","^16",true],"^35",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^36","^14","^15","^16",true],"^37",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^38","^14","^15","^16",true],"^39",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3:","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3;","^14","^15","^16",true],"^3<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3=","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3>","^14","^15","^16",true],"^3?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3@","^14","^15","^16",true],"^3A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3B","^14","^15","^16",true],"^3C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3D","^14","^15","^16",true],"^3E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3F","^14","^15","^16",true],"^3G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3H","^14","^15","^16",true],"^3I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3J","^14","^15","^16",true],"^3K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3L","^14","^15","^16",true],"^3M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3N","^14","^15","^16",true],"^3O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3P","^14","^15","^16",true],"^3Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3R","^14","^15","^16",true],"^3S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3T","^14","^15","^16",true],"^3U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3V","^14","^15","^16",true],"^3W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3X","^14","^15","^16",true],"^3Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3Z","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3[","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^40","^14","^15","^16",true],"^41",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^42","^14","^15","^16",true],"^43",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^44","^14","^15","^16",true],"^45",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^46","^14","^15","^16",true],"^47",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^48","^14","^15","^16",true],"^49",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4:","^14","^15","^16",true],"^4;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4<","^14","^15","^16",true],"^4=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4>","^14","^15","^16",true],"^4?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4@","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4A","^14","^15","^16",true],"^4B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4C","^14","^15","^16",true],"^4D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4E","^14","^15","^16",true],"^4F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4G","^14","^15","^16",true],"^4H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4I","^14","^15","^16",true],"^4J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4K","^14","^15","^16",true],"^4L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4M","^14","^15","^16",true],"^4N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4O","^14","^15","^16",true],"^4P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Q","^14","^15","^16",true],"^4R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4S","^14","^15","^16",true],"^4T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4U","^14","^15","^16",true],"^4V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4W","^14","^15","^16",true],"^4X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Y","^14","^15","^16",true],"^4Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4[","^14","^15","^16",true],"^50",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^51","^14","^15","^16",true],"^52",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^53","^14","^15","^16",true],"^54",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^55","^14","^15","^16",true],"^56",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^57","^14","^15","^16",true],"^58",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^59","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5:","^14","^15","^16",true],"^5;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5<","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5=","^14","^15","^16",true],"^5>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5?","^14","^15","^16",true],"^5@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5A","^14","^15","^16",true],"^5B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5C","^14","^15","^16",true],"^5D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5E","^14","^15","^16",true],"^5F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5G","^14","^15","^16",true],"^5H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5I","^14","^15","^16",true],"^5J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5K","^14","^15","^16",true],"^5L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5M","^14","^15","^16",true],"^5N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5O","^14","^15","^16",true],"^5P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Q","^14","^15","^16",true],"^5R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5S","^14","^15","^16",true],"^5T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5U","^14","^15","^16",true],"^5V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5W","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5X","^14","^15","^16",true],"^5Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Z","^14","^15","^16",true],"^5[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^60","^14","^15","^16",true],"^61",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^62","^14","^15","^16",true],"^63",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^64","^14","^15","^16",true],"^65",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^66","^14","^15","^16",true],"^67",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^68","^14","^15","^16",true],"^69",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6:","^14","^15","^16",true],"^6;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6<","^14","^15","^16",true],"^6=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6>","^14","^15","^16",true],"^6?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6@","^14","^15","^16",true],"^6A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6B","^14","^15","^16",true],"^6C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6D","^14","^15","^16",true],"^6E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6F","^14","^15","^16",true],"^6G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6H","^14","^15","^16",true],"^6I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6J","^14","^15","^16",true],"^6K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6L","^14","^15","^16",true],"^6M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6N","^14","^15","^16",true],"^6O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6P","^14","^15","^16",true],"^6Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6R","^14","^15","^16",true],"^6S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6T","^14","^15","^16",true],"^6U",["^ ","^[",["^10",[["^6V"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6W","^14","^15","^16",true],"^6X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6Y","^14","^15","^16",true],"^6Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6[","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^70","^14","^15","^16",true],"^71",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^72","^14","^15","^16",true],"^73",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^74","^14","^15","^16",true],"^75",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^76","^14","^15","^16",true],"^77",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^78","^14","^15","^16",true],"^79",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7:","^14","^15","^16",true],"^7;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7<","^14","^15","^16",true],"^7=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7>","^14","^15","^16",true],"^7?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7@","^14","^15","^16",true],"^7A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7B","^14","^15","^16",true],"^7C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7D","^14","^15","^16",true],"^7E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7F","^14","^15","^16",true],"^7G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7H","^14","^15","^16",true],"^7I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7J","^14","^15","^16",true],"^7K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7L","^14","^15","^16",true],"^7M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7N","^14","^15","^16",true],"^7O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7P","^14","^15","^16",true],"^7Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7R","^14","^15","^16",true],"^7S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7T","^14","^15","^16",true],"^7U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7V","^14","^15","^16",true],"^7W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7X","^14","^15","^16",true],"^7Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7Z","^14","^15","^16",true],"^7[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^80","^14","^15","^16",true],"^81",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^82","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^83","^14","^15","^16",true],"^84",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^85","^14","^15","^16",true],"^86",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^87","^14","^15","^16",true],"^88",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^89","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8:","^14","^15","^16",true],"^8;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8<","^14","^15","^16",true],"^8=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8>","^14","^15","^16",true],"^8?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8@","^14","^15","^16",true],"^8A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8B","^14","^15","^16",true],"^8C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8D","^14","^15","^16",true],"^8E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8F","^14","^15","^16",true],"^8G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8H","^14","^15","^16",true],"^8I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8J","^14","^15","^16",true],"^8K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8L","^14","^15","^16",true],"^8M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8N","^14","^15","^16",true],"^8O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8P","^14","^15","^16",true],"^8Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8R","^14","^15","^16",true],"^8S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8T","^14","^15","^16",true],"^8U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8V","^14","^15","^16",true],"^8W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8X","^14","^15","^16",true],"^8Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8Z","^14","^15","^16",true],"^8[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^90","^14","^15","^16",true],"^91",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^92","^14","^15","^16",true],"^93",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^94","^14","^15","^16",true],"^95",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^96","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^97","^14","^15","^16",true],"^98",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^99","^14","^15","^16",true],"^9:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9;","^14","^15","^16",true],"^9<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9=","^14","^15","^16",true],"^9>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9?","^14","^15","^16",true],"^9@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9A","^14","^15","^16",true],"^9B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9C","^14","^15","^16",true],"^9D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9E","^14","^15","^16",true],"^9F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9G","^14","^15","^16",true],"^9H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9I","^14","^15","^16",true],"^9J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9K","^14","^15","^16",true],"^9L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9M","^14","^15","^16",true],"^9N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9O","^14","^15","^16",true],"^9P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9Q","^14","^15","^16",true],"^9R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9S","^14","^15","^16",true],"^9T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9U","^14","^15","^16",true]],"~:shadow/js-access-properties",["^O",["onChange","createElement","createFactory","findDOMNode","render","Component","componentWillReceiveProps","renderToString"]],"^12","^15","^9W",null,"^9X",["^ ","^?","^@","^9Y","^9Y","^9Z","^9[","^:0","^:1","^D","^D","^:2","^:3","^:4","^:4","^:3","^:3","^:5","^:5","^:6","^:6","^:7","^:7","^:8","^:5","^:9","^9Y","~$s","^@","^:1","^:1","^9[","^9[","^::","^:;","^:;","^:;","^@","^@"],"^:<",["^O",["^:=","^:>"]],"~:shadow/js-access-global",["^O",["ReactDOMServer","React","ReactDOM","Error"]],"^:?",null,"~:defs",["^ ","^Z",["^ ","~:protocol-inline",null,"^5",["^ ","^[",["^10",["~$quote",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","~:jsdoc",["^10",["@param {...*} var_args"]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"~:arglists-meta",["^10",[null]]],"^7",null],"^12","^13","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"~:protocol-impl",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"~:methods",[["^ ","^?M",0,"^?L",true,"~:tag","~$any"]],"^8",226,"~:ret-tag","^?T","^?N",0,"~:fn-var",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^17",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^18","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^19",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1A","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1C","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1E","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1G","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$macro-create-element*",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",94,"^9",7,"^:",94,"^;",28,"^[",["^10",["^?I",["^10",[["~$arr"]]]]],"^6","Used internally by the DOM element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element*","^7","com/fulcrologic/fulcro/dom.cljs","^;",28,"^?O",["^10",[["^?X"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",94,"^?U","~$js","^:",94,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["^?X"]]]]],"^6","Used internally by the DOM element generation."],"^1H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1I","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1K","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1M","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1O","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1Q","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1S","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1U","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1W","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$wrapped-textarea",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",172,"^9",6,"^:",172,"^;",22],"^12","~$com.fulcrologic.fulcro.dom/wrapped-textarea","^7","com/fulcrologic/fulcro/dom.cljs","^;",22,"^9",1,"^8",172,"^:",172,"^?S","~$function","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^1X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1Y","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^1Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^1[","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^20",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^21","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^22",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^23","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^24",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^25","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^26",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^27","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^28",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^29","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2:",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2;","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2=","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$arr-append",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",180,"^9",8,"^:",180,"^;",18,"~:private",true,"^[",["^10",["^?I",["^10",[["^?X","~$tail"]]]]]],"^@3",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append","^7","com/fulcrologic/fulcro/dom.cljs","^;",18,"^?O",["^10",[["^?X","^@4"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",180,"^?U",["^O",[null,"^?T"]],"^:",180,"^?N",2,"^?V",true,"^[",["^10",["^?I",["^10",[["^?X","^@4"]]]]]],"^2?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$update-state",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",100,"^9",8,"^:",100,"^;",20,"^@3",true,"^[",["^10",["^?I",["^10",[["~$component","~$next-props","~$value"]]]]],"^6","Updates the state of the wrapped input element."],"^@3",true,"^12","~$com.fulcrologic.fulcro.dom/update-state","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?O",["^10",[["^@7","^@8","^@9"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",100,"^?U","^?T","^:",100,"^?N",3,"^?V",true,"^[",["^10",["^?I",["^10",[["^@7","^@8","^@9"]]]]],"^6","Updates the state of the wrapped input element."],"~$i",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2A","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2C","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$p",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2D","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2F","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2H","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2J","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2L","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2N","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2P","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$a",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2Q","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2V","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2X","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^2Z","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^2[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^30","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^31",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^32","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^33",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^34","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^35",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^36","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^37",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^38","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^39",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$u",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3;","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3=","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3B","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3D","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3F","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3H","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3J","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3L","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3N","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3P","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$wrapped-input",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",171,"^9",6,"^:",171,"^;",19],"^12","~$com.fulcrologic.fulcro.dom/wrapped-input","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^9",1,"^8",171,"^:",171,"^?S","^@1","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^3Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3R","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3T","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3V","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3X","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^3Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3Z","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^3[","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^40","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^41",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^42","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$macro-create-wrapped-form-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",183,"^9",7,"^:",183,"^;",40,"^[",["^10",["^?I",["^10",[["~$opts"]]]]],"^6","Used internally by element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",40,"^?O",["^10",[["^@>"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",183,"^:",183,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["^@>"]]]]],"^6","Used internally by element generation."],"^43",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^44","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^45",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^46","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^47",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^48","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^49",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$wrap-form-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",119,"^9",7,"^:",119,"^;",24,"^[",["^10",["^?I",["^10",[["~$element"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/wrap-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",24,"^?O",["^10",[["^@A"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",119,"^?U","^@1","^:",119,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["^@A"]]]]]],"^4;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4A","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4C","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4E","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4G","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4I","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4K","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$arr-append*",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",176,"^9",8,"^:",176,"^;",19,"^@3",true,"^[",["^10",["^?I",["^10",[["^?X","~$x"]]]]]],"^@3",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append*","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^?O",["^10",[["^?X","~$x"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",176,"^:",176,"^?N",2,"^?V",true,"^[",["^10",["^?I",["^10",[["^?X","~$x"]]]]]],"^4L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4M","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4O","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$element?",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",35,"^9",7,"^:",35,"^;",15,"^[",["^10",["^?I",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^12","~$com.fulcrologic.fulcro.dom/element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",15,"^?O",["^10",[["~$x"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",35,"^?U","~$boolean","^:",35,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^4P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4Q","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4S","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4U","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4W","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$convert-props",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",81,"^9",7,"^:",81,"^;",20,"^[",["^10",["^?I",["^10",[["~$props"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^12","~$com.fulcrologic.fulcro.dom/convert-props","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?O",["^10",[["^@I"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",81,"^?U",["^O",[null,"^2?","^?T"]],"^:",81,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["^@I"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^4X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4Y","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^4Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^4[","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^50",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^51","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^52",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^53","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^54",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^55","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^56",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^57","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^58",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^59","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5=","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5>",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5?","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5@",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5A","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5C","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5E","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5G","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5I","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5K","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5M","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5O","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5Q","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5S","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5U","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5W","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5X","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^5Z","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^5[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^60","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^61",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^62","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^63",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^64","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^65",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^66","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^67",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^68","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^69",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6B","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6D","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6F","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$form-elements?",["^ ","^12","~$com.fulcrologic.fulcro.dom/form-elements?","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",1,"^:",113,"^;",24,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",10,"^:",113,"^;",24],"^?S","~$cljs.core/ISet"],"^6G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6H","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6J","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6L","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6N","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6P","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6R","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6T","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6Y","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^6Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^6[","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$s",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^70","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^71",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^72","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^73",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^74","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$node",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^;",11,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",["^10",[["^@7"],["^@7","~$name"]]],"^[",["^10",[["^@7"],["^@7","^@O"]]],"^?P",["^10",[null,null]]],"^9",7,"^8",63,"^:",63,"^[",["^10",["^?I",["^10",[["^@7"],["^@7","^@O"]]]]],"^6","Returns the dom node associated with a component's React ref.","^?J",["^10",["@param {...*} var_args"]]],"^12","~$com.fulcrologic.fulcro.dom/node","^7","com/fulcrologic/fulcro/dom.cljs","^;",11,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",["^10",[["^@7"],["^@7","^@O"]]],"^[",["^10",[["^@7"],["^@7","^@O"]]],"^?P",["^10",[null,null]]],"^?O",["^10",[["^@7"],["^@7","^@O"]]],"^?Q",null,"^?M",2,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^?R",[["^ ","^?M",1,"^?L",false,"^?S","^?Z"],["^ ","^?M",2,"^?L",false,"^?S",["^O",["^?Z","~$clj-nil"]]]],"^8",63,"^:",63,"^?N",2,"^?V",true,"^[",["^10",[["^@7"],["^@7","^@O"]]],"^6","Returns the dom node associated with a component's React ref.","^?J",["^10",["@param {...*} var_args"]]],"^75",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^76","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^77",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^78","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^79",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7B","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7D","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$is-form-element?",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",115,"^9",7,"^:",115,"^;",23,"^[",["^10",["^?I",["^10",[["^@A"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/is-form-element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",23,"^?O",["^10",[["^@A"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",115,"^?U","^?T","^:",115,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["^@A"]]]]]],"~$render-to-str",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",58,"^9",7,"^:",58,"^;",20,"^[",["^10",["^?I",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^12","~$com.fulcrologic.fulcro.dom/render-to-str","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?O",["^10",[["~$c"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",58,"^?U","^?Z","^:",58,"^?N",1,"^?V",true,"^[",["^10",["^?I",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^7E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7F","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7H","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7J","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7L","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7N","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7P","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7R","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7T","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7V","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7X","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^7Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^7Z","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$wrapped-option",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",173,"^9",6,"^:",173,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-option","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",173,"^:",173,"^?S","^@1","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"~$element-marker",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",31,"^9",23,"^:",31,"^;",37,"^@3",true],"^@3",true,"^12","~$com.fulcrologic.fulcro.dom/element-marker","^7","com/fulcrologic/fulcro/dom.cljs","^;",37,"^9",1,"^8",31,"^:",31,"^?S","^?T"],"^7[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^80","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^81",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^82","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$g",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^83","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^84",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^85","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$wrapped-select",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",174,"^9",6,"^:",174,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-select","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",174,"^:",174,"^?S","^@1","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^86",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^87","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$render",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",53,"^9",7,"^:",53,"^;",13,"^[",["^10",["^?I",["^10",[["^@7","~$el"]]]]],"^6","Equivalent to React.render"],"^12","~$com.fulcrologic.fulcro.dom/render","^7","com/fulcrologic/fulcro/dom.cljs","^;",13,"^?O",["^10",[["^@7","^A1"]]],"^?Q",null,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^8",53,"^?U","^?Z","^:",53,"^?N",2,"^?V",true,"^[",["^10",["^?I",["^10",[["^@7","^A1"]]]]],"^6","Equivalent to React.render"],"^88",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^89","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8:","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8<","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8>","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8@","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8B","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8D","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8F","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8H","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8J","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8L","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8N","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8P","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8R","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8T","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8V","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8X","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^8Z","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^8[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^90","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^91",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^92","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^93",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^94","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^95",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^96","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$b",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^97","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^98",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^99","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9:",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9;","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$macro-create-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^;",27,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",["^10",[["~$type","^11"],["^A4","^11","~$csskw"]]],"^[",["^10",[["^A4","^11"],["^A4","^11","^A5"]]],"^?P",["^10",[null,null]]],"^9",7,"^8",197,"^:",197,"^[",["^10",["^?I",["^10",[["^A4","^11"],["^A4","^11","^A5"]]]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.","^?J",["^10",["@param {...*} var_args"]]],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",27,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",["^10",[["^A4","^11"],["^A4","^11","^A5"]]],"^[",["^10",[["^A4","^11"],["^A4","^11","^A5"]]],"^?P",["^10",[null,null]]],"^?O",["^10",[["^A4","^11"],["^A4","^11","^A5"]]],"^?Q",null,"^?M",3,"^?P",["^10",[null,null]],"^9",1,"^?L",false,"^?R",[["^ ","^?M",2,"^?L",false,"^?S","^?T"],["^ ","^?M",3,"^?L",false,"^?S","^?T"]],"^8",197,"^:",197,"^?N",3,"^?V",true,"^[",["^10",[["^A4","^11"],["^A4","^11","^A5"]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.","^?J",["^10",["@param {...*} var_args"]]],"^9<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9=","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9>",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9?","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9@",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9A","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9C","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9E","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9G","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9I","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9K","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9M","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9O","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9Q","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"^9R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9S","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]],"~$create-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^;",21,"^?K",["^ ","^?L",true,"^?M",2,"^?N",2,"^?O",["^10",[["~$tag"],["^A8","^@>"]]],"^[",["^10",[["^A8"],["^A8","^@>"],["^A8","^@>","~$&","~$children"]]],"^?P",["^10",[null,null,null]]],"^9",7,"^8",70,"^:",70,"^[",["^10",["^?I",["^10",[["^A8"],["^A8","^@>"],["^A8","^@>","~$&","^A9"]]]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`","^?J",["^10",["@param {...*} var_args"]]],"^12","~$com.fulcrologic.fulcro.dom/create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",21,"^?K",["^ ","^?L",true,"^?M",2,"^?N",2,"^?O",["^10",[["^A8"],["^A8","^@>"]]],"^[",["^10",[["^A8"],["^A8","^@>"],["^A8","^@>","~$&","^A9"]]],"^?P",["^10",[null,null,null]]],"^?O",["^10",[["^A8"],["^A8","^@>"]]],"^?Q",null,"^?M",2,"^?P",["^10",[null,null,null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",1,"^?L",false,"^?S","^?T"],["^ ","^?M",2,"^?L",false,"^?S","^?Z"],["^ ","^?M",2,"^?L",true,"^?S","^?Z"]],"^8",70,"^:",70,"^?N",2,"^?V",true,"^[",["^10",[["^A8"],["^A8","^@>"],["^A8","^@>","~$&","^A9"]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`","^?J",["^10",["@param {...*} var_args"]]],"^9T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]],"^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^7",null],"^12","^9U","^7","com/fulcrologic/fulcro/dom.cljs","^?K",["^ ","^?L",true,"^?M",0,"^?N",0,"^?O",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?P",["^10",[null]]],"^?O",[["^10",["^11"]]],"^?Q",null,"^?M",0,"^?P",["^10",[null]],"^9",1,"^?L",true,"^?R",[["^ ","^?M",0,"^?L",true,"^?S","^?T"]],"^8",226,"^?U","^?T","^?N",0,"^?V",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^10",["@param {...*} var_args"]]]],"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^D","^D","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:cljs.analyzer/constants",["^ ","^:<",["^O",["~$cljs.core/array?","~$cljs.spec.alpha/*","~:children","~$p1__78366#","~$cljs.core/keyword?","~$cljs.core/vector?","~:element","~:else","^@F","~:number","~$cljs.spec.alpha/cat","~:warn","~$cljs.core/string?","~$cljs.spec.alpha/or","~:css","~$cljs.core/map?","~:string","~$p1__78367#","~$%","~$cljs.core/number?","~$cljs.core/object?","~$fn*","~:nil","~$cljs.core/nil?","~$cljs.core/fn","~:js-object","~:attrs","~$cljs.core/not","~:com.fulcrologic.fulcro.dom/dom-element-args","~$cljs.core/and","~:collection","~$cljs.core/seq?","~:auto","~:p","~:map","~$p1__78368#","~$cljs.core/or","~$cljs.spec.alpha/?"]],"~:order",["^AV","^AE","^AI","^B2","^A@","^AT","^AH","^AP","^AQ","^A[","^AO","^A?","^AW","^AJ","^AU","^@F","^AS","^AL","^AN","^A>","^A=","^AK","^AG","^AD","^AM","^AX","^B0","^B1","^AA","^AY","^A<","^AB","^AR","~$%","^AC","^AF","~:p","^AZ"]],"^:E",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"^:F",["^ "],"^:G",["^:4","^D","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:ns-specs",["^ ","^AV",["^10",["^AE","^AI",["^10",["^B2","^A@"]],"^AT",["^10",["^B2",["^10",["^AH","^AP","^AQ","^A[",["^10",["^AO",["^A?"],["^10",["^AW",["^10",["^AJ","^A?"]],["^10",["^AU",["^10",["^@F","^A?"]]]]]]]],"^AS",["^10",["^AO",["^AL"],["^10",["^AW",["^10",["^AN","^AL"]],["^10",["^AU",["^10",["^@F","^AL"]]]]]]]]]]]],"^A>",["^10",["^A=",["^10",["^AH","^AK","^AG","^AD","^AM","^AX",["^10",["^AO",["^B0"],["^10",["^B1",["^10",["^AA","^B0"]],["^10",["^AY","^B0"]],["^10",["^A<","^B0"]]]]]],"^AP","^AQ","^AB","^@F"]]]]]]],"~:ns-speced-vars",[],"~:compiler-options",["^:U",[["^B6","~:static-fns"],true,["^B6","~:elide-asserts"],true,["^B6","~:optimize-constants"],null,["^B6","^:L"],null,["^B6","~:external-config"],null,["^B6","~:tooling-config"],null,["^B6","~:emit-constants"],null,["^B6","~:load-tests"],false,["^B6","~:form-size-threshold"],null,["^B6","~:infer-externs"],true,["^B6","^:N"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^B6","~:fn-invoke-direct"],null,["^B6","~:source-map"],"/dev/null"]]]