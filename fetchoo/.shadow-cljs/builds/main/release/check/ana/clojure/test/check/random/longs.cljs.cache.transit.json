["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs');\nclojure.test.check.random.longs.unsigned_bit_shift_right = (function clojure$test$check$random$longs$unsigned_bit_shift_right(x,n){\nreturn x.shiftRightUnsigned(n);\n});\nclojure.test.check.random.longs._PLUS_ = (function clojure$test$check$random$longs$_PLUS_(x,y){\nreturn x.add(y);\n});\nclojure.test.check.random.longs._STAR_ = (function clojure$test$check$random$longs$_STAR_(x,y){\nvar a48 = (x.high_ >>> (16));\nvar a32 = (x.high_ & (65535));\nvar a16 = (x.low_ >>> (16));\nvar a00 = (x.low_ & (65535));\nvar b48 = (y.high_ >>> (16));\nvar b32 = (y.high_ & (65535));\nvar b16 = (y.low_ >>> (16));\nvar b00 = (y.low_ & (65535));\nvar arr = [(0),(0),(0),(0)];\n(arr[(0)] = (a00 * b00));\n\n(arr[(1)] = ((arr[(0)]) >>> (16)));\n\n(arr[(0)] = ((arr[(0)]) & (65535)));\n\n(arr[(1)] = ((arr[(1)]) + (a16 * b00)));\n\n(arr[(2)] = ((arr[(1)]) >>> (16)));\n\n(arr[(1)] = ((arr[(1)]) & (65535)));\n\n(arr[(1)] = ((arr[(1)]) + (a00 * b16)));\n\n(arr[(2)] = ((arr[(2)]) + ((arr[(1)]) >>> (16))));\n\n(arr[(1)] = ((arr[(1)]) & (65535)));\n\n(arr[(2)] = ((arr[(2)]) + (a32 * b00)));\n\n(arr[(3)] = ((arr[(2)]) >>> (16)));\n\n(arr[(2)] = ((arr[(2)]) & (65535)));\n\n(arr[(2)] = ((arr[(2)]) + (a16 * b16)));\n\n(arr[(3)] = ((arr[(3)]) + ((arr[(2)]) >>> (16))));\n\n(arr[(2)] = ((arr[(2)]) & (65535)));\n\n(arr[(2)] = ((arr[(2)]) + (a00 * b32)));\n\n(arr[(3)] = ((arr[(3)]) + ((arr[(2)]) >>> (16))));\n\n(arr[(2)] = ((arr[(2)]) & (65535)));\n\n(arr[(3)] = (((((arr[(3)]) + (a48 * b00)) + (a32 * b16)) + (a16 * b32)) + (a00 * b48)));\n\n(arr[(3)] = ((arr[(3)]) & (65535)));\n\nvar G__67743 = (((arr[(1)]) << (16)) | (arr[(0)]));\nvar G__67744 = (((arr[(3)]) << (16)) | (arr[(2)]));\nreturn goog.math.Long.fromBits(G__67743,G__67744);\n});\nclojure.test.check.random.longs.bit_xor = (function clojure$test$check$random$longs$bit_xor(x,y){\nreturn x.xor(y);\n});\nclojure.test.check.random.longs.bit_or = (function clojure$test$check$random$longs$bit_or(x,y){\nreturn x.or(y);\n});\nclojure.test.check.random.longs.from_string = (function clojure$test$check$random$longs$from_string(s,radix){\nreturn goog.math.Long.fromString(s,radix);\n});\nclojure.test.check.random.longs.from_number = (function clojure$test$check$random$longs$from_number(x){\nreturn goog.math.Long.fromNumber(x);\n});\n/**\n * Coerces to long, or returns nil if not possible.\n */\nclojure.test.check.random.longs.__GT_long = (function clojure$test$check$random$longs$__GT_long(x){\nif(typeof x === 'number'){\nreturn goog.math.Long.fromNumber(x);\n} else {\nif((x instanceof goog.math.Long)){\nreturn x;\n} else {\nreturn null;\n}\n}\n});\nclojure.test.check.random.longs.ONE = goog.math.Long.getOne();\nclojure.test.check.random.longs.bit_count = clojure.test.check.random.longs.bit_count_impl.bit_count;\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",33,"~:author","Gary Fredericks","~:doc","Internal namespace, wrapping some goog.math.Long functionality."],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.test","~$cljs.test","~$clojure.core","~$cljs.core","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random.longs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs.bit-count-impl","^[","^Q","^[","~$goog.math.Long","^10","~$long","^10","^D","^E","~$core","^E","^E","^E","~$goog","^13"],"~:seen",["^P",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^E","^E","^D","^E","^12","^E"],"~:form",["~#list",["~$ns","^V",["^19",["~:refer-clojure","~:exclude",["~$+","~$*","^R","^T","^Q","^S"]]],["^19",["^15",["^[","~:as","^Q"],["^10","^1=","^11"],["^D","^1=","^12"]]]]],"~:flags",["^ ","^15",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^13","^E","^[","^10","^E"]],"^X","^V","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs.cljs"],"~:compiled-at",1630228760088,"~:resource-name","clojure/test/check/random/longs.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Internal namespace, wrapping some goog.math.Long functionality.\"}\n clojure.test.check.random.longs\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.longs.bit-count-impl :as bit-count]\n            [goog.math.Long :as long]\n            [clojure.core :as core]))\n\n(defn unsigned-bit-shift-right\n  [x n]\n  (.shiftRightUnsigned x n))\n\n(defn +\n  [x y]\n  (.add x y))\n\n(defn *\n  [x y]\n  (let [a48 (bit-shift-right-zero-fill (.-high_ x) 16)\n        a32 (bit-and (.-high_ x) 0xFFFF)\n        a16 (bit-shift-right-zero-fill (.-low_ x) 16)\n        a00 (bit-and (.-low_ x) 0xFFFF)\n\n        b48 (bit-shift-right-zero-fill (.-high_ y) 16)\n        b32 (bit-and (.-high_ y) 0xFFFF)\n        b16 (bit-shift-right-zero-fill (.-low_ y) 16)\n        b00 (bit-and (.-low_ y) 0xFFFF)\n\n        arr (array 0 0 0 0)]                              ;[c00 c16 c32 c48]\n    (aset arr 0 (core/* a00 b00))                                                  ;c00 += a00 * b00;\n    (aset arr 1 (bit-shift-right-zero-fill (aget arr 0) 16))                       ;c16 += c00 >>> 16\n    (aset arr 0 (bit-and (aget arr 0) 0xFFFF))                                     ;c00 &= 0xFFFF;\n    (aset arr 1 (core/+ (aget arr 1) (core/* a16 b00)))                            ;c16 += a16 * b00;\n    (aset arr 2 (bit-shift-right-zero-fill (aget arr 1) 16))                       ;c32 += c16 >>> 16;\n    (aset arr 1 (bit-and (aget arr 1) 0xFFFF))                                     ;c16 &= 0xFFFF;\n    (aset arr 1 (core/+ (aget arr 1) (core/* a00 b16)))                            ;c16 += a00 * b16;\n    (aset arr 2 (core/+ (aget arr 2) (bit-shift-right-zero-fill (aget arr 1) 16))) ;c32 += c16 >>> 16;\n    (aset arr 1 (bit-and (aget arr 1) 0xFFFF))                                     ;c16 &= 0xFFFF;\n    (aset arr 2 (core/+ (aget arr 2) (core/* a32 b00)))                            ;c32 += a32 * b00;\n    (aset arr 3 (bit-shift-right-zero-fill (aget arr 2) 16))                       ;c48 += c32 >>> 16;\n    (aset arr 2 (bit-and (aget arr 2) 0xFFFF))                                     ;c32 &= 0xFFFF;\n    (aset arr 2 (core/+ (aget arr 2) (core/* a16 b16)))                            ;c32 += a16 * b16;\n    (aset arr 3 (core/+ (aget arr 3) (bit-shift-right-zero-fill (aget arr 2) 16))) ;c48 += c32 >>> 16;\n    (aset arr 2 (bit-and (aget arr 2) 0xFFFF))                                     ;c32 &= 0xFFFF;\n    (aset arr 2 (core/+ (aget arr 2) (core/* a00 b32)))                            ;c32 += a00 * b32;\n    (aset arr 3 (core/+ (aget arr 3) (bit-shift-right-zero-fill (aget arr 2) 16))) ;c48 += c32 >>> 16;\n    (aset arr 2 (bit-and (aget arr 2) 0xFFFF))                                     ;c32 &= 0xFFFF;\n\n    (aset arr 3 (core/+ (aget arr 3) (core/* a48 b00) (core/* a32 b16) (core/* a16 b32) (core/* a00 b48)))\n    ;c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    (aset arr 3 (bit-and (aget arr 3) 0xFFFF))                                    ;c48 &= 0xFFFF;\n\n    ;(c16 << 16) | c00, (c48 << 16) | c32\n    (long/fromBits (core/bit-or (bit-shift-left (aget arr 1) 16) (aget arr 0))\n                   (core/bit-or (bit-shift-left (aget arr 3) 16) (aget arr 2)))))\n\n(defn bit-xor\n  [x y]\n  (.xor x y))\n\n(defn bit-or\n  [x y]\n  (.or x y))\n\n(defn from-string\n  [s radix]\n  (long/fromString s radix))\n\n(defn from-number\n  [x]\n  (long/fromNumber x))\n\n(defn ->long\n  \"Coerces to long, or returns nil if not possible.\"\n  [x]\n  (cond (number? x)\n        (long/fromNumber x)\n\n        (instance? goog.math.Long x)\n        x))\n\n(def ONE (long/getOne))\n\n(def bit-count bit-count/bit-count)\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAkBA,AAAA,AAAMA,AACHC,AAAEC;AADL,AAEE,AAAqBD,AAAEC;;AAEzB,AAAA,AAAMC,AACHF,AAAEG;AADL,AAEE,AAAMH,AAAEG;;AAEV,AAAA,AAAMC,AACHJ,AAAEG;AADL,AAEE,AAAME,AAAI,AAAA,AAA2B,AAASL;AACxCM,AAAI,AAAA,AAAS,AAASN;AACtBO,AAAI,AAAA,AAA2B,AAAQP;AACvCQ,AAAI,AAAA,AAAS,AAAQR;AAErBS,AAAI,AAAA,AAA2B,AAASN;AACxCO,AAAI,AAAA,AAAS,AAASP;AACtBQ,AAAI,AAAA,AAA2B,AAAQR;AACvCS,AAAI,AAAA,AAAS,AAAQT;AAErBU,AAAI,AAAA,AAAA,AAAA,AAAA;AAVV,AAWE,AAAA,AAAMA,AAAM,AAAQL,AAAII;;AACxB,AAAA,AAAMC,AAAM,AAAA,AAA2B,AAAA,AAAMA;;AAC7C,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAC3B,AAAA,AAAMA,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAQN,AAAIK;;AAC7C,AAAA,AAAMC,AAAM,AAAA,AAA2B,AAAA,AAAMA;;AAC7C,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAC3B,AAAA,AAAMA,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAQL,AAAIG;;AAC7C,AAAA,AAAME,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAA,AAA2B,AAAA,AAAMA;;AAClE,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAC3B,AAAA,AAAMA,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAQP,AAAIM;;AAC7C,AAAA,AAAMC,AAAM,AAAA,AAA2B,AAAA,AAAMA;;AAC7C,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAC3B,AAAA,AAAMA,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAQN,AAAII;;AAC7C,AAAA,AAAME,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAA,AAA2B,AAAA,AAAMA;;AAClE,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAC3B,AAAA,AAAMA,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAQL,AAAIE;;AAC7C,AAAA,AAAMG,AAAM,AAAQ,AAAA,AAAMA,AAAO,AAAA,AAA2B,AAAA,AAAMA;;AAClE,AAAA,AAAMA,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAE3B,AAAA,AAAMA,AAAM,AAAA,AAAA,AAAA,AAAQ,AAAA,AAAMA,AAAO,AAAQR,AAAIO,AAAK,AAAQN,AAAIK,AAAK,AAAQJ,AAAIG,AAAK,AAAQF,AAAIC;;AAEhG,AAAA,AAAMI,AAAM,AAAA,AAAS,AAAA,AAAMA;;AAG3B,AAAAC,AAAe,AAAa,AAAA,AAAgB,AAAA,AAAMD,AAAW,AAAA,AAAMA;AAAnEE,AACe,AAAa,AAAA,AAAgB,AAAA,AAAMF,AAAW,AAAA,AAAMA;AADnE,AAAA,AAAAC,AAAAC,AAACC;;AAGL,AAAA,AAAMC,AACHjB,AAAEG;AADL,AAEE,AAAMH,AAAEG;;AAEV,AAAA,AAAMe,AACHlB,AAAEG;AADL,AAEE,AAAKH,AAAEG;;AAET,AAAA,AAAMgB,AACHC,AAAEC;AADL,AAEE,AAACC,AAAgBF,AAAEC;;AAErB,AAAA,AAAME,AACHvB;AADH,AAEE,AAACwB,AAAgBxB;;AAEnB;;;AAAA,AAAMyB,AAEHzB;AAFH,AAGE,AAAM,AAASA;AACT,AAACwB,AAAgBxB;;AADvB,AAGM,AAAW0B,AAAe1B;AAC1BA;;AAJN;;;;AAMF,AAAK2B,AAAI,AAACC;AAEV,AAAKC,AAAUC","names",["clojure.test.check.random.longs/unsigned-bit-shift-right","x","n","clojure.test.check.random.longs/+","y","clojure.test.check.random.longs/*","a48","a32","a16","a00","b48","b32","b16","b00","arr","G__67743","G__67744","goog.math.Long/fromBits","clojure.test.check.random.longs/bit-xor","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/from-string","s","radix","goog.math.Long/fromString","clojure.test.check.random.longs/from-number","goog.math.Long/fromNumber","clojure.test.check.random.longs/->long","js/goog.math.Long","clojure.test.check.random.longs/ONE","goog.math.Long/getOne","clojure.test.check.random.longs/bit-count","clojure.test.check.random.longs.bit-count-impl/bit-count"]]],"~:cache-keys",["~#cmap",[["^1B","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^13","~$goog.array","~$goog.asserts"]]],["^1B","goog/array/array.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1T"]]],["^1B","goog/debug/error.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/dom/nodetype.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/object/object.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1B","goog/math/long.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1T","~$goog.reflect"]]],["^1B","goog/string/internal.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/functions/functions.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/structs/map.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1B","goog/asserts/asserts.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1B","goog/uri/uri.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1S","^1T","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1B","goog/base.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",[]]],["^1B","goog/structs/structs.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1S","~$goog.object"]]],["^1B","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^E"]]],["^1B","goog/string/string.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","~$goog.string.internal"]]],["^1B","goog/reflect/reflect.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/string/stringbuffer.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/iter/iter.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1S","^1T","~$goog.functions","~$goog.math"]]],["^1B","cljs/core.cljs"],[1630228118934,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^10","~$goog.math.Integer","^1[","^25","^1S","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1B","clojure/test/check/random/longs.cljs"],[1630228119162,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^E","^[","^10","^E"]]],["^1B","goog/math/integer.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13"]]],["^1B","goog/uri/utils.js"],[1630228359392,"^1O",["^ ","^1P",null,"^1Q",["^P",[]],"^1R",["^13","^1S","^1T","^1["]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",12,"^8",2,"^9",12,"^:",33,"^;","Gary Fredericks","^<","Internal namespace, wrapping some goog.math.Long functionality."],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M"],"^N",null,"^O",["^P",["^Q","^R","^S","~$*","^T","~$+"]],"^U","^V","^Y",null,"^Z",["^ ","^[","^[","^Q","^[","^10","^10","^11","^10","^D","^E","^12","^E","^E","^E","^13","^13"],"^14",["^P",["^15"]],"^16",null,"~:defs",["^ ","~$from-number",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",79,"^8",7,"^9",79,"^:",18,"~:arglists",["^19",["~$quote",["^19",[["~$x"]]]]]],"^U","~$clojure.test.check.random.longs/from-number","^6","clojure/test/check/random/longs.cljs","^:",18,"~:method-params",["^19",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^8",1,"~:variadic?",false,"^7",79,"~:ret-tag","~$any","^9",79,"~:max-fixed-arity",1,"~:fn-var",true,"^2Z",["^19",["^2[",["^19",[["~$x"]]]]]],"^Q",["^ ","^U","~$clojure.test.check.random.longs/bit-count","^6","clojure/test/check/random/longs.cljs","^7",94,"^8",1,"^9",94,"^:",15,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",94,"^8",6,"^9",94,"^:",15]],"^R",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"^U","~$clojure.test.check.random.longs/bit-xor","^6","clojure/test/check/random/longs.cljs","^:",14,"^31",["^19",[["~$x","~$y"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",67,"^35","^36","^9",67,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"^S",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",19,"^8",7,"^9",19,"^:",31,"^2Z",["^19",["^2[",["^19",[["~$x","~$n"]]]]]],"^U","~$clojure.test.check.random.longs/unsigned-bit-shift-right","^6","clojure/test/check/random/longs.cljs","^:",31,"^31",["^19",[["~$x","~$n"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",19,"^35","^36","^9",19,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x","~$n"]]]]]],"~$*",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",27,"^8",7,"^9",27,"^:",8,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"^U","~$clojure.test.check.random.longs/*","^6","clojure/test/check/random/longs.cljs","^:",8,"^31",["^19",[["~$x","~$y"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",27,"^35","^36","^9",27,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"~$from-string",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",75,"^8",7,"^9",75,"^:",18,"^2Z",["^19",["^2[",["^19",[["~$s","~$radix"]]]]]],"^U","~$clojure.test.check.random.longs/from-string","^6","clojure/test/check/random/longs.cljs","^:",18,"^31",["^19",[["~$s","^3>"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",75,"^35","^36","^9",75,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$s","^3>"]]]]]],"~$->long",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",83,"^8",7,"^9",83,"^:",13,"^2Z",["^19",["^2[",["^19",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^U","~$clojure.test.check.random.longs/->long","^6","clojure/test/check/random/longs.cljs","^:",13,"^31",["^19",[["~$x"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",83,"^35",["^P",[null,"^36","~$clj-nil"]],"^9",83,"^37",1,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^T",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",71,"^8",7,"^9",71,"^:",13,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"^U","~$clojure.test.check.random.longs/bit-or","^6","clojure/test/check/random/longs.cljs","^:",13,"^31",["^19",[["~$x","~$y"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",71,"^35","^36","^9",71,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"~$ONE",["^ ","^U","~$clojure.test.check.random.longs/ONE","^6","clojure/test/check/random/longs.cljs","^7",92,"^8",1,"^9",92,"^:",9,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",92,"^8",6,"^9",92,"^:",9],"~:tag","^36"],"~$+",["^ ","^2Y",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",23,"^8",7,"^9",23,"^:",8,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]],"^U","~$clojure.test.check.random.longs/+","^6","clojure/test/check/random/longs.cljs","^:",8,"^31",["^19",[["~$x","~$y"]]],"^32",null,"^33",["^19",[null,null]],"^8",1,"^34",false,"^7",23,"^35","^36","^9",23,"^37",2,"^38",true,"^2Z",["^19",["^2[",["^19",[["~$x","~$y"]]]]]]],"^17",["^ ","^E","^E","^D","^E","^12","^E"],"^1>",["^ ","^15",["^P",[]]],"^1?",["^ "],"^1@",["^13","^E","^[","^10","^E"]],"^X","^V","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1N",[["^3J","~:static-fns"],true,["^3J","~:elide-asserts"],true,["^3J","~:optimize-constants"],null,["^3J","^1E"],null,["^3J","~:external-config"],null,["^3J","~:tooling-config"],null,["^3J","~:emit-constants"],null,["^3J","~:load-tests"],false,["^3J","~:form-size-threshold"],null,["^3J","~:infer-externs"],true,["^3J","^1G"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^3J","~:fn-invoke-direct"],null,["^3J","~:source-map"],"/dev/null"]]]