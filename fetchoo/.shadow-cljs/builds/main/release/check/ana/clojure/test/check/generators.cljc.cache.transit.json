["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.generators');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.test.check.generators.Generator = (function (gen,__meta,__extmap,__hash){\nthis.gen = gen;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.test.check.generators.Generator.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k68067,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__68087 = k68067;\nvar G__68087__$1 = (((G__68087 instanceof cljs.core.Keyword))?G__68087.fqn:null);\nswitch (G__68087__$1) {\ncase \"gen\":\nreturn self__.gen;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k68067,else__4388__auto__);\n\n}\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__68097){\nvar vec__68111 = p__68097;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68111,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68111,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#clojure.test.check.generators.Generator{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),self__.gen],null))], null),self__.__extmap));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__68066){\nvar self__ = this;\nvar G__68066__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__68066__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"gen\",\"gen\",142575302)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new clojure.test.check.generators.Generator(self__.gen,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__68143 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (236843149 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__68143(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this68068,other68069){\nvar self__ = this;\nvar this68068__$1 = this;\nreturn (((!((other68069 == null)))) && ((this68068__$1.constructor === other68069.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this68068__$1.gen,other68069.gen)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this68068__$1.__extmap,other68069.__extmap)));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new clojure.test.check.generators.Generator(self__.gen,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__68066){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__68168 = cljs.core.keyword_identical_QMARK_;\nvar expr__68169 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__68177 = new cljs.core.Keyword(null,\"gen\",\"gen\",142575302);\nvar G__68178 = expr__68169;\nreturn (pred__68168.cljs$core$IFn$_invoke$arity$2 ? pred__68168.cljs$core$IFn$_invoke$arity$2(G__68177,G__68178) : pred__68168.call(null,G__68177,G__68178));\n})())){\nreturn (new clojure.test.check.generators.Generator(G__68066,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.test.check.generators.Generator(self__.gen,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__68066),null));\n}\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),self__.gen,null))], null),self__.__extmap));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__68066){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new clojure.test.check.generators.Generator(self__.gen,G__68066,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.generators.Generator.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nclojure.test.check.generators.Generator.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gen\",\"gen\",1783106829,null)], null);\n});\n\nclojure.test.check.generators.Generator.cljs$lang$type = true;\n\nclojure.test.check.generators.Generator.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"clojure.test.check.generators/Generator\",null,(1),null));\n});\n\nclojure.test.check.generators.Generator.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"clojure.test.check.generators/Generator\");\n});\n\n/**\n * Positional factory function for clojure.test.check.generators/Generator.\n */\nclojure.test.check.generators.__GT_Generator = (function clojure$test$check$generators$__GT_Generator(gen){\nreturn (new clojure.test.check.generators.Generator(gen,null,null,null));\n});\n\n/**\n * Factory function for clojure.test.check.generators/Generator, taking a map of keywords to field values.\n */\nclojure.test.check.generators.map__GT_Generator = (function clojure$test$check$generators$map__GT_Generator(G__68071){\nvar extmap__4424__auto__ = (function (){var G__68198 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__68071,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nif(cljs.core.record_QMARK_(G__68071)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__68198);\n} else {\nreturn G__68198;\n}\n})();\nreturn (new clojure.test.check.generators.Generator(new cljs.core.Keyword(null,\"gen\",\"gen\",142575302).cljs$core$IFn$_invoke$arity$1(G__68071),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\n/**\n * Test if `x` is a generator. Generators should be treated as opaque values.\n */\nclojure.test.check.generators.generator_QMARK_ = (function clojure$test$check$generators$generator_QMARK_(x){\nreturn (x instanceof clojure.test.check.generators.Generator);\n});\nclojure.test.check.generators.make_gen = (function clojure$test$check$generators$make_gen(generator_fn){\nreturn (new clojure.test.check.generators.Generator(generator_fn,null,null,null));\n});\n/**\n * Internal function.\n */\nclojure.test.check.generators.call_gen = (function clojure$test$check$generators$call_gen(p__68214,rnd,size){\nvar map__68218 = p__68214;\nvar map__68218__$1 = (((((!((map__68218 == null))))?(((((map__68218.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68218.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68218):map__68218);\nvar generator_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68218__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nreturn (generator_fn.cljs$core$IFn$_invoke$arity$2 ? generator_fn.cljs$core$IFn$_invoke$arity$2(rnd,size) : generator_fn.call(null,rnd,size));\n});\n/**\n * Internal function.\n */\nclojure.test.check.generators.gen_pure = (function clojure$test$check$generators$gen_pure(value){\nreturn clojure.test.check.generators.make_gen((function (rnd,size){\nreturn value;\n}));\n});\n/**\n * Internal function.\n */\nclojure.test.check.generators.gen_fmap = (function clojure$test$check$generators$gen_fmap(k,p__68227){\nvar map__68229 = p__68227;\nvar map__68229__$1 = (((((!((map__68229 == null))))?(((((map__68229.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68229.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68229):map__68229);\nvar h = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68229__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nreturn clojure.test.check.generators.make_gen(((function (map__68229,map__68229__$1,h){\nreturn (function (rnd,size){\nvar G__68235 = (h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(rnd,size) : h.call(null,rnd,size));\nreturn (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__68235) : k.call(null,G__68235));\n});})(map__68229,map__68229__$1,h))\n);\n});\n/**\n * Internal function.\n */\nclojure.test.check.generators.gen_bind = (function clojure$test$check$generators$gen_bind(p__68239,k){\nvar map__68242 = p__68239;\nvar map__68242__$1 = (((((!((map__68242 == null))))?(((((map__68242.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68242.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68242):map__68242);\nvar h = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68242__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nreturn clojure.test.check.generators.make_gen(((function (map__68242,map__68242__$1,h){\nreturn (function (rnd,size){\nvar vec__68245 = clojure.test.check.random.split(rnd);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68245,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68245,(1),null);\nvar inner = (h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(r1,size) : h.call(null,r1,size));\nvar map__68248 = (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(inner) : k.call(null,inner));\nvar map__68248__$1 = (((((!((map__68248 == null))))?(((((map__68248.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68248.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68248):map__68248);\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68248__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nreturn (result.cljs$core$IFn$_invoke$arity$2 ? result.cljs$core$IFn$_invoke$arity$2(r2,size) : result.call(null,r2,size));\n});})(map__68242,map__68242__$1,h))\n);\n});\n/**\n * Internal function.\n * \n *   Given a random number generator, returns an infinite lazy sequence\n *   of random number generators.\n */\nclojure.test.check.generators.lazy_random_states = (function clojure$test$check$generators$lazy_random_states(rr){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar vec__68261 = clojure.test.check.random.split(rr);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68261,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68261,(1),null);\nreturn cljs.core.cons(r1,(clojure.test.check.generators.lazy_random_states.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.generators.lazy_random_states.cljs$core$IFn$_invoke$arity$1(r2) : clojure.test.check.generators.lazy_random_states.call(null,r2)));\n}),null,null));\n});\n/**\n * Takes a collection of generators and returns a generator of vectors.\n */\nclojure.test.check.generators.gen_tuple = (function clojure$test$check$generators$gen_tuple(gens){\nreturn clojure.test.check.generators.make_gen((function (rnd,size){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$3((function (p1__68268_SHARP_,p2__68269_SHARP_){\nreturn clojure.test.check.generators.call_gen(p1__68268_SHARP_,p2__68269_SHARP_,size);\n}),gens,clojure.test.check.random.split_n(rnd,cljs.core.count(gens)));\n}));\n});\n/**\n * Returns a generator like `gen` but with values transformed by `f`.\n *   E.g.:\n * \n *    (gen/sample (gen/fmap str gen/nat))\n *    => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n * \n *   Also see gen/let for a macro with similar functionality.\n */\nclojure.test.check.generators.fmap = (function clojure$test$check$generators$fmap(f,gen){\n\nreturn clojure.test.check.generators.gen_fmap((function (p1__68275_SHARP_){\nreturn clojure.test.check.rose_tree.fmap(f,p1__68275_SHARP_);\n}),gen);\n});\n/**\n * Create a generator that always returns `value`,\n *   and never shrinks. You can think of this as\n *   the `constantly` of generators. E.g.:\n * \n *    (gen/sample (gen/return 42))\n *    => (42 42 42 42 42 42 42 42 42 42)\n */\nclojure.test.check.generators.return$ = (function clojure$test$check$generators$return(value){\nreturn clojure.test.check.generators.gen_pure(clojure.test.check.rose_tree.pure(value));\n});\nclojure.test.check.generators.bind_helper = (function clojure$test$check$generators$bind_helper(f){\nreturn (function (rose){\nreturn clojure.test.check.generators.gen_fmap(clojure.test.check.rose_tree.join,clojure.test.check.generators.make_gen((function (rnd,size){\nreturn clojure.test.check.rose_tree.fmap((function (p1__68297_SHARP_){\nreturn clojure.test.check.generators.call_gen((f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__68297_SHARP_) : f.call(null,p1__68297_SHARP_)),rnd,size);\n}),rose);\n})));\n});\n});\n/**\n * Create a new generator that passes the result of `gen` into function\n *   `f`. `f` should return a new generator. This allows you to create new\n *   generators that depend on the value of other generators. For example,\n *   to create a generator of permutations which first generates a\n *   `num-elements` and then generates a shuffling of `(range num-elements)`:\n * \n *    (gen/bind gen/nat\n *              ;; this function takes a value generated by\n *              ;; the generator above and returns a new generator\n *              ;; which shuffles the collection returned by `range`\n *              (fn [num-elements]\n *                (gen/shuffle (range num-elements))))\n * \n *   Also see gen/let for a macro with similar functionality.\n */\nclojure.test.check.generators.bind = (function clojure$test$check$generators$bind(generator,f){\n\nreturn clojure.test.check.generators.gen_bind(generator,clojure.test.check.generators.bind_helper(f));\n});\n/**\n * Internal function.\n */\nclojure.test.check.generators.make_size_range_seq = (function clojure$test$check$generators$make_size_range_seq(max_size){\nreturn cljs.core.cycle(cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),max_size));\n});\n/**\n * Return a sequence of realized values from `generator`.\n * @param {...*} var_args\n */\nclojure.test.check.generators.sample_seq = (function clojure$test$check$generators$sample_seq(var_args){\nvar G__68331 = arguments.length;\nswitch (G__68331) {\ncase 1:\nreturn clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1 = (function (generator){\nreturn clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2(generator,(200));\n});\n\nclojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2 = (function (generator,max_size){\nvar r = clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\nvar size_seq = clojure.test.check.generators.make_size_range_seq(max_size);\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(((function (r,size_seq){\nreturn (function (p1__68321_SHARP_,p2__68322_SHARP_){\nreturn clojure.test.check.rose_tree.root(clojure.test.check.generators.call_gen(generator,p1__68321_SHARP_,p2__68322_SHARP_));\n});})(r,size_seq))\n,clojure.test.check.generators.lazy_random_states(r),size_seq);\n});\n\nclojure.test.check.generators.sample_seq.cljs$lang$maxFixedArity = 2;\n\n/**\n * Return a sequence of `num-samples` (default 10)\n *   realized values from `generator`.\n * \n *   The sequence starts with small values from the generator, which\n *   probably do not reflect the variety of values that will be generated\n *   during a longer test run.\n * \n *   Note that this function is a dev helper and is not meant to be used\n *   to build other generators.\n * @param {...*} var_args\n */\nclojure.test.check.generators.sample = (function clojure$test$check$generators$sample(var_args){\nvar G__68350 = arguments.length;\nswitch (G__68350) {\ncase 1:\nreturn clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$1 = (function (generator){\nreturn clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2(generator,(10));\n});\n\nclojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2 = (function (generator,num_samples){\n\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2(num_samples,clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1(generator));\n});\n\nclojure.test.check.generators.sample.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns a single sample value from the generator.\n * \n *   Note that this function is a dev helper and is not meant to be used\n *   to build other generators.\n * \n *   Optional args:\n * \n *   - size: the abstract size parameter, defaults to 30\n *   - seed: the seed for the random number generator, an integer\n * @param {...*} var_args\n */\nclojure.test.check.generators.generate = (function clojure$test$check$generators$generate(var_args){\nvar G__68369 = arguments.length;\nswitch (G__68369) {\ncase 1:\nreturn clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$1 = (function (generator){\nreturn clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2(generator,(30));\n});\n\nclojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2 = (function (generator,size){\nvar rng = clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\nreturn clojure.test.check.rose_tree.root(clojure.test.check.generators.call_gen(generator,rng,size));\n});\n\nclojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$3 = (function (generator,size,seed){\nvar rng = clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(seed);\nreturn clojure.test.check.rose_tree.root(clojure.test.check.generators.call_gen(generator,rng,size));\n});\n\nclojure.test.check.generators.generate.cljs$lang$maxFixedArity = 3;\n\nclojure.test.check.generators.halfs = (function clojure$test$check$generators$halfs(n){\nreturn cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__68395_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((0),p1__68395_SHARP_);\n}),cljs.core.iterate((function (p1__68396_SHARP_){\nreturn cljs.core.quot(p1__68396_SHARP_,(2));\n}),n));\n});\nclojure.test.check.generators.shrink_int = (function clojure$test$check$generators$shrink_int(integer){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__68405_SHARP_){\nreturn (integer - p1__68405_SHARP_);\n}),clojure.test.check.generators.halfs(integer));\n});\nclojure.test.check.generators.int_rose_tree = (function clojure$test$check$generators$int_rose_tree(value){\nreturn clojure.test.check.rose_tree.make_rose(value,cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.int_rose_tree,clojure.test.check.generators.shrink_int(value)));\n});\nclojure.test.check.generators.calc_long = (function clojure$test$check$generators$calc_long(factor,lower,upper){\nreturn cljs.core.long$((function (){var G__68440 = (lower + ((factor * (1.0 + upper)) - (factor * lower)));\nreturn Math.floor(G__68440);\n})());\n});\nclojure.test.check.generators.rand_range = (function clojure$test$check$generators$rand_range(rnd,lower,upper){\n\nreturn clojure.test.check.generators.calc_long(clojure.test.check.random.rand_double(rnd),lower,upper);\n});\n/**\n * Create a generator that depends on the size parameter.\n *   `sized-gen` is a function that takes an integer and returns\n *   a generator.\n * \n *    TODO: example\n */\nclojure.test.check.generators.sized = (function clojure$test$check$generators$sized(sized_gen){\nreturn clojure.test.check.generators.make_gen((function (rnd,size){\nvar sized_gen__$1 = (sized_gen.cljs$core$IFn$_invoke$arity$1 ? sized_gen.cljs$core$IFn$_invoke$arity$1(size) : sized_gen.call(null,size));\nreturn clojure.test.check.generators.call_gen(sized_gen__$1,rnd,size);\n}));\n});\n/**\n * Create a new generator with `size` always bound to `n`.\n * \n *    (gen/sample (gen/set (gen/resize 200 gen/double)))\n *    => (#{}\n *        #{-4.994772362980037E147}\n *        #{-4.234418056487335E-146}\n *        #{}\n *        #{}\n *        #{}\n *        #{NaN}\n *        #{8.142414100982609E-63}\n *        #{-3.58429955903876E-159 2.8563794617604296E-154\n *          4.1021360195776005E-100 1.9084564045332549E-38}\n *        #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})\n */\nclojure.test.check.generators.resize = (function clojure$test$check$generators$resize(n,generator){\n\nvar map__68482 = generator;\nvar map__68482__$1 = (((((!((map__68482 == null))))?(((((map__68482.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68482.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68482):map__68482);\nvar gen = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68482__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nreturn clojure.test.check.generators.make_gen(((function (map__68482,map__68482__$1,gen){\nreturn (function (rnd,_size){\nreturn (gen.cljs$core$IFn$_invoke$arity$2 ? gen.cljs$core$IFn$_invoke$arity$2(rnd,n) : gen.call(null,rnd,n));\n});})(map__68482,map__68482__$1,gen))\n);\n});\n/**\n * Create a new generator that modifies the size parameter by the\n *   given function. Intended to support generators with sizes that need\n *   to grow at different rates compared to the normal linear scaling.\n * \n *    (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n *                           gen/nat\n *                           (gen/scale #(* % 10) gen/nat)))\n *    => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n *        [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])\n */\nclojure.test.check.generators.scale = (function clojure$test$check$generators$scale(f,generator){\nreturn clojure.test.check.generators.sized((function (n){\nreturn clojure.test.check.generators.resize((f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(n) : f.call(null,n)),generator);\n}));\n});\n/**\n * Create a generator that returns integer numbers in the range\n *   `lower` to `upper`, inclusive.\n * \n *       (gen/sample (gen/choose 200 800))\n *       => (331 241 593 339 643 718 688 473 247 694)\n */\nclojure.test.check.generators.choose = (function clojure$test$check$generators$choose(lower,upper){\nreturn clojure.test.check.generators.make_gen((function (rnd,_size){\nvar value = clojure.test.check.generators.rand_range(rnd,lower,upper);\nreturn clojure.test.check.rose_tree.filter(((function (value){\nreturn (function (p1__68502_SHARP_){\nreturn (((p1__68502_SHARP_ >= lower)) && ((p1__68502_SHARP_ <= upper)));\n});})(value))\n,clojure.test.check.generators.int_rose_tree(value));\n}));\n});\n/**\n * Create a generator that randomly chooses a value from the list of\n *   provided generators. Shrinks toward choosing an earlier generator,\n *   as well as shrinking the value generated by the chosen generator.\n * \n *    (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n *    => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)\n */\nclojure.test.check.generators.one_of = (function clojure$test$check$generators$one_of(generators){\n\n\nreturn clojure.test.check.generators.bind(clojure.test.check.generators.choose((0),(cljs.core.count(generators) - (1))),(function (p1__68516_SHARP_){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(generators,p1__68516_SHARP_);\n}));\n});\n/**\n * Returns an index into the `likelihoods` sequence.\n */\nclojure.test.check.generators.pick = (function clojure$test$check$generators$pick(likelihoods,n){\nreturn cljs.core.count(cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((function (p1__68526_SHARP_){\nreturn (p1__68526_SHARP_ <= n);\n}),cljs.core.rest(cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_,(0),likelihoods))));\n});\n/**\n * Create a generator that chooses a generator from `pairs` based on the\n *   provided likelihoods. The likelihood of a given generator being chosen is\n *   its likelihood divided by the sum of all likelihoods. Shrinks toward\n *   choosing an earlier generator, as well as shrinking the value generated\n *   by the chosen generator.\n * \n *   Examples:\n * \n *    (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n *    => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)\n */\nclojure.test.check.generators.frequency = (function clojure$test$check$generators$frequency(pairs){\n\nvar pairs__$1 = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.pos_QMARK_,cljs.core.first),pairs);\nvar total = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core._PLUS_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs__$1));\n\nreturn clojure.test.check.generators.make_gen(((function (pairs__$1,total){\nreturn (function (rnd,size){\nreturn clojure.test.check.generators.call_gen(clojure.test.check.generators.gen_bind(clojure.test.check.generators.choose((0),(total - (1))),((function (pairs__$1,total){\nreturn (function (x){\nvar idx = clojure.test.check.generators.pick(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs__$1),clojure.test.check.rose_tree.root(x));\nreturn clojure.test.check.generators.gen_fmap(((function (idx,pairs__$1,total){\nreturn (function (rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),(new cljs.core.LazySeq(null,((function (idx,pairs__$1,total){\nreturn (function (){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2((function (){var iter__4523__auto__ = ((function (idx,pairs__$1,total){\nreturn (function clojure$test$check$generators$frequency_$_iter__68557(s__68558){\nreturn (new cljs.core.LazySeq(null,((function (idx,pairs__$1,total){\nreturn (function (){\nvar s__68558__$1 = s__68558;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__68558__$1);\nif(temp__5753__auto__){\nvar s__68558__$2 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__68558__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__68558__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__68560 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__68559 = (0);\nwhile(true){\nif((i__68559 < size__4522__auto__)){\nvar idx__$1 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__68559);\ncljs.core.chunk_append(b__68560,clojure.test.check.generators.call_gen(cljs.core.second(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(pairs__$1,idx__$1)),rnd,size));\n\nvar G__69622 = (i__68559 + (1));\ni__68559 = G__69622;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__68560),clojure$test$check$generators$frequency_$_iter__68557(cljs.core.chunk_rest(s__68558__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__68560),null);\n}\n} else {\nvar idx__$1 = cljs.core.first(s__68558__$2);\nreturn cljs.core.cons(clojure.test.check.generators.call_gen(cljs.core.second(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(pairs__$1,idx__$1)),rnd,size),clojure$test$check$generators$frequency_$_iter__68557(cljs.core.rest(s__68558__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(idx,pairs__$1,total))\n,null,null));\n});})(idx,pairs__$1,total))\n;\nreturn iter__4523__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$1(idx));\n})(),clojure.test.check.rose_tree.children(rose));\n});})(idx,pairs__$1,total))\n,null,null)));\n});})(idx,pairs__$1,total))\n,cljs.core.second(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(pairs__$1,idx)));\n});})(pairs__$1,total))\n),rnd,size);\n});})(pairs__$1,total))\n);\n});\n/**\n * Create a generator that randomly chooses an element from `coll`.\n * \n *    (gen/sample (gen/elements [:foo :bar :baz]))\n *    => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)\n */\nclojure.test.check.generators.elements = (function clojure$test$check$generators$elements(coll){\n\nvar v = cljs.core.vec(coll);\nreturn clojure.test.check.generators.gen_fmap(((function (v){\nreturn (function (p1__68601_SHARP_){\nreturn clojure.test.check.rose_tree.fmap(v,p1__68601_SHARP_);\n});})(v))\n,clojure.test.check.generators.choose((0),(cljs.core.count(v) - (1))));\n});\nclojure.test.check.generators.such_that_helper = (function clojure$test$check$generators$such_that_helper(pred,gen,p__68618,rng,size){\nvar map__68623 = p__68618;\nvar map__68623__$1 = (((((!((map__68623 == null))))?(((((map__68623.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68623.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68623):map__68623);\nvar ex_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68623__$1,new cljs.core.Keyword(null,\"ex-fn\",\"ex-fn\",-284925510));\nvar max_tries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68623__$1,new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792));\nvar tries_left = max_tries;\nvar rng__$1 = rng;\nvar size__$1 = size;\nwhile(true){\nif((tries_left === (0))){\nthrow (function (){var G__68642 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),pred,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),gen,new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792),max_tries], null);\nreturn (ex_fn.cljs$core$IFn$_invoke$arity$1 ? ex_fn.cljs$core$IFn$_invoke$arity$1(G__68642) : ex_fn.call(null,G__68642));\n})();\n} else {\nvar vec__68643 = clojure.test.check.random.split(rng__$1);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68643,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68643,(1),null);\nvar value = clojure.test.check.generators.call_gen(gen,r1,size__$1);\nif(cljs.core.truth_((function (){var G__68654 = clojure.test.check.rose_tree.root(value);\nreturn (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__68654) : pred.call(null,G__68654));\n})())){\nreturn clojure.test.check.rose_tree.filter(pred,value);\n} else {\nvar G__69643 = (tries_left - (1));\nvar G__69644 = r2;\nvar G__69645 = (size__$1 + (1));\ntries_left = G__69643;\nrng__$1 = G__69644;\nsize__$1 = G__69645;\ncontinue;\n}\n}\nbreak;\n}\n});\nclojure.test.check.generators.default_such_that_opts = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ex-fn\",\"ex-fn\",-284925510),(function (p__68666){\nvar map__68667 = p__68666;\nvar map__68667__$1 = (((((!((map__68667 == null))))?(((((map__68667.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68667.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68667):map__68667);\nvar arg = map__68667__$1;\nvar max_tries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68667__$1,new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792));\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Couldn't satisfy such-that predicate after \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(max_tries),\" tries.\"].join(''),arg);\n}),new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792),(10)], null);\n/**\n * Create a generator that generates values from `gen` that satisfy predicate\n *   `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n *   `pred`. By default, `such-that` will try 10 times to generate a value that\n *   satisfies the predicate. If no value passes this predicate after this number\n *   of iterations, a runtime exception will be thrown. Note also that each\n *   time such-that retries, it will increase the size parameter.\n * \n *   Examples:\n * \n *    ;; generate non-empty vectors of integers\n *    ;; (note, gen/not-empty does exactly this)\n *    (gen/such-that not-empty (gen/vector gen/int))\n * \n *   You can customize `such-that` by passing an optional third argument, which can\n *   either be an integer representing the maximum number of times test.check\n *   will try to generate a value matching the predicate, or a map:\n * \n *    :max-tries  positive integer, the maximum number of tries (default 10)\n *    :ex-fn      a function of one arg that will be called if test.check cannot\n *                generate a matching value; it will be passed a map with `:gen`,\n *                `:pred`, and `:max-tries` and should return an exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.such_that = (function clojure$test$check$generators$such_that(var_args){\nvar G__68682 = arguments.length;\nswitch (G__68682) {\ncase 2:\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2 = (function (pred,gen){\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3(pred,gen,(10));\n});\n\nclojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3 = (function (pred,gen,max_tries_or_opts){\nvar opts = ((cljs.core.integer_QMARK_(max_tries_or_opts))?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792),max_tries_or_opts], null):((cljs.core.map_QMARK_(max_tries_or_opts))?max_tries_or_opts:(function(){throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad argument to such-that!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"max-tries-or-opts\",\"max-tries-or-opts\",-609860571),max_tries_or_opts], null))})()\n));\nvar opts__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.default_such_that_opts,opts], 0));\n\nreturn clojure.test.check.generators.make_gen(((function (opts,opts__$1){\nreturn (function (rand_seed,size){\nreturn clojure.test.check.generators.such_that_helper(pred,gen,opts__$1,rand_seed,size);\n});})(opts,opts__$1))\n);\n});\n\nclojure.test.check.generators.such_that.cljs$lang$maxFixedArity = 3;\n\n/**\n * Modifies a generator so that it doesn't generate empty collections.\n * \n *   Examples:\n * \n *    ;; generate a vector of booleans, but never the empty vector\n *    (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n *    => ([false]\n *        [false false]\n *        [false false]\n *        [false false false]\n *        [false false false false]\n *        [false true true]\n *        [true false false false]\n *        [true]\n *        [true true true false false true false]\n *        [false true true true false true true true false])\n */\nclojure.test.check.generators.not_empty = (function clojure$test$check$generators$not_empty(gen){\n\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(cljs.core.not_empty,gen);\n});\n/**\n * Create a new generator that is just like `gen`, except does not shrink\n *   at all. This can be useful when shrinking is taking a long time or is not\n *   applicable to the domain.\n */\nclojure.test.check.generators.no_shrink = (function clojure$test$check$generators$no_shrink(gen){\n\nreturn clojure.test.check.generators.gen_fmap((function (rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),cljs.core.PersistentVector.EMPTY);\n}),gen);\n});\n/**\n * Create a new generator like `gen`, but will consider nodes for shrinking\n *   even if their parent passes the test (up to one additional level).\n */\nclojure.test.check.generators.shrink_2 = (function clojure$test$check$generators$shrink_2(gen){\n\nreturn clojure.test.check.generators.gen_fmap(clojure.test.check.rose_tree.collapse,gen);\n});\n/**\n * Generates one of `true` or `false`. Shrinks to `false`.\n */\nclojure.test.check.generators.boolean$ = clojure.test.check.generators.elements(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false,true], null));\n/**\n * Create a generator that returns a vector, whose elements are chosen\n *   from the generators in the same position. The individual elements shrink\n *   according to their generator, but the value will never shrink in count.\n * \n *   Examples:\n * \n *    (def t (tuple gen/int gen/boolean))\n *    (sample t)\n *    ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n *    ;; =>  [3 true] [-4 false] [9 true]))\n * @param {...*} var_args\n */\nclojure.test.check.generators.tuple = (function clojure$test$check$generators$tuple(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___69675 = arguments.length;\nvar i__4731__auto___69676 = (0);\nwhile(true){\nif((i__4731__auto___69676 < len__4730__auto___69675)){\nargs__4736__auto__.push((arguments[i__4731__auto___69676]));\n\nvar G__69677 = (i__4731__auto___69676 + (1));\ni__4731__auto___69676 = G__69677;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nclojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic = (function (generators){\n\nreturn clojure.test.check.generators.gen_fmap((function (roses){\nreturn clojure.test.check.rose_tree.zip(cljs.core.vector,roses);\n}),clojure.test.check.generators.gen_tuple(generators));\n});\n\nclojure.test.check.generators.tuple.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nclojure.test.check.generators.tuple.cljs$lang$applyTo = (function (seq68701){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq68701));\n});\n\n/**\n * Generates a positive or negative integer bounded by the generator's\n *   `size` parameter.\n */\nclojure.test.check.generators.int$ = clojure.test.check.generators.sized((function (size){\nreturn clojure.test.check.generators.choose((- size),size);\n}));\n/**\n * Generates non-negative integers bounded by the generator's `size`\n *   parameter. Shrinks to zero.\n */\nclojure.test.check.generators.nat = clojure.test.check.generators.fmap((function (p1__68706_SHARP_){\nvar G__68708 = cljs.core.long$(p1__68706_SHARP_);\nreturn Math.abs(G__68708);\n}),clojure.test.check.generators.int$);\n/**\n * Generate positive integers bounded by the generator's `size` parameter.\n */\nclojure.test.check.generators.pos_int = clojure.test.check.generators.nat;\n/**\n * Generate negative integers bounded by the generator's `size` parameter.\n */\nclojure.test.check.generators.neg_int = clojure.test.check.generators.fmap((function (p1__68715_SHARP_){\nreturn ((-1) * p1__68715_SHARP_);\n}),clojure.test.check.generators.nat);\n/**\n * Generate strictly positive integers bounded by the generator's `size` + 1\n */\nclojure.test.check.generators.s_pos_int = clojure.test.check.generators.fmap(cljs.core.inc,clojure.test.check.generators.nat);\n/**\n * Generate strictly negative integers bounded by the generator's `size` + 1\n */\nclojure.test.check.generators.s_neg_int = clojure.test.check.generators.fmap(cljs.core.dec,clojure.test.check.generators.neg_int);\n/**\n * Create a generator of vectors whose elements are chosen from\n *   `generator`. The count of the vector will be bounded by the `size`\n *   generator parameter.\n * @param {...*} var_args\n */\nclojure.test.check.generators.vector = (function clojure$test$check$generators$vector(var_args){\nvar G__68726 = arguments.length;\nswitch (G__68726) {\ncase 1:\nreturn clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1 = (function (generator){\n\nreturn clojure.test.check.generators.gen_bind(clojure.test.check.generators.sized((function (p1__68718_SHARP_){\nreturn clojure.test.check.generators.choose((0),p1__68718_SHARP_);\n})),(function (num_elements_rose){\nreturn clojure.test.check.generators.gen_fmap((function (roses){\nreturn clojure.test.check.rose_tree.shrink_vector(cljs.core.vector,roses);\n}),clojure.test.check.generators.gen_tuple(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root(num_elements_rose),generator)));\n}));\n});\n\nclojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2 = (function (generator,num_elements){\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.tuple,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(num_elements,generator));\n});\n\nclojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3 = (function (generator,min_elements,max_elements){\n\nreturn clojure.test.check.generators.gen_bind(clojure.test.check.generators.choose(min_elements,max_elements),(function (num_elements_rose){\nreturn clojure.test.check.generators.gen_fmap((function (roses){\nreturn clojure.test.check.rose_tree.filter((function (v){\nreturn (((cljs.core.count(v) >= min_elements)) && ((cljs.core.count(v) <= max_elements)));\n}),clojure.test.check.rose_tree.shrink_vector(cljs.core.vector,roses));\n}),clojure.test.check.generators.gen_tuple(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root(num_elements_rose),generator)));\n}));\n});\n\nclojure.test.check.generators.vector.cljs$lang$maxFixedArity = 3;\n\n/**\n * Like `vector`, but generates lists.\n */\nclojure.test.check.generators.list = (function clojure$test$check$generators$list(generator){\n\nreturn clojure.test.check.generators.gen_bind(clojure.test.check.generators.sized((function (p1__68738_SHARP_){\nreturn clojure.test.check.generators.choose((0),p1__68738_SHARP_);\n})),(function (num_elements_rose){\nreturn clojure.test.check.generators.gen_fmap((function (roses){\nreturn clojure.test.check.rose_tree.shrink_vector(cljs.core.list,roses);\n}),clojure.test.check.generators.gen_tuple(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root(num_elements_rose),generator)));\n}));\n});\nclojure.test.check.generators.swap = (function clojure$test$check$generators$swap(coll,p__68752){\nvar vec__68753 = p__68752;\nvar i1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68753,(0),null);\nvar i2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68753,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(coll,i2,(coll.cljs$core$IFn$_invoke$arity$1 ? coll.cljs$core$IFn$_invoke$arity$1(i1) : coll.call(null,i1)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([i1,(coll.cljs$core$IFn$_invoke$arity$1 ? coll.cljs$core$IFn$_invoke$arity$1(i2) : coll.call(null,i2))], 0));\n});\n/**\n * Create a generator that generates random permutations of\n *   `coll`. Shrinks toward the original collection: `coll`. `coll` will\n *   be coerced to a vector.\n */\nclojure.test.check.generators.shuffle = (function clojure$test$check$generators$shuffle(coll){\nvar coll__$1 = ((cljs.core.vector_QMARK_(coll))?coll:cljs.core.vec(coll));\nvar index_gen = clojure.test.check.generators.choose((0),(cljs.core.count(coll__$1) - (1)));\nreturn clojure.test.check.generators.fmap(((function (coll__$1,index_gen){\nreturn (function (p1__68756_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.test.check.generators.swap,coll__$1,p1__68756_SHARP_);\n});})(coll__$1,index_gen))\n,clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3(clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([index_gen,index_gen], 0)),(0),((2) * cljs.core.count(coll__$1))));\n});\n/**\n * Like clojure.core/hash-map, except the values are generators.\n * Returns a generator that makes maps with the supplied keys and\n * values generated using the supplied generators.\n * \n *     (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n *     => ({:a false, :b 0}\n *         {:a true,  :b 1}\n *         {:a false, :b 2}\n *         {:a true,  :b 2}\n *         {:a false, :b 4}\n *         {:a false, :b 2}\n *         {:a true,  :b 3}\n *         {:a true,  :b 4}\n *         {:a false, :b 1}\n *         {:a false, :b 0})\n * @param {...*} var_args\n */\nclojure.test.check.generators.hash_map = (function clojure$test$check$generators$hash_map(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___69753 = arguments.length;\nvar i__4731__auto___69754 = (0);\nwhile(true){\nif((i__4731__auto___69754 < len__4730__auto___69753)){\nargs__4736__auto__.push((arguments[i__4731__auto___69754]));\n\nvar G__69759 = (i__4731__auto___69754 + (1));\ni__4731__auto___69754 = G__69759;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn clojure.test.check.generators.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nclojure.test.check.generators.hash_map.cljs$core$IFn$_invoke$arity$variadic = (function (kvs){\n\nvar ks = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),kvs);\nvar vs = cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((2),cljs.core.rest(kvs));\n\nreturn clojure.test.check.generators.fmap(((function (ks,vs){\nreturn (function (p1__68761_SHARP_){\nreturn cljs.core.zipmap(ks,p1__68761_SHARP_);\n});})(ks,vs))\n,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.tuple,vs));\n});\n\nclojure.test.check.generators.hash_map.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nclojure.test.check.generators.hash_map.cljs$lang$applyTo = (function (seq68764){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq68764));\n});\n\nclojure.test.check.generators.transient_set_contains_QMARK_ = (function clojure$test$check$generators$transient_set_contains_QMARK_(s,k){\nreturn (!((cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(s,k) == null)));\n});\n/**\n * Returns a rose tree.\n */\nclojure.test.check.generators.coll_distinct_by_STAR_ = (function clojure$test$check$generators$coll_distinct_by_STAR_(empty_coll,key_fn,shuffle_fn,gen,rng,size,num_elements,min_elements,max_tries,ex_fn){\n\n\nvar rose_trees = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nvar s = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);\nvar rng__$1 = rng;\nvar size__$1 = size;\nvar tries = (0);\nwhile(true){\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(max_tries,tries)) && ((cljs.core.count(rose_trees) < min_elements)))){\nthrow (function (){var G__68796 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),gen,new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792),max_tries,new cljs.core.Keyword(null,\"num-elements\",\"num-elements\",1960422107),num_elements], null);\nreturn (ex_fn.cljs$core$IFn$_invoke$arity$1 ? ex_fn.cljs$core$IFn$_invoke$arity$1(G__68796) : ex_fn.call(null,G__68796));\n})();\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(max_tries,tries)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(rose_trees),num_elements)))){\nreturn clojure.test.check.rose_tree.shrink_vector(((function (rose_trees,s,rng__$1,size__$1,tries){\nreturn (function() { \nvar G__69814__delegate = function (rest__68788_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(empty_coll,rest__68788_SHARP_);\n};\nvar G__69814 = function (var_args){\nvar rest__68788_SHARP_ = null;\nif (arguments.length > 0) {\nvar G__69821__i = 0, G__69821__a = new Array(arguments.length -  0);\nwhile (G__69821__i < G__69821__a.length) {G__69821__a[G__69821__i] = arguments[G__69821__i + 0]; ++G__69821__i;}\n  rest__68788_SHARP_ = new cljs.core.IndexedSeq(G__69821__a,0,null);\n} \nreturn G__69814__delegate.call(this,rest__68788_SHARP_);};\nG__69814.cljs$lang$maxFixedArity = 0;\nG__69814.cljs$lang$applyTo = (function (arglist__69824){\nvar rest__68788_SHARP_ = cljs.core.seq(arglist__69824);\nreturn G__69814__delegate(rest__68788_SHARP_);\n});\nG__69814.cljs$core$IFn$_invoke$arity$variadic = G__69814__delegate;\nreturn G__69814;\n})()\n;})(rose_trees,s,rng__$1,size__$1,tries))\n,(function (){var G__68798 = rng__$1;\nvar G__68799 = cljs.core.persistent_BANG_(rose_trees);\nreturn (shuffle_fn.cljs$core$IFn$_invoke$arity$2 ? shuffle_fn.cljs$core$IFn$_invoke$arity$2(G__68798,G__68799) : shuffle_fn.call(null,G__68798,G__68799));\n})());\n} else {\nvar vec__68801 = clojure.test.check.random.split(rng__$1);\nvar rng1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68801,(0),null);\nvar rng2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68801,(1),null);\nvar rose = clojure.test.check.generators.call_gen(gen,rng1,size__$1);\nvar root = clojure.test.check.rose_tree.root(rose);\nvar k = (key_fn.cljs$core$IFn$_invoke$arity$1 ? key_fn.cljs$core$IFn$_invoke$arity$1(root) : key_fn.call(null,root));\nif(clojure.test.check.generators.transient_set_contains_QMARK_(s,k)){\nvar G__69835 = rose_trees;\nvar G__69836 = s;\nvar G__69837 = rng2;\nvar G__69838 = (size__$1 + (1));\nvar G__69839 = (tries + (1));\nrose_trees = G__69835;\ns = G__69836;\nrng__$1 = G__69837;\nsize__$1 = G__69838;\ntries = G__69839;\ncontinue;\n} else {\nvar G__69845 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(rose_trees,rose);\nvar G__69846 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(s,k);\nvar G__69847 = rng2;\nvar G__69848 = size__$1;\nvar G__69849 = (0);\nrose_trees = G__69845;\ns = G__69846;\nrng__$1 = G__69847;\nsize__$1 = G__69848;\ntries = G__69849;\ncontinue;\n}\n\n}\n}\nbreak;\n}\n});\n/**\n * Like clojure.core/distinct? but takes a collection instead of varargs,\n *   and returns true for empty collections.\n */\nclojure.test.check.generators.distinct_by_QMARK_ = (function clojure$test$check$generators$distinct_by_QMARK_(f,coll){\nvar or__4131__auto__ = cljs.core.empty_QMARK_(coll);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,coll));\n}\n});\n/**\n * Returns a shuffled version of coll according to the rng.\n * \n *   Note that this is not a generator, it is just a utility function.\n */\nclojure.test.check.generators.the_shuffle_fn = (function clojure$test$check$generators$the_shuffle_fn(rng,coll){\nvar empty_coll = cljs.core.empty(coll);\nvar v = cljs.core.vec(coll);\nvar card = cljs.core.count(coll);\nvar dec_card = (card - (1));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(empty_coll,cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (empty_coll,v,card,dec_card){\nreturn (function (p__68814,idx){\nvar vec__68817 = p__68814;\nvar v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68817,(0),null);\nvar rng__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68817,(1),null);\nvar vec__68820 = clojure.test.check.random.split(rng__$1);\nvar rng1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68820,(0),null);\nvar rng2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68820,(1),null);\nvar swap_idx = clojure.test.check.generators.rand_range(rng1,idx,dec_card);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.swap(v__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,swap_idx], null)),rng2], null);\n});})(empty_coll,v,card,dec_card))\n,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [v,rng], null),cljs.core.range.cljs$core$IFn$_invoke$arity$1(card))));\n});\nclojure.test.check.generators.coll_distinct_by = (function clojure$test$check$generators$coll_distinct_by(empty_coll,key_fn,allows_dupes_QMARK_,ordered_QMARK_,gen,p__68836){\nvar map__68837 = p__68836;\nvar map__68837__$1 = (((((!((map__68837 == null))))?(((((map__68837.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__68837.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__68837):map__68837);\nvar num_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68837__$1,new cljs.core.Keyword(null,\"num-elements\",\"num-elements\",1960422107));\nvar min_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68837__$1,new cljs.core.Keyword(null,\"min-elements\",\"min-elements\",949370780));\nvar max_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__68837__$1,new cljs.core.Keyword(null,\"max-elements\",\"max-elements\",433034073));\nvar max_tries = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__68837__$1,new cljs.core.Keyword(null,\"max-tries\",\"max-tries\",-1824441792),(10));\nvar ex_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__68837__$1,new cljs.core.Keyword(null,\"ex-fn\",\"ex-fn\",-284925510),((function (map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries){\nreturn (function (p1__68823_SHARP_){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Couldn't generate enough distinct elements!\",p1__68823_SHARP_);\n});})(map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries))\n);\nvar shuffle_fn = (cljs.core.truth_(ordered_QMARK_)?clojure.test.check.generators.the_shuffle_fn:((function (map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (_rng,coll){\nreturn coll;\n});})(map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n);\nvar hard_min_elements = (function (){var or__4131__auto__ = num_elements;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = min_elements;\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nreturn (1);\n}\n}\n})();\nif(cljs.core.truth_(num_elements)){\nvar size_pred = ((function (shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68824_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(num_elements,cljs.core.count(p1__68824_SHARP_));\n});})(shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n;\n\nreturn clojure.test.check.generators.make_gen(((function (size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (rng,gen_size){\nreturn clojure.test.check.rose_tree.filter((cljs.core.truth_(allows_dupes_QMARK_)?cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(size_pred,((function (size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68826_SHARP_){\nreturn clojure.test.check.generators.distinct_by_QMARK_(key_fn,p1__68826_SHARP_);\n});})(size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n):size_pred),clojure.test.check.generators.coll_distinct_by_STAR_(empty_coll,key_fn,shuffle_fn,gen,rng,gen_size,num_elements,hard_min_elements,max_tries,ex_fn));\n});})(size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n);\n} else {\nvar min_elements__$1 = (function (){var or__4131__auto__ = min_elements;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (0);\n}\n})();\nvar size_pred = (cljs.core.truth_(max_elements)?((function (min_elements__$1,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68827_SHARP_){\nreturn (((min_elements__$1 <= cljs.core.count(p1__68827_SHARP_))) && ((cljs.core.count(p1__68827_SHARP_) <= max_elements)));\n});})(min_elements__$1,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n:((function (min_elements__$1,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68828_SHARP_){\nreturn (min_elements__$1 <= cljs.core.count(p1__68828_SHARP_));\n});})(min_elements__$1,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n);\nreturn clojure.test.check.generators.gen_bind((cljs.core.truth_(max_elements)?clojure.test.check.generators.choose(min_elements__$1,max_elements):clojure.test.check.generators.sized(((function (min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68829_SHARP_){\nreturn clojure.test.check.generators.choose(min_elements__$1,(min_elements__$1 + p1__68829_SHARP_));\n});})(min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n)),((function (min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (num_elements_rose){\nvar num_elements__$1 = clojure.test.check.rose_tree.root(num_elements_rose);\nreturn clojure.test.check.generators.make_gen(((function (num_elements__$1,min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (rng,gen_size){\nreturn clojure.test.check.rose_tree.filter((cljs.core.truth_(allows_dupes_QMARK_)?cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(size_pred,((function (num_elements__$1,min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn){\nreturn (function (p1__68830_SHARP_){\nreturn clojure.test.check.generators.distinct_by_QMARK_(key_fn,p1__68830_SHARP_);\n});})(num_elements__$1,min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n):size_pred),clojure.test.check.generators.coll_distinct_by_STAR_(empty_coll,key_fn,shuffle_fn,gen,rng,gen_size,num_elements__$1,hard_min_elements,max_tries,ex_fn));\n});})(num_elements__$1,min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n);\n});})(min_elements__$1,size_pred,shuffle_fn,hard_min_elements,map__68837,map__68837__$1,num_elements,min_elements,max_elements,max_tries,ex_fn))\n);\n}\n});\n/**\n * Generates a vector of elements from the given generator, with the\n *   guarantee that the elements will be distinct.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated vectors\n *  :min-elements  the min size of generated vectors\n *  :max-elements  the max size of generated vectors\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.vector_distinct = (function clojure$test$check$generators$vector_distinct(var_args){\nvar G__68859 = arguments.length;\nswitch (G__68859) {\ncase 1:\nreturn clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1 = (function (gen){\nreturn clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2(gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2 = (function (gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.PersistentVector.EMPTY,cljs.core.identity,true,true,gen,opts);\n});\n\nclojure.test.check.generators.vector_distinct.cljs$lang$maxFixedArity = 2;\n\n/**\n * Generates a list of elements from the given generator, with the\n *   guarantee that the elements will be distinct.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated list\n *  :min-elements  the min size of generated list\n *  :max-elements  the max size of generated list\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.list_distinct = (function clojure$test$check$generators$list_distinct(var_args){\nvar G__68881 = arguments.length;\nswitch (G__68881) {\ncase 1:\nreturn clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$1 = (function (gen){\nreturn clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2(gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2 = (function (gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.List.EMPTY,cljs.core.identity,true,true,gen,opts);\n});\n\nclojure.test.check.generators.list_distinct.cljs$lang$maxFixedArity = 2;\n\n/**\n * Generates a vector of elements from the given generator, with the\n *   guarantee that (map key-fn the-vector) will be distinct.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated vectors\n *  :min-elements  the min size of generated vectors\n *  :max-elements  the max size of generated vectors\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.vector_distinct_by = (function clojure$test$check$generators$vector_distinct_by(var_args){\nvar G__68900 = arguments.length;\nswitch (G__68900) {\ncase 2:\nreturn clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$2 = (function (key_fn,gen){\nreturn clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3(key_fn,gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3 = (function (key_fn,gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.PersistentVector.EMPTY,key_fn,true,true,gen,opts);\n});\n\nclojure.test.check.generators.vector_distinct_by.cljs$lang$maxFixedArity = 3;\n\n/**\n * Generates a list of elements from the given generator, with the\n *   guarantee that (map key-fn the-list) will be distinct.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated list\n *  :min-elements  the min size of generated list\n *  :max-elements  the max size of generated list\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.list_distinct_by = (function clojure$test$check$generators$list_distinct_by(var_args){\nvar G__68922 = arguments.length;\nswitch (G__68922) {\ncase 2:\nreturn clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$2 = (function (key_fn,gen){\nreturn clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3(key_fn,gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3 = (function (key_fn,gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.List.EMPTY,key_fn,true,true,gen,opts);\n});\n\nclojure.test.check.generators.list_distinct_by.cljs$lang$maxFixedArity = 3;\n\n/**\n * Generates a set of elements from the given generator.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated set\n *  :min-elements  the min size of generated set\n *  :max-elements  the max size of generated set\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.set = (function clojure$test$check$generators$set(var_args){\nvar G__68931 = arguments.length;\nswitch (G__68931) {\ncase 1:\nreturn clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1 = (function (gen){\nreturn clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2(gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2 = (function (gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.PersistentHashSet.EMPTY,cljs.core.identity,false,false,gen,opts);\n});\n\nclojure.test.check.generators.set.cljs$lang$maxFixedArity = 2;\n\n/**\n * Generates a sorted set of elements from the given generator.\n * \n *   If the generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated set\n *  :min-elements  the min size of generated set\n *  :max-elements  the max size of generated set\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct values; it will be passed a map with\n *                 `:gen`, `:num-elements`, and `:max-tries` and should return an\n *                 exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.sorted_set = (function clojure$test$check$generators$sorted_set(var_args){\nvar G__68937 = arguments.length;\nswitch (G__68937) {\ncase 1:\nreturn clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$1 = (function (gen){\nreturn clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2(gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2 = (function (gen,opts){\n\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.sorted_set(),cljs.core.identity,false,false,gen,opts);\n});\n\nclojure.test.check.generators.sorted_set.cljs$lang$maxFixedArity = 2;\n\n/**\n * Create a generator that generates maps, with keys chosen from\n *   `key-gen` and values chosen from `val-gen`.\n * \n *   If the key generator cannot or is unlikely to produce enough distinct\n *   elements, this generator will fail in the same way as `such-that`.\n * \n *   Available options:\n * \n *  :num-elements  the fixed size of generated maps\n *  :min-elements  the min size of generated maps\n *  :max-elements  the max size of generated maps\n *  :max-tries     the number of times the generator will be tried before\n *                 failing when it does not produce distinct elements\n *                 (default 10)\n *  :ex-fn         a function of one arg that will be called if test.check cannot\n *                 generate enough distinct keys; it will be passed a map with\n *                 `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n *                 should return an exception\n * @param {...*} var_args\n */\nclojure.test.check.generators.map = (function clojure$test$check$generators$map(var_args){\nvar G__68953 = arguments.length;\nswitch (G__68953) {\ncase 2:\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2 = (function (key_gen,val_gen){\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3(key_gen,val_gen,cljs.core.PersistentArrayMap.EMPTY);\n});\n\nclojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3 = (function (key_gen,val_gen,opts){\nreturn clojure.test.check.generators.coll_distinct_by(cljs.core.PersistentArrayMap.EMPTY,cljs.core.first,false,false,clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([key_gen,val_gen], 0)),opts);\n});\n\nclojure.test.check.generators.map.cljs$lang$maxFixedArity = 3;\n\n/**\n * Generates a single uniformly random long, does not shrink.\n */\nclojure.test.check.generators.gen_raw_long = clojure.test.check.generators.make_gen((function (rnd,_size){\nreturn clojure.test.check.rose_tree.pure(clojure.test.check.random.rand_long(rnd));\n}));\nclojure.test.check.generators.MAX_INTEGER = (cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core._STAR_,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((53),(2))) - (1));\nclojure.test.check.generators.MIN_INTEGER = (- clojure.test.check.generators.MAX_INTEGER);\nclojure.test.check.generators.abs = (function clojure$test$check$generators$abs(x){\nreturn Math.abs(x);\n});\nclojure.test.check.generators.long__GT_large_integer = (function clojure$test$check$generators$long__GT_large_integer(bit_count,x,min,max){\nvar res = (function (){var G__68965 = x.shiftRight(((64) - bit_count)).toNumber();\nif((min === (0))){\nreturn clojure.test.check.generators.abs(G__68965);\n} else {\nreturn G__68965;\n}\n})();\nwhile(true){\nif((((min <= res)) && ((res <= max)))){\nreturn res;\n} else {\nvar res_SINGLEQUOTE_ = (- res);\nif((((min <= res_SINGLEQUOTE_)) && ((res_SINGLEQUOTE_ <= max)))){\nreturn res_SINGLEQUOTE_;\n} else {\nvar G__69974 = ((function (){var G__68972 = res;\nif(cljs.core.odd_QMARK_(res)){\nvar fexpr__68975 = (((res < (0)))?cljs.core.inc:cljs.core.dec);\nreturn (fexpr__68975.cljs$core$IFn$_invoke$arity$1 ? fexpr__68975.cljs$core$IFn$_invoke$arity$1(G__68972) : fexpr__68975.call(null,G__68972));\n} else {\nreturn G__68972;\n}\n})() / (2));\nres = G__69974;\ncontinue;\n}\n}\nbreak;\n}\n});\n/**\n * Like large-integer*, but assumes range includes zero.\n */\nclojure.test.check.generators.large_integer_STAR__STAR_ = (function clojure$test$check$generators$large_integer_STAR__STAR_(min,max){\nreturn clojure.test.check.generators.sized((function (size){\nvar size__$1 = (function (){var x__4219__auto__ = size;\nvar y__4220__auto__ = (1);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar max_bit_count = (function (){var x__4222__auto__ = size__$1;\nvar y__4223__auto__ = (54);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nreturn clojure.test.check.generators.gen_fmap(((function (size__$1,max_bit_count){\nreturn (function (rose){\nvar vec__68991 = clojure.test.check.rose_tree.root(rose);\nvar bit_count = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68991,(0),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__68991,(1),null);\nreturn clojure.test.check.generators.int_rose_tree(clojure.test.check.generators.long__GT_large_integer(bit_count,x,min,max));\n});})(size__$1,max_bit_count))\n,clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.choose((1),max_bit_count),clojure.test.check.generators.gen_raw_long], 0)));\n}));\n});\n/**\n * Like large-integer, but accepts options:\n * \n *  :min  the minimum integer (inclusive)\n *  :max  the maximum integer (inclusive)\n * \n *   Both :min and :max are optional.\n * \n *    (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n *    => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)\n */\nclojure.test.check.generators.large_integer_STAR_ = (function clojure$test$check$generators$large_integer_STAR_(p__68997){\nvar map__69001 = p__68997;\nvar map__69001__$1 = (((((!((map__69001 == null))))?(((((map__69001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__69001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__69001):map__69001);\nvar min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__69001__$1,new cljs.core.Keyword(null,\"min\",\"min\",444991522));\nvar max = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__69001__$1,new cljs.core.Keyword(null,\"max\",\"max\",61366548));\nvar min__$1 = (function (){var or__4131__auto__ = min;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn clojure.test.check.generators.MIN_INTEGER;\n}\n})();\nvar max__$1 = (function (){var or__4131__auto__ = max;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn clojure.test.check.generators.MAX_INTEGER;\n}\n})();\n\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(((function (min__$1,max__$1,map__69001,map__69001__$1,min,max){\nreturn (function (p1__68994_SHARP_){\nreturn (((min__$1 <= p1__68994_SHARP_)) && ((p1__68994_SHARP_ <= max__$1)));\n});})(min__$1,max__$1,map__69001,map__69001__$1,min,max))\n,(((((min__$1 <= (0))) && (((0) <= max__$1))))?clojure.test.check.generators.large_integer_STAR__STAR_(min__$1,max__$1):(((max__$1 < (0)))?clojure.test.check.generators.fmap(((function (min__$1,max__$1,map__69001,map__69001__$1,min,max){\nreturn (function (p1__68995_SHARP_){\nreturn (max__$1 + p1__68995_SHARP_);\n});})(min__$1,max__$1,map__69001,map__69001__$1,min,max))\n,clojure.test.check.generators.large_integer_STAR__STAR_((min__$1 - max__$1),(0))):clojure.test.check.generators.fmap(((function (min__$1,max__$1,map__69001,map__69001__$1,min,max){\nreturn (function (p1__68996_SHARP_){\nreturn (min__$1 + p1__68996_SHARP_);\n});})(min__$1,max__$1,map__69001,map__69001__$1,min,max))\n,clojure.test.check.generators.large_integer_STAR__STAR_((0),(max__$1 - min__$1))))));\n});\n/**\n * Generates a platform-native integer from the full available range\n *   (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n *   (2^53 - 1)).\n * \n *   Use large-integer* for more control.\n */\nclojure.test.check.generators.large_integer = clojure.test.check.generators.large_integer_STAR_(cljs.core.PersistentArrayMap.EMPTY);\nclojure.test.check.generators.POS_INFINITY = Number.POSITIVE_INFINITY;\nclojure.test.check.generators.NEG_INFINITY = Number.NEGATIVE_INFINITY;\nclojure.test.check.generators.MAX_POS_VALUE = Number.MAX_VALUE;\nclojure.test.check.generators.MIN_NEG_VALUE = (- clojure.test.check.generators.MAX_POS_VALUE);\nclojure.test.check.generators.NAN = Number.NaN;\n/**\n * Generates an integer uniformly in the range 0..(2^bit-count-1).\n */\nclojure.test.check.generators.uniform_integer = (function clojure$test$check$generators$uniform_integer(bit_count){\nif((bit_count <= (32))){\nreturn clojure.test.check.generators.choose((0),(function (){var G__69014 = cljs.core.long$(bit_count);\nswitch (G__69014) {\ncase (32):\nreturn (4294967295);\n\nbreak;\ncase (31):\nreturn (2147483647);\n\nbreak;\ndefault:\nreturn (((1) << bit_count) - (1));\n\n}\n})());\n} else {\nreturn clojure.test.check.generators.fmap((function (p__69016){\nvar vec__69020 = p__69016;\nvar upper = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69020,(0),null);\nvar lower = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69020,(1),null);\nreturn ((upper * (4294967296)) + lower);\n}),clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var G__69024 = (bit_count - (32));\nreturn (clojure.test.check.generators.uniform_integer.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.generators.uniform_integer.cljs$core$IFn$_invoke$arity$1(G__69024) : clojure.test.check.generators.uniform_integer.call(null,G__69024));\n})(),(clojure.test.check.generators.uniform_integer.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.generators.uniform_integer.cljs$core$IFn$_invoke$arity$1((32)) : clojure.test.check.generators.uniform_integer.call(null,(32)))], 0)));\n}\n});\nclojure.test.check.generators.scalb = (function clojure$test$check$generators$scalb(x,exp){\nreturn (x * Math.pow((2),exp));\n});\n/**\n * Bit-reverses an integer in the range [0, 2^52).\n */\nclojure.test.check.generators.fifty_two_bit_reverse = (function clojure$test$check$generators$fifty_two_bit_reverse(n){\nvar out = (0);\nvar n__$1 = n;\nvar out_shifter = Math.pow((2),(52));\nwhile(true){\nif((n__$1 < (1))){\nreturn (out * out_shifter);\n} else {\nvar G__69989 = ((out * (2)) + (n__$1 & (1)));\nvar G__69990 = (n__$1 / (2));\nvar G__69991 = (out_shifter / (2));\nout = G__69989;\nn__$1 = G__69990;\nout_shifter = G__69991;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Generates a 52-bit non-negative integer that shrinks toward having\n *   fewer lower-order bits (and shrinks to 0 if possible).\n */\nclojure.test.check.generators.backwards_shrinking_significand = clojure.test.check.generators.fmap(clojure.test.check.generators.fifty_two_bit_reverse,clojure.test.check.generators.sized((function (size){\nreturn clojure.test.check.generators.gen_bind(clojure.test.check.generators.choose((0),(function (){var x__4222__auto__ = size;\nvar y__4223__auto__ = (52);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})()),(function (rose){\nreturn clojure.test.check.generators.uniform_integer(clojure.test.check.rose_tree.root(rose));\n}));\n})));\nclojure.test.check.generators.get_exponent = (function clojure$test$check$generators$get_exponent(x){\nif((x === (0))){\nreturn (-1023);\n} else {\nvar x__$1 = Math.abs(x);\nvar res = (function (){var G__69035 = (Math.log(x__$1) * Math.LOG2E);\nreturn Math.floor(G__69035);\n})();\nvar t = clojure.test.check.generators.scalb(x__$1,(- res));\nif((t < (1))){\nreturn (res - (1));\n} else {\nif(((2) <= t)){\nreturn (res + (1));\n} else {\nreturn res;\n\n}\n}\n}\n});\n/**\n * Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n *   or -1. Only generates values for exp and sign for which there are\n *   doubles within the given bounds.\n */\nclojure.test.check.generators.double_exp_and_sign = (function clojure$test$check$generators$double_exp_and_sign(lower_bound,upper_bound){\nvar gen_exp = (function clojure$test$check$generators$double_exp_and_sign_$_gen_exp(lb,ub){\nreturn clojure.test.check.generators.sized((function (size){\nvar qs8 = ((1) << cljs.core.quot((function (){var x__4222__auto__ = (200);\nvar y__4223__auto__ = size;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})(),(8)));\nif((((lb <= (0))) && (((0) <= ub)))){\nreturn clojure.test.check.generators.choose((function (){var x__4219__auto__ = lb;\nvar y__4220__auto__ = (- qs8);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})(),(function (){var x__4222__auto__ = ub;\nvar y__4223__auto__ = qs8;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})());\n} else {\nif((ub < (0))){\nreturn clojure.test.check.generators.choose((function (){var x__4219__auto__ = lb;\nvar y__4220__auto__ = (ub - qs8);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})(),ub);\n} else {\nreturn clojure.test.check.generators.choose(lb,(function (){var x__4222__auto__ = ub;\nvar y__4223__auto__ = (lb + qs8);\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})());\n\n}\n}\n}));\n});\nif((((lower_bound == null)) && ((upper_bound == null)))){\nreturn clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([gen_exp((-1023),(1023)),clojure.test.check.generators.elements(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1.0,-1.0], null))], 0));\n} else {\nvar lower_bound__$1 = (function (){var or__4131__auto__ = lower_bound;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn clojure.test.check.generators.MIN_NEG_VALUE;\n}\n})();\nvar upper_bound__$1 = (function (){var or__4131__auto__ = upper_bound;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn clojure.test.check.generators.MAX_POS_VALUE;\n}\n})();\nvar lbexp = (function (){var x__4219__auto__ = (-1023);\nvar y__4220__auto__ = clojure.test.check.generators.get_exponent(lower_bound__$1);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar ubexp = (function (){var x__4219__auto__ = (-1023);\nvar y__4220__auto__ = clojure.test.check.generators.get_exponent(upper_bound__$1);\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nif((0.0 <= lower_bound__$1)){\nreturn clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([gen_exp(lbexp,ubexp),clojure.test.check.generators.return$(1.0)], 0));\n} else {\nif((upper_bound__$1 <= 0.0)){\nreturn clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([gen_exp(ubexp,lbexp),clojure.test.check.generators.return$(-1.0)], 0));\n} else {\nreturn clojure.test.check.generators.fmap(((function (lower_bound__$1,upper_bound__$1,lbexp,ubexp){\nreturn (function (p__69099){\nvar vec__69102 = p__69099;\nvar exp = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69102,(0),null);\nvar sign = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69102,(1),null);\nvar pair = vec__69102;\nif((((((sign < (0))) && ((lbexp < exp)))) || ((((sign > (0))) && ((ubexp < exp)))))){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [exp,(- sign)], null);\n} else {\nreturn pair;\n}\n});})(lower_bound__$1,upper_bound__$1,lbexp,ubexp))\n,clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([gen_exp((-1023),(function (){var x__4219__auto__ = ubexp;\nvar y__4220__auto__ = lbexp;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})()),clojure.test.check.generators.elements(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [1.0,-1.0], null))], 0)));\n\n}\n}\n}\n});\n/**\n * Returns [low high], the smallest and largest numbers in the given\n *   range.\n */\nclojure.test.check.generators.block_bounds = (function clojure$test$check$generators$block_bounds(exp,sign){\nif((sign < (0))){\nvar vec__69117 = (function (){var G__69121 = exp;\nvar G__69122 = (- sign);\nreturn (clojure.test.check.generators.block_bounds.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.generators.block_bounds.cljs$core$IFn$_invoke$arity$2(G__69121,G__69122) : clojure.test.check.generators.block_bounds.call(null,G__69121,G__69122));\n})();\nvar low = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69117,(0),null);\nvar high = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69117,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(- high),(- low)], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((-1023),exp)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.0,clojure.test.check.generators.scalb((clojure.test.check.generators.scalb(1.0,(52)) - (1)),(-1074))], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.scalb(1.0,exp),clojure.test.check.generators.scalb((clojure.test.check.generators.scalb(1.0,(52)) - (1)),(exp - (51)))], null);\n}\n}\n});\nclojure.test.check.generators.double_finite = (function clojure$test$check$generators$double_finite(lower_bound,upper_bound){\n\nvar pred = (cljs.core.truth_(lower_bound)?(cljs.core.truth_(upper_bound)?(function (p1__69124_SHARP_){\nreturn (((lower_bound <= p1__69124_SHARP_)) && ((p1__69124_SHARP_ <= upper_bound)));\n}):(function (p1__69125_SHARP_){\nreturn (lower_bound <= p1__69125_SHARP_);\n})):(cljs.core.truth_(upper_bound)?(function (p1__69126_SHARP_){\nreturn (p1__69126_SHARP_ <= upper_bound);\n}):null));\nvar gen = clojure.test.check.generators.fmap(((function (pred){\nreturn (function (p__69133){\nvar vec__69134 = p__69133;\nvar vec__69137 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69134,(0),null);\nvar exp = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69137,(0),null);\nvar sign = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69137,(1),null);\nvar significand = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69134,(1),null);\nvar base = ((significand / Math.pow((2),(52))) + (1));\nvar x = (clojure.test.check.generators.scalb(base,exp) * sign);\nif(cljs.core.truth_((function (){var or__4131__auto__ = (pred == null);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nreturn (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(x) : pred.call(null,x));\n}\n})())){\nreturn x;\n} else {\nvar vec__69143 = clojure.test.check.generators.block_bounds(exp,sign);\nvar low = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69143,(0),null);\nvar high = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69143,(1),null);\nvar block_lb = (function (){var G__69147 = low;\nif(cljs.core.truth_(lower_bound)){\nvar x__4219__auto__ = G__69147;\nvar y__4220__auto__ = lower_bound;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n} else {\nreturn G__69147;\n}\n})();\nvar block_ub = (function (){var G__69150 = high;\nif(cljs.core.truth_(upper_bound)){\nvar x__4222__auto__ = G__69150;\nvar y__4223__auto__ = upper_bound;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n} else {\nreturn G__69150;\n}\n})();\nvar x__$1 = (block_lb + ((block_ub - block_lb) * (base - (1))));\nvar x__4219__auto__ = (function (){var x__4222__auto__ = x__$1;\nvar y__4223__auto__ = block_ub;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4220__auto__ = block_lb;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n}\n});})(pred))\n,clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.double_exp_and_sign(lower_bound,upper_bound),clojure.test.check.generators.backwards_shrinking_significand], 0)));\nvar G__69155 = gen;\nif(cljs.core.truth_(pred)){\nreturn clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(pred,G__69155);\n} else {\nreturn G__69155;\n}\n});\n/**\n * Generates a 64-bit floating point number. Options:\n * \n *  :infinite? - whether +/- infinity can be generated (default true)\n *  :NaN?      - whether NaN can be generated (default true)\n *  :min       - minimum value (inclusive, default none)\n *  :max       - maximum value (inclusive, default none)\n * \n *   Note that the min/max options must be finite numbers. Supplying a\n *   min precludes -Infinity, and supplying a max precludes +Infinity.\n */\nclojure.test.check.generators.double_STAR_ = (function clojure$test$check$generators$double_STAR_(p__69157){\nvar map__69159 = p__69157;\nvar map__69159__$1 = (((((!((map__69159 == null))))?(((((map__69159.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__69159.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__69159):map__69159);\nvar infinite_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__69159__$1,new cljs.core.Keyword(null,\"infinite?\",\"infinite?\",-2017886608),true);\nvar NaN_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__69159__$1,new cljs.core.Keyword(null,\"NaN?\",\"NaN?\",-1917767651),true);\nvar min = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__69159__$1,new cljs.core.Keyword(null,\"min\",\"min\",444991522));\nvar max = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__69159__$1,new cljs.core.Keyword(null,\"max\",\"max\",61366548));\nvar frequency_arg = (function (){var G__69163 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(95),clojure.test.check.generators.double_finite(min,max)], null)], null);\nvar G__69163__$1 = (((((min == null))?(((max == null)) || ((0.0 <= max))):(((max == null))?(min <= 0.0):(((min <= 0.0)) && ((0.0 <= max))))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__69163,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(0.0)], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(-0.0)], null)], 0)):G__69163);\nvar G__69163__$2 = (cljs.core.truth_((function (){var and__4120__auto__ = infinite_QMARK_;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn (max == null);\n} else {\nreturn and__4120__auto__;\n}\n})())?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__69163__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(clojure.test.check.generators.POS_INFINITY)], null)):G__69163__$1);\nvar G__69163__$3 = (cljs.core.truth_((function (){var and__4120__auto__ = infinite_QMARK_;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn (min == null);\n} else {\nreturn and__4120__auto__;\n}\n})())?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__69163__$2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(clojure.test.check.generators.NEG_INFINITY)], null)):G__69163__$2);\nif(cljs.core.truth_(NaN_QMARK_)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__69163__$3,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(clojure.test.check.generators.NAN)], null));\n} else {\nreturn G__69163__$3;\n}\n})();\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(frequency_arg))){\nreturn cljs.core.second(cljs.core.first(frequency_arg));\n} else {\nreturn clojure.test.check.generators.frequency(frequency_arg);\n}\n});\n/**\n * Generates 64-bit floating point numbers from the entire range,\n *   including +/- infinity and NaN. Use double* for more control.\n */\nclojure.test.check.generators.double$ = clojure.test.check.generators.double_STAR_(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Generates character from 0-255.\n */\nclojure.test.check.generators.char$ = clojure.test.check.generators.fmap(cljs.core.char$,clojure.test.check.generators.choose((0),(255)));\n/**\n * Generate only ascii character.\n */\nclojure.test.check.generators.char_ascii = clojure.test.check.generators.fmap(cljs.core.char$,clojure.test.check.generators.choose((32),(126)));\n/**\n * Generate alphanumeric characters.\n */\nclojure.test.check.generators.char_alphanumeric = clojure.test.check.generators.fmap(cljs.core.char$,clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.choose((48),(57)),clojure.test.check.generators.choose((65),(90)),clojure.test.check.generators.choose((97),(122))], null)));\n/**\n * Deprecated - use char-alphanumeric instead.\n * \n *   Generate alphanumeric characters.\n */\nclojure.test.check.generators.char_alpha_numeric = clojure.test.check.generators.char_alphanumeric;\n/**\n * Generate alpha characters.\n */\nclojure.test.check.generators.char_alpha = clojure.test.check.generators.fmap(cljs.core.char$,clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.choose((65),(90)),clojure.test.check.generators.choose((97),(122))], null)));\n/**\n * Generate non-alphanumeric characters that can be in a symbol.\n */\nclojure.test.check.generators.char_symbol_special = clojure.test.check.generators.elements(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"*\",\"+\",\"!\",\"-\",\"_\",\"?\",\".\"], null));\n/**\n * Generate characters that can be the char following first of a keyword or symbol.\n */\nclojure.test.check.generators.char_symbol_noninitial = clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(14),clojure.test.check.generators.char_alphanumeric], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(7),clojure.test.check.generators.char_symbol_special], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(\":\")], null)], null));\n/**\n * Generate characters that can be the first char of a keyword or symbol.\n */\nclojure.test.check.generators.char_symbol_initial = clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),clojure.test.check.generators.char_alpha], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.char_symbol_special], null)], null));\n/**\n * Generate strings. May generate unprintable characters.\n */\nclojure.test.check.generators.string = clojure.test.check.generators.fmap(clojure.string.join,clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(clojure.test.check.generators.char$));\n/**\n * Generate ascii strings.\n */\nclojure.test.check.generators.string_ascii = clojure.test.check.generators.fmap(clojure.string.join,clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(clojure.test.check.generators.char_ascii));\n/**\n * Generate alphanumeric strings.\n */\nclojure.test.check.generators.string_alphanumeric = clojure.test.check.generators.fmap(clojure.string.join,clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(clojure.test.check.generators.char_alphanumeric));\n/**\n * Deprecated - use string-alphanumeric instead.\n * \n *   Generate alphanumeric strings.\n */\nclojure.test.check.generators.string_alpha_numeric = clojure.test.check.generators.string_alphanumeric;\nclojure.test.check.generators.digit_QMARK_ = (function clojure$test$check$generators$digit_QMARK_(d){\nreturn goog.string.isNumeric(d);\n});\n/**\n * Returns true if c is \\+ or \\- and d is non-nil and a digit.\n * \n *   Symbols that start with +3 or -2 are not readable because they look\n *   like numbers.\n */\nclojure.test.check.generators._PLUS__or___digit_QMARK_ = (function clojure$test$check$generators$_PLUS__or___digit_QMARK_(c,d){\nreturn cljs.core.boolean$((function (){var and__4120__auto__ = d;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = (((\"+\" === c)) || ((\"-\" === c)));\nif(and__4120__auto____$1){\nreturn clojure.test.check.generators.digit_QMARK_(d);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})());\n});\n/**\n * Generates a namespace string for a symbol/keyword.\n */\nclojure.test.check.generators.symbol_name_or_namespace = clojure.test.check.generators.fmap((function (p__69182){\nvar vec__69184 = p__69182;\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69184,(0),null);\nvar cs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69184,(1),null);\nvar s = clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.cons(c,cs));\nreturn clojure.string.replace(clojure.string.replace(s,/:{2,}/,\":\"),/:$/,\"\");\n}),clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2((function (p__69187){\nvar vec__69189 = p__69187;\nvar c = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69189,(0),null);\nvar vec__69192 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69189,(1),null);\nvar d = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69192,(0),null);\nreturn (!(clojure.test.check.generators._PLUS__or___digit_QMARK_(c,d)));\n}),clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.char_symbol_initial,clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(clojure.test.check.generators.char_symbol_noninitial)], 0))));\n/**\n * Scales the sizing down on a keyword or symbol generator so as to\n *   make it reasonable.\n */\nclojure.test.check.generators.resize_symbolish_generator = (function clojure$test$check$generators$resize_symbolish_generator(g){\nreturn clojure.test.check.generators.scale((function (p1__69198_SHARP_){\nreturn cljs.core.long$(Math.pow(p1__69198_SHARP_,0.6));\n}),g);\n});\n/**\n * Generate keywords without namespaces.\n */\nclojure.test.check.generators.keyword = clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(100),clojure.test.check.generators.resize_symbolish_generator(clojure.test.check.generators.fmap(cljs.core.keyword,clojure.test.check.generators.symbol_name_or_namespace))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(new cljs.core.Keyword(null,\"/\",\"/\",1282502798))], null)], null));\n/**\n * Generate keywords with namespaces.\n */\nclojure.test.check.generators.keyword_ns = clojure.test.check.generators.resize_symbolish_generator(clojure.test.check.generators.fmap((function (p__69201){\nvar vec__69205 = p__69201;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69205,(0),null);\nvar name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69205,(1),null);\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(ns,name);\n}),clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.symbol_name_or_namespace,clojure.test.check.generators.symbol_name_or_namespace], 0))));\n/**\n * Generate symbols without namespaces.\n */\nclojure.test.check.generators.symbol = clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(100),clojure.test.check.generators.resize_symbolish_generator(clojure.test.check.generators.fmap(cljs.core.symbol,clojure.test.check.generators.symbol_name_or_namespace))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(new cljs.core.Symbol(null,\"/\",\"/\",-1371932971,null))], null)], null));\n/**\n * Generate symbols with namespaces.\n */\nclojure.test.check.generators.symbol_ns = clojure.test.check.generators.resize_symbolish_generator(clojure.test.check.generators.fmap((function (p__69220){\nvar vec__69221 = p__69220;\nvar ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69221,(0),null);\nvar name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69221,(1),null);\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(ns,name);\n}),clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.symbol_name_or_namespace,clojure.test.check.generators.symbol_name_or_namespace], 0))));\n/**\n * Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n *   will be ratios, as many values returned by `/` are not ratios.\n */\nclojure.test.check.generators.ratio = clojure.test.check.generators.fmap((function (p__69228){\nvar vec__69229 = p__69228;\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69229,(0),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69229,(1),null);\nreturn (a / b);\n}),clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.test.check.generators.int$,clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(cljs.core.zero_QMARK_),clojure.test.check.generators.int$)], 0)));\n/**\n * Generates a random type-4 UUID. Does not shrink.\n */\nclojure.test.check.generators.uuid = clojure.test.check.generators.no_shrink(clojure.test.check.generators.fmap((function (nibbles){\nvar hex = (function clojure$test$check$generators$hex(idx){\nreturn (nibbles.cljs$core$IFn$_invoke$arity$1 ? nibbles.cljs$core$IFn$_invoke$arity$1(idx) : nibbles.call(null,idx)).toString((16));\n});\nvar rhex = (((nibbles.cljs$core$IFn$_invoke$arity$1 ? nibbles.cljs$core$IFn$_invoke$arity$1((15)) : nibbles.call(null,(15))) & (3)) + (8)).toString((16));\nreturn cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((0))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((1))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((2))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((3))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((4))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((5))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((6))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((7))),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((8))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((9))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((10))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((11))),\"-\",\"4\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((12))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((13))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((14))),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((16))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((17))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((18))),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((19))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((20))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((21))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((22))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((23))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((24))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((25))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((26))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((27))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((28))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((29))),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex((30)))].join(''));\n}),clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.choose((0),(15)),(31))));\nclojure.test.check.generators.simple_type = clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.int$,clojure.test.check.generators.large_integer,clojure.test.check.generators.double$,clojure.test.check.generators.char$,clojure.test.check.generators.string,clojure.test.check.generators.ratio,clojure.test.check.generators.boolean$,clojure.test.check.generators.keyword,clojure.test.check.generators.keyword_ns,clojure.test.check.generators.symbol,clojure.test.check.generators.symbol_ns,clojure.test.check.generators.uuid], null));\nclojure.test.check.generators.simple_type_printable = clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.int$,clojure.test.check.generators.large_integer,clojure.test.check.generators.double$,clojure.test.check.generators.char_ascii,clojure.test.check.generators.string_ascii,clojure.test.check.generators.ratio,clojure.test.check.generators.boolean$,clojure.test.check.generators.keyword,clojure.test.check.generators.keyword_ns,clojure.test.check.generators.symbol,clojure.test.check.generators.symbol_ns,clojure.test.check.generators.uuid], null));\nclojure.test.check.generators.hashable_QMARK_ = (function clojure$test$check$generators$hashable_QMARK_(x){\nif(typeof x === 'number'){\nreturn cljs.core.not((function (){var or__4131__auto__ = isNaN(x);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.NEG_INFINITY,x)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.POS_INFINITY,x)));\n}\n})());\n} else {\nreturn true;\n}\n});\nclojure.test.check.generators.container_type = (function clojure$test$check$generators$container_type(inner_type){\nreturn clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1(inner_type),clojure.test.check.generators.list(inner_type),clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1(clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.hashable_QMARK_,inner_type)),clojure.test.check.generators.scale((function (p1__69270_SHARP_){\nreturn cljs.core.quot(p1__69270_SHARP_,(2));\n}),clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.hashable_QMARK_,inner_type),inner_type))], null));\n});\nclojure.test.check.generators.size__GT_max_leaf_count = (function clojure$test$check$generators$size__GT_max_leaf_count(size){\nreturn cljs.core.long$(Math.pow(size,1.1));\n});\nvar log2_70125 = Math.log((2));\n/**\n * Returns (not generates) a random collection of integers `xs`\n *   greater than 1 such that (<= (apply * xs) n).\n */\nclojure.test.check.generators.random_pseudofactoring = ((function (log2_70125){\nreturn (function clojure$test$check$generators$random_pseudofactoring(n,rng){\nif((n <= (2))){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null);\n} else {\nvar log = Math.log(n);\nvar vec__69302 = clojure.test.check.random.split(rng);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69302,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69302,(1),null);\nvar n1 = cljs.core.long$((function (){var G__69305 = ((clojure.test.check.random.rand_double(r1) * (log - log2_70125)) + log2_70125);\nreturn Math.exp(G__69305);\n})());\nvar n2 = cljs.core.quot(n,n1);\nif(((((1) < n1)) && (((1) < n2)))){\nreturn cljs.core.cons(n1,(clojure.test.check.generators.random_pseudofactoring.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.generators.random_pseudofactoring.cljs$core$IFn$_invoke$arity$2(n2,r2) : clojure.test.check.generators.random_pseudofactoring.call(null,n2,r2)));\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [n], null);\n}\n}\n});})(log2_70125))\n;\n/**\n * Like sized, but passes an rng instead of a size.\n */\nclojure.test.check.generators.randomized = (function clojure$test$check$generators$randomized(func){\nreturn clojure.test.check.generators.make_gen((function (rng,size){\nvar vec__69314 = clojure.test.check.random.split(rng);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69314,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__69314,(1),null);\nreturn clojure.test.check.generators.call_gen((func.cljs$core$IFn$_invoke$arity$1 ? func.cljs$core$IFn$_invoke$arity$1(r1) : func.call(null,r1)),r2,size);\n}));\n});\n/**\n * This is a helper for writing recursive (tree-shaped) generators. The first\n *   argument should be a function that takes a generator as an argument, and\n *   produces another generator that 'contains' that generator. The vector function\n *   in this namespace is a simple example. The second argument is a scalar\n *   generator, like boolean. For example, to produce a tree of booleans:\n * \n *  (gen/recursive-gen gen/vector gen/boolean)\n * \n *   Vectors or maps either recurring or containing booleans or integers:\n * \n *  (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n *                                              (gen/map inner inner)]))\n *                     (gen/one-of [gen/boolean gen/int]))\n * \n *   Note that raw scalar values will be generated as well. To prevent this, you\n *   can wrap the returned generator with the function passed as the first arg,\n *   e.g.:\n * \n *  (gen/vector (gen/recursive-gen gen/vector gen/boolean))\n */\nclojure.test.check.generators.recursive_gen = (function clojure$test$check$generators$recursive_gen(container_gen_fn,scalar_gen){\n\nreturn clojure.test.check.generators.sized((function (size){\nreturn clojure.test.check.generators.bind(clojure.test.check.generators.choose((0),clojure.test.check.generators.size__GT_max_leaf_count(size)),(function (max_leaf_count){\nreturn clojure.test.check.generators.randomized((function (rng){\nvar sizes = clojure.test.check.generators.random_pseudofactoring(max_leaf_count,rng);\nvar sized_scalar_gen = clojure.test.check.generators.resize(size,scalar_gen);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (sizes,sized_scalar_gen){\nreturn (function (g,size__$1){\nreturn clojure.test.check.generators.bind(clojure.test.check.generators.choose((0),(10)),((function (sizes,sized_scalar_gen){\nreturn (function (x){\nif((x === (0))){\nreturn sized_scalar_gen;\n} else {\nreturn clojure.test.check.generators.resize(size__$1,(container_gen_fn.cljs$core$IFn$_invoke$arity$1 ? container_gen_fn.cljs$core$IFn$_invoke$arity$1(g) : container_gen_fn.call(null,g)));\n}\n});})(sizes,sized_scalar_gen))\n);\n});})(sizes,sized_scalar_gen))\n,sized_scalar_gen,sizes);\n}));\n}));\n}));\n});\n/**\n * A recursive generator that will generate many different, often nested, values\n */\nclojure.test.check.generators.any = clojure.test.check.generators.recursive_gen(clojure.test.check.generators.container_type,clojure.test.check.generators.simple_type);\n/**\n * Like any, but avoids characters that the shell will interpret as actions,\n *   like 7 and 14 (bell and alternate character set command)\n */\nclojure.test.check.generators.any_printable = clojure.test.check.generators.recursive_gen(clojure.test.check.generators.container_type,clojure.test.check.generators.simple_type_printable);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/generators.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.test","~$cljs.test","~$clojure.core","~$cljs.core","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$let","~$clojure.test.check.generators"],"~:excludes",["~#set",["~$uuid","~$set","~$namespace","~$boolean","~$map","~$char","~$shuffle","^M","~$double","~$int","~$symbol","~$sorted-set","~$vector","~$not-empty","~$list","~$keyword","~$hash-map","~$byte","~$sequence","~$bytes"]],"~:macros",["^ ","^M",["^ ","~:added","0.9.0","~:ns","^N","~:name","~$clojure.test.check.generators/let","^6","clojure/test/check/generators.cljc","^8",1,"^7",1570,"~:macro",true,"~:arglists",["~#list",[["~$bindings","~$&","~$body"]]],"~:doc","Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"]],"^1;","^N","~:op","^1:","~:imports",null,"~:requires",["^ ","~$gstring","~$goog.string","~$rose","~$clojure.test.check.rose-tree","^1I","^1I","^1G","^1G","^C","^C","~$goog","^1J","~$clojure.test.check.random","^1K","~$string","~$clojure.string","^1M","^1M","~$random","^1K","~$core","^C"],"~:seen",["^P",["~:require","~:require-macros"]],"~:uses",null,"^1R",["^ ","^C","^C","^1O","^C","^N","^N"],"~:form",["^1?",["~$ns","^N",["^1?",["~:refer-clojure","~:exclude",["^Y","^10","^12","^14","^U","^13","^V","^T","^15","^17","^16","^W","^11","^Z","^S","^R","^[","^Q","^X","^M"]]],["^1?",["^1Q",["^C","~:as","^1O","~:include-macros",true],["^1M","^1X","^1L"],["^1K","^1X","^1N"],["^1I","^1X","^1H"],["^1G","^1X","^1F"],["^1M"]]],["^1?",["^1R",["^N","~:refer",["^M"]]]]]],"~:flags",["^ ","^1Q",["^P",[]],"^1R",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^1J","^C","^1M","^1K","^1I","^1G"]],"^1:","^N","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/generators.cljc"],"~:compiled-at",1630228760574,"~:resource-name","clojure/test/check/generators.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.generators\n  (:refer-clojure :exclude [int vector list hash-map map keyword\n                            char boolean byte bytes sequence\n                            shuffle not-empty symbol namespace\n                            set sorted-set uuid double let])\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core\n             #?@(:cljs [:include-macros true])]\n            [clojure.string :as string]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.rose-tree :as rose]\n            #?@(:cljs [[goog.string :as gstring]\n                       [clojure.string]]))\n  #?(:cljs (:require-macros [clojure.test.check.generators :refer [let]])))\n\n;; Gen\n;; (internal functions)\n;; ---------------------------------------------------------------------------\n\n(defrecord Generator [gen])\n\n(defn generator?\n  \"Test if `x` is a generator. Generators should be treated as opaque values.\"\n  [x]\n  (instance? Generator x))\n\n(defn- make-gen\n  [generator-fn]\n  (Generator. generator-fn))\n\n(defn call-gen\n  \"Internal function.\"\n  {:no-doc true}\n  [{generator-fn :gen} rnd size]\n  (generator-fn rnd size))\n\n(defn gen-pure\n  \"Internal function.\"\n  {:no-doc true}\n  [value]\n  (make-gen\n   (fn [rnd size]\n     value)))\n\n(defn gen-fmap\n  \"Internal function.\"\n  {:no-doc true}\n  [k {h :gen}]\n  (make-gen\n   (fn [rnd size]\n     (k (h rnd size)))))\n\n(defn gen-bind\n  \"Internal function.\"\n  {:no-doc true}\n  [{h :gen} k]\n  (make-gen\n   (fn [rnd size]\n     (core/let [[r1 r2] (random/split rnd)\n                inner (h r1 size)\n                {result :gen} (k inner)]\n       (result r2 size)))))\n\n(defn lazy-random-states\n  \"Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators.\"\n  [rr]\n  (lazy-seq\n   (core/let [[r1 r2] (random/split rr)]\n     (cons r1\n           (lazy-random-states r2)))))\n\n(defn- gen-tuple\n  \"Takes a collection of generators and returns a generator of vectors.\"\n  [gens]\n  (make-gen\n   (fn [rnd size]\n     (mapv #(call-gen % %2 size) gens (random/split-n rnd (count gens))))))\n\n;; Exported generator functions\n;; ---------------------------------------------------------------------------\n\n(defn fmap\n  \"Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\\\"0\\\" \\\"1\\\" \\\"0\\\" \\\"1\\\" \\\"4\\\" \\\"3\\\" \\\"6\\\" \\\"6\\\" \\\"4\\\" \\\"2\\\")\n\n  Also see gen/let for a macro with similar functionality.\"\n  [f gen]\n  (assert (generator? gen) \"Second arg to fmap must be a generator\")\n  (gen-fmap #(rose/fmap f %) gen))\n\n(defn return\n  \"Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)\"\n  [value]\n  (gen-pure (rose/pure value)))\n\n(defn- bind-helper\n  [f]\n  (fn [rose]\n    (gen-fmap rose/join\n              (make-gen\n               (fn [rnd size]\n                 (rose/fmap #(call-gen (f %) rnd size)\n                            rose))))))\n\n(defn bind\n  \"Create a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality.\"\n  [generator f]\n  (assert (generator? generator) \"First arg to bind must be a generator\")\n  (gen-bind generator (bind-helper f)))\n\n;; Helpers\n;; ---------------------------------------------------------------------------\n\n(defn make-size-range-seq\n  \"Internal function.\"\n  {:no-doc true}\n  [max-size]\n  (cycle (range 0 max-size)))\n\n(defn sample-seq\n  \"Return a sequence of realized values from `generator`.\"\n  ([generator] (sample-seq generator 200))\n  ([generator max-size]\n   (core/let [r (random/make-random)\n              size-seq (make-size-range-seq max-size)]\n     (core/map #(rose/root (call-gen generator %1 %2))\n               (lazy-random-states r)\n               size-seq))))\n\n(defn sample\n  \"Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\"\n  ([generator]\n   (sample generator 10))\n  ([generator num-samples]\n   (assert (generator? generator) \"First arg to sample must be a generator\")\n   (take num-samples (sample-seq generator))))\n\n(defn generate\n  \"Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer\"\n  {:added \"0.8.0\"}\n  ([generator]\n   (generate generator 30))\n  ([generator size]\n   (core/let [rng (random/make-random)]\n     (rose/root (call-gen generator rng size))))\n  ([generator size seed]\n   (core/let [rng (random/make-random seed)]\n     (rose/root (call-gen generator rng size)))))\n\n;; Internal Helpers\n;; ---------------------------------------------------------------------------\n\n(defn- halfs\n  [n]\n  (take-while #(not= 0 %) (iterate #(quot % 2) n)))\n\n(defn- shrink-int\n  [integer]\n  (core/map #(- integer %) (halfs integer)))\n\n(defn- int-rose-tree\n  [value]\n  (rose/make-rose value (core/map int-rose-tree (shrink-int value))))\n\n;; calc-long is factored out to support testing the surprisingly tricky double math.  Note:\n;; An extreme long value does not have a precision-preserving representation as a double.\n;; Be careful about changing this code unless you understand what's happening in these\n;; examples:\n;;\n;; (= (long (- Integer/MAX_VALUE (double (- Integer/MAX_VALUE 10)))) 10)\n;; (= (long (- Long/MAX_VALUE (double (- Long/MAX_VALUE 10)))) 0)\n\n(defn- calc-long\n  [factor lower upper]\n  ;; these pre- and post-conditions are disabled for deployment\n  #_ {:pre [(float? factor) (>= factor 0.0) (< factor 1.0)\n            (integer? lower) (integer? upper) (<= lower upper)]\n      :post [(integer? %)]}\n  ;; Use -' on width to maintain accuracy with overflow protection.\n  #?(:clj\n     (core/let [width (-' upper lower -1)]\n       ;; Preserve long precision if the width is in the long range.  Otherwise, we must accept\n       ;; less precision because doubles don't have enough bits to preserve long equivalence at\n       ;; extreme values.\n       (if (< width Long/MAX_VALUE)\n         (+ lower (long (Math/floor (* factor width))))\n         ;; Clamp down to upper because double math.\n         (min upper (long (Math/floor (+ lower (* factor width)))))))\n\n     :cljs\n     (long (Math/floor (+ lower (- (* factor (+ 1.0 upper))\n                                   (* factor lower)))))))\n\n(defn- rand-range\n  [rnd lower upper]\n  {:pre [(<= lower upper)]}\n  (calc-long (random/rand-double rnd) lower upper))\n\n(defn sized\n  \"Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n      TODO: example\"\n  [sized-gen]\n  (make-gen\n   (fn [rnd size]\n     (core/let [sized-gen (sized-gen size)]\n       (call-gen sized-gen rnd size)))))\n\n;; Combinators and helpers\n;; ---------------------------------------------------------------------------\n\n(defn resize\n  \"Create a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})\"\n  [n generator]\n  (assert (generator? generator) \"Second arg to resize must be a generator\")\n  (core/let [{:keys [gen]} generator]\n    (make-gen\n     (fn [rnd _size]\n       (gen rnd n)))))\n\n(defn scale\n  \"Create a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])\"\n  {:added \"0.8.0\"}\n  ([f generator]\n   (sized (fn [n] (resize (f n) generator)))))\n\n(defn choose\n  #?(:clj\n     \"Create a generator that returns long integers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)\"\n\n     :cljs\n     \"Create a generator that returns integer numbers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)\")\n  [lower upper]\n  ;; cast to long to support doubles as arguments per TCHECK-73\n  (core/let #?(:clj\n               [lower (long lower)\n                upper (long upper)]\n\n               :cljs ;; does nothing, no long in cljs\n               [])\n    (make-gen\n     (fn [rnd _size]\n       (core/let [value (rand-range rnd lower upper)]\n         (rose/filter\n          #(and (>= % lower) (<= % upper))\n          (int-rose-tree value)))))))\n\n(defn one-of\n  \"Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)\"\n  [generators]\n  (assert (every? generator? generators)\n          \"Arg to one-of must be a collection of generators\")\n  (assert (seq generators)\n          \"one-of cannot be called with an empty collection\")\n  (bind (choose 0 (dec (count generators)))\n        #(nth generators %)))\n\n(defn- pick\n  \"Returns an index into the `likelihoods` sequence.\"\n  [likelihoods n]\n  (->> likelihoods\n       (reductions + 0)\n       (rest)\n       (take-while #(<= % n))\n       (count)))\n\n(defn frequency\n  \"Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)\"\n  [pairs]\n  (assert (every? (fn [[x g]] (and (number? x) (generator? g)))\n                  pairs)\n          \"Arg to frequency must be a list of [num generator] pairs\")\n  (core/let [pairs (filter (comp pos? first) pairs)\n             total (apply + (core/map first pairs))]\n    (assert (seq pairs)\n            \"frequency must be called with at least one non-zero weight\")\n    ;; low-level impl for shrinking control\n    (make-gen\n     (fn [rnd size]\n       (call-gen\n        (gen-bind (choose 0 (dec total))\n                  (fn [x]\n                    (core/let [idx (pick (core/map first pairs) (rose/root x))]\n                      (gen-fmap (fn [rose]\n                                  (rose/make-rose (rose/root rose)\n                                                  (lazy-seq\n                                                   (concat\n                                                    ;; try to shrink to earlier generators first\n                                                    (for [idx (range idx)]\n                                                      (call-gen (second (nth pairs idx))\n                                                                rnd\n                                                                size))\n                                                    (rose/children rose)))))\n                                (second (nth pairs idx))))))\n        rnd size)))))\n\n(defn elements\n  \"Create a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)\"\n  [coll]\n  (assert (seq coll) \"elements cannot be called with an empty collection\")\n  (core/let [v (vec coll)]\n    (gen-fmap #(rose/fmap v %)\n              (choose 0 (dec (count v))))))\n\n(defn- such-that-helper\n  [pred gen {:keys [ex-fn max-tries]} rng size]\n  (loop [tries-left max-tries\n         rng rng\n         size size]\n    (if (zero? tries-left)\n      (throw (ex-fn {:pred pred, :gen, gen :max-tries max-tries}))\n      (core/let [[r1 r2] (random/split rng)\n                 value (call-gen gen r1 size)]\n        (if (pred (rose/root value))\n          (rose/filter pred value)\n          (recur (dec tries-left) r2 (inc size)))))))\n\n(def ^:private\n  default-such-that-opts\n  {:ex-fn (fn [{:keys [max-tries] :as arg}]\n            (ex-info (str \"Couldn't satisfy such-that predicate after \"\n                          max-tries \" tries.\")\n                     arg))\n   :max-tries 10})\n\n(defn such-that\n  \"Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception\"\n  ([pred gen]\n   (such-that pred gen 10))\n  ([pred gen max-tries-or-opts]\n   (core/let [opts (cond (integer? max-tries-or-opts)\n                         {:max-tries max-tries-or-opts}\n\n                         (map? max-tries-or-opts)\n                         max-tries-or-opts\n\n                         :else\n                         (throw (ex-info \"Bad argument to such-that!\" {:max-tries-or-opts\n                                                                       max-tries-or-opts})))\n              opts (merge default-such-that-opts opts)]\n     (assert (generator? gen) \"Second arg to such-that must be a generator\")\n     (make-gen\n      (fn [rand-seed size]\n        (such-that-helper pred gen opts rand-seed size))))))\n\n(defn not-empty\n  \"Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])\"\n  [gen]\n  (assert (generator? gen) \"Arg to not-empty must be a generator\")\n  (such-that core/not-empty gen))\n\n(defn no-shrink\n  \"Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain.\"\n  [gen]\n  (assert (generator? gen) \"Arg to no-shrink must be a generator\")\n  (gen-fmap (fn [rose]\n              (rose/make-rose (rose/root rose) []))\n            gen))\n\n(defn shrink-2\n  \"Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level).\"\n  [gen]\n  (assert (generator? gen) \"Arg to shrink-2 must be a generator\")\n  (gen-fmap rose/collapse gen))\n\n(def boolean\n  \"Generates one of `true` or `false`. Shrinks to `false`.\"\n  (elements [false true]))\n\n(defn tuple\n  \"Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))\"\n  [& generators]\n  (assert (every? generator? generators)\n          \"Args to tuple must be generators\")\n  (gen-fmap (fn [roses]\n              (rose/zip core/vector roses))\n            (gen-tuple generators)))\n\n(def int\n  \"Generates a positive or negative integer bounded by the generator's\n  `size` parameter.\"\n  (sized (fn [size] (choose (- size) size))))\n\n(def nat\n  \"Generates non-negative integers bounded by the generator's `size`\n  parameter. Shrinks to zero.\"\n  (fmap #(Math/abs (long %)) int))\n\n(def pos-int\n  \"Generate positive integers bounded by the generator's `size` parameter.\"\n  nat)\n\n(def neg-int\n  \"Generate negative integers bounded by the generator's `size` parameter.\"\n  (fmap #(* -1 %) nat))\n\n(def s-pos-int\n  \"Generate strictly positive integers bounded by the generator's `size` + 1\"\n  (fmap inc nat))\n\n(def s-neg-int\n  \"Generate strictly negative integers bounded by the generator's `size` + 1\"\n  (fmap dec neg-int))\n\n(defn vector\n  \"Create a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter.\"\n  ([generator]\n   (assert (generator? generator) \"Arg to vector must be a generator\")\n   (gen-bind\n    (sized #(choose 0 %))\n    (fn [num-elements-rose]\n      (gen-fmap (fn [roses]\n                  (rose/shrink-vector core/vector\n                                      roses))\n                (gen-tuple (repeat (rose/root num-elements-rose)\n                                   generator))))))\n  ([generator num-elements]\n   (assert (generator? generator) \"First arg to vector must be a generator\")\n   (apply tuple (repeat num-elements generator)))\n  ([generator min-elements max-elements]\n   (assert (generator? generator) \"First arg to vector must be a generator\")\n   (gen-bind\n    (choose min-elements max-elements)\n    (fn [num-elements-rose]\n      (gen-fmap (fn [roses]\n                  (rose/filter\n                   (fn [v] (and (>= (count v) min-elements)\n                                (<= (count v) max-elements)))\n                   (rose/shrink-vector core/vector\n                                       roses)))\n                (gen-tuple (repeat (rose/root num-elements-rose)\n                                   generator)))))))\n\n(defn list\n  \"Like `vector`, but generates lists.\"\n  [generator]\n  (assert (generator? generator) \"First arg to list must be a generator\")\n  (gen-bind (sized #(choose 0 %))\n            (fn [num-elements-rose]\n              (gen-fmap (fn [roses]\n                          (rose/shrink-vector core/list\n                                              roses))\n                        (gen-tuple (repeat (rose/root num-elements-rose)\n                                           generator))))))\n\n(defn- swap\n  [coll [i1 i2]]\n  (assoc coll i2 (coll i1) i1 (coll i2)))\n\n(defn\n  ^{:added \"0.6.0\"}\n  shuffle\n  \"Create a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector.\"\n  [coll]\n  (core/let [coll (if (vector? coll) coll (vec coll))\n             index-gen (choose 0 (dec (count coll)))]\n    (fmap #(reduce swap coll %)\n          ;; a vector of swap instructions, with count between\n          ;; zero and 2 * count. This means that the average number\n          ;; of instructions is count, which should provide sufficient\n          ;; (though perhaps not 'perfect') shuffling. This still gives us\n          ;; nice, relatively quick shrinks.\n          (vector (tuple index-gen index-gen) 0 (* 2 (count coll))))))\n\n;; NOTE cljs: Comment out for now - David\n\n#?(:clj\n   (def byte\n     \"Generates `java.lang.Byte`s, using the full byte-range.\"\n     (fmap core/byte (choose Byte/MIN_VALUE Byte/MAX_VALUE))))\n\n#?(:clj\n   (def bytes\n     \"Generates byte-arrays.\"\n     (fmap core/byte-array (vector byte))))\n\n(defn hash-map\n  \"Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})\"\n  [& kvs]\n  (assert (even? (count kvs)))\n  (core/let [ks (take-nth 2 kvs)\n             vs (take-nth 2 (rest kvs))]\n    (assert (every? generator? vs)\n            \"Value args to hash-map must be generators\")\n    (fmap #(zipmap ks %)\n          (apply tuple vs))))\n\n;; Collections of distinct elements\n;; (has to be done in a low-level way (instead of with combinators)\n;;  and is subject to the same kind of failure as such-that)\n;; ---------------------------------------------------------------------------\n\n(defn ^:private transient-set-contains?\n  [s k]\n  #? (:clj\n      (.contains ^clojure.lang.ITransientSet s k)\n      :cljs\n      (some? (-lookup s k))))\n\n(defn ^:private coll-distinct-by*\n  \"Returns a rose tree.\"\n  [empty-coll key-fn shuffle-fn gen rng size num-elements min-elements max-tries ex-fn]\n  {:pre [gen (:gen gen)]}\n  (loop [rose-trees (transient [])\n         s (transient #{})\n         rng rng\n         size size\n         tries 0]\n    (cond (and (= max-tries tries)\n               (< (count rose-trees) min-elements))\n          (throw (ex-fn {:gen gen\n                         :max-tries max-tries\n                         :num-elements num-elements}))\n\n          (or (= max-tries tries)\n              (= (count rose-trees) num-elements))\n          (->> (persistent! rose-trees)\n               ;; we shuffle the rose trees so that we aren't biased\n               ;; toward generating \"smaller\" elements earlier in the\n               ;; collection (only applies to ordered collections)\n               ;;\n               ;; shuffling the rose trees is more efficient than\n               ;; (bind ... shuffle) because we only perform the\n               ;; shuffling once and we have no need to shrink the\n               ;; shufling.\n               (shuffle-fn rng)\n               (rose/shrink-vector #(into empty-coll %&)))\n\n          :else\n          (core/let [[rng1 rng2] (random/split rng)\n                     rose (call-gen gen rng1 size)\n                     root (rose/root rose)\n                     k (key-fn root)]\n            (if (transient-set-contains? s k)\n              (recur rose-trees s rng2 (inc size) (inc tries))\n              (recur (conj! rose-trees rose)\n                     (conj! s k)\n                     rng2\n                     size\n                     0))))))\n\n(defn ^:private distinct-by?\n  \"Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections.\"\n  [f coll]\n  (or (empty? coll)\n      (apply distinct? (core/map f coll))))\n\n(defn ^:private the-shuffle-fn\n  \"Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function.\"\n  [rng coll]\n  (core/let [empty-coll (empty coll)\n             v (vec coll)\n             card (count coll)\n             dec-card (dec card)]\n    (into empty-coll\n          (first\n           (reduce (fn [[v rng] idx]\n                     (core/let [[rng1 rng2] (random/split rng)\n                                swap-idx (rand-range rng1 idx dec-card)]\n                       [(swap v [idx swap-idx]) rng2]))\n                   [v rng]\n                   (range card))))))\n\n(defn ^:private coll-distinct-by\n  [empty-coll key-fn allows-dupes? ordered? gen\n   {:keys [num-elements min-elements max-elements max-tries ex-fn]\n    :or {max-tries 10\n         ex-fn #(ex-info \"Couldn't generate enough distinct elements!\" %)}}]\n  (core/let [shuffle-fn (if ordered?\n                          the-shuffle-fn\n                          (fn [_rng coll] coll))\n             hard-min-elements (or num-elements min-elements 1)]\n    (if num-elements\n      (core/let [size-pred #(= num-elements (count %))]\n        (assert (and (nil? min-elements) (nil? max-elements)))\n        (make-gen\n         (fn [rng gen-size]\n           (rose/filter\n            (if allows-dupes?\n              ;; is there a smarter way to do the shrinking than checking\n              ;; the distinctness of the entire collection at each\n              ;; step?\n              (every-pred size-pred #(distinct-by? key-fn %))\n              size-pred)\n            (coll-distinct-by* empty-coll key-fn shuffle-fn gen rng gen-size\n                               num-elements hard-min-elements max-tries ex-fn)))))\n      (core/let [min-elements (or min-elements 0)\n                 size-pred (if max-elements\n                             #(<= min-elements (count %) max-elements)\n                             #(<= min-elements (count %)))]\n        (gen-bind\n         (if max-elements\n           (choose min-elements max-elements)\n           (sized #(choose min-elements (+ min-elements %))))\n         (fn [num-elements-rose]\n           (core/let [num-elements (rose/root num-elements-rose)]\n             (make-gen\n              (fn [rng gen-size]\n                (rose/filter\n                 (if allows-dupes?\n                   ;; same comment as above\n                   (every-pred size-pred #(distinct-by? key-fn %))\n                   size-pred)\n                 (coll-distinct-by* empty-coll key-fn shuffle-fn gen rng gen-size\n                                    num-elements hard-min-elements max-tries ex-fn)))))))))))\n\n;; I tried to reduce the duplication in these docstrings with a macro,\n;; but couldn't make it work in cljs.\n\n(defn vector-distinct\n  \"Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([gen] (vector-distinct gen {}))\n  ([gen opts]\n   (assert (generator? gen) \"First arg to vector-distinct must be a generator!\")\n   (coll-distinct-by [] identity true true gen opts)))\n\n(defn list-distinct\n  \"Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([gen] (list-distinct gen {}))\n  ([gen opts]\n   (assert (generator? gen) \"First arg to list-distinct must be a generator!\")\n   (coll-distinct-by () identity true true gen opts)))\n\n(defn vector-distinct-by\n  \"Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([key-fn gen] (vector-distinct-by key-fn gen {}))\n  ([key-fn gen opts]\n   (assert (generator? gen) \"Second arg to vector-distinct-by must be a generator!\")\n   (coll-distinct-by [] key-fn true true gen opts)))\n\n(defn list-distinct-by\n  \"Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([key-fn gen] (list-distinct-by key-fn gen {}))\n  ([key-fn gen opts]\n   (assert (generator? gen) \"Second arg to list-distinct-by must be a generator!\")\n   (coll-distinct-by () key-fn true true gen opts)))\n\n(defn set\n  \"Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([gen] (set gen {}))\n  ([gen opts]\n   (assert (generator? gen) \"First arg to set must be a generator!\")\n   (coll-distinct-by #{} identity false false gen opts)))\n\n(defn sorted-set\n  \"Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception\"\n  {:added \"0.9.0\"}\n  ([gen] (sorted-set gen {}))\n  ([gen opts]\n   (assert (generator? gen) \"First arg to sorted-set must be a generator!\")\n   (coll-distinct-by (core/sorted-set) identity false false gen opts)))\n\n(defn map\n  \"Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception\"\n  ([key-gen val-gen] (map key-gen val-gen {}))\n  ([key-gen val-gen opts]\n   (coll-distinct-by {} first false false (tuple key-gen val-gen) opts)))\n\n;; large integers\n;; ---------------------------------------------------------------------------\n\n;; This approach has a few distribution edge cases, but is pretty good\n;; for expected uses and is way better than nothing.\n\n(def ^:private gen-raw-long\n  \"Generates a single uniformly random long, does not shrink.\"\n  (make-gen (fn [rnd _size]\n              (rose/pure (random/rand-long rnd)))))\n\n(def ^:private MAX_INTEGER\n  #?(:clj Long/MAX_VALUE :cljs (dec (apply * (repeat 53 2)))))\n(def ^:private MIN_INTEGER\n  #?(:clj Long/MIN_VALUE :cljs (- MAX_INTEGER)))\n\n(defn ^:private abs\n  [x]\n  #?(:clj (Math/abs (long x)) :cljs (Math/abs x)))\n\n(defn ^:private long->large-integer\n  [bit-count x min max]\n  (loop [res (-> x\n                 (#?(:clj bit-shift-right :cljs .shiftRight)\n                  (- 64 bit-count))\n                 #?(:cljs .toNumber)\n                 ;; so we don't get into an infinite loop bit-shifting\n                 ;; -1\n                 (cond-> (zero? min) (abs)))]\n    (if (<= min res max)\n      res\n      (core/let [res' (- res)]\n        (if (<= min res' max)\n          res'\n          (recur #?(:clj (bit-shift-right res 1)\n                    ;; emulating bit-shift-right\n                    :cljs (-> res\n                              (cond-> (odd? res)\n                                ((if (neg? res) inc dec)))\n                              (/ 2)))))))))\n\n(defn ^:private large-integer**\n  \"Like large-integer*, but assumes range includes zero.\"\n  [min max]\n  (sized (fn [size]\n           (core/let [size (core/max size 1) ;; no need to worry about size=0\n                      max-bit-count (core/min size #?(:clj 64 :cljs 54))]\n             (gen-fmap (fn [rose]\n                         (core/let [[bit-count x] (rose/root rose)]\n                           (int-rose-tree (long->large-integer bit-count x min max))))\n                       (tuple (choose 1 max-bit-count)\n                              gen-raw-long))))))\n\n(defn large-integer*\n  \"Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)\"\n  {:added \"0.9.0\"}\n  [{:keys [min max]}]\n  (core/let [min (or min MIN_INTEGER)\n             max (or max MAX_INTEGER)]\n    (assert (<= min max))\n    (such-that #(<= min % max)\n               (if (<= min 0 max)\n                 (large-integer** min max)\n                 (if (< max 0)\n                   (fmap #(+ max %) (large-integer** (- min max) 0))\n                   (fmap #(+ min %) (large-integer** 0 (- max min))))))))\n\n(def ^{:added \"0.9.0\"} large-integer\n  \"Generates a platform-native integer from the full available range\n  (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n  (2^53 - 1)).\n\n  Use large-integer* for more control.\"\n  (large-integer* {}))\n\n;; doubles\n;; ---------------------------------------------------------------------------\n\n\n;; This code is a lot more complex than any reasonable person would\n;; expect, for two reasons:\n;;\n;; 1) I wanted the generator to start with simple values and grow with\n;; the size parameter, as well as shrink back to simple values. I\n;; decided to define \"simple\" as numbers with simpler (closer to 0)\n;; exponents, with simpler fractional parts (fewer lower-level bits\n;; set), and with positive being simpler than negative. I also wanted\n;; to take optional min/max parameters, which complicates the hell out\n;; of things.\n;;\n;; 2) It works in CLJS as well, which has fewer utility functions for\n;; doubles, and I wanted it to work exactly the same way in CLJS just\n;; to validate the whole cross-platform situation. It should generate\n;; the exact same numbers on both platforms.\n;;\n;; Some of the lower level stuff could probably be less messy and\n;; faster, especially for CLJS.\n\n(def ^:private POS_INFINITY #?(:clj Double/POSITIVE_INFINITY, :cljs (.-POSITIVE_INFINITY js/Number)))\n(def ^:private NEG_INFINITY #?(:clj Double/NEGATIVE_INFINITY, :cljs (.-NEGATIVE_INFINITY js/Number)))\n(def ^:private MAX_POS_VALUE #?(:clj Double/MAX_VALUE, :cljs (.-MAX_VALUE js/Number)))\n(def ^:private MIN_NEG_VALUE (- MAX_POS_VALUE))\n(def ^:private NAN #?(:clj Double/NaN, :cljs (.-NaN js/Number)))\n\n(defn ^:private uniform-integer\n  \"Generates an integer uniformly in the range 0..(2^bit-count-1).\"\n  [bit-count]\n  {:assert [(<= 0 bit-count 52)]}\n  (if (<= bit-count 32)\n    ;; the case here is just for cljs\n    (choose 0 (case (long bit-count)\n                32 0xffffffff\n                31 0x7fffffff\n                (-> 1 (bit-shift-left bit-count) dec)))\n    (fmap (fn [[upper lower]]\n            #? (:clj\n                (-> upper (bit-shift-left 32) (+ lower))\n\n                :cljs\n                (-> upper (* 0x100000000) (+ lower))))\n          (tuple (uniform-integer (- bit-count 32))\n                 (uniform-integer 32)))))\n\n(defn ^:private scalb\n  [x exp]\n  #?(:clj (Math/scalb ^double x ^int exp)\n     :cljs (* x (.pow js/Math 2 exp))))\n\n(defn ^:private fifty-two-bit-reverse\n  \"Bit-reverses an integer in the range [0, 2^52).\"\n  [n]\n  #? (:clj\n      (-> n (Long/reverse) (unsigned-bit-shift-right 12))\n\n      :cljs\n      (loop [out 0\n             n n\n             out-shifter (Math/pow 2 52)]\n        (if (< n 1)\n          (* out out-shifter)\n          (recur (-> out (* 2) (+ (bit-and n 1)))\n                 (/ n 2)\n                 (/ out-shifter 2))))))\n\n(def ^:private backwards-shrinking-significand\n  \"Generates a 52-bit non-negative integer that shrinks toward having\n  fewer lower-order bits (and shrinks to 0 if possible).\"\n  (fmap fifty-two-bit-reverse\n        (sized (fn [size]\n                 (gen-bind (choose 0 (min size 52))\n                           (fn [rose]\n                             (uniform-integer (rose/root rose))))))))\n\n(defn ^:private get-exponent\n  [x]\n  #? (:clj\n      (Math/getExponent ^Double x)\n\n      :cljs\n      (if (zero? x)\n        -1023\n        (core/let [x (Math/abs x)\n\n                   res\n                   (Math/floor (* (Math/log x) (.-LOG2E js/Math)))\n\n                   t (scalb x (- res))]\n          (cond (< t 1) (dec res)\n                (<= 2 t) (inc res)\n                :else res)))))\n\n(defn ^:private double-exp-and-sign\n  \"Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds.\"\n  [lower-bound upper-bound]\n  (letfn [(gen-exp [lb ub]\n            (sized (fn [size]\n                     (core/let [qs8 (bit-shift-left 1 (quot (min 200 size) 8))]\n                       (cond (<= lb 0 ub)\n                             (choose (max lb (- qs8)) (min ub qs8))\n\n                             (< ub 0)\n                             (choose (max lb (- ub qs8)) ub)\n\n                             :else\n                             (choose lb (min ub (+ lb qs8))))))))]\n    (if (and (nil? lower-bound)\n             (nil? upper-bound))\n      (tuple (gen-exp -1023 1023)\n             (elements [1.0 -1.0]))\n      (core/let [lower-bound (or lower-bound MIN_NEG_VALUE)\n                 upper-bound (or upper-bound MAX_POS_VALUE)\n                 lbexp (max -1023 (get-exponent lower-bound))\n                 ubexp (max -1023 (get-exponent upper-bound))]\n        (cond (<= 0.0 lower-bound)\n              (tuple (gen-exp lbexp ubexp)\n                     (return 1.0))\n\n              (<= upper-bound 0.0)\n              (tuple (gen-exp ubexp lbexp)\n                     (return -1.0))\n\n              :else\n              (fmap (fn [[exp sign :as pair]]\n                      (if (or (and (neg? sign) (< lbexp exp))\n                              (and (pos? sign) (< ubexp exp)))\n                        [exp (- sign)]\n                        pair))\n                    (tuple\n                     (gen-exp -1023 (max ubexp lbexp))\n                     (elements [1.0 -1.0]))))))))\n\n(defn ^:private block-bounds\n  \"Returns [low high], the smallest and largest numbers in the given\n  range.\"\n  [exp sign]\n  (if (neg? sign)\n    (core/let [[low high] (block-bounds exp (- sign))]\n      [(- high) (- low)])\n    (if (= -1023 exp)\n      [0.0 (-> 1.0 (scalb 52) dec (scalb -1074))]\n      [(scalb 1.0 exp)\n       (-> 1.0 (scalb 52) dec (scalb (- exp 51)))])))\n\n(defn ^:private double-finite\n  [lower-bound upper-bound]\n  {:pre [(or (nil? lower-bound)\n             (nil? upper-bound)\n             (<= lower-bound upper-bound))]}\n  (core/let [pred (if lower-bound\n                    (if upper-bound\n                      #(<= lower-bound % upper-bound)\n                      #(<= lower-bound %))\n                    (if upper-bound\n                      #(<= % upper-bound)))\n\n             gen\n             (fmap (fn [[[exp sign] significand]]\n                     (core/let [;; 1.0 <= base < 2.0\n                                base (inc (/ significand (Math/pow 2 52)))\n                                x (-> base (scalb exp) (* sign))]\n                       (if (or (nil? pred) (pred x))\n                         x\n                         ;; Scale things a bit when we have a partial range\n                         ;; to deal with. It won't be great for generating\n                         ;; simple numbers, but oh well.\n                         (core/let [[low high] (block-bounds exp sign)\n\n                                    block-lb (cond-> low  lower-bound (max lower-bound))\n                                    block-ub (cond-> high upper-bound (min upper-bound))\n                                    x (+ block-lb (* (- block-ub block-lb) (- base 1)))]\n                           (-> x (min block-ub) (max block-lb))))))\n                   (tuple (double-exp-and-sign lower-bound upper-bound)\n                          backwards-shrinking-significand))]\n    ;; wrapping in the such-that is necessary for staying in bounds\n    ;; during shrinking\n    (cond->> gen pred (such-that pred))))\n\n(defn double*\n  \"Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity.\"\n  {:added \"0.9.0\"}\n  [{:keys [infinite? NaN? min max]\n    :or {infinite? true, NaN? true}}]\n  (core/let [frequency-arg (cond-> [[95 (double-finite min max)]]\n\n                             (if (nil? min)\n                               (or (nil? max) (<= 0.0 max))\n                               (if (nil? max)\n                                 (<= min 0.0)\n                                 (<= min 0.0 max)))\n                             (conj\n                              ;; Add zeros here as a special case, since\n                              ;; the `finite` code considers zeros rather\n                              ;; complex (as they have a -1023 exponent)\n                              ;;\n                              ;; I think most uses can't distinguish 0.0\n                              ;; from -0.0, but seems worth throwing both\n                              ;; in just in case.\n                              [1 (return 0.0)]\n                              [1 (return -0.0)])\n\n                             (and infinite? (nil? max))\n                             (conj [1 (return POS_INFINITY)])\n\n                             (and infinite? (nil? min))\n                             (conj [1 (return NEG_INFINITY)])\n\n                             NaN? (conj [1 (return NAN)]))]\n    (if (= 1 (count frequency-arg))\n      (-> frequency-arg first second)\n      (frequency frequency-arg))))\n\n(def ^{:added \"0.9.0\"} double\n  \"Generates 64-bit floating point numbers from the entire range,\n  including +/- infinity and NaN. Use double* for more control.\"\n  (double* {}))\n\n;; Characters & Strings\n;; ---------------------------------------------------------------------------\n\n(def char\n  \"Generates character from 0-255.\"\n  (fmap core/char (choose 0 255)))\n\n(def char-ascii\n  \"Generate only ascii character.\"\n  (fmap core/char (choose 32 126)))\n\n(def char-alphanumeric\n  \"Generate alphanumeric characters.\"\n  (fmap core/char\n        (one-of [(choose 48 57)\n                 (choose 65 90)\n                 (choose 97 122)])))\n\n(def ^{:deprecated \"0.6.0\"}\n  char-alpha-numeric\n  \"Deprecated - use char-alphanumeric instead.\n\n  Generate alphanumeric characters.\"\n  char-alphanumeric)\n\n(def char-alpha\n  \"Generate alpha characters.\"\n  (fmap core/char\n        (one-of [(choose 65 90)\n                 (choose 97 122)])))\n\n(def ^:private char-symbol-special\n  \"Generate non-alphanumeric characters that can be in a symbol.\"\n  (elements [\\* \\+ \\! \\- \\_ \\? \\.]))\n\n(def ^:private char-symbol-noninitial\n  \"Generate characters that can be the char following first of a keyword or symbol.\"\n  (frequency [[14 char-alphanumeric]\n              [7 char-symbol-special]\n              [1 (return \\:)]]))\n\n(def ^:private char-symbol-initial\n  \"Generate characters that can be the first char of a keyword or symbol.\"\n  (frequency [[2 char-alpha]\n              [1 char-symbol-special]]))\n\n(def string\n  \"Generate strings. May generate unprintable characters.\"\n  (fmap clojure.string/join (vector char)))\n\n(def string-ascii\n  \"Generate ascii strings.\"\n  (fmap clojure.string/join (vector char-ascii)))\n\n(def string-alphanumeric\n  \"Generate alphanumeric strings.\"\n  (fmap clojure.string/join (vector char-alphanumeric)))\n\n(def ^{:deprecated \"0.6.0\"}\n  string-alpha-numeric\n  \"Deprecated - use string-alphanumeric instead.\n\n  Generate alphanumeric strings.\"\n  string-alphanumeric)\n\n(defn- digit?\n  [d]\n  #?(:clj  (Character/isDigit ^Character d)\n     :cljs (gstring/isNumeric d)))\n\n(defn- +-or---digit?\n  \"Returns true if c is \\\\+ or \\\\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers.\"\n  [c d]\n  (core/boolean (and d\n                     (or (#?(:clj = :cljs identical?) \\+ c)\n                         (#?(:clj = :cljs identical?) \\- c))\n                     (digit? d))))\n\n(def ^:private symbol-name-or-namespace\n  \"Generates a namespace string for a symbol/keyword.\"\n  (->> (tuple char-symbol-initial (vector char-symbol-noninitial))\n       (such-that (fn [[c [d]]] (not (+-or---digit? c d))))\n       (fmap (fn [[c cs]]\n               (core/let [s (clojure.string/join (cons c cs))]\n                 (-> s\n                     (string/replace #\":{2,}\" \":\")\n                     (string/replace #\":$\" \"\")))))))\n\n(defn ^:private resize-symbolish-generator\n  \"Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable.\"\n  [g]\n  ;; function chosen by ad-hoc experimentation\n  (scale #(long (Math/pow % 0.60)) g))\n\n(def keyword\n  \"Generate keywords without namespaces.\"\n  (frequency [[100\n               (->> symbol-name-or-namespace\n                    (fmap core/keyword)\n                    (resize-symbolish-generator))]\n              [1 (return :/)]]))\n\n(def\n  ^{:added \"0.5.9\"}\n  keyword-ns\n  \"Generate keywords with namespaces.\"\n  (->> (tuple symbol-name-or-namespace symbol-name-or-namespace)\n       (fmap (fn [[ns name]] (core/keyword ns name)))\n       (resize-symbolish-generator)))\n\n(def symbol\n  \"Generate symbols without namespaces.\"\n  (frequency [[100\n               (->> symbol-name-or-namespace\n                    (fmap core/symbol)\n                    (resize-symbolish-generator))]\n              [1 (return '/)]]))\n\n(def\n  ^{:added \"0.5.9\"}\n  symbol-ns\n  \"Generate symbols with namespaces.\"\n  (->> (tuple symbol-name-or-namespace symbol-name-or-namespace)\n       (fmap (fn [[ns name]] (core/symbol ns name)))\n       (resize-symbolish-generator)))\n\n(def ratio\n  \"Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n  will be ratios, as many values returned by `/` are not ratios.\"\n  (fmap\n   (fn [[a b]] (/ a b))\n   (tuple int\n          (such-that (complement zero?) int))))\n\n(def ^{:added \"0.9.0\"} uuid\n  \"Generates a random type-4 UUID. Does not shrink.\"\n  (no-shrink\n   #?(:clj\n      ;; this could be done with combinators, but doing it low-level\n      ;; seems to be 10x faster\n      (make-gen\n       (fn [rng _size]\n         (core/let [[r1 r2] (random/split rng)\n                    x1 (-> (random/rand-long r1)\n                           (bit-and -45057)\n                           (bit-or 0x4000))\n                    x2 (-> (random/rand-long r2)\n                           (bit-or -9223372036854775808)\n                           (bit-and -4611686018427387905))]\n           (rose/make-rose\n            (java.util.UUID. x1 x2)\n            []))))\n\n      :cljs\n      ;; this could definitely be optimized so that it doesn't require\n      ;; generating 31 numbers\n      (fmap (fn [nibbles]\n              (letfn [(hex [idx] (.toString (nibbles idx) 16))]\n                (core/let [rhex (-> (nibbles 15) (bit-and 3) (+ 8) (.toString 16))]\n                  (core/uuid (str (hex 0)  (hex 1)  (hex 2)  (hex 3)\n                                  (hex 4)  (hex 5)  (hex 6)  (hex 7)  \"-\"\n                                  (hex 8)  (hex 9)  (hex 10) (hex 11) \"-\"\n                                  \"4\"      (hex 12) (hex 13) (hex 14) \"-\"\n                                  rhex     (hex 16) (hex 17) (hex 18) \"-\"\n                                  (hex 19) (hex 20) (hex 21) (hex 22)\n                                  (hex 23) (hex 24) (hex 25) (hex 26)\n                                  (hex 27) (hex 28) (hex 29) (hex 30))))))\n            (vector (choose 0 15) 31)))))\n\n(def simple-type\n  (one-of [int large-integer double char string ratio boolean keyword\n           keyword-ns symbol symbol-ns uuid]))\n\n(def simple-type-printable\n  (one-of [int large-integer double char-ascii string-ascii ratio boolean\n           keyword keyword-ns symbol symbol-ns uuid]))\n\n#?(:cljs\n;; http://dev.clojure.org/jira/browse/CLJS-1594\n   (defn ^:private hashable?\n     [x]\n     (if (number? x)\n       (not (or (js/isNaN x)\n                (= NEG_INFINITY x)\n                (= POS_INFINITY x)))\n       true)))\n\n(defn container-type\n  [inner-type]\n  (one-of [(vector inner-type)\n           (list inner-type)\n           (set #?(:clj inner-type\n                   :cljs (such-that hashable? inner-type)))\n           ;; scaling this by half since it naturally generates twice\n           ;; as many elements\n           (scale #(quot % 2)\n                  (map #?(:clj inner-type\n                          :cljs (such-that hashable? inner-type))\n                       inner-type))]))\n\n;; A few helpers for recursive-gen\n\n(defn ^:private size->max-leaf-count\n  [size]\n  ;; chosen so that recursive-gen (with the assumptions mentioned in\n  ;; the comment below) will generate structures with leaf-node-counts\n  ;; not greater than the `size` ~99% of the time.\n  (long (Math/pow size 1.1)))\n\n(core/let [log2 (Math/log 2)]\n  (defn ^:private random-pseudofactoring\n    \"Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n).\"\n    [n rng]\n    (if (<= n 2)\n      [n]\n      (core/let [log (Math/log n)\n                 [r1 r2] (random/split rng)\n                 n1 (-> (random/rand-double r1)\n                        (* (- log log2))\n                        (+ log2)\n                        (Math/exp)\n                        (long))\n                 n2 (quot n n1)]\n        (if (and (< 1 n1) (< 1 n2))\n          (cons n1 (random-pseudofactoring n2 r2))\n          [n])))))\n\n(defn ^:private randomized\n  \"Like sized, but passes an rng instead of a size.\"\n  [func]\n  (make-gen (fn [rng size]\n              (core/let [[r1 r2] (random/split rng)]\n                (call-gen\n                 (func r1)\n                 r2\n                 size)))))\n\n(defn\n  ^{:added \"0.5.9\"}\n  recursive-gen\n  \"This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))\"\n  [container-gen-fn scalar-gen]\n  (assert (generator? scalar-gen)\n          \"Second arg to recursive-gen must be a generator\")\n  ;; The trickiest part about this is sizing. The strategy here is to\n  ;; assume that the container generators will (like the normal\n  ;; collection generators in this namespace) have a size bounded by\n  ;; the `size` parameter, and with that assumption we can give an\n  ;; upper bound to the total number of leaf nodes in the generated\n  ;; structure.\n  ;;\n  ;; So we first pick an upper bound, and pick it to be somewhat\n  ;; larger than the real `size` since on average they will be rather\n  ;; smaller. Then we factor that upper bound into integers to give us\n  ;; the size to use at each depth, assuming that the total size\n  ;; should sort of be the product of the factored sizes.\n  ;;\n  ;; This is all a bit weird and hard to explain precisely but I think\n  ;; it works reasonably and definitely better than the old code.\n  (sized (fn [size]\n           (bind (choose 0 (size->max-leaf-count size))\n                 (fn [max-leaf-count]\n                   (randomized\n                    (fn [rng]\n                      (core/let [sizes (random-pseudofactoring max-leaf-count rng)\n                                 sized-scalar-gen (resize size scalar-gen)]\n                        (reduce (fn [g size]\n                                  (bind (choose 0 10)\n                                        (fn [x]\n                                          (if (zero? x)\n                                            sized-scalar-gen\n                                            (resize size\n                                                    (container-gen-fn g))))))\n                                sized-scalar-gen\n                                sizes)))))))))\n\n(def any\n  \"A recursive generator that will generate many different, often nested, values\"\n  (recursive-gen container-type simple-type))\n\n(def any-printable\n  \"Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)\"\n  (recursive-gen container-type simple-type-printable))\n\n;; Macros\n;; ---------------------------------------------------------------------------\n\n(defmacro let\n  \"Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \\\"users\\\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))\"\n  {:added \"0.9.0\"}\n  [bindings & body]\n  (assert (vector? bindings)\n          \"First arg to gen/let must be a vector of bindings.\")\n  (assert (even? (count bindings))\n          \"gen/let requires an even number of forms in binding vector\")\n  (if (empty? bindings)\n    `(core/let [val# (do ~@body)]\n       (if (clojure.test.check.generators/generator? val#)\n         val#\n         (return val#)))\n    (core/let [[binding gen & more] bindings]\n      `(clojure.test.check.generators/bind ~gen (fn [~binding] (let [~@more] ~@body))))))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4385__auto__","k__4386__auto__","this__4387__auto__","k68067","else__4388__auto__","G__68087","cljs.core/Keyword","gen","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__68097","vec__68111","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__68066","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__68143","coll__4382__auto__","cljs.core/hash-unordered-coll","this68068","other68069","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__68168","cljs.core/keyword-identical?","expr__68169","G__68177","G__68178","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","clojure.test.check.generators/Generator","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__68071","extmap__4424__auto__","G__68198","cljs.core/record?","clojure.test.check.generators/->Generator","clojure.test.check.generators/map->Generator","clojure.test.check.generators/generator?","x","clojure.test.check.generators/make-gen","generator-fn","p__68214","map__68218","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/call-gen","rnd","size","clojure.test.check.generators/gen-pure","value","p__68227","map__68229","clojure.test.check.generators/gen-fmap","k","h","G__68235","p__68239","map__68242","clojure.test.check.generators/gen-bind","vec__68245","map__68248","r1","r2","clojure.test.check.random/split","inner","result","clojure.test.check.generators/lazy-random-states","rr","cljs.core/LazySeq","vec__68261","cljs.core/cons","clojure.test.check.generators/gen-tuple","gens","p1__68268#","p2__68269#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","clojure.test.check.random/split-n","clojure.test.check.generators/fmap","f","p1__68275#","clojure.test.check.rose-tree/fmap","clojure.test.check.generators/return","clojure.test.check.rose-tree/pure","clojure.test.check.generators/bind-helper","rose","clojure.test.check.rose-tree/join","p1__68297#","clojure.test.check.generators/bind","generator","clojure.test.check.generators/make-size-range-seq","max-size","cljs.core/cycle","cljs.core.range.cljs$core$IFn$_invoke$arity$2","var_args","G__68331","clojure.test.check.generators/sample-seq","js/Error","clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$2","r","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0","size-seq","p1__68321#","p2__68322#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","clojure.test.check.rose-tree/root","G__68350","clojure.test.check.generators/sample","clojure.test.check.generators.sample.cljs$core$IFn$_invoke$arity$2","num-samples","cljs.core.take.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators.sample_seq.cljs$core$IFn$_invoke$arity$1","G__68369","clojure.test.check.generators/generate","clojure.test.check.generators.generate.cljs$core$IFn$_invoke$arity$2","rng","seed","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1","clojure.test.check.generators/halfs","n","p1__68395#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","p1__68396#","cljs.core/iterate","cljs.core/quot","clojure.test.check.generators/shrink-int","integer","p1__68405#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/int-rose-tree","clojure.test.check.rose-tree/make-rose","clojure.test.check.generators/calc-long","factor","lower","upper","cljs.core/long","G__68440","Math/floor","clojure.test.check.generators/rand-range","clojure.test.check.random/rand-double","clojure.test.check.generators/sized","sized-gen","clojure.test.check.generators/resize","map__68482","_size","clojure.test.check.generators/scale","clojure.test.check.generators/choose","p1__68502#","clojure.test.check.rose-tree/filter","clojure.test.check.generators/one-of","generators","p1__68516#","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/pick","likelihoods","cljs.core.reductions.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/rest","p1__68526#","clojure.test.check.generators/frequency","pairs","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/pos?","cljs.core/first","total","idx","iter__4523__auto__","s__68558","temp__5753__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__68560","cljs.core/chunk-buffer","i__68559","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68557","cljs.core/chunk-rest","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/second","clojure.test.check.rose-tree/children","clojure.test.check.generators/elements","coll","v","cljs.core/vec","p1__68601#","p__68618","map__68623","clojure.test.check.generators/such-that-helper","pred","ex-fn","max-tries","tries-left","G__68642","vec__68643","G__68654","clojure.test.check.generators/default-such-that-opts","p__68666","map__68667","arg","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__68682","clojure.test.check.generators/such-that","clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$3","max-tries-or-opts","opts","cljs.core/integer?","cljs.core/map?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","rand-seed","clojure.test.check.generators/not-empty","clojure.test.check.generators.such_that.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/no-shrink","clojure.test.check.generators/shrink-2","clojure.test.check.rose-tree/collapse","clojure.test.check.generators/boolean","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","clojure.test.check.generators/tuple","seq68701","self__4718__auto__","roses","clojure.test.check.rose-tree/zip","cljs.core/vector","clojure.test.check.generators/int","clojure.test.check.generators/nat","p1__68706#","G__68708","Math/abs","clojure.test.check.generators/pos-int","clojure.test.check.generators/neg-int","p1__68715#","clojure.test.check.generators/s-pos-int","cljs.core/inc","clojure.test.check.generators/s-neg-int","cljs.core/dec","G__68726","clojure.test.check.generators/vector","p1__68718#","num-elements-rose","clojure.test.check.rose-tree/shrink-vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","num-elements","min-elements","max-elements","clojure.test.check.generators/list","p1__68738#","cljs.core/list","p__68752","vec__68753","clojure.test.check.generators/swap","i1","i2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","clojure.test.check.generators/shuffle","index-gen","p1__68756#","clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$3","clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic","clojure.test.check.generators/hash-map","seq68764","kvs","ks","cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2","vs","p1__68761#","cljs.core/zipmap","clojure.test.check.generators/transient-set-contains?","s","cljs.core._lookup.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/coll-distinct-by*","empty-coll","key-fn","shuffle-fn","rose-trees","cljs.core/transient","tries","G__68796","cljs.core/persistent!","G__68798","G__68799","rest__68788#","vec__68801","rng1","rng2","root","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/distinct-by?","or__4131__auto__","cljs.core/empty?","cljs.core/distinct?","clojure.test.check.generators/the-shuffle-fn","cljs.core/empty","card","dec-card","p__68814","vec__68817","vec__68820","swap-idx","p__68836","map__68837","p1__68823#","clojure.test.check.generators/coll-distinct-by","allows-dupes?","ordered?","_rng","hard-min-elements","p1__68824#","size-pred","gen-size","p1__68826#","cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2","p1__68827#","p1__68828#","p1__68829#","p1__68830#","G__68859","clojure.test.check.generators/vector-distinct","clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","G__68881","clojure.test.check.generators/list-distinct","clojure.test.check.generators.list_distinct.cljs$core$IFn$_invoke$arity$2","G__68900","clojure.test.check.generators/vector-distinct-by","clojure.test.check.generators.vector_distinct_by.cljs$core$IFn$_invoke$arity$3","G__68922","clojure.test.check.generators/list-distinct-by","clojure.test.check.generators.list_distinct_by.cljs$core$IFn$_invoke$arity$3","G__68931","clojure.test.check.generators/set","clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$2","G__68937","clojure.test.check.generators/sorted-set","clojure.test.check.generators.sorted_set.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-set","G__68953","clojure.test.check.generators/map","key-gen","val-gen","clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3","clojure.test.check.generators/gen-raw-long","clojure.test.check.random/rand-long","clojure.test.check.generators/MAX_INTEGER","cljs.core/*","clojure.test.check.generators/MIN_INTEGER","clojure.test.check.generators/abs","clojure.test.check.generators/long->large-integer","bit-count","min","max","res","G__68965","res'","G__68972","cljs.core/odd?","fexpr__68975","clojure.test.check.generators/large-integer**","x__4219__auto__","y__4220__auto__","max-bit-count","x__4222__auto__","y__4223__auto__","vec__68991","p__68997","map__69001","clojure.test.check.generators/large-integer*","p1__68994#","p1__68995#","p1__68996#","clojure.test.check.generators/large-integer","clojure.test.check.generators/POS_INFINITY","js/Number","clojure.test.check.generators/NEG_INFINITY","clojure.test.check.generators/MAX_POS_VALUE","clojure.test.check.generators/MIN_NEG_VALUE","clojure.test.check.generators/NAN","clojure.test.check.generators/uniform-integer","G__69014","p__69016","vec__69020","G__69024","clojure.test.check.generators/scalb","exp","js/Math","clojure.test.check.generators/fifty-two-bit-reverse","out","out-shifter","Math/pow","clojure.test.check.generators/backwards-shrinking-significand","clojure.test.check.generators/get-exponent","G__69035","Math/log","t","clojure.test.check.generators/double-exp-and-sign","lower-bound","upper-bound","lb","ub","qs8","gen-exp","lbexp","ubexp","p__69099","vec__69102","sign","pair","clojure.test.check.generators/block-bounds","vec__69117","low","high","G__69121","G__69122","clojure.test.check.generators/double-finite","p1__69124#","p1__69125#","p1__69126#","p__69133","vec__69134","vec__69137","significand","base","vec__69143","block-lb","G__69147","block-ub","G__69150","G__69155","p__69157","map__69159","clojure.test.check.generators/double*","infinite?","NaN?","frequency-arg","G__69163","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","and__4120__auto__","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/double","clojure.test.check.generators/char","cljs.core/char","clojure.test.check.generators/char-ascii","clojure.test.check.generators/char-alphanumeric","clojure.test.check.generators/char-alpha-numeric","clojure.test.check.generators/char-alpha","clojure.test.check.generators/char-symbol-special","clojure.test.check.generators/char-symbol-noninitial","clojure.test.check.generators/char-symbol-initial","clojure.test.check.generators/string","clojure.string/join","clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1","clojure.test.check.generators/string-ascii","clojure.test.check.generators/string-alphanumeric","clojure.test.check.generators/string-alpha-numeric","clojure.test.check.generators/digit?","d","goog.string/isNumeric","clojure.test.check.generators/+-or---digit?","c","cljs.core/boolean","clojure.test.check.generators/symbol-name-or-namespace","p__69187","vec__69189","vec__69192","p__69182","vec__69184","cs","clojure.string.join.cljs$core$IFn$_invoke$arity$1","clojure.string/replace","clojure.test.check.generators/resize-symbolish-generator","g","p1__69198#","clojure.test.check.generators/keyword","cljs.core/keyword","clojure.test.check.generators/keyword-ns","p__69201","vec__69205","ns","name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/symbol","cljs.core/symbol","clojure.test.check.generators/symbol-ns","p__69220","vec__69221","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/ratio","p__69228","vec__69229","a","b","cljs.core/complement","cljs.core/zero?","clojure.test.check.generators/uuid","nibbles","rhex","cljs.core/uuid","hex","clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/simple-type","clojure.test.check.generators/simple-type-printable","clojure.test.check.generators/hashable?","cljs.core/not","js/isNaN","clojure.test.check.generators/container-type","inner-type","clojure.test.check.generators.set.cljs$core$IFn$_invoke$arity$1","p1__69270#","clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/size->max-leaf-count","log2","clojure.test.check.generators/random-pseudofactoring","vec__69302","log","n1","G__69305","Math/exp","n2","clojure.test.check.generators/randomized","func","vec__69314","clojure.test.check.generators/recursive-gen","container-gen-fn","scalar-gen","max-leaf-count","sizes","sized-scalar-gen","clojure.test.check.generators/any","clojure.test.check.generators/any-printable","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^23","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^1J","~$goog.array","~$goog.asserts"]]],["^23","goog/array/array.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2E"]]],["^23","clojure/test/check/generators.cljc"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C","^1M","^1K","^1I","^1G"]]],["^23","goog/debug/error.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","clojure/test/check/random/doubles.cljs"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C","~$clojure.test.check.random.longs"]]],["^23","goog/dom/nodetype.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","clojure/test/check/rose_tree.cljc"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C"]]],["^23","clojure/test/check/random.cljs"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C","~$clojure.test.check.random.doubles","^2F"]]],["^23","goog/object/object.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^23","goog/math/long.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2E","~$goog.reflect"]]],["^23","goog/string/internal.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","goog/functions/functions.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","goog/structs/map.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^23","goog/asserts/asserts.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^23","goog/uri/uri.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2D","^2E","^1G","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^23","goog/base.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",[]]],["^23","goog/structs/structs.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2D","~$goog.object"]]],["^23","clojure/string.cljs"],[1630228118934,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C","^1G","~$goog.string.StringBuffer"]]],["^23","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C"]]],["^23","goog/string/string.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","~$goog.string.internal"]]],["^23","goog/reflect/reflect.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","goog/string/stringbuffer.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","goog/iter/iter.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2D","^2E","~$goog.functions","~$goog.math"]]],["^23","cljs/core.cljs"],[1630228118934,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["~$goog.math.Long","~$goog.math.Integer","^1G","^2S","^2D","~$goog.Uri","^2T"]]],["^23","clojure/test/check/random/longs.cljs"],[1630228119162,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^C","~$clojure.test.check.random.longs.bit-count-impl","^2X","^C"]]],["^23","goog/math/integer.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J"]]],["^23","goog/uri/utils.js"],[1630228359392,"^2@",["^ ","^2A",null,"^2B",["^P",[]],"^2C",["^1J","^2D","^2E","^1G"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",10,"^8",5,"^9",10,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",["^ ","^M","^N"],"^O",["^P",["^Q","^R","^S","^T","^U","^V","^W","^M","^X","^Y","^Z","^[","^10","^11","^12","^13","^14","^15","^16","^17"]],"^18",["^ ","^M",["^ ","^19","0.9.0","^1:","^N","^1;","^1<","^6","clojure/test/check/generators.cljc","^8",1,"^7",1570,"^1=",true,"^1>",["^1?",[["^1@","~$&","^1A"]]],"^1B","Macro for building generators using values from other generators.\n  Uses a binding vector with the same syntax as clojure.core/let,\n  where the right-hand side of the binding pairs are generators, and\n  the left-hand side are names (or destructuring forms) for generated\n  values.\n\n  Subsequent generator expressions can refer to the previously bound\n  values, in the same way as clojure.core/let.\n\n  The body of the let can be either a value or a generator, and does\n  the expected thing in either case. In this way let provides the\n  functionality of both `bind` and `fmap`.\n\n  Examples:\n\n    (gen/let [strs (gen/not-empty (gen/list gen/string))\n              s (gen/elements strs)]\n      {:some-strings strs\n       :one-of-those-strings s})\n\n    ;; generates collections of \"users\" that have integer IDs\n    ;; from 0...N-1, but are in a random order\n    (gen/let [users (gen/list (gen/hash-map :name gen/string-ascii\n                                            :age gen/nat))]\n      (->> users\n           (map #(assoc %2 :id %1) (range))\n           (gen/shuffle)))"]],"^1;","^N","^1D",null,"^1E",["^ ","^1F","^1G","^1H","^1I","^1I","^1I","^1G","^1G","^C","^C","^1J","^1J","^1K","^1K","^1L","^1M","^1M","^1M","^1N","^1K","^1O","^C"],"^1P",["^P",["^1Q","^1R"]],"~:shadow/js-access-global",["^P",["Number","Math","isNaN","Error"]],"^1S",null,"~:defs",["^ ","~$coll-distinct-by*",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",661,"^8",17,"^9",661,"^:",34,"~:private",true,"^1>",["^1?",["~$quote",["^1?",[["~$empty-coll","~$key-fn","~$shuffle-fn","~$gen","~$rng","~$size","~$num-elements","~$min-elements","~$max-tries","~$ex-fn"]]]]],"^1B","Returns a rose tree."],"^3R",true,"^1;","~$clojure.test.check.generators/coll-distinct-by*","^6","clojure/test/check/generators.cljc","^:",34,"~:method-params",["^1?",[["^3T","^3U","^3V","^3W","^3X","^3Y","^3Z","^3[","^40","^41"]]],"~:protocol-impl",null,"~:arglists-meta",["^1?",[null,null]],"^8",1,"~:variadic?",false,"^7",661,"~:ret-tag","~$clojure.test.check.rose-tree/RoseTree","^9",661,"~:max-fixed-arity",10,"~:fn-var",true,"^1>",["^1?",["^3S",["^1?",[["^3T","^3U","^3V","^3W","^3X","^3Y","^3Z","^3[","^40","^41"]]]]],"^1B","Returns a rose tree."],"~$gen-fmap",["^ ","~:no-doc",true,"^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",53,"^8",7,"^9",53,"^:",15,"^1>",["^1?",["^3S",["^1?",[["~$k",["^ ","~$h","~:gen"]]]]]],"^1B","Internal function.","^4<",true],"^1;","~$clojure.test.check.generators/gen-fmap","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["~$k","~$p__68227"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",53,"^47","~$clojure.test.check.generators/Generator","^9",53,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$k",["^ ","~$h","^4="]]]]]],"^1B","Internal function."],"^Q",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1397,"^8",24,"^9",1397,"^:",28,"^19","0.9.0"],"^19","0.9.0","^1;","~$clojure.test.check.generators/uuid","^6","clojure/test/check/generators.cljc","^:",28,"^8",1,"^7",1397,"^9",1397,"~:tag","^4@","^1B","Generates a random type-4 UUID. Does not shrink."],"^R",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",10,"~:top-fn",["^ ","^46",false,"~:fixed-arity",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","~$opts"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",874,"^9",874,"^1>",["^1?",["^3S",["^1?",[["^3W"],["^3W","^4E"]]]]],"^1B","Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","~:jsdoc",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/set","^6","clojure/test/check/generators.cljc","^:",10,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"~:methods",[["^ ","^4D",1,"^46",false,"^4B","~$any"],["^ ","^4D",2,"^46",false,"^4B","^4@"]],"^7",874,"^9",874,"^49",2,"^4:",true,"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^1B","Generates a set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$one-of",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",327,"^8",7,"^9",327,"^:",13,"^1>",["^1?",["^3S",["^1?",[["~$generators"]]]]],"^1B","Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"^1;","~$clojure.test.check.generators/one-of","^6","clojure/test/check/generators.cljc","^:",13,"^43",["^1?",[["^4K"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",327,"^47","^4@","^9",327,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4K"]]]]],"^1B","Create a generator that randomly chooses a value from the list of\n  provided generators. Shrinks toward choosing an earlier generator,\n  as well as shrinking the value generated by the chosen generator.\n\n      (gen/sample (gen/one-of [gen/int gen/boolean (gen/vector gen/int)]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"~$uniform-integer",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1057,"^8",17,"^9",1057,"^:",32,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$bit-count"]]]]],"^1B","Generates an integer uniformly in the range 0..(2^bit-count-1)."],"^3R",true,"^1;","~$clojure.test.check.generators/uniform-integer","^6","clojure/test/check/generators.cljc","^:",32,"^43",["^1?",[["^4N"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1057,"^47","^4@","^9",1057,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4N"]]]]],"^1B","Generates an integer uniformly in the range 0..(2^bit-count-1)."],"~$any-printable",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1562,"^8",6,"^9",1562,"^:",19],"^1;","~$clojure.test.check.generators/any-printable","^6","clojure/test/check/generators.cljc","^:",19,"^8",1,"^7",1562,"^9",1562,"^4B","^4@","^1B","Like any, but avoids characters that the shell will interpret as actions,\n  like 7 and 14 (bell and alternate character set command)"],"~$large-integer**",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",986,"^8",17,"^9",986,"^:",32,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$min","~$max"]]]]],"^1B","Like large-integer*, but assumes range includes zero."],"^3R",true,"^1;","~$clojure.test.check.generators/large-integer**","^6","clojure/test/check/generators.cljc","^:",32,"^43",["^1?",[["^4S","^4T"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",986,"^47","^4@","^9",986,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4S","^4T"]]]]],"^1B","Like large-integer*, but assumes range includes zero."],"~$MIN_NEG_VALUE",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1054,"^8",16,"^9",1054,"^:",29,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/MIN_NEG_VALUE","^6","clojure/test/check/generators.cljc","^:",29,"^8",1,"^7",1054,"^9",1054,"^4B","~$number"],"~$calc-long",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",221,"^8",8,"^9",221,"^:",17,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$factor","~$lower","~$upper"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/calc-long","^6","clojure/test/check/generators.cljc","^:",17,"^43",["^1?",[["^4Z","^4[","^50"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",221,"^47","^4X","^9",221,"^49",3,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4Z","^4[","^50"]]]]]],"~$vector-distinct",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",22,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",774,"^9",774,"^1>",["^1?",["^3S",["^1?",[["^3W"],["^3W","^4E"]]]]],"^1B","Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/vector-distinct","^6","clojure/test/check/generators.cljc","^:",22,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","^4@"]],"^7",774,"^9",774,"^49",2,"^4:",true,"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^1B","Generates a vector of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$double-exp-and-sign",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1124,"^8",17,"^9",1124,"^:",36,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$lower-bound","~$upper-bound"]]]]],"^1B","Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."],"^3R",true,"^1;","~$clojure.test.check.generators/double-exp-and-sign","^6","clojure/test/check/generators.cljc","^:",36,"^43",["^1?",[["^55","^56"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1124,"^9",1124,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^55","^56"]]]]],"^1B","Generates [exp sign], where exp is in [-1023, 1023] and sign is 1\n  or -1. Only generates values for exp and sign for which there are\n  doubles within the given bounds."],"~$MIN_INTEGER",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",958,"^8",16,"^9",958,"^:",27,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/MIN_INTEGER","^6","clojure/test/check/generators.cljc","^:",27,"^8",1,"^7",958,"^9",958,"^4B","^4X"],"^T",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",500,"^8",6,"^9",500,"^:",13],"^1;","~$clojure.test.check.generators/boolean","^6","clojure/test/check/generators.cljc","^:",13,"^8",1,"^7",500,"^9",500,"^4B","^4@","^1B","Generates one of `true` or `false`. Shrinks to `false`."],"~$list-distinct",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",20,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",799,"^9",799,"^1>",["^1?",["^3S",["^1?",[["^3W"],["^3W","^4E"]]]]],"^1B","Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/list-distinct","^6","clojure/test/check/generators.cljc","^:",20,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","^4@"]],"^7",799,"^9",799,"^49",2,"^4:",true,"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^1B","Generates a list of elements from the given generator, with the\n  guarantee that the elements will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$string-alphanumeric",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1313,"^8",6,"^9",1313,"^:",25],"^1;","~$clojure.test.check.generators/string-alphanumeric","^6","clojure/test/check/generators.cljc","^:",25,"^8",1,"^7",1313,"^9",1313,"^4B","^4@","^1B","Generate alphanumeric strings."],"^U",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",10,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["~$key-gen","~$val-gen"],["^5?","^5@","^4E"]]],"^1>",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",922,"^9",922,"^1>",["^1?",["^3S",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]]]],"^1B","Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/map","^6","clojure/test/check/generators.cljc","^:",10,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]],"^1>",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4@"]],"^7",922,"^9",922,"^49",3,"^4:",true,"^1>",["^1?",[["^5?","^5@"],["^5?","^5@","^4E"]]],"^1B","Create a generator that generates maps, with keys chosen from\n  `key-gen` and values chosen from `val-gen`.\n\n  If the key generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated maps\n    :min-elements  the min size of generated maps\n    :max-elements  the max size of generated maps\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct keys; it will be passed a map with\n                   `:gen` (the key-gen), `:num-elements`, and `:max-tries` and\n                   should return an exception","^4F",["^1?",["@param {...*} var_args"]]],"~$simple-type",["^ ","^1;","~$clojure.test.check.generators/simple-type","^6","clojure/test/check/generators.cljc","^7",1432,"^8",1,"^9",1432,"^:",17,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1432,"^8",6,"^9",1432,"^:",17],"^4B","^4@"],"^V",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1262,"^8",6,"^9",1262,"^:",10],"^1;","~$clojure.test.check.generators/char","^6","clojure/test/check/generators.cljc","^:",10,"^8",1,"^7",1262,"^9",1262,"^4B","^4@","^1B","Generates character from 0-255."],"~$pos-int",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",532,"^8",6,"^9",532,"^:",13],"^1;","~$clojure.test.check.generators/pos-int","^6","clojure/test/check/generators.cljc","^:",13,"^8",1,"^7",532,"^9",532,"^4B","^4@","^1B","Generate positive integers bounded by the generator's `size` parameter."],"~$bind",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",124,"^8",7,"^9",124,"^:",11,"^1>",["^1?",["^3S",["^1?",[["~$generator","~$f"]]]]],"^1B","Create a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."],"^1;","~$clojure.test.check.generators/bind","^6","clojure/test/check/generators.cljc","^:",11,"^43",["^1?",[["^5H","~$f"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",124,"^47","^4@","^9",124,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5H","~$f"]]]]],"^1B","Create a new generator that passes the result of `gen` into function\n  `f`. `f` should return a new generator. This allows you to create new\n  generators that depend on the value of other generators. For example,\n  to create a generator of permutations which first generates a\n  `num-elements` and then generates a shuffling of `(range num-elements)`:\n\n      (gen/bind gen/nat\n                ;; this function takes a value generated by\n                ;; the generator above and returns a new generator\n                ;; which shuffles the collection returned by `range`\n                (fn [num-elements]\n                  (gen/shuffle (range num-elements))))\n\n  Also see gen/let for a macro with similar functionality."],"~$symbol-ns",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1383,"^8",3,"^9",1383,"^:",12,"^19","0.5.9"],"^19","0.5.9","^1;","~$clojure.test.check.generators/symbol-ns","^6","clojure/test/check/generators.cljc","^:",12,"^8",1,"^7",1381,"^9",1383,"^4B","^4@","^1B","Generate symbols with namespaces."],"^4I",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1558,"^8",6,"^9",1558,"^:",9],"^1;","~$clojure.test.check.generators/any","^6","clojure/test/check/generators.cljc","^:",9,"^8",1,"^7",1558,"^9",1558,"^4B","^4@","^1B","A recursive generator that will generate many different, often nested, values"],"~$hashable?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1442,"^8",20,"^9",1442,"^:",29,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/hashable?","^6","clojure/test/check/generators.cljc","^:",29,"^43",["^1?",[["~$x"]]],"^44",null,"^45",["^1?",[null,null]],"^8",4,"^46",false,"^7",1442,"^47","^T","^9",1442,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"^W",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",597,"^8",3,"^9",597,"^:",10,"^19","0.6.0","^1>",["^1?",["^3S",["^1?",[["~$coll"]]]]],"^1B","Create a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."],"^19","0.6.0","^1;","~$clojure.test.check.generators/shuffle","^6","clojure/test/check/generators.cljc","^:",10,"^43",["^1?",[["^5O"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",595,"^47","^4@","^9",597,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5O"]]]]],"^1B","Create a generator that generates random permutations of\n  `coll`. Shrinks toward the original collection: `coll`. `coll` will\n  be coerced to a vector."],"~$container-type",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1450,"^8",7,"^9",1450,"^:",21,"^1>",["^1?",["^3S",["^1?",[["~$inner-type"]]]]]],"^1;","~$clojure.test.check.generators/container-type","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["^5R"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1450,"^47","^4@","^9",1450,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5R"]]]]]],"~$long->large-integer",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",965,"^8",17,"^9",965,"^:",36,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^4N","~$x","^4S","^4T"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/long->large-integer","^6","clojure/test/check/generators.cljc","^:",36,"^43",["^1?",[["^4N","~$x","^4S","^4T"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",965,"^47",["^P",["^4I","^4X"]],"^9",965,"^49",4,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4N","~$x","^4S","^4T"]]]]]],"~$s-pos-int",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",540,"^8",6,"^9",540,"^:",15],"^1;","~$clojure.test.check.generators/s-pos-int","^6","clojure/test/check/generators.cljc","^:",15,"^8",1,"^7",540,"^9",540,"^4B","^4@","^1B","Generate strictly positive integers bounded by the generator's `size` + 1"],"~$get-exponent",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1106,"^8",17,"^9",1106,"^:",29,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/get-exponent","^6","clojure/test/check/generators.cljc","^:",29,"^43",["^1?",[["~$x"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1106,"^47",["^P",["^4I","^4X"]],"^9",1106,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"~$char-symbol-noninitial",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1294,"^8",16,"^9",1294,"^:",38,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/char-symbol-noninitial","^6","clojure/test/check/generators.cljc","^:",38,"^8",1,"^7",1294,"^9",1294,"^4B","^4@","^1B","Generate characters that can be the char following first of a keyword or symbol."],"^X",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1254,"^8",24,"^9",1254,"^:",30,"^19","0.9.0"],"^19","0.9.0","^1;","~$clojure.test.check.generators/double","^6","clojure/test/check/generators.cljc","^:",30,"^8",1,"^7",1254,"^9",1254,"^4B",["^P",["^4I","^4@","~$clj-nil"]],"^1B","Generates 64-bit floating point numbers from the entire range,\n  including +/- infinity and NaN. Use double* for more control."],"~$MAX_POS_VALUE",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1053,"^8",16,"^9",1053,"^:",29,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/MAX_POS_VALUE","^6","clojure/test/check/generators.cljc","^:",29,"^8",1,"^7",1053,"^9",1053,"^4B","~$js"],"~$list-distinct-by",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",23,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",849,"^9",849,"^1>",["^1?",["^3S",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]]]],"^1B","Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/list-distinct-by","^6","clojure/test/check/generators.cljc","^:",23,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4@"]],"^7",849,"^9",849,"^49",3,"^4:",true,"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1B","Generates a list of elements from the given generator, with the\n  guarantee that (map key-fn the-list) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated list\n    :min-elements  the min size of generated list\n    :max-elements  the max size of generated list\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$block-bounds",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1166,"^8",17,"^9",1166,"^:",29,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$exp","~$sign"]]]]],"^1B","Returns [low high], the smallest and largest numbers in the given\n  range."],"^3R",true,"^1;","~$clojure.test.check.generators/block-bounds","^6","clojure/test/check/generators.cljc","^:",29,"^43",["^1?",[["^68","^69"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1166,"^47","~$cljs.core/IVector","^9",1166,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^68","^69"]]]]],"^1B","Returns [low high], the smallest and largest numbers in the given\n  range."],"~$char-alpha",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1284,"^8",6,"^9",1284,"^:",16],"^1;","~$clojure.test.check.generators/char-alpha","^6","clojure/test/check/generators.cljc","^:",16,"^8",1,"^7",1284,"^9",1284,"^4B","^4@","^1B","Generate alpha characters."],"~$generator?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]],"^1B","Test if `x` is a generator. Generators should be treated as opaque values."],"^1;","~$clojure.test.check.generators/generator?","^6","clojure/test/check/generators.cljc","^:",17,"^43",["^1?",[["~$x"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",30,"^47","^T","^9",30,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]],"^1B","Test if `x` is a generator. Generators should be treated as opaque values."],"~$char-symbol-special",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1290,"^8",16,"^9",1290,"^:",35,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/char-symbol-special","^6","clojure/test/check/generators.cljc","^:",35,"^8",1,"^7",1290,"^9",1290,"^4B","^4@","^1B","Generate non-alphanumeric characters that can be in a symbol."],"~$sample-seq",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",17,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^5H"],["^5H","~$max-size"]]],"^1>",["^1?",[["^5H"],["^5H","^6C"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",152,"^9",152,"^1>",["^1?",["^3S",["^1?",[["^5H"],["^5H","^6C"]]]]],"^1B","Return a sequence of realized values from `generator`.","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/sample-seq","^6","clojure/test/check/generators.cljc","^:",17,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^5H"],["^5H","^6C"]]],"^1>",["^1?",[["^5H"],["^5H","^6C"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^5H"],["^5H","^6C"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","~$cljs.core/LazySeq"]],"^7",152,"^9",152,"^49",2,"^4:",true,"^1>",["^1?",[["^5H"],["^5H","^6C"]]],"^1B","Return a sequence of realized values from `generator`.","^4F",["^1?",["@param {...*} var_args"]]],"^Y",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",522,"^8",6,"^9",522,"^:",9],"^1;","~$clojure.test.check.generators/int","^6","clojure/test/check/generators.cljc","^:",9,"^8",1,"^7",522,"^9",522,"^4B","^4@","^1B","Generates a positive or negative integer bounded by the generator's\n  `size` parameter."],"~$gen-pure",["^ ","^4<",true,"^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",45,"^8",7,"^9",45,"^:",15,"^1>",["^1?",["^3S",["^1?",[["~$value"]]]]],"^1B","Internal function.","^4<",true],"^1;","~$clojure.test.check.generators/gen-pure","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["^6H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",45,"^47","^4@","^9",45,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^6H"]]]]],"^1B","Internal function."],"~$recursive-gen",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1503,"^8",3,"^9",1503,"^:",16,"^19","0.5.9","^1>",["^1?",["^3S",["^1?",[["~$container-gen-fn","~$scalar-gen"]]]]],"^1B","This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"],"^19","0.5.9","^1;","~$clojure.test.check.generators/recursive-gen","^6","clojure/test/check/generators.cljc","^:",16,"^43",["^1?",[["^6K","^6L"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1501,"^47","^4@","^9",1503,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^6K","^6L"]]]]],"^1B","This is a helper for writing recursive (tree-shaped) generators. The first\n  argument should be a function that takes a generator as an argument, and\n  produces another generator that 'contains' that generator. The vector function\n  in this namespace is a simple example. The second argument is a scalar\n  generator, like boolean. For example, to produce a tree of booleans:\n\n    (gen/recursive-gen gen/vector gen/boolean)\n\n  Vectors or maps either recurring or containing booleans or integers:\n\n    (gen/recursive-gen (fn [inner] (gen/one-of [(gen/vector inner)\n                                                (gen/map inner inner)]))\n                       (gen/one-of [gen/boolean gen/int]))\n\n  Note that raw scalar values will be generated as well. To prevent this, you\n  can wrap the returned generator with the function passed as the first arg,\n  e.g.:\n\n    (gen/vector (gen/recursive-gen gen/vector gen/boolean))"],"~$char-alpha-numeric",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1278,"^8",3,"^9",1278,"^:",21,"~:deprecated","0.6.0"],"^1;","~$clojure.test.check.generators/char-alpha-numeric","^6","clojure/test/check/generators.cljc","^:",21,"^8",1,"^7",1277,"^6O","0.6.0","^9",1278,"^4B","^4@","^1B","Deprecated - use char-alphanumeric instead.\n\n  Generate alphanumeric characters."],"~$backwards-shrinking-significand",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1097,"^8",16,"^9",1097,"^:",47,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/backwards-shrinking-significand","^6","clojure/test/check/generators.cljc","^:",47,"^8",1,"^7",1097,"^9",1097,"^4B","^4@","^1B","Generates a 52-bit non-negative integer that shrinks toward having\n  fewer lower-order bits (and shrinks to 0 if possible)."],"~$return",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",105,"^8",7,"^9",105,"^:",13,"^1>",["^1?",["^3S",["^1?",[["^6H"]]]]],"^1B","Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"],"^1;","~$clojure.test.check.generators/return","^6","clojure/test/check/generators.cljc","^:",13,"^43",["^1?",[["^6H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",105,"^47","^4@","^9",105,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^6H"]]]]],"^1B","Create a generator that always returns `value`,\n  and never shrinks. You can think of this as\n  the `constantly` of generators. E.g.:\n\n      (gen/sample (gen/return 42))\n      => (42 42 42 42 42 42 42 42 42 42)"],"~$gen-bind",["^ ","^4<",true,"^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",61,"^8",7,"^9",61,"^:",15,"^1>",["^1?",["^3S",["^1?",[[["^ ","~$h","^4="],"~$k"]]]]],"^1B","Internal function.","^4<",true],"^1;","~$clojure.test.check.generators/gen-bind","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["~$p__68239","~$k"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",61,"^47","^4@","^9",61,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[[["^ ","~$h","^4="],"~$k"]]]]],"^1B","Internal function."],"~$scale",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",284,"^8",7,"^9",284,"^:",12,"^1>",["^1?",["^3S",["^1?",[["~$f","^5H"]]]]],"^1B","Create a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])","^19","0.8.0"],"^19","0.8.0","^1;","~$clojure.test.check.generators/scale","^6","clojure/test/check/generators.cljc","^:",12,"^43",["^1?",[["~$f","^5H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",284,"^47","^4@","^9",284,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$f","^5H"]]]]],"^1B","Create a new generator that modifies the size parameter by the\n  given function. Intended to support generators with sizes that need\n  to grow at different rates compared to the normal linear scaling.\n\n      (gen/sample (gen/tuple (gen/scale #(/ % 10) gen/nat)\n                             gen/nat\n                             (gen/scale #(* % 10) gen/nat)))\n      => ([0 0 0]  [0 1 2]  [0 2 13] [0 1 6]  [0 1 23]\n          [0 2 42] [0 1 26] [0 1 12] [0 1 12] [0 0 3])"],"~$+-or---digit?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1329,"^8",8,"^9",1329,"^:",21,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$c","~$d"]]]]],"^1B","Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."],"^3R",true,"^1;","~$clojure.test.check.generators/+-or---digit?","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["~$c","~$d"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1329,"^47","^T","^9",1329,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$c","~$d"]]]]],"^1B","Returns true if c is \\+ or \\- and d is non-nil and a digit.\n\n  Symbols that start with +3 or -2 are not readable because they look\n  like numbers."],"^Z",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1373,"^8",6,"^9",1373,"^:",12],"^1;","~$clojure.test.check.generators/symbol","^6","clojure/test/check/generators.cljc","^:",12,"^8",1,"^7",1373,"^9",1373,"^4B","^4@","^1B","Generate symbols without namespaces."],"~$such-that-helper",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",401,"^8",8,"^9",401,"^:",24,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$pred","^3W",["^ ","~:keys",["^41","^40"]],"^3X","^3Y"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/such-that-helper","^6","clojure/test/check/generators.cljc","^:",24,"^43",["^1?",[["^72","^3W","~$p__68618","^3X","^3Y"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",401,"^47","^48","^9",401,"^49",5,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^72","^3W",["^ ","^73",["^41","^40"]],"^3X","^3Y"]]]]]],"~$double-finite",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1178,"^8",17,"^9",1178,"^:",30,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^55","^56"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/double-finite","^6","clojure/test/check/generators.cljc","^:",30,"^43",["^1?",[["^55","^56"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1178,"^47",["^P",["^4I","^4@"]],"^9",1178,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^55","^56"]]]]]],"~$pick",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",342,"^8",8,"^9",342,"^:",12,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$likelihoods","~$n"]]]]],"^1B","Returns an index into the `likelihoods` sequence."],"^3R",true,"^1;","~$clojure.test.check.generators/pick","^6","clojure/test/check/generators.cljc","^:",12,"^43",["^1?",[["^79","~$n"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",342,"^47","^4X","^9",342,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^79","~$n"]]]]],"^1B","Returns an index into the `likelihoods` sequence."],"~$char-symbol-initial",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1300,"^8",16,"^9",1300,"^:",35,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/char-symbol-initial","^6","clojure/test/check/generators.cljc","^:",35,"^8",1,"^7",1300,"^9",1300,"^4B","^4@","^1B","Generate characters that can be the first char of a keyword or symbol."],"~$char-alphanumeric",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1270,"^8",6,"^9",1270,"^:",23],"^1;","~$clojure.test.check.generators/char-alphanumeric","^6","clojure/test/check/generators.cljc","^:",23,"^8",1,"^7",1270,"^9",1270,"^4B","^4@","^1B","Generate alphanumeric characters."],"~$make-size-range-seq",["^ ","^4<",true,"^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",146,"^8",7,"^9",146,"^:",26,"^1>",["^1?",["^3S",["^1?",[["^6C"]]]]],"^1B","Internal function.","^4<",true],"^1;","~$clojure.test.check.generators/make-size-range-seq","^6","clojure/test/check/generators.cljc","^:",26,"^43",["^1?",[["^6C"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",146,"^47",["^P",["^4I","~$cljs.core/Cycle"]],"^9",146,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^6C"]]]]],"^1B","Internal function."],"~$choose",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",298,"^8",7,"^9",298,"^:",13,"^1>",["^1?",["^3S",["^1?",[["^4[","^50"]]]]],"^1B","Create a generator that returns integer numbers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"],"^1;","~$clojure.test.check.generators/choose","^6","clojure/test/check/generators.cljc","^:",13,"^43",["^1?",[["^4[","^50"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",298,"^47","^4@","^9",298,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^4[","^50"]]]]],"^1B","Create a generator that returns integer numbers in the range\n     `lower` to `upper`, inclusive.\n\n         (gen/sample (gen/choose 200 800))\n         => (331 241 593 339 643 718 688 473 247 694)"],"~$string-ascii",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1309,"^8",6,"^9",1309,"^:",18],"^1;","~$clojure.test.check.generators/string-ascii","^6","clojure/test/check/generators.cljc","^:",18,"^8",1,"^7",1309,"^9",1309,"^4B","^4@","^1B","Generate ascii strings."],"^[",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",17,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",898,"^9",898,"^1>",["^1?",["^3S",["^1?",[["^3W"],["^3W","^4E"]]]]],"^1B","Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/sorted-set","^6","clojure/test/check/generators.cljc","^:",17,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3W"],["^3W","^4E"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","^4@"]],"^7",898,"^9",898,"^49",2,"^4:",true,"^1>",["^1?",[["^3W"],["^3W","^4E"]]],"^1B","Generates a sorted set of elements from the given generator.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated set\n    :min-elements  the min size of generated set\n    :max-elements  the max size of generated set\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$make-gen",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",35,"^8",8,"^9",35,"^:",16,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$generator-fn"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/make-gen","^6","clojure/test/check/generators.cljc","^:",16,"^43",["^1?",[["^7H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",35,"^47","^4@","^9",35,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^7H"]]]]]],"~$Generator",["^ ","~:num-fields",1,"~:protocols",["^P",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^1;","^4@","^6","clojure/test/check/generators.cljc","^:",21,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",28,"~:record",true,"^9",28,"^4B","~$function","~:skip-protocol-flag",["^P",["^7M","^7N","^7O","^7P","^7Q","^7R","^7S","^7T","^7U","^7V","^7W","^7X","^7Y","^7Z","^7["]]],"~$frequency",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",351,"^8",7,"^9",351,"^:",16,"^1>",["^1?",["^3S",["^1?",[["~$pairs"]]]]],"^1B","Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"^1;","~$clojure.test.check.generators/frequency","^6","clojure/test/check/generators.cljc","^:",16,"^43",["^1?",[["^86"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",351,"^47","^4@","^9",351,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^86"]]]]],"^1B","Create a generator that chooses a generator from `pairs` based on the\n  provided likelihoods. The likelihood of a given generator being chosen is\n  its likelihood divided by the sum of all likelihoods. Shrinks toward\n  choosing an earlier generator, as well as shrinking the value generated\n  by the chosen generator.\n\n  Examples:\n\n      (gen/sample (gen/frequency [[5 gen/int] [3 (gen/vector gen/int)] [2 gen/boolean]]))\n      => (true [] -1 [0] [1 -4 -4 1] true 4 [] 6 true)"],"~$double*",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1212,"^8",7,"^9",1212,"^:",14,"^1>",["^1?",["^3S",["^1?",[[["^ ","^73",["~$infinite?","~$NaN?","^4S","^4T"],"~:or",["^ ","^89",true,"^8:",true]]]]]]],"^1B","Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity.","^19","0.9.0"],"^19","0.9.0","^1;","~$clojure.test.check.generators/double*","^6","clojure/test/check/generators.cljc","^:",14,"^43",["^1?",[["~$p__69157"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1212,"^47",["^P",["^4I","^4@","^61"]],"^9",1212,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[[["^ ","^73",["^89","^8:","^4S","^4T"],"^8;",["^ ","^89",true,"^8:",true]]]]]]],"^1B","Generates a 64-bit floating point number. Options:\n\n    :infinite? - whether +/- infinity can be generated (default true)\n    :NaN?      - whether NaN can be generated (default true)\n    :min       - minimum value (inclusive, default none)\n    :max       - maximum value (inclusive, default none)\n\n  Note that the min/max options must be finite numbers. Supplying a\n  min precludes -Infinity, and supplying a max precludes +Infinity."],"~$generate",["^ ","^3Q",null,"^5",["^ ","^19","0.8.0","^6","clojure/test/check/generators.cljc","^:",15,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","~$seed"]]],"^1>",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]],"^45",["^1?",[null,null,null]]],"^8",7,"^7",178,"^9",178,"^1>",["^1?",["^3S",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]]]],"^1B","Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.8.0","^1;","~$clojure.test.check.generators/generate","^6","clojure/test/check/generators.cljc","^:",15,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]],"^1>",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]],"^45",["^1?",[null,null,null]]],"^43",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4I"]],"^7",178,"^9",178,"^49",3,"^4:",true,"^1>",["^1?",[["^5H"],["^5H","^3Y"],["^5H","^3Y","^8?"]]],"^1B","Returns a single sample value from the generator.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.\n\n  Optional args:\n\n  - size: the abstract size parameter, defaults to 30\n  - seed: the seed for the random number generator, an integer","^4F",["^1?",["@param {...*} var_args"]]],"~$distinct-by?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",703,"^8",17,"^9",703,"^:",29,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$f","^5O"]]]]],"^1B","Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."],"^3R",true,"^1;","~$clojure.test.check.generators/distinct-by?","^6","clojure/test/check/generators.cljc","^:",29,"^43",["^1?",[["~$f","^5O"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",703,"^47",["^P",["^T","^4I"]],"^9",703,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$f","^5O"]]]]],"^1B","Like clojure.core/distinct? but takes a collection instead of varargs,\n  and returns true for empty collections."],"~$sized",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",247,"^8",7,"^9",247,"^:",12,"^1>",["^1?",["^3S",["^1?",[["~$sized-gen"]]]]],"^1B","Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n      TODO: example"],"^1;","~$clojure.test.check.generators/sized","^6","clojure/test/check/generators.cljc","^:",12,"^43",["^1?",[["^8D"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",247,"^47","^4@","^9",247,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^8D"]]]]],"^1B","Create a generator that depends on the size parameter.\n  `sized-gen` is a function that takes an integer and returns\n  a generator.\n\n      TODO: example"],"~$s-neg-int",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",544,"^8",6,"^9",544,"^:",15],"^1;","~$clojure.test.check.generators/s-neg-int","^6","clojure/test/check/generators.cljc","^:",15,"^8",1,"^7",544,"^9",544,"^4B","^4@","^1B","Generate strictly negative integers bounded by the generator's `size` + 1"],"~$nat",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",527,"^8",6,"^9",527,"^:",9],"^1;","~$clojure.test.check.generators/nat","^6","clojure/test/check/generators.cljc","^:",9,"^8",1,"^7",527,"^9",527,"^4B","^4@","^1B","Generates non-negative integers bounded by the generator's `size`\n  parameter. Shrinks to zero."],"~$coll-distinct-by",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",728,"^8",17,"^9",728,"^:",33,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^3T","^3U","~$allows-dupes?","~$ordered?","^3W",["^ ","^73",["^3Z","^3[","~$max-elements","^40","^41"],"^8;",["^ ","^40",10,"^41",["^1?",["~$fn*",["~$p1__68823#"],["^1?",["~$ex-info","Couldn't generate enough distinct elements!","^8O"]]]]]]]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/coll-distinct-by","^6","clojure/test/check/generators.cljc","^:",33,"^43",["^1?",[["^3T","^3U","^8K","^8L","^3W","~$p__68836"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",728,"^47","^4@","^9",728,"^49",6,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3T","^3U","^8K","^8L","^3W",["^ ","^73",["^3Z","^3[","^8M","^40","^41"],"^8;",["^ ","^40",10,"^41",["^1?",["^8N",["^8O"],["^1?",["^8P","Couldn't generate enough distinct elements!","^8O"]]]]]]]]]]]],"~$resize-symbolish-generator",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1350,"^8",17,"^9",1350,"^:",43,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$g"]]]]],"^1B","Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."],"^3R",true,"^1;","~$clojure.test.check.generators/resize-symbolish-generator","^6","clojure/test/check/generators.cljc","^:",43,"^43",["^1?",[["~$g"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1350,"^47","^4@","^9",1350,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$g"]]]]],"^1B","Scales the sizing down on a keyword or symbol generator so as to\n  make it reasonable."],"~$the-shuffle-fn",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",710,"^8",17,"^9",710,"^:",31,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^3X","^5O"]]]]],"^1B","Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."],"^3R",true,"^1;","~$clojure.test.check.generators/the-shuffle-fn","^6","clojure/test/check/generators.cljc","^:",31,"^43",["^1?",[["^3X","^5O"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",710,"^47",["^P",[null,"~$clj","^4I"]],"^9",710,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3X","^5O"]]]]],"^1B","Returns a shuffled version of coll according to the rng.\n\n  Note that this is not a generator, it is just a utility function."],"~$tuple",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",12,"^4C",["^ ","^46",true,"^4D",0,"^49",0,"^43",[["^1?",["^4K"]]],"^1>",["^1?",[["~$&","^4K"]]],"^45",["^1?",[null]]],"^8",7,"^7",504,"^9",504,"^1>",["^1?",["^3S",["^1?",[["~$&","^4K"]]]]],"^1B","Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/tuple","^6","clojure/test/check/generators.cljc","^:",12,"^4C",["^ ","^46",true,"^4D",0,"^49",0,"^43",[["^1?",["^4K"]]],"^1>",["^1?",[["~$&","^4K"]]],"^45",["^1?",[null]]],"^43",[["^1?",["^4K"]]],"^44",null,"^4D",0,"^45",["^1?",[null]],"^8",1,"^46",true,"^4H",[["^ ","^4D",0,"^46",true,"^4B","^4@"]],"^7",504,"^47","^4I","^9",504,"^49",0,"^4:",true,"^1>",["^1?",[["~$&","^4K"]]],"^1B","Create a generator that returns a vector, whose elements are chosen\n  from the generators in the same position. The individual elements shrink\n  according to their generator, but the value will never shrink in count.\n\n  Examples:\n\n      (def t (tuple gen/int gen/boolean))\n      (sample t)\n      ;; => ([1 true] [2 true] [2 false] [1 false] [0 true] [-2 false] [-6 false]\n      ;; =>  [3 true] [-4 false] [9 true]))","^4F",["^1?",["@param {...*} var_args"]]],"~$lazy-random-states",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",72,"^8",7,"^9",72,"^:",25,"^1>",["^1?",["^3S",["^1?",[["~$rr"]]]]],"^1B","Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators."],"^1;","~$clojure.test.check.generators/lazy-random-states","^6","clojure/test/check/generators.cljc","^:",25,"^43",["^1?",[["^8["]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",72,"^47","^6E","^9",72,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^8["]]]]],"^1B","Internal function.\n\n  Given a random number generator, returns an infinite lazy sequence\n  of random number generators."],"~$map->Generator",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",21,"^8",12,"^81",true,"~:factory","~:map","^7",28,"^9",28,"^1>",["^1?",["^3S",["^1?",[["~$G__68071"]]]]],"^1B","Factory function for clojure.test.check.generators/Generator, taking a map of keywords to field values."],"^1;","~$clojure.test.check.generators/map->Generator","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["^94"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^81",true,"^46",false,"^92","^93","^7",28,"^47","^4@","^9",28,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^94"]]]]],"^1B","Factory function for clojure.test.check.generators/Generator, taking a map of keywords to field values."],"~$shrink-2",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",493,"^8",7,"^9",493,"^:",15,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."],"^1;","~$clojure.test.check.generators/shrink-2","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["^3W"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",493,"^47","^4@","^9",493,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Create a new generator like `gen`, but will consider nodes for shrinking\n  even if their parent passes the test (up to one additional level)."],"~$string-alpha-numeric",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1318,"^8",3,"^9",1318,"^:",23,"^6O","0.6.0"],"^1;","~$clojure.test.check.generators/string-alpha-numeric","^6","clojure/test/check/generators.cljc","^:",23,"^8",1,"^7",1317,"^6O","0.6.0","^9",1318,"^4B","^4@","^1B","Deprecated - use string-alphanumeric instead.\n\n  Generate alphanumeric strings."],"~$resize",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",262,"^8",7,"^9",262,"^:",13,"^1>",["^1?",["^3S",["^1?",[["~$n","^5H"]]]]],"^1B","Create a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"],"^1;","~$clojure.test.check.generators/resize","^6","clojure/test/check/generators.cljc","^:",13,"^43",["^1?",[["~$n","^5H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",262,"^47","^4@","^9",262,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$n","^5H"]]]]],"^1B","Create a new generator with `size` always bound to `n`.\n\n      (gen/sample (gen/set (gen/resize 200 gen/double)))\n      => (#{}\n          #{-4.994772362980037E147}\n          #{-4.234418056487335E-146}\n          #{}\n          #{}\n          #{}\n          #{NaN}\n          #{8.142414100982609E-63}\n          #{-3.58429955903876E-159 2.8563794617604296E-154\n            4.1021360195776005E-100 1.9084564045332549E-38}\n          #{-2.1582818131881376E83 -5.8460065493236117E48 9.729260993803226E166})"],"~$digit?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1324,"^8",8,"^9",1324,"^:",14,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$d"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/digit?","^6","clojure/test/check/generators.cljc","^:",14,"^43",["^1?",[["~$d"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1324,"^47","^4I","^9",1324,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$d"]]]]]],"~$scalb",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1076,"^8",17,"^9",1076,"^:",22,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$x","^68"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/scalb","^6","clojure/test/check/generators.cljc","^:",22,"^43",["^1?",[["~$x","^68"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1076,"^47","^4X","^9",1076,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$x","^68"]]]]]],"~$neg-int",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",536,"^8",6,"^9",536,"^:",13],"^1;","~$clojure.test.check.generators/neg-int","^6","clojure/test/check/generators.cljc","^:",13,"^8",1,"^7",536,"^9",536,"^4B","^4@","^1B","Generate negative integers bounded by the generator's `size` parameter."],"^1L",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1305,"^8",6,"^9",1305,"^:",12],"^1;","~$clojure.test.check.generators/string","^6","clojure/test/check/generators.cljc","^:",12,"^8",1,"^7",1305,"^9",1305,"^4B","^4@","^1B","Generate strings. May generate unprintable characters."],"^10",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",13,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^1>",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^45",["^1?",[null,null,null]]],"^8",7,"^7",548,"^9",548,"^1>",["^1?",["^3S",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]]]],"^1B","Create a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter.","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/vector","^6","clojure/test/check/generators.cljc","^:",13,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^1>",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^45",["^1?",[null,null,null]]],"^43",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4@"],["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4@"]],"^7",548,"^9",548,"^49",3,"^4:",true,"^1>",["^1?",[["^5H"],["^5H","^3Z"],["^5H","^3[","^8M"]]],"^1B","Create a generator of vectors whose elements are chosen from\n  `generator`. The count of the vector will be bounded by the `size`\n  generator parameter.","^4F",["^1?",["@param {...*} var_args"]]],"~$large-integer",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1020,"^8",24,"^9",1020,"^:",37,"^19","0.9.0"],"^19","0.9.0","^1;","~$clojure.test.check.generators/large-integer","^6","clojure/test/check/generators.cljc","^:",37,"^8",1,"^7",1020,"^9",1020,"^4B","^4I","^1B","Generates a platform-native integer from the full available range\n  (in clj, 64-bit Longs, and in cljs, numbers between -(2^53 - 1) and\n  (2^53 - 1)).\n\n  Use large-integer* for more control."],"~$keyword-ns",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1367,"^8",3,"^9",1367,"^:",13,"^19","0.5.9"],"^19","0.5.9","^1;","~$clojure.test.check.generators/keyword-ns","^6","clojure/test/check/generators.cljc","^:",13,"^8",1,"^7",1365,"^9",1367,"^4B","^4@","^1B","Generate keywords with namespaces."],"^11",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",462,"^8",7,"^9",462,"^:",16,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"],"^1;","~$clojure.test.check.generators/not-empty","^6","clojure/test/check/generators.cljc","^:",16,"^43",["^1?",[["^3W"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",462,"^47","^4I","^9",462,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Modifies a generator so that it doesn't generate empty collections.\n\n  Examples:\n\n      ;; generate a vector of booleans, but never the empty vector\n      (gen/sample (gen/not-empty (gen/vector gen/boolean)))\n      => ([false]\n          [false false]\n          [false false]\n          [false false false]\n          [false false false false]\n          [false true true]\n          [true false false false]\n          [true]\n          [true true true false false true false]\n          [false true true true false true true true false])"],"~$gen-raw-long",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",951,"^8",16,"^9",951,"^:",28,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/gen-raw-long","^6","clojure/test/check/generators.cljc","^:",28,"^8",1,"^7",951,"^9",951,"^4B","^4@","^1B","Generates a single uniformly random long, does not shrink."],"~$NAN",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1055,"^8",16,"^9",1055,"^:",19,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/NAN","^6","clojure/test/check/generators.cljc","^:",19,"^8",1,"^7",1055,"^9",1055,"^4B","^64"],"~$elements",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",390,"^8",7,"^9",390,"^:",15,"^1>",["^1?",["^3S",["^1?",[["^5O"]]]]],"^1B","Create a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"],"^1;","~$clojure.test.check.generators/elements","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["^5O"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",390,"^47","^4@","^9",390,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5O"]]]]],"^1B","Create a generator that randomly chooses an element from `coll`.\n\n      (gen/sample (gen/elements [:foo :bar :baz]))\n      => (:foo :baz :baz :bar :foo :foo :bar :bar :foo :bar)"],"~$default-such-that-opts",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",415,"^8",3,"^9",415,"^:",25,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/default-such-that-opts","^6","clojure/test/check/generators.cljc","^:",25,"^8",1,"^7",414,"^9",415,"^4B","^7Z"],"~$fifty-two-bit-reverse",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1081,"^8",17,"^9",1081,"^:",38,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$n"]]]]],"^1B","Bit-reverses an integer in the range [0, 2^52)."],"^3R",true,"^1;","~$clojure.test.check.generators/fifty-two-bit-reverse","^6","clojure/test/check/generators.cljc","^:",38,"^43",["^1?",[["~$n"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1081,"^47","^4X","^9",1081,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$n"]]]]],"^1B","Bit-reverses an integer in the range [0, 2^52)."],"~$POS_INFINITY",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1051,"^8",16,"^9",1051,"^:",28,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/POS_INFINITY","^6","clojure/test/check/generators.cljc","^:",28,"^8",1,"^7",1051,"^9",1051,"^4B","^64"],"~$sample",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",13,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^5H"],["^5H","~$num-samples"]]],"^1>",["^1?",[["^5H"],["^5H","^9V"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",162,"^9",162,"^1>",["^1?",["^3S",["^1?",[["^5H"],["^5H","^9V"]]]]],"^1B","Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/sample","^6","clojure/test/check/generators.cljc","^:",13,"^4C",["^ ","^46",false,"^4D",2,"^49",2,"^43",["^1?",[["^5H"],["^5H","^9V"]]],"^1>",["^1?",[["^5H"],["^5H","^9V"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^5H"],["^5H","^9V"]]],"^44",null,"^4D",2,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",1,"^46",false,"^4B","^4I"],["^ ","^4D",2,"^46",false,"^4B","^6E"]],"^7",162,"^9",162,"^49",2,"^4:",true,"^1>",["^1?",[["^5H"],["^5H","^9V"]]],"^1B","Return a sequence of `num-samples` (default 10)\n  realized values from `generator`.\n\n  The sequence starts with small values from the generator, which\n  probably do not reflect the variety of values that will be generated\n  during a longer test run.\n\n  Note that this function is a dev helper and is not meant to be used\n  to build other generators.","^4F",["^1?",["@param {...*} var_args"]]],"~$randomized",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1491,"^8",17,"^9",1491,"^:",27,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$func"]]]]],"^1B","Like sized, but passes an rng instead of a size."],"^3R",true,"^1;","~$clojure.test.check.generators/randomized","^6","clojure/test/check/generators.cljc","^:",27,"^43",["^1?",[["^9Y"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1491,"^47","^4@","^9",1491,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^9Y"]]]]],"^1B","Like sized, but passes an rng instead of a size."],"~$NEG_INFINITY",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1052,"^8",16,"^9",1052,"^:",28,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/NEG_INFINITY","^6","clojure/test/check/generators.cljc","^:",28,"^8",1,"^7",1052,"^9",1052,"^4B","^64"],"^12",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",579,"^8",7,"^9",579,"^:",11,"^1>",["^1?",["^3S",["^1?",[["^5H"]]]]],"^1B","Like `vector`, but generates lists."],"^1;","~$clojure.test.check.generators/list","^6","clojure/test/check/generators.cljc","^:",11,"^43",["^1?",[["^5H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",579,"^47","^4@","^9",579,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5H"]]]]],"^1B","Like `vector`, but generates lists."],"~$large-integer*",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",998,"^8",7,"^9",998,"^:",21,"^1>",["^1?",["^3S",["^1?",[[["^ ","^73",["^4S","^4T"]]]]]]],"^1B","Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)","^19","0.9.0"],"^19","0.9.0","^1;","~$clojure.test.check.generators/large-integer*","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["~$p__68997"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",998,"^47","^4I","^9",998,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[[["^ ","^73",["^4S","^4T"]]]]]]],"^1B","Like large-integer, but accepts options:\n\n    :min  the minimum integer (inclusive)\n    :max  the maximum integer (inclusive)\n\n  Both :min and :max are optional.\n\n      (gen/sample (gen/large-integer* {:min 9000 :max 10000}))\n      => (9000 9001 9001 9002 9000 9003 9006 9030 9005 9044)"],"~$abs",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",961,"^8",17,"^9",961,"^:",20,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/abs","^6","clojure/test/check/generators.cljc","^:",20,"^43",["^1?",[["~$x"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",961,"^47","^4I","^9",961,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$x"]]]]]],"^13",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1357,"^8",6,"^9",1357,"^:",13],"^1;","~$clojure.test.check.generators/keyword","^6","clojure/test/check/generators.cljc","^:",13,"^8",1,"^7",1357,"^9",1357,"^4B","^4@","^1B","Generate keywords without namespaces."],"~$gen-tuple",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",83,"^8",8,"^9",83,"^:",17,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$gens"]]]]],"^1B","Takes a collection of generators and returns a generator of vectors."],"^3R",true,"^1;","~$clojure.test.check.generators/gen-tuple","^6","clojure/test/check/generators.cljc","^:",17,"^43",["^1?",[["^:9"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",83,"^47","^4@","^9",83,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^:9"]]]]],"^1B","Takes a collection of generators and returns a generator of vectors."],"~$bind-helper",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",115,"^8",8,"^9",115,"^:",19,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$f"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/bind-helper","^6","clojure/test/check/generators.cljc","^:",19,"^43",["^1?",[["~$f"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",115,"^47","^83","^9",115,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$f"]]]]]],"^14",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",15,"^4C",["^ ","^46",true,"^4D",0,"^49",0,"^43",[["^1?",["~$kvs"]]],"^1>",["^1?",[["~$&","^:="]]],"^45",["^1?",[null]]],"^8",7,"^7",624,"^9",624,"^1>",["^1?",["^3S",["^1?",[["~$&","^:="]]]]],"^1B","Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/hash-map","^6","clojure/test/check/generators.cljc","^:",15,"^4C",["^ ","^46",true,"^4D",0,"^49",0,"^43",[["^1?",["^:="]]],"^1>",["^1?",[["~$&","^:="]]],"^45",["^1?",[null]]],"^43",[["^1?",["^:="]]],"^44",null,"^4D",0,"^45",["^1?",[null]],"^8",1,"^46",true,"^4H",[["^ ","^4D",0,"^46",true,"^4B","^4@"]],"^7",624,"^47","^4I","^9",624,"^49",0,"^4:",true,"^1>",["^1?",[["~$&","^:="]]],"^1B","Like clojure.core/hash-map, except the values are generators.\n   Returns a generator that makes maps with the supplied keys and\n   values generated using the supplied generators.\n\n       (gen/sample (gen/hash-map :a gen/boolean :b gen/nat))\n       => ({:a false, :b 0}\n           {:a true,  :b 1}\n           {:a false, :b 2}\n           {:a true,  :b 2}\n           {:a false, :b 4}\n           {:a false, :b 2}\n           {:a true,  :b 3}\n           {:a true,  :b 4}\n           {:a false, :b 1}\n           {:a false, :b 0})","^4F",["^1?",["@param {...*} var_args"]]],"~$call-gen",["^ ","^4<",true,"^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",39,"^8",7,"^9",39,"^:",15,"^1>",["^1?",["^3S",["^1?",[[["^ ","^7H","^4="],"~$rnd","^3Y"]]]]],"^1B","Internal function.","^4<",true],"^1;","~$clojure.test.check.generators/call-gen","^6","clojure/test/check/generators.cljc","^:",15,"^43",["^1?",[["~$p__68214","^:@","^3Y"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",39,"^47","^4I","^9",39,"^49",3,"^4:",true,"^1>",["^1?",["^3S",["^1?",[[["^ ","^7H","^4="],"^:@","^3Y"]]]]],"^1B","Internal function."],"~$rand-range",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",242,"^8",8,"^9",242,"^:",18,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^:@","^4[","^50"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/rand-range","^6","clojure/test/check/generators.cljc","^:",18,"^43",["^1?",[["^:@","^4[","^50"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",242,"^47","^4X","^9",242,"^49",3,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^:@","^4[","^50"]]]]]],"~$ratio",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1389,"^8",6,"^9",1389,"^:",11],"^1;","~$clojure.test.check.generators/ratio","^6","clojure/test/check/generators.cljc","^:",11,"^8",1,"^7",1389,"^9",1389,"^4B","^4@","^1B","Generates a `clojure.lang.Ratio`. Shrinks toward 0. Not all values generated\n  will be ratios, as many values returned by `/` are not ratios."],"~$transient-set-contains?",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",654,"^8",17,"^9",654,"^:",40,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$s","~$k"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/transient-set-contains?","^6","clojure/test/check/generators.cljc","^:",40,"^43",["^1?",[["~$s","~$k"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",654,"^47","^T","^9",654,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$s","~$k"]]]]]],"~$such-that",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",16,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^72","^3W"],["^72","^3W","~$max-tries-or-opts"]]],"^1>",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",422,"^9",422,"^1>",["^1?",["^3S",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]]]],"^1B","Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception","^4F",["^1?",["@param {...*} var_args"]]],"^1;","~$clojure.test.check.generators/such-that","^6","clojure/test/check/generators.cljc","^:",16,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]],"^1>",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4@"]],"^7",422,"^9",422,"^49",3,"^4:",true,"^1>",["^1?",[["^72","^3W"],["^72","^3W","^:J"]]],"^1B","Create a generator that generates values from `gen` that satisfy predicate\n  `pred`. Care is needed to ensure there is a high chance `gen` will satisfy\n  `pred`. By default, `such-that` will try 10 times to generate a value that\n  satisfies the predicate. If no value passes this predicate after this number\n  of iterations, a runtime exception will be thrown. Note also that each\n  time such-that retries, it will increase the size parameter.\n\n  Examples:\n\n      ;; generate non-empty vectors of integers\n      ;; (note, gen/not-empty does exactly this)\n      (gen/such-that not-empty (gen/vector gen/int))\n\n  You can customize `such-that` by passing an optional third argument, which can\n  either be an integer representing the maximum number of times test.check\n  will try to generate a value matching the predicate, or a map:\n\n      :max-tries  positive integer, the maximum number of tries (default 10)\n      :ex-fn      a function of one arg that will be called if test.check cannot\n                  generate a matching value; it will be passed a map with `:gen`,\n                  `:pred`, and `:max-tries` and should return an exception","^4F",["^1?",["@param {...*} var_args"]]],"~$shrink-int",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",205,"^8",8,"^9",205,"^:",18,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$integer"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/shrink-int","^6","clojure/test/check/generators.cljc","^:",18,"^43",["^1?",[["^:M"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",205,"^47","^6E","^9",205,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^:M"]]]]]],"~$random-pseudofactoring",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1473,"^8",19,"^9",1473,"^:",41,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$n","^3X"]]]]],"^1B","Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."],"^3R",true,"^1;","~$clojure.test.check.generators/random-pseudofactoring","^6","clojure/test/check/generators.cljc","^:",41,"^43",["^1?",[["~$n","^3X"]]],"^44",null,"^45",["^1?",[null,null]],"^8",3,"^46",false,"^7",1473,"^47","^8W","^9",1473,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$n","^3X"]]]]],"^1B","Returns (not generates) a random collection of integers `xs`\n  greater than 1 such that (<= (apply * xs) n)."],"~$vector-distinct-by",["^ ","^3Q",null,"^5",["^ ","^19","0.9.0","^6","clojure/test/check/generators.cljc","^:",25,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^45",["^1?",[null,null]]],"^8",7,"^7",824,"^9",824,"^1>",["^1?",["^3S",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]]]],"^1B","Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"^19","0.9.0","^1;","~$clojure.test.check.generators/vector-distinct-by","^6","clojure/test/check/generators.cljc","^:",25,"^4C",["^ ","^46",false,"^4D",3,"^49",3,"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^45",["^1?",[null,null]]],"^43",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^44",null,"^4D",3,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^4H",[["^ ","^4D",2,"^46",false,"^4B","^4I"],["^ ","^4D",3,"^46",false,"^4B","^4@"]],"^7",824,"^9",824,"^49",3,"^4:",true,"^1>",["^1?",[["^3U","^3W"],["^3U","^3W","^4E"]]],"^1B","Generates a vector of elements from the given generator, with the\n  guarantee that (map key-fn the-vector) will be distinct.\n\n  If the generator cannot or is unlikely to produce enough distinct\n  elements, this generator will fail in the same way as `such-that`.\n\n  Available options:\n\n    :num-elements  the fixed size of generated vectors\n    :min-elements  the min size of generated vectors\n    :max-elements  the max size of generated vectors\n    :max-tries     the number of times the generator will be tried before\n                   failing when it does not produce distinct elements\n                   (default 10)\n    :ex-fn         a function of one arg that will be called if test.check cannot\n                   generate enough distinct values; it will be passed a map with\n                   `:gen`, `:num-elements`, and `:max-tries` and should return an\n                   exception","^4F",["^1?",["@param {...*} var_args"]]],"~$swap",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",591,"^8",8,"^9",591,"^:",12,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^5O",["~$i1","~$i2"]]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/swap","^6","clojure/test/check/generators.cljc","^:",12,"^43",["^1?",[["^5O","~$p__68752"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",591,"^47",["^P",["^8W","^4I"]],"^9",591,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^5O",["^:T","^:U"]]]]]]],"~$size->max-leaf-count",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1465,"^8",17,"^9",1465,"^:",37,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^3Y"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/size->max-leaf-count","^6","clojure/test/check/generators.cljc","^:",37,"^43",["^1?",[["^3Y"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",1465,"^47","^4X","^9",1465,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3Y"]]]]]],"~$int-rose-tree",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",209,"^8",8,"^9",209,"^:",21,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["^6H"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/int-rose-tree","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["^6H"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",209,"^47","^48","^9",209,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^6H"]]]]]],"~$fmap",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",93,"^8",7,"^9",93,"^:",11,"^1>",["^1?",["^3S",["^1?",[["~$f","^3W"]]]]],"^1B","Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."],"^1;","~$clojure.test.check.generators/fmap","^6","clojure/test/check/generators.cljc","^:",11,"^43",["^1?",[["~$f","^3W"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",93,"^47","^4@","^9",93,"^49",2,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$f","^3W"]]]]],"^1B","Returns a generator like `gen` but with values transformed by `f`.\n  E.g.:\n\n      (gen/sample (gen/fmap str gen/nat))\n      => (\"0\" \"1\" \"0\" \"1\" \"4\" \"3\" \"6\" \"6\" \"4\" \"2\")\n\n  Also see gen/let for a macro with similar functionality."],"~$MAX_INTEGER",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",956,"^8",16,"^9",956,"^:",27,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/MAX_INTEGER","^6","clojure/test/check/generators.cljc","^:",27,"^8",1,"^7",956,"^9",956,"^4B","^4X"],"~$->Generator",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^:",21,"^8",12,"^81",true,"^92","~:positional","^7",28,"^9",28,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Positional factory function for clojure.test.check.generators/Generator."],"^1;","~$clojure.test.check.generators/->Generator","^6","clojure/test/check/generators.cljc","^:",21,"^43",["^1?",[["^3W"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^81",true,"^46",false,"^92","^;5","^7",28,"^47","^4@","^9",28,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Positional factory function for clojure.test.check.generators/Generator."],"~$no-shrink",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",483,"^8",7,"^9",483,"^:",16,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."],"^1;","~$clojure.test.check.generators/no-shrink","^6","clojure/test/check/generators.cljc","^:",16,"^43",["^1?",[["^3W"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",483,"^47","^4@","^9",483,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["^3W"]]]]],"^1B","Create a new generator that is just like `gen`, except does not shrink\n  at all. This can be useful when shrinking is taking a long time or is not\n  applicable to the domain."],"~$char-ascii",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1266,"^8",6,"^9",1266,"^:",16],"^1;","~$clojure.test.check.generators/char-ascii","^6","clojure/test/check/generators.cljc","^:",16,"^8",1,"^7",1266,"^9",1266,"^4B","^4@","^1B","Generate only ascii character."],"~$simple-type-printable",["^ ","^1;","~$clojure.test.check.generators/simple-type-printable","^6","clojure/test/check/generators.cljc","^7",1436,"^8",1,"^9",1436,"^:",27,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1436,"^8",6,"^9",1436,"^:",27],"^4B","^4@"],"~$halfs",["^ ","^3Q",null,"^5",["^ ","^6","clojure/test/check/generators.cljc","^7",201,"^8",8,"^9",201,"^:",13,"^3R",true,"^1>",["^1?",["^3S",["^1?",[["~$n"]]]]]],"^3R",true,"^1;","~$clojure.test.check.generators/halfs","^6","clojure/test/check/generators.cljc","^:",13,"^43",["^1?",[["~$n"]]],"^44",null,"^45",["^1?",[null,null]],"^8",1,"^46",false,"^7",201,"^47","^6E","^9",201,"^49",1,"^4:",true,"^1>",["^1?",["^3S",["^1?",[["~$n"]]]]]],"~$symbol-name-or-namespace",["^ ","^5",["^ ","^6","clojure/test/check/generators.cljc","^7",1340,"^8",16,"^9",1340,"^:",40,"^3R",true],"^3R",true,"^1;","~$clojure.test.check.generators/symbol-name-or-namespace","^6","clojure/test/check/generators.cljc","^:",40,"^8",1,"^7",1340,"^9",1340,"^4B","^4@","^1B","Generates a namespace string for a symbol/keyword."]],"^1R",["^ ","^C","^C","^1O","^C","^N","^N"],"~:cljs.analyzer/constants",["^ ","^1P",["^P",["~:max-tries","~:min","~:max-tries-or-opts","~:pred","~:else","^4=","^3W","~:/","~:infinite?","~:max","~$/","~:max-elements","~:ex-fn","~:num-elements","~:min-elements","~:NaN?"]],"~:order",["^4=","^3W","^;J","^;B","^;E","^;F","^;D","^;K","^;L","^;I","^;C","^;H","^;G","^;M","~:/","~$/"]],"^1[",["^ ","^1Q",["^P",[]],"^1R",["^P",[]]],"^20",["^ "],"^21",["^1J","^C","^1M","^1K","^1I","^1G"]],"^1:","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^2?",[["^;Q","~:static-fns"],true,["^;Q","~:elide-asserts"],true,["^;Q","~:optimize-constants"],null,["^;Q","^26"],null,["^;Q","~:external-config"],null,["^;Q","~:tooling-config"],null,["^;Q","~:emit-constants"],null,["^;Q","~:load-tests"],false,["^;Q","~:form-size-threshold"],null,["^;Q","~:infer-externs"],true,["^;Q","^28"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^;Q","~:fn-invoke-direct"],null,["^;Q","~:source-map"],"/dev/null"]]]