["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.doubles');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.longs');\nclojure.test.check.random.doubles.double_unit = (function (){var i = (53);\nvar x = (1);\nwhile(true){\nif((i === (0))){\nreturn x;\n} else {\nvar G__41299 = (i - (1));\nvar G__41300 = (x / (2));\ni = G__41299;\nx = G__41300;\ncontinue;\n}\nbreak;\n}\n})();\nclojure.test.check.random.doubles.big_double_unit = (clojure.test.check.random.doubles.double_unit * (4294967296));\n/**\n * Given a uniformly distributed random long, returns a uniformly\n *   distributed double between 0.0 (inclusive) and 1.0 (exclusive).\n */\nclojure.test.check.random.doubles.rand_long__GT_rand_double = (function clojure$test$check$random$doubles$rand_long__GT_rand_double(long$){\nvar x = clojure.test.check.random.longs.unsigned_bit_shift_right(long$,(11));\nvar low_bits = x.getLowBitsUnsigned();\nvar high_bits = x.getHighBits();\nreturn ((clojure.test.check.random.doubles.double_unit * low_bits) + (clojure.test.check.random.doubles.big_double_unit * high_bits));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/doubles.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",35,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.random.doubles","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs","^V","~$longs","^V","^B","^B","~$goog","^X"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^B","^B"],"~:form",["~#list",["~$ns","^Q",["^12",["^Z",["^V","~:as","^W"]]]]],"~:flags",["^ ","^Z",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^X","^B","^V"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/doubles.cljs"],"~:compiled-at",1630228420364,"~:resource-name","clojure/test/check/random/doubles.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.doubles\n  (:require [clojure.test.check.random.longs :as longs]))\n\n(def ^:private double-unit\n  (loop [i 53 x 1]\n    (if (zero? i)\n      x\n      (recur (dec i) (/ x 2)))))\n\n(def ^:private big-double-unit\n  ;; (* double-unit 0x100000000)\n  (* double-unit 4294967296))\n\n(defn rand-long->rand-double\n  \"Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive).\"\n  [long]\n  (let [x (longs/unsigned-bit-shift-right long 11)\n        low-bits (.getLowBitsUnsigned x)\n        high-bits (.getHighBits x)]\n    (+ (* double-unit low-bits)\n       (* big-double-unit high-bits))))\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAaA,AAAeA,AACb,AAAA,AAAOC;AAAP,AAAYC;;AAAZ,AACE,AAAI,AAAA,AAAOD;AACTC;;AACA,AAAO,AAAA,AAAKD;AAAG,AAAA,AAAGC;;;;;;;;AAExB,AAAeC,AAEb,AAAA,AAAGH;AAEL;;;;AAAA,AAAMI,AAGHC;AAHH,AAIE,AAAMH,AAAE,AAAA,AAACI,AAA+BD;AAClCE,AAAS,AAAqBL;AAC9BM,AAAU,AAAcN;AAF9B,AAGE,AAAG,AAAGF,AAAYO,AACf,AAAGJ,AAAgBK","names",["clojure.test.check.random.doubles/double-unit","i","x","clojure.test.check.random.doubles/big-double-unit","clojure.test.check.random.doubles/rand-long->rand-double","long","clojure.test.check.random.longs/unsigned-bit-shift-right","low-bits","high-bits"]]],"~:cache-keys",["~#cmap",[["^19","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^X","~$goog.array","~$goog.asserts"]]],["^19","goog/array/array.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1K"]]],["^19","goog/debug/error.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","clojure/test/check/random/doubles.cljs"],[1630228119162,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^B","^V"]]],["^19","goog/dom/nodetype.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/object/object.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^19","goog/math/long.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1K","~$goog.reflect"]]],["^19","goog/string/internal.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/functions/functions.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/structs/map.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","goog/asserts/asserts.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1J","^1K","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/base.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",[]]],["^19","goog/structs/structs.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1J","~$goog.object"]]],["^19","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^B"]]],["^19","goog/string/string.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","~$goog.string.internal"]]],["^19","goog/reflect/reflect.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/string/stringbuffer.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/iter/iter.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1J","^1K","~$goog.functions","~$goog.math"]]],["^19","cljs/core.cljs"],[1630228118934,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1R","^1X","^1J","~$goog.Uri","~$goog.string.StringBuffer"]]],["^19","clojure/test/check/random/longs.cljs"],[1630228119162,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^B","~$clojure.test.check.random.longs.bit-count-impl","^20","^B"]]],["^19","goog/math/integer.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X"]]],["^19","goog/uri/utils.js"],[1630228359392,"^1F",["^ ","^1G",null,"^1H",["^O",[]],"^1I",["^X","^1J","^1K","^1R"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",11,"^8",2,"^9",11,"^:",35,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",[]],"^P","^Q","^T",null,"^U",["^ ","^V","^V","^W","^V","^B","^B","^X","^X"],"^Y",["^O",["^Z"]],"^[",null,"~:defs",["^ ","~$double-unit",["^ ","^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",14,"^8",16,"^9",14,"^:",27,"~:private",true],"^2R",true,"^P","~$clojure.test.check.random.doubles/double-unit","^6","clojure/test/check/random/doubles.cljs","^:",27,"^8",1,"^7",14,"^9",14,"~:tag","~$number"],"~$big-double-unit",["^ ","^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",20,"^8",16,"^9",20,"^:",31,"^2R",true],"^2R",true,"^P","~$clojure.test.check.random.doubles/big-double-unit","^6","clojure/test/check/random/doubles.cljs","^:",31,"^8",1,"^7",20,"^9",20,"^2T","^2U"],"~$rand-long->rand-double",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",24,"^8",7,"^9",24,"^:",29,"~:arglists",["^12",["~$quote",["^12",[["~$long"]]]]],"~:doc","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."],"^P","~$clojure.test.check.random.doubles/rand-long->rand-double","^6","clojure/test/check/random/doubles.cljs","^:",29,"~:method-params",["^12",[["^30"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"~:variadic?",false,"^7",24,"~:ret-tag","^2U","^9",24,"~:max-fixed-arity",1,"~:fn-var",true,"^2Z",["^12",["^2[",["^12",[["^30"]]]]],"^31","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."]],"^10",["^ ","^B","^B"],"^15",["^ ","^Z",["^O",[]]],"^16",["^ "],"^17",["^X","^B","^V"]],"^S","^Q","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^3<","~:static-fns"],true,["^3<","~:elide-asserts"],false,["^3<","~:optimize-constants"],null,["^3<","^1<"],null,["^3<","~:external-config"],null,["^3<","~:tooling-config"],null,["^3<","~:emit-constants"],null,["^3<","~:load-tests"],null,["^3<","~:form-size-threshold"],null,["^3<","~:infer-externs"],true,["^3<","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3<","~:fn-invoke-direct"],null,["^3<","~:source-map"],"/dev/null"]]]