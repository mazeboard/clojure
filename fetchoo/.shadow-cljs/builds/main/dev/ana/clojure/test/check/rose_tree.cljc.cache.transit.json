["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.rose_tree');\ngoog.require('cljs.core');\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n*/\nclojure.test.check.rose_tree.RoseTree = (function (root,children){\nthis.root = root;\nthis.children = children;\nthis.cljs$lang$protocol_mask$partition0$ = 16;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\nclojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (this$,i){\nvar self__ = this;\nvar this$__$1 = this;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(0))){\nreturn self__.root;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(1))){\nreturn self__.children;\n} else {\nthrow (new Error(\"Index out of bounds in rose tree\"));\n\n}\n}\n});\n\nclojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (this$,i,not_found){\nvar self__ = this;\nvar this$__$1 = this;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(0))){\nreturn self__.root;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(1))){\nreturn self__.children;\n} else {\nreturn not_found;\n\n}\n}\n});\n\nclojure.test.check.rose_tree.RoseTree.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"root\",\"root\",1191874074,null),new cljs.core.Symbol(null,\"children\",\"children\",699969545,null)], null);\n});\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$type = true;\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$ctorStr = \"clojure.test.check.rose-tree/RoseTree\";\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$ctorPrWriter = (function (this__4374__auto__,writer__4375__auto__,opt__4376__auto__){\nreturn cljs.core._write(writer__4375__auto__,\"clojure.test.check.rose-tree/RoseTree\");\n});\n\n/**\n * Positional factory function for clojure.test.check.rose-tree/RoseTree.\n */\nclojure.test.check.rose_tree.__GT_RoseTree = (function clojure$test$check$rose_tree$__GT_RoseTree(root,children){\nreturn (new clojure.test.check.rose_tree.RoseTree(root,children));\n});\n\n/**\n * Returns the root of a Rose tree.\n */\nclojure.test.check.rose_tree.root = (function clojure$test$check$rose_tree$root(rose){\nreturn rose.root;\n});\n/**\n * Returns the children of the root of the Rose tree.\n */\nclojure.test.check.rose_tree.children = (function clojure$test$check$rose_tree$children(rose){\nreturn rose.children;\n});\nclojure.test.check.rose_tree.make_rose = (function clojure$test$check$rose_tree$make_rose(root,children){\nreturn (new clojure.test.check.rose_tree.RoseTree(root,children));\n});\n/**\n * Exclude the nth value in a collection.\n */\nclojure.test.check.rose_tree.exclude_nth = (function clojure$test$check$rose_tree$exclude_nth(n,coll){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar temp__5753__auto__ = cljs.core.seq(coll);\nif(temp__5753__auto__){\nvar s = temp__5753__auto__;\nif((n === (0))){\nreturn cljs.core.rest(coll);\n} else {\nreturn cljs.core.cons(cljs.core.first(s),(function (){var G__41312 = (n - (1));\nvar G__41313 = cljs.core.rest(s);\nreturn (clojure.test.check.rose_tree.exclude_nth.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.exclude_nth.cljs$core$IFn$_invoke$arity$2(G__41312,G__41313) : clojure.test.check.rose_tree.exclude_nth.call(null,G__41312,G__41313));\n})());\n}\n} else {\nreturn null;\n}\n}),null,null));\n});\n/**\n * Turn a tree of trees into a single tree. Does this by concatenating\n *   children of the inner and outer trees.\n */\nclojure.test.check.rose_tree.join = (function clojure$test$check$rose_tree$join(rose){\nvar outer_root = clojure.test.check.rose_tree.root(rose);\nvar outer_children = clojure.test.check.rose_tree.children(rose);\nvar inner_root = clojure.test.check.rose_tree.root(outer_root);\nvar inner_children = clojure.test.check.rose_tree.children(outer_root);\nreturn clojure.test.check.rose_tree.make_rose(inner_root,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.join,outer_children),inner_children));\n});\n/**\n * Puts a value `x` into a Rose tree, with no children.\n */\nclojure.test.check.rose_tree.pure = (function clojure$test$check$rose_tree$pure(x){\nreturn clojure.test.check.rose_tree.make_rose(x,cljs.core.PersistentVector.EMPTY);\n});\n/**\n * Applies functions `f` to all values in the tree.\n */\nclojure.test.check.rose_tree.fmap = (function clojure$test$check$rose_tree$fmap(f,rose){\nreturn clojure.test.check.rose_tree.make_rose((function (){var G__41316 = clojure.test.check.rose_tree.root(rose);\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__41316) : f.call(null,G__41316));\n})(),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41315_SHARP_){\nreturn (clojure.test.check.rose_tree.fmap.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.fmap.cljs$core$IFn$_invoke$arity$2(f,p1__41315_SHARP_) : clojure.test.check.rose_tree.fmap.call(null,f,p1__41315_SHARP_));\n}),clojure.test.check.rose_tree.children(rose)));\n});\n/**\n * Takes a Rose tree (m) and a function (k) from\n *   values to Rose tree and returns a new Rose tree.\n *   This is the monadic bind (>>=) for Rose trees.\n */\nclojure.test.check.rose_tree.bind = (function clojure$test$check$rose_tree$bind(m,k){\nreturn clojure.test.check.rose_tree.join(clojure.test.check.rose_tree.fmap(k,m));\n});\n/**\n * Returns a new Rose tree whose values pass `pred`. Values who\n *   do not pass `pred` have their children cut out as well.\n *   Takes a list of roses, not a rose\n */\nclojure.test.check.rose_tree.filter = (function clojure$test$check$rose_tree$filter(pred,rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41320_SHARP_){\nreturn (clojure.test.check.rose_tree.filter.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.filter.cljs$core$IFn$_invoke$arity$2(pred,p1__41320_SHARP_) : clojure.test.check.rose_tree.filter.call(null,pred,p1__41320_SHARP_));\n}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__41321_SHARP_){\nvar G__41322 = clojure.test.check.rose_tree.root(p1__41321_SHARP_);\nreturn (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__41322) : pred.call(null,G__41322));\n}),clojure.test.check.rose_tree.children(rose))));\n});\n/**\n * Create a seq of vectors, where each rose in turn, has been replaced\n *   by its children.\n */\nclojure.test.check.rose_tree.permutations = (function clojure$test$check$rose_tree$permutations(roses){\nvar iter__4523__auto__ = (function clojure$test$check$rose_tree$permutations_$_iter__41326(s__41327){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__41327__$1 = s__41327;\nwhile(true){\nvar temp__5753__auto__ = cljs.core.seq(s__41327__$1);\nif(temp__5753__auto__){\nvar xs__6308__auto__ = temp__5753__auto__;\nvar vec__41333 = cljs.core.first(xs__6308__auto__);\nvar rose = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41333,(0),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41333,(1),null);\nvar iterys__4519__auto__ = ((function (s__41327__$1,vec__41333,rose,index,xs__6308__auto__,temp__5753__auto__){\nreturn (function clojure$test$check$rose_tree$permutations_$_iter__41326_$_iter__41328(s__41329){\nreturn (new cljs.core.LazySeq(null,((function (s__41327__$1,vec__41333,rose,index,xs__6308__auto__,temp__5753__auto__){\nreturn (function (){\nvar s__41329__$1 = s__41329;\nwhile(true){\nvar temp__5753__auto____$1 = cljs.core.seq(s__41329__$1);\nif(temp__5753__auto____$1){\nvar s__41329__$2 = temp__5753__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__41329__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__41329__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__41331 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__41330 = (0);\nwhile(true){\nif((i__41330 < size__4522__auto__)){\nvar child = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__41330);\ncljs.core.chunk_append(b__41331,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(roses,index,child));\n\nvar G__41411 = (i__41330 + (1));\ni__41330 = G__41411;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__41331),clojure$test$check$rose_tree$permutations_$_iter__41326_$_iter__41328(cljs.core.chunk_rest(s__41329__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__41331),null);\n}\n} else {\nvar child = cljs.core.first(s__41329__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(roses,index,child),clojure$test$check$rose_tree$permutations_$_iter__41326_$_iter__41328(cljs.core.rest(s__41329__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__41327__$1,vec__41333,rose,index,xs__6308__auto__,temp__5753__auto__))\n,null,null));\n});})(s__41327__$1,vec__41333,rose,index,xs__6308__auto__,temp__5753__auto__))\n;\nvar fs__4520__auto__ = cljs.core.seq(iterys__4519__auto__(clojure.test.check.rose_tree.children(rose)));\nif(fs__4520__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4520__auto__,clojure$test$check$rose_tree$permutations_$_iter__41326(cljs.core.rest(s__41327__$1)));\n} else {\nvar G__41412 = cljs.core.rest(s__41327__$1);\ns__41327__$1 = G__41412;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4523__auto__(cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,roses,cljs.core.range.cljs$core$IFn$_invoke$arity$0()));\n});\n/**\n * Apply `f` to the sequence of Rose trees `roses`.\n */\nclojure.test.check.rose_tree.zip = (function clojure$test$check$rose_tree$zip(f,roses){\nreturn clojure.test.check.rose_tree.make_rose(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root,roses)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41338_SHARP_){\nreturn (clojure.test.check.rose_tree.zip.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.zip.cljs$core$IFn$_invoke$arity$2(f,p1__41338_SHARP_) : clojure.test.check.rose_tree.zip.call(null,f,p1__41338_SHARP_));\n}),clojure.test.check.rose_tree.permutations(roses)));\n});\nclojure.test.check.rose_tree.remove = (function clojure$test$check$rose_tree$remove(roses){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (index,_){\nreturn clojure.test.check.rose_tree.exclude_nth(index,roses);\n}),roses),clojure.test.check.rose_tree.permutations(cljs.core.vec(roses)));\n});\n/**\n * Returns an equivalent lazy seq that is not chunked.\n */\nclojure.test.check.rose_tree.unchunk = (function clojure$test$check$rose_tree$unchunk(a_lazy_seq){\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2(Infinity,a_lazy_seq);\n});\nclojure.test.check.rose_tree.shrink = (function clojure$test$check$rose_tree$shrink(f,roses){\nif(cljs.core.seq(roses)){\nreturn clojure.test.check.rose_tree.make_rose(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root,roses)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41349_SHARP_){\nreturn (clojure.test.check.rose_tree.shrink.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink.cljs$core$IFn$_invoke$arity$2(f,p1__41349_SHARP_) : clojure.test.check.rose_tree.shrink.call(null,f,p1__41349_SHARP_));\n}),clojure.test.check.rose_tree.remove(clojure.test.check.rose_tree.unchunk(roses))));\n} else {\nreturn clojure.test.check.rose_tree.make_rose((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),cljs.core.PersistentVector.EMPTY);\n}\n});\n/**\n * Returns a sequence of rose trees representing shrinks that discard\n *   half of the vector of roses.\n */\nclojure.test.check.rose_tree.bifurcate = (function clojure$test$check$rose_tree$bifurcate(f,roses){\nif(((4) <= cljs.core.count(roses))){\nvar left_count = cljs.core.quot(cljs.core.count(roses),(2));\nreturn (new cljs.core.LazySeq(null,((function (left_count){\nreturn (function (){\nreturn cljs.core.cons((function (){var G__41359 = f;\nvar G__41360 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(roses,(0),left_count);\nreturn (clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2(G__41359,G__41360) : clojure.test.check.rose_tree.shrink_vector_STAR_.call(null,G__41359,G__41360));\n})(),(new cljs.core.LazySeq(null,((function (left_count){\nreturn (function (){\nreturn (new cljs.core.List(null,(function (){var G__41361 = f;\nvar G__41362 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(roses,left_count);\nreturn (clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2(G__41361,G__41362) : clojure.test.check.rose_tree.shrink_vector_STAR_.call(null,G__41361,G__41362));\n})(),null,(1),null));\n});})(left_count))\n,null,null)));\n});})(left_count))\n,null,null));\n} else {\nreturn null;\n}\n});\nclojure.test.check.rose_tree.shrink_vector_STAR_ = (function clojure$test$check$rose_tree$shrink_vector_STAR_(f,roses){\nvar thing = clojure.test.check.rose_tree.shrink(f,roses);\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(thing),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.bifurcate(f,roses),clojure.test.check.rose_tree.children(thing)));\n});\nclojure.test.check.rose_tree.shrink_vector = (function clojure$test$check$rose_tree$shrink_vector(f,roses){\nif(cljs.core.vector_QMARK_(roses)){\n} else {\nthrow (new Error(\"Assert failed: (vector? roses)\"));\n}\n\nvar rose = clojure.test.check.rose_tree.shrink_vector_STAR_(f,roses);\nvar empty_rose = clojure.test.check.rose_tree.make_rose((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),cljs.core.PersistentVector.EMPTY);\nif(cljs.core.empty_QMARK_(roses)){\nreturn rose;\n} else {\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),cljs.core.cons(empty_rose,clojure.test.check.rose_tree.children(rose)));\n}\n});\n/**\n * Return a new rose-tree whose depth-one children\n *   are the children from depth one _and_ two of the input\n *   tree.\n */\nclojure.test.check.rose_tree.collapse = (function clojure$test$check$rose_tree$collapse(rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),(function (){var the_children = clojure.test.check.rose_tree.children(rose);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.collapse,the_children),cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.collapse,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(clojure.test.check.rose_tree.children,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([the_children], 0))));\n})());\n});\nclojure.test.check.rose_tree.make_stack = (function clojure$test$check$rose_tree$make_stack(children,stack){\nvar temp__5751__auto__ = cljs.core.seq(children);\nif(temp__5751__auto__){\nvar s = temp__5751__auto__;\nreturn cljs.core.cons(children,stack);\n} else {\nreturn stack;\n}\n});\n/**\n * Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n *   This assumes that two nodes with the same value have the same children.\n *   While it's not common, it's possible to create trees that don't\n *   fit that description. This function is significantly faster than\n *   brute-force enumerating all of the nodes in a tree, as there will\n *   be many duplicates.\n */\nclojure.test.check.rose_tree.seq = (function clojure$test$check$rose_tree$seq(rose){\nvar helper = (function clojure$test$check$rose_tree$seq_$_helper(rose__$1,seen,stack){\nvar node = clojure.test.check.rose_tree.root(rose__$1);\nvar the_children = clojure.test.check.rose_tree.children(rose__$1);\nreturn (new cljs.core.LazySeq(null,((function (node,the_children){\nreturn (function (){\nif(cljs.core.not((seen.cljs$core$IFn$_invoke$arity$1 ? seen.cljs$core$IFn$_invoke$arity$1(node) : seen.call(null,node)))){\nreturn cljs.core.cons(node,((cljs.core.seq(the_children))?clojure$test$check$rose_tree$seq_$_helper(cljs.core.first(the_children),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen,node),clojure.test.check.rose_tree.make_stack(cljs.core.rest(the_children),stack)):(function (){var temp__5753__auto__ = cljs.core.seq(stack);\nif(temp__5753__auto__){\nvar s = temp__5753__auto__;\nvar f = cljs.core.ffirst(s);\nvar r = cljs.core.rest(cljs.core.first(s));\nreturn clojure$test$check$rose_tree$seq_$_helper(f,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen,node),clojure.test.check.rose_tree.make_stack(r,cljs.core.rest(s)));\n} else {\nreturn null;\n}\n})()));\n} else {\nvar temp__5753__auto__ = cljs.core.seq(stack);\nif(temp__5753__auto__){\nvar s = temp__5753__auto__;\nvar f = cljs.core.ffirst(s);\nvar r = cljs.core.rest(cljs.core.first(s));\nreturn clojure$test$check$rose_tree$seq_$_helper(f,seen,clojure.test.check.rose_tree.make_stack(r,cljs.core.rest(s)));\n} else {\nreturn null;\n}\n}\n});})(node,the_children))\n,null,null));\n});\nreturn helper(rose,cljs.core.PersistentHashSet.EMPTY,cljs.core.List.EMPTY);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A lazy tree data structure used for shrinking.","~:file","clojure/test/check/rose_tree.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",33],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$seq","~$remove","~$filter"]],"~:name","~$clojure.test.check.rose-tree","~:op","~:ns","~:imports",null,"~:requires",["^ ","^B","^B","~$core","^B","~$goog","^Z"],"~:seen",["^O",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^B","^B","^Y","^B"],"~:form",["~#list",["~$ns","^T","A lazy tree data structure used for shrinking.",["^14",["~:refer-clojure","~:exclude",["^R","^Q","^P"]]],["^14",["^10",["^B","~:as","^Y"]]]]],"~:flags",["^ ","^10",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^B"]],"^V","^T","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/rose_tree.cljc"],"~:compiled-at",1630228420429,"~:resource-name","clojure/test/check/rose_tree.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.rose-tree\n  \"A lazy tree data structure used for shrinking.\"\n  (:refer-clojure :exclude [filter remove seq])\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core]))\n\n(deftype RoseTree [root children]\n  #?(:clj  clojure.lang.Indexed\n     :cljs IIndexed)\n  (#?(:clj nth :cljs -nth) [this i]\n    (cond (= i 0) root\n          (= i 1) children\n          :else (throw #?(:clj  (IndexOutOfBoundsException.)\n                          :cljs (js/Error. \"Index out of bounds in rose tree\")))))\n\n  (#?(:clj nth :cljs -nth) [this i not-found]\n    (cond (= i 0) root\n          (= i 1) children\n          :else not-found)))\n\n(defn root\n  \"Returns the root of a Rose tree.\"\n  {:no-doc true}\n  [^RoseTree rose]\n  (.-root rose))\n\n(defn children\n  \"Returns the children of the root of the Rose tree.\"\n  {:no-doc true}\n  [^RoseTree rose]\n  (.-children rose))\n\n(defn make-rose\n  [root children]\n  (RoseTree. root children))\n\n(defn- exclude-nth\n  \"Exclude the nth value in a collection.\"\n  [n coll]\n  (lazy-seq\n   (when-let [s (core/seq coll)]\n     (if (zero? n)\n       (rest coll)\n       (cons (first s)\n             (exclude-nth (dec n) (rest s)))))))\n\n(defn join\n  \"Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.\"\n  {:no-doc true}\n  [rose]\n  (let [outer-root (root rose)\n        outer-children (children rose)\n        inner-root (root outer-root)\n        inner-children (children outer-root)]\n    (make-rose inner-root (concat (map join outer-children)\n                                  inner-children))))\n\n(defn pure\n  \"Puts a value `x` into a Rose tree, with no children.\"\n  {:no-doc true}\n  [x]\n  (make-rose x []))\n\n(defn fmap\n  \"Applies functions `f` to all values in the tree.\"\n  {:no-doc true}\n  [f rose]\n  (make-rose (f (root rose)) (map #(fmap f %) (children rose))))\n\n(defn bind\n  \"Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.\"\n  {:no-doc true}\n  [m k]\n  (join (fmap k m)))\n\n(defn filter\n  \"Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose\"\n  {:no-doc true}\n  [pred rose]\n  (make-rose (root rose)\n             (map #(filter pred %)\n                  (core/filter #(pred (root %)) (children rose)))))\n\n(defn permutations\n  \"Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.\"\n  {:no-doc true}\n  [roses]\n  (for [[rose index] (map vector roses (range))\n        child (children rose)]\n    (assoc roses index child)))\n\n(defn zip\n  \"Apply `f` to the sequence of Rose trees `roses`.\"\n  {:no-doc true}\n  [f roses]\n  (make-rose\n   (apply f (map root roses))\n   (map #(zip f %)\n        (permutations roses))))\n\n(defn remove\n  {:no-doc true}\n  [roses]\n  (concat\n   (map-indexed (fn [index _] (exclude-nth index roses)) roses)\n   (permutations (vec roses))))\n\n(defn ^:private unchunk\n  \"Returns an equivalent lazy seq that is not chunked.\"\n  [a-lazy-seq]\n  (take\n   #?(:clj Double/POSITIVE_INFINITY :cljs js/Infinity)\n   a-lazy-seq))\n\n(defn shrink\n  {:no-doc true}\n  [f roses]\n  (if (core/seq roses)\n    (make-rose (apply f (map root roses))\n               (map #(shrink f %) (remove (unchunk roses))))\n    (make-rose (f) [])))\n\n(declare shrink-vector*)\n\n(defn ^:private bifurcate\n  \"Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses.\"\n  [f roses]\n  (when (<= 4 (count roses))\n    (let [left-count (quot (count roses) 2)]\n      (lazy-seq\n       (cons\n        (shrink-vector* f (subvec roses 0 left-count))\n        (lazy-seq\n         (list (shrink-vector* f (subvec roses left-count)))))))))\n\n(defn ^:private shrink-vector*\n  [f roses]\n  (let [thing (shrink f roses)]\n    (make-rose (root thing)\n               (concat (bifurcate f roses) (children thing)))))\n\n(defn shrink-vector\n  [f roses]\n  {:pre [(vector? roses)]}\n  (let [rose (shrink-vector* f roses)\n        empty-rose (make-rose (f) [])]\n    (if (empty? roses)\n      rose\n      (make-rose (root rose)\n                 (cons empty-rose (children rose))))))\n\n(defn collapse\n  \"Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.\"\n  {:no-doc true}\n  [rose]\n  (make-rose (root rose)\n             (let [the-children (children rose)]\n               (concat (map collapse the-children)\n                       (map collapse\n                            (mapcat children the-children))))))\n\n(defn- make-stack\n  [children stack]\n  (if-let [s (core/seq children)]\n    (cons children stack)\n    stack))\n\n(defn seq\n  \"Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates.\"\n  [rose]\n  (let [helper (fn helper [rose seen stack]\n                 (let [node (root rose)\n                       the-children (children rose)]\n                   (lazy-seq\n                    (if-not (seen node)\n                      (cons node\n                            (if (core/seq the-children)\n                              (helper (first the-children) (conj seen node) (make-stack (rest the-children) stack))\n                              (when-let [s (core/seq stack)]\n                                (let [f (ffirst s)\n                                      r (rest (first s))]\n                                  (helper f (conj seen node) (make-stack r (rest s)))))))\n                      (when-let [s (core/seq stack)]\n                        (let [f (ffirst s)\n                              r (rest (first s))]\n                          (helper f seen (make-stack r (rest s)))))))))]\n    (helper rose #{} '())))\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","clojure.test.check.rose-tree/RoseTree","clojure.test.check.rose-tree/->RoseTree","root","children","this","i","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/Error","not-found","clojure.test.check.rose-tree/root","rose","clojure.test.check.rose-tree/children","clojure.test.check.rose-tree/make-rose","clojure.test.check.rose-tree/exclude-nth","n","coll","cljs.core/LazySeq","temp__5753__auto__","s","cljs.core/seq","cljs.core/rest","cljs.core/cons","cljs.core/first","G__41312","G__41313","clojure.test.check.rose-tree/join","outer-root","outer-children","inner-root","inner-children","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.test.check.rose-tree/pure","x","clojure.test.check.rose-tree/fmap","f","G__41316","p1__41315#","clojure.test.check.rose-tree/bind","m","k","clojure.test.check.rose-tree/filter","pred","p1__41320#","p1__41321#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__41322","clojure.test.check.rose-tree/permutations","roses","iter__4523__auto__","s__41327","xs__6308__auto__","vec__41333","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iterys__4519__auto__","s__41329","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__41331","cljs.core/chunk-buffer","i__41330","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41328","cljs.core/chunk-rest","fs__4520__auto__","iter__41326","index","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs.core.range.cljs$core$IFn$_invoke$arity$0","child","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.test.check.rose-tree/zip","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","p1__41338#","clojure.test.check.rose-tree/remove","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","_","cljs.core/vec","clojure.test.check.rose-tree/unchunk","a-lazy-seq","cljs.core.take.cljs$core$IFn$_invoke$arity$2","js/Infinity","clojure.test.check.rose-tree/shrink","p1__41349#","clojure.test.check.rose-tree/bifurcate","left-count","cljs.core/quot","G__41359","G__41360","clojure.test.check.rose-tree/shrink-vector*","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core/List","G__41361","G__41362","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","thing","clojure.test.check.rose-tree/shrink-vector","cljs.core/vector?","empty-rose","cljs.core/empty?","clojure.test.check.rose-tree/collapse","the-children","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","clojure.test.check.rose-tree/make-stack","stack","temp__5751__auto__","clojure.test.check.rose-tree/seq","helper","seen","node","cljs.core/not","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/ffirst","r","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^1=","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^Z","~$goog.array","~$goog.asserts"]]],["^1=","goog/array/array.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1O"]]],["^1=","goog/debug/error.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/dom/nodetype.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","clojure/test/check/rose_tree.cljc"],[1630228119162,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^B"]]],["^1=","goog/object/object.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1=","goog/math/long.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1O","~$goog.reflect"]]],["^1=","goog/string/internal.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/functions/functions.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/structs/map.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","goog/asserts/asserts.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1N","^1O","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/base.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",[]]],["^1=","goog/structs/structs.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1N","~$goog.object"]]],["^1=","goog/string/string.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","~$goog.string.internal"]]],["^1=","goog/reflect/reflect.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/string/stringbuffer.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/iter/iter.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1N","^1O","~$goog.functions","~$goog.math"]]],["^1=","cljs/core.cljs"],[1630228118934,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["~$goog.math.Long","~$goog.math.Integer","^1V","^20","^1N","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1=","goog/math/integer.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z"]]],["^1=","goog/uri/utils.js"],[1630228359392,"^1J",["^ ","^1K",null,"^1L",["^O",[]],"^1M",["^Z","^1N","^1O","^1V"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A lazy tree data structure used for shrinking.","^7","clojure/test/check/rose_tree.cljc","^8",10,"^9",5,"^:",10,"^;",33],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P","^Q","^R"]],"^S","^T","^W",null,"^X",["^ ","^B","^B","^Y","^B","^Z","^Z"],"^[",["^O",["^10"]],"~:shadow/js-access-global",["^O",["Infinity","Error"]],"^11",null,"~:defs",["^ ","~$bifurcate",["^ ","~:protocol-inline",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",139,"^9",17,"^:",139,"^;",26,"~:private",true,"~:arglists",["^14",["~$quote",["^14",[["~$f","~$roses"]]]]],"^6","Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."],"^2W",true,"^S","~$clojure.test.check.rose-tree/bifurcate","^7","clojure/test/check/rose_tree.cljc","^;",26,"~:method-params",["^14",[["~$f","^2Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^9",1,"~:variadic?",false,"^8",139,"~:ret-tag",["^O",["~$cljs.core/LazySeq","~$clj-nil"]],"^:",139,"~:max-fixed-arity",2,"~:fn-var",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]],"^6","Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."],"^P",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",185,"^9",7,"^:",185,"^;",10,"^2X",["^14",["^2Y",["^14",[["~$rose"]]]]],"^6","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"^S","~$clojure.test.check.rose-tree/seq","^7","clojure/test/check/rose_tree.cljc","^;",10,"^30",["^14",[["^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",185,"^34","^35","^:",185,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"~$pure",["^ ","~:no-doc",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",67,"^9",7,"^:",67,"^;",11,"^2X",["^14",["^2Y",["^14",[["~$x"]]]]],"^6","Puts a value `x` into a Rose tree, with no children.","^3<",true],"^S","~$clojure.test.check.rose-tree/pure","^7","clojure/test/check/rose_tree.cljc","^;",11,"^30",["^14",[["~$x"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",67,"^34","~$clojure.test.check.rose-tree/RoseTree","^:",67,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$x"]]]]],"^6","Puts a value `x` into a Rose tree, with no children."],"~$->RoseTree",["^ ","^2V",null,"^5",["^ ","~:protocols",["^O",["~$cljs.core/IIndexed"]],"^7","clojure/test/check/rose_tree.cljc","^;",18,"^9",10,"~:factory","~:positional","^8",15,"^:",15,"^2X",["^14",["^2Y",["^14",[["~$root","~$children"]]]]],"~:skip-protocol-flag",["^O",["^3A"]],"^6","Positional factory function for clojure.test.check.rose-tree/RoseTree."],"^3@",["^O",["^3A"]],"^S","~$clojure.test.check.rose-tree/->RoseTree","^7","clojure/test/check/rose_tree.cljc","^;",18,"^30",["^14",[["^3D","^3E"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^3B","^3C","^8",15,"^34","^3>","^:",15,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["^3D","^3E"]]]]],"^3F",["^O",["^3A"]],"^6","Positional factory function for clojure.test.check.rose-tree/RoseTree."],"~$make-stack",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",179,"^9",8,"^:",179,"^;",18,"^2W",true,"^2X",["^14",["^2Y",["^14",[["^3E","~$stack"]]]]]],"^2W",true,"^S","~$clojure.test.check.rose-tree/make-stack","^7","clojure/test/check/rose_tree.cljc","^;",18,"^30",["^14",[["^3E","^3I"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",179,"^34",["^O",[null,"~$clj"]],"^:",179,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["^3E","^3I"]]]]]],"~$join",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",55,"^9",7,"^:",55,"^;",11,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.","^3<",true],"^S","~$clojure.test.check.rose-tree/join","^7","clojure/test/check/rose_tree.cljc","^;",11,"^30",["^14",[["^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",55,"^34","^3>","^:",55,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees."],"~$bind",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",79,"^9",7,"^:",79,"^;",11,"^2X",["^14",["^2Y",["^14",[["~$m","~$k"]]]]],"^6","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.","^3<",true],"^S","~$clojure.test.check.rose-tree/bind","^7","clojure/test/check/rose_tree.cljc","^;",11,"^30",["^14",[["~$m","~$k"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",79,"^34","^3>","^:",79,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$m","~$k"]]]]],"^6","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees."],"^3E",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",35,"^9",7,"^:",35,"^;",15,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Returns the children of the root of the Rose tree.","^3<",true],"^S","~$clojure.test.check.rose-tree/children","^7","clojure/test/check/rose_tree.cljc","^;",15,"^30",["^14",[["^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",35,"^34","~$any","^:",35,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Returns the children of the root of the Rose tree."],"~$exclude-nth",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",45,"^9",8,"^:",45,"^;",19,"^2W",true,"^2X",["^14",["^2Y",["^14",[["~$n","~$coll"]]]]],"^6","Exclude the nth value in a collection."],"^2W",true,"^S","~$clojure.test.check.rose-tree/exclude-nth","^7","clojure/test/check/rose_tree.cljc","^;",19,"^30",["^14",[["~$n","^3S"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",45,"^34","^35","^:",45,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$n","^3S"]]]]],"^6","Exclude the nth value in a collection."],"^Q",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",115,"^9",7,"^:",115,"^;",13,"^2X",["^14",["^2Y",["^14",[["^2Z"]]]]],"^3<",true],"^S","~$clojure.test.check.rose-tree/remove","^7","clojure/test/check/rose_tree.cljc","^;",13,"^30",["^14",[["^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",115,"^34","^35","^:",115,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^2Z"]]]]]],"~$permutations",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",97,"^9",7,"^:",97,"^;",19,"^2X",["^14",["^2Y",["^14",[["^2Z"]]]]],"^6","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.","^3<",true],"^S","~$clojure.test.check.rose-tree/permutations","^7","clojure/test/check/rose_tree.cljc","^;",19,"^30",["^14",[["^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",97,"^34","^35","^:",97,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^2Z"]]]]],"^6","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children."],"~$RoseTree",["^ ","~:num-fields",2,"^3@",["^O",["^3A"]],"^S","^3>","^7","clojure/test/check/rose_tree.cljc","^;",18,"~:type",true,"^9",10,"^8",15,"~:record",false,"^:",15,"~:tag","~$function","^3F",["^O",["^3A"]]],"~$shrink",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",129,"^9",7,"^:",129,"^;",13,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]],"^3<",true],"^S","~$clojure.test.check.rose-tree/shrink","^7","clojure/test/check/rose_tree.cljc","^;",13,"^30",["^14",[["~$f","^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",129,"^34","^3>","^:",129,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]]],"~$shrink-vector*",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",151,"^9",17,"^:",151,"^;",31,"^2W",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]]],"^2W",true,"^S","~$clojure.test.check.rose-tree/shrink-vector*","^7","clojure/test/check/rose_tree.cljc","^;",31,"^30",["^14",[["~$f","^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",151,"^34","^3>","^:",151,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]]],"~$make-rose",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",41,"^9",7,"^:",41,"^;",16,"^2X",["^14",["^2Y",["^14",[["^3D","^3E"]]]]]],"^S","~$clojure.test.check.rose-tree/make-rose","^7","clojure/test/check/rose_tree.cljc","^;",16,"^30",["^14",[["^3D","^3E"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",41,"^34","^3>","^:",41,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["^3D","^3E"]]]]]],"^R",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",87,"^9",7,"^:",87,"^;",13,"^2X",["^14",["^2Y",["^14",[["~$pred","^39"]]]]],"^6","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose","^3<",true],"^S","~$clojure.test.check.rose-tree/filter","^7","clojure/test/check/rose_tree.cljc","^;",13,"^30",["^14",[["^48","^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",87,"^34","^3>","^:",87,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["^48","^39"]]]]],"^6","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose"],"^3D",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",29,"^9",7,"^:",29,"^;",11,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Returns the root of a Rose tree.","^3<",true],"^S","~$clojure.test.check.rose-tree/root","^7","clojure/test/check/rose_tree.cljc","^;",11,"^30",["^14",[["^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",29,"^34","^3Q","^:",29,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Returns the root of a Rose tree."],"~$shrink-vector",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",157,"^9",7,"^:",157,"^;",20,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]]],"^S","~$clojure.test.check.rose-tree/shrink-vector","^7","clojure/test/check/rose_tree.cljc","^;",20,"^30",["^14",[["~$f","^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",157,"^34","^3>","^:",157,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]]],"~$zip",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",106,"^9",7,"^:",106,"^;",10,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]],"^6","Apply `f` to the sequence of Rose trees `roses`.","^3<",true],"^S","~$clojure.test.check.rose-tree/zip","^7","clojure/test/check/rose_tree.cljc","^;",10,"^30",["^14",[["~$f","^2Z"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",106,"^34","^3>","^:",106,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$f","^2Z"]]]]],"^6","Apply `f` to the sequence of Rose trees `roses`."],"~$fmap",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",73,"^9",7,"^:",73,"^;",11,"^2X",["^14",["^2Y",["^14",[["~$f","^39"]]]]],"^6","Applies functions `f` to all values in the tree.","^3<",true],"^S","~$clojure.test.check.rose-tree/fmap","^7","clojure/test/check/rose_tree.cljc","^;",11,"^30",["^14",[["~$f","^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",73,"^34","^3>","^:",73,"^37",2,"^38",true,"^2X",["^14",["^2Y",["^14",[["~$f","^39"]]]]],"^6","Applies functions `f` to all values in the tree."],"~$unchunk",["^ ","^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",122,"^9",17,"^:",122,"^;",24,"^2W",true,"^2X",["^14",["^2Y",["^14",[["~$a-lazy-seq"]]]]],"^6","Returns an equivalent lazy seq that is not chunked."],"^2W",true,"^S","~$clojure.test.check.rose-tree/unchunk","^7","clojure/test/check/rose_tree.cljc","^;",24,"^30",["^14",[["^4B"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",122,"^34","^35","^:",122,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^4B"]]]]],"^6","Returns an equivalent lazy seq that is not chunked."],"~$collapse",["^ ","^3<",true,"^2V",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",167,"^9",7,"^:",167,"^;",15,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.","^3<",true],"^S","~$clojure.test.check.rose-tree/collapse","^7","clojure/test/check/rose_tree.cljc","^;",15,"^30",["^14",[["^39"]]],"^31",null,"^32",["^14",[null,null]],"^9",1,"^33",false,"^8",167,"^34","^3>","^:",167,"^37",1,"^38",true,"^2X",["^14",["^2Y",["^14",[["^39"]]]]],"^6","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree."]],"^12",["^ ","^B","^B","^Y","^B"],"~:cljs.analyzer/constants",["^ ","^[",["^O",["~:else","^3E","^3D"]],"~:order",["^4G","^3D","^3E"]],"^19",["^ ","^10",["^O",[]]],"^1:",["^ "],"^1;",["^Z","^B"]],"^V","^T","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1I",[["^4K","~:static-fns"],true,["^4K","~:elide-asserts"],false,["^4K","~:optimize-constants"],null,["^4K","^1@"],null,["^4K","~:external-config"],null,["^4K","~:tooling-config"],null,["^4K","~:emit-constants"],null,["^4K","~:load-tests"],null,["^4K","~:form-size-threshold"],null,["^4K","~:infer-externs"],true,["^4K","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4K","~:fn-invoke-direct"],null,["^4K","~:source-map"],"/dev/null"]]]