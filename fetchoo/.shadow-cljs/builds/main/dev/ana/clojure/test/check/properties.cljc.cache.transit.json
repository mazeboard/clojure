["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.properties');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.results');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {clojure.test.check.results.Result}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.test.check.properties.ErrorResult = (function (error,__meta,__extmap,__hash){\nthis.error = error;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k42572,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__42578 = k42572;\nvar G__42578__$1 = (((G__42578 instanceof cljs.core.Keyword))?G__42578.fqn:null);\nswitch (G__42578__$1) {\ncase \"error\":\nreturn self__.error;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k42572,else__4388__auto__);\n\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__42594){\nvar vec__42595 = p__42594;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42595,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__42595,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#clojure.test.check.properties.ErrorResult{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error],null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__42571){\nvar self__ = this;\nvar G__42571__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__42571__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__42647 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (-12654282 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__42647(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$pass_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn false;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$result_data$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"clojure.test.check.properties\",\"error\",\"clojure.test.check.properties/error\",483933635),self__.error], null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this42573,other42574){\nvar self__ = this;\nvar this42573__$1 = this;\nreturn (((!((other42574 == null)))) && ((this42573__$1.constructor === other42574.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this42573__$1.error,other42574.error)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this42573__$1.__extmap,other42574.__extmap)));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__42571){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__42674 = cljs.core.keyword_identical_QMARK_;\nvar expr__42675 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__42677 = new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\nvar G__42678 = expr__42675;\nreturn (pred__42674.cljs$core$IFn$_invoke$arity$2 ? pred__42674.cljs$core$IFn$_invoke$arity$2(G__42677,G__42678) : pred__42674.call(null,G__42677,G__42678));\n})())){\nreturn (new clojure.test.check.properties.ErrorResult(G__42571,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__42571),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error,null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__42571){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,G__42571,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nclojure.test.check.properties.ErrorResult.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"error\",\"error\",661562495,null)], null);\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$type = true;\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"clojure.test.check.properties/ErrorResult\",null,(1),null));\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"clojure.test.check.properties/ErrorResult\");\n});\n\n/**\n * Positional factory function for clojure.test.check.properties/ErrorResult.\n */\nclojure.test.check.properties.__GT_ErrorResult = (function clojure$test$check$properties$__GT_ErrorResult(error){\nreturn (new clojure.test.check.properties.ErrorResult(error,null,null,null));\n});\n\n/**\n * Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values.\n */\nclojure.test.check.properties.map__GT_ErrorResult = (function clojure$test$check$properties$map__GT_ErrorResult(G__42576){\nvar extmap__4424__auto__ = (function (){var G__42711 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__42576,new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nif(cljs.core.record_QMARK_(G__42576)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__42711);\n} else {\nreturn G__42711;\n}\n})();\nreturn (new clojure.test.check.properties.ErrorResult(new cljs.core.Keyword(null,\"error\",\"error\",-978969032).cljs$core$IFn$_invoke$arity$1(G__42576),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\nclojure.test.check.properties.exception_QMARK_ = (function clojure$test$check$properties$exception_QMARK_(x){\nreturn (x instanceof Error);\n});\nclojure.test.check.properties.apply_gen = (function clojure$test$check$properties$apply_gen(function$){\nreturn (function (args){\nvar result = (function (){try{var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(function$,args);\nif(clojure.test.check.properties.exception_QMARK_(ret)){\nthrow ret;\n} else {\nreturn ret;\n}\n}catch (e42715){var ex = e42715;\nreturn clojure.test.check.properties.__GT_ErrorResult(ex);\n}})();\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),args], null);\n});\n});\n/**\n * A function version of `for-all`. Takes a sequence of N generators\n *   and a function of N args, and returns a property that calls the\n *   function with generated values and tests the return value for\n *   truthiness, like with `for-all`.\n * \n *   Example:\n * \n *   (for-all* [gen/large-integer gen/large-integer]\n *          (fn [a b] (>= (+ a b) a)))\n */\nclojure.test.check.properties.for_all_STAR_ = (function clojure$test$check$properties$for_all_STAR_(args,function$){\nreturn clojure.test.check.generators.fmap(clojure.test.check.properties.apply_gen(function$),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.tuple,args));\n});\nclojure.test.check.properties.binding_vars = (function clojure$test$check$properties$binding_vars(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\nclojure.test.check.properties.binding_gens = (function clojure$test$check$properties$binding_gens(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.second,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/properties.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$for-all","~$clojure.test.check.properties"],"~:excludes",["~#set",[]],"~:macros",["^ ","^M",["^ ","~:arglists",["~#list",[["~$bindings","~$&","~$body"]]],"~:doc","Returns a property, which is the combination of some generators and\n  an assertion that should be true for all generated values. Properties\n  can be used with `quick-check` or `defspec`.\n\n  `for-all` takes a `let`-style bindings vector, where the right-hand\n  side of each binding is a generator.\n\n  The body should be an expression of the generated values that will\n  be tested for truthiness. Exceptions in the body will be caught and\n  treated as failures.\n\n  When there are multiple binding pairs, the earlier pairs are not\n  visible to the later pairs.\n\n  If there are multiple body expressions, all but the last one are\n  executed for side effects, as with `do`.\n\n  Example:\n\n  (for-all [a gen/large-integer\n            b gen/large-integer]\n    (>= (+ a b) a))","^7",68,"^8",1,"^6","clojure/test/check/properties.cljc","~:name","~$clojure.test.check.properties/for-all","~:ns","^N","~:macro",true]],"^W","^N","~:op","^Y","~:imports",null,"~:requires",["^ ","~$clojure.test.check.generators","^12","~$gen","^12","~$clojure.test.check.results","^14","~$results","^14","^A","^A","~$goog","^16"],"~:seen",["^P",["~:require","~:require-macros"]],"~:uses",null,"^19",["^ ","^N","^N","^A","^A","^12","^12","^13","^12"],"~:form",["^S",["~$ns","^N",["^S",["^18",["^12","~:as","^13"],["^14","^1=","^15"]]],["^S",["^19",["^N","~:refer",["^M"]]]]]],"~:flags",["^ ","^18",["^P",[]],"^19",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^16","^A","^12","^14"]],"^Y","^N","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/properties.cljc"],"~:compiled-at",1630228420678,"~:resource-name","clojure/test/check/properties.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.properties\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.results :as results])\n  #?(:cljs (:require-macros [clojure.test.check.properties :refer [for-all]])))\n\n(defrecord ErrorResult [error]\n  results/Result\n  (pass? [_] false)\n  (result-data [_]\n    ;; spelling out the whole keyword here since `::error` is\n    ;; different in self-hosted cljs.\n    {:clojure.test.check.properties/error error}))\n\n(defn ^:private exception?\n  [x]\n  (instance? #?(:clj Throwable :cljs js/Error) x))\n\n(defn ^:private apply-gen\n  [function]\n  (fn [args]\n    (let [result (try\n                   (let [ret (apply function args)]\n                     ;; TCHECK-131: for backwards compatibility (mainly\n                     ;; for spec), treat returned exceptions like thrown\n                     ;; exceptions\n                     (if (exception? ret)\n                       (throw ret)\n                       ret))\n                   #?(:clj (catch java.lang.ThreadDeath t (throw t)))\n                   (catch #?(:clj Throwable :cljs :default) ex\n                     (->ErrorResult ex)))]\n      {:result result\n       :function function\n       :args args})))\n\n(defn for-all*\n  \"A function version of `for-all`. Takes a sequence of N generators\n  and a function of N args, and returns a property that calls the\n  function with generated values and tests the return value for\n  truthiness, like with `for-all`.\n\n  Example:\n\n  (for-all* [gen/large-integer gen/large-integer]\n            (fn [a b] (>= (+ a b) a)))\"\n  [args function]\n  (gen/fmap\n   (apply-gen function)\n   (apply gen/tuple args)))\n\n(defn- binding-vars\n  [bindings]\n  (map first (partition 2 bindings)))\n\n(defn- binding-gens\n  [bindings]\n  (map second (partition 2 bindings)))\n\n(defmacro for-all\n  \"Returns a property, which is the combination of some generators and\n  an assertion that should be true for all generated values. Properties\n  can be used with `quick-check` or `defspec`.\n\n  `for-all` takes a `let`-style bindings vector, where the right-hand\n  side of each binding is a generator.\n\n  The body should be an expression of the generated values that will\n  be tested for truthiness. Exceptions in the body will be caught and\n  treated as failures.\n\n  When there are multiple binding pairs, the earlier pairs are not\n  visible to the later pairs.\n\n  If there are multiple body expressions, all but the last one are\n  executed for side effects, as with `do`.\n\n  Example:\n\n  (for-all [a gen/large-integer\n            b gen/large-integer]\n    (>= (+ a b) a))\"\n  [bindings & body]\n  `(for-all* ~(vec (binding-gens bindings))\n             (fn [~@(binding-vars bindings)]\n               ~@body)))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4385__auto__","k__4386__auto__","this__4387__auto__","k42572","else__4388__auto__","G__42578","cljs.core/Keyword","error","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__42594","vec__42595","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__42571","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__42647","coll__4382__auto__","cljs.core/hash-unordered-coll","cljs.core/PROTOCOL_SENTINEL","this42573","other42574","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__42674","cljs.core/keyword-identical?","expr__42675","G__42677","G__42678","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","clojure.test.check.properties/ErrorResult","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__42576","extmap__4424__auto__","G__42711","cljs.core/record?","clojure.test.check.properties/->ErrorResult","clojure.test.check.properties/map->ErrorResult","_","clojure.test.check.properties/exception?","x","js/Error","clojure.test.check.properties/apply-gen","function","args","result","e42715","ret","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","ex","clojure.test.check.properties/for-all*","clojure.test.check.generators/fmap","clojure.test.check.generators/tuple","clojure.test.check.properties/binding-vars","bindings","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","clojure.test.check.properties/binding-gens","cljs.core/second"]]],"~:cache-keys",["~#cmap",[["^1C","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^16","~$goog.array","~$goog.asserts"]]],["^1C","goog/array/array.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1U"]]],["^1C","clojure/test/check/properties.cljc"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","^12","^14"]]],["^1C","clojure/test/check/generators.cljc"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","~$clojure.string","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$goog.string"]]],["^1C","goog/debug/error.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","clojure/test/check/random/doubles.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","~$clojure.test.check.random.longs"]]],["^1C","goog/dom/nodetype.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","clojure/test/check/rose_tree.cljc"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A"]]],["^1C","clojure/test/check/random.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","~$clojure.test.check.random.doubles","^1Z"]]],["^1C","goog/object/object.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1C","goog/math/long.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1U","~$goog.reflect"]]],["^1C","goog/string/internal.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","goog/functions/functions.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","goog/structs/map.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1C","goog/asserts/asserts.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1C","goog/uri/uri.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1T","^1U","^1Y","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1C","goog/base.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",[]]],["^1C","goog/structs/structs.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1T","~$goog.object"]]],["^1C","clojure/string.cljs"],[1630228118934,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","^1Y","~$goog.string.StringBuffer"]]],["^1C","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A"]]],["^1C","goog/string/string.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","~$goog.string.internal"]]],["^1C","goog/reflect/reflect.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","goog/string/stringbuffer.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","goog/iter/iter.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1T","^1U","~$goog.functions","~$goog.math"]]],["^1C","cljs/core.cljs"],[1630228118934,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["~$goog.math.Long","~$goog.math.Integer","^1Y","^2;","^1T","~$goog.Uri","^2<"]]],["^1C","clojure/test/check/random/longs.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A","~$clojure.test.check.random.longs.bit-count-impl","^2@","^A"]]],["^1C","goog/math/integer.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16"]]],["^1C","goog/uri/utils.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^1T","^1U","^1Y"]]],["^1C","clojure/test/check/results.cljc"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^16","^A"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",10,"^8",5,"^9",10,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",["^ ","^M","^N"],"^O",["^P",[]],"^Q",["^ ","^M",["^ ","^R",["^S",[["^T","~$&","^U"]]],"^V","Returns a property, which is the combination of some generators and\n  an assertion that should be true for all generated values. Properties\n  can be used with `quick-check` or `defspec`.\n\n  `for-all` takes a `let`-style bindings vector, where the right-hand\n  side of each binding is a generator.\n\n  The body should be an expression of the generated values that will\n  be tested for truthiness. Exceptions in the body will be caught and\n  treated as failures.\n\n  When there are multiple binding pairs, the earlier pairs are not\n  visible to the later pairs.\n\n  If there are multiple body expressions, all but the last one are\n  executed for side effects, as with `do`.\n\n  Example:\n\n  (for-all [a gen/large-integer\n            b gen/large-integer]\n    (>= (+ a b) a))","^7",68,"^8",1,"^6","clojure/test/check/properties.cljc","^W","^X","^Y","^N","^Z",true]],"^W","^N","^10",null,"^11",["^ ","^12","^12","^13","^12","^14","^14","^15","^14","^A","^A","^16","^16"],"^17",["^P",["^18","^19"]],"~:shadow/js-access-global",["^P",["Error"]],"^1:",null,"~:defs",["^ ","~$ErrorResult",["^ ","~:num-fields",1,"~:protocols",["^P",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$clojure.test.check.results/Result","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^W","~$clojure.test.check.properties/ErrorResult","^6","clojure/test/check/properties.cljc","^:",23,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",15,"~:record",true,"^9",15,"~:tag","~$function","~:skip-protocol-flag",["^P",["^3=","^3>","^3?","^3@","^3A","^3B","^3C","^3D","^3F","^3G","^3H","^3I","^3J","^3K","^3L"]]],"~$->ErrorResult",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^:",23,"^8",12,"^3O",true,"~:factory","~:positional","^7",15,"^9",15,"^R",["^S",["~$quote",["^S",[["~$error"]]]]],"^V","Positional factory function for clojure.test.check.properties/ErrorResult."],"^W","~$clojure.test.check.properties/->ErrorResult","^6","clojure/test/check/properties.cljc","^:",23,"~:method-params",["^S",[["^3Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^8",1,"^3O",true,"~:variadic?",false,"^3V","^3W","^7",15,"~:ret-tag","^3M","^9",15,"~:max-fixed-arity",1,"~:fn-var",true,"^R",["^S",["^3X",["^S",[["^3Y"]]]]],"^V","Positional factory function for clojure.test.check.properties/ErrorResult."],"~$map->ErrorResult",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^:",23,"^8",12,"^3O",true,"^3V","~:map","^7",15,"^9",15,"^R",["^S",["^3X",["^S",[["~$G__42576"]]]]],"^V","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"^W","~$clojure.test.check.properties/map->ErrorResult","^6","clojure/test/check/properties.cljc","^:",23,"^3[",["^S",[["^48"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^3O",true,"^42",false,"^3V","^47","^7",15,"^43","^3M","^9",15,"^44",1,"^45",true,"^R",["^S",["^3X",["^S",[["^48"]]]]],"^V","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"~$exception?",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",23,"^8",17,"^9",23,"^:",27,"~:private",true,"^R",["^S",["^3X",["^S",[["~$x"]]]]]],"^4;",true,"^W","~$clojure.test.check.properties/exception?","^6","clojure/test/check/properties.cljc","^:",27,"^3[",["^S",[["~$x"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^42",false,"^7",23,"^43","~$boolean","^9",23,"^44",1,"^45",true,"^R",["^S",["^3X",["^S",[["~$x"]]]]]],"~$apply-gen",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",27,"^8",17,"^9",27,"^:",26,"^4;",true,"^R",["^S",["^3X",["^S",[["^3R"]]]]]],"^4;",true,"^W","~$clojure.test.check.properties/apply-gen","^6","clojure/test/check/properties.cljc","^:",26,"^3[",["^S",[["^3R"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^42",false,"^7",27,"^43","^3R","^9",27,"^44",1,"^45",true,"^R",["^S",["^3X",["^S",[["^3R"]]]]]],"~$for-all*",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",45,"^8",7,"^9",45,"^:",15,"^R",["^S",["^3X",["^S",[["~$args","^3R"]]]]],"^V","A function version of `for-all`. Takes a sequence of N generators\n  and a function of N args, and returns a property that calls the\n  function with generated values and tests the return value for\n  truthiness, like with `for-all`.\n\n  Example:\n\n  (for-all* [gen/large-integer gen/large-integer]\n            (fn [a b] (>= (+ a b) a)))"],"^W","~$clojure.test.check.properties/for-all*","^6","clojure/test/check/properties.cljc","^:",15,"^3[",["^S",[["^4A","^3R"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^42",false,"^7",45,"^43","~$clojure.test.check.generators/Generator","^9",45,"^44",2,"^45",true,"^R",["^S",["^3X",["^S",[["^4A","^3R"]]]]],"^V","A function version of `for-all`. Takes a sequence of N generators\n  and a function of N args, and returns a property that calls the\n  function with generated values and tests the return value for\n  truthiness, like with `for-all`.\n\n  Example:\n\n  (for-all* [gen/large-integer gen/large-integer]\n            (fn [a b] (>= (+ a b) a)))"],"~$binding-vars",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",60,"^8",8,"^9",60,"^:",20,"^4;",true,"^R",["^S",["^3X",["^S",[["^T"]]]]]],"^4;",true,"^W","~$clojure.test.check.properties/binding-vars","^6","clojure/test/check/properties.cljc","^:",20,"^3[",["^S",[["^T"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^42",false,"^7",60,"^43","~$cljs.core/LazySeq","^9",60,"^44",1,"^45",true,"^R",["^S",["^3X",["^S",[["^T"]]]]]],"~$binding-gens",["^ ","^3U",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",64,"^8",8,"^9",64,"^:",20,"^4;",true,"^R",["^S",["^3X",["^S",[["^T"]]]]]],"^4;",true,"^W","~$clojure.test.check.properties/binding-gens","^6","clojure/test/check/properties.cljc","^:",20,"^3[",["^S",[["^T"]]],"^40",null,"^41",["^S",[null,null]],"^8",1,"^42",false,"^7",64,"^43","^4F","^9",64,"^44",1,"^45",true,"^R",["^S",["^3X",["^S",[["^T"]]]]]]],"^19",["^ ","^N","^N","^A","^A","^12","^12","^13","^12"],"~:cljs.analyzer/constants",["^ ","^17",["^P",["~:args","~:clojure.test.check.properties/error","~:function","~:result","~:error","^3Y"]],"~:order",["^4N","^4K","^3Y","^4M","^4L","^4J"]],"^1?",["^ ","^18",["^P",[]],"^19",["^P",[]]],"^1@",["^ "],"^1A",["^16","^A","^12","^14"]],"^Y","^N","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1O",[["^4R","~:static-fns"],true,["^4R","~:elide-asserts"],false,["^4R","~:optimize-constants"],null,["^4R","^1F"],null,["^4R","~:external-config"],null,["^4R","~:tooling-config"],null,["^4R","~:emit-constants"],null,["^4R","~:load-tests"],null,["^4R","~:form-size-threshold"],null,["^4R","~:infer-externs"],true,["^4R","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4R","~:fn-invoke-direct"],null,["^4R","~:source-map"],"/dev/null"]]]