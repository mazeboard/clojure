["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.doubles');\ngoog.require('clojure.test.check.random.longs');\n\n/**\n * @interface\n */\nclojure.test.check.random.IRandom = function(){};\n\n/**\n * Returns a random goog.math.Long based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_long = (function clojure$test$check$random$rand_long(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);\n} else {\nvar x__4433__auto__ = (((rng == null))?null:rng);\nvar m__4434__auto__ = (clojure.test.check.random.rand_long[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4434__auto__.call(null,rng));\n} else {\nvar m__4431__auto__ = (clojure.test.check.random.rand_long[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4431__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-long\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n *   based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_double = (function clojure$test$check$random$rand_double(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);\n} else {\nvar x__4433__auto__ = (((rng == null))?null:rng);\nvar m__4434__auto__ = (clojure.test.check.random.rand_double[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4434__auto__.call(null,rng));\n} else {\nvar m__4431__auto__ = (clojure.test.check.random.rand_double[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4431__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-double\",rng);\n}\n}\n}\n});\n\n/**\n * Returns two new RNGs [rng1 rng2], which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split = (function clojure$test$check$random$split(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$split$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$split$arity$1(rng);\n} else {\nvar x__4433__auto__ = (((rng == null))?null:rng);\nvar m__4434__auto__ = (clojure.test.check.random.split[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4434__auto__.call(null,rng));\n} else {\nvar m__4431__auto__ = (clojure.test.check.random.split[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4431__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a collection of `n` RNGs, which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split_n = (function clojure$test$check$random$split_n(rng,n){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$split_n$arity$2 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$split_n$arity$2(rng,n);\n} else {\nvar x__4433__auto__ = (((rng == null))?null:rng);\nvar m__4434__auto__ = (clojure.test.check.random.split_n[goog.typeOf(x__4433__auto__)]);\nif((!((m__4434__auto__ == null)))){\nreturn (m__4434__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4434__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4434__auto__.call(null,rng,n));\n} else {\nvar m__4431__auto__ = (clojure.test.check.random.split_n[\"_\"]);\nif((!((m__4431__auto__ == null)))){\nreturn (m__4431__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4431__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4431__auto__.call(null,rng,n));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split-n\",rng);\n}\n}\n}\n});\n\n/**\n * Helper for defining constants.\n */\nclojure.test.check.random.hex_long = (function clojure$test$check$random$hex_long(s){\nreturn clojure.test.check.random.longs.from_string(s,(16));\n});\n/**\n * Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\n */\nclojure.test.check.random.bxoubsr = (function clojure$test$check$random$bxoubsr(x,n){\nreturn clojure.test.check.random.longs.bit_xor(clojure.test.check.random.longs.unsigned_bit_shift_right(x,n),x);\n});\nclojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long(\"bf58476d1ce4e5b9\");\nclojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long(\"94d049bb133111eb\");\nclojure.test.check.random.mix_64 = (function clojure$test$check$random$mix_64(n){\nreturn clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(30)),clojure.test.check.random.mix_64_const_1),(27)),clojure.test.check.random.mix_64_const_2),(31));\n});\nclojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long(\"ff51afd7ed558ccd\");\nclojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long(\"c4ceb9fe1a85ec53\");\nclojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long(\"aaaaaaaaaaaaaaaa\");\nclojure.test.check.random.mix_gamma = (function clojure$test$check$random$mix_gamma(n){\nvar z = clojure.test.check.random.longs.bit_or(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(33)),clojure.test.check.random.mix_gamma_const_1),(33)),clojure.test.check.random.mix_gamma_const_2),(33)),clojure.test.check.random.longs.ONE);\nvar G__41317 = z;\nif(((24) > (function (){var G__41318 = clojure.test.check.random.bxoubsr(z,(1));\nreturn (clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1(G__41318) : clojure.test.check.random.longs.bit_count.call(null,G__41318));\n})())){\nreturn clojure.test.check.random.longs.bit_xor(G__41317,clojure.test.check.random.mix_gamma_const_3);\n} else {\nreturn G__41317;\n}\n});\n\n/**\n* @constructor\n * @implements {clojure.test.check.random.IRandom}\n*/\nclojure.test.check.random.JavaUtilSplittableRandom = (function (gamma,state){\nthis.gamma = gamma;\nthis.state = state;\n});\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn clojure.test.check.random.mix_64(clojure.test.check.random.longs._PLUS_(self__.state,self__.gamma));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn clojure.test.check.random.doubles.rand_long__GT_rand_double(this$__$1.clojure$test$check$random$IRandom$rand_long$arity$1(null));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,self__.state);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state_SINGLEQUOTE__SINGLEQUOTE_)),(new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)))], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = (function (this$,n){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__41332 = n;\nswitch (G__41332) {\ncase (0):\nreturn cljs.core.PersistentVector.EMPTY;\n\nbreak;\ncase (1):\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);\n\nbreak;\ndefault:\nvar n_dec = (n - (1));\nvar state__$1 = self__.state;\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n_dec,cljs.core.count(ret))){\nreturn cljs.core.persistent_BANG_(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state__$1))));\n} else {\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state__$1);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nvar new_rng = (new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)));\nvar G__41381 = state_SINGLEQUOTE__SINGLEQUOTE_;\nvar G__41382 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,new_rng);\nstate__$1 = G__41381;\nret = G__41382;\ncontinue;\n}\nbreak;\n}\n\n}\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gamma\",\"gamma\",-770466082,null),new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true;\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = \"clojure.test.check.random/JavaUtilSplittableRandom\";\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = (function (this__4374__auto__,writer__4375__auto__,opt__4376__auto__){\nreturn cljs.core._write(writer__4375__auto__,\"clojure.test.check.random/JavaUtilSplittableRandom\");\n});\n\n/**\n * Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom.\n */\nclojure.test.check.random.__GT_JavaUtilSplittableRandom = (function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma,state){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(gamma,state));\n});\n\nclojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long(\"9e3779b97f4a7c15\");\nclojure.test.check.random.make_java_util_splittable_random = (function clojure$test$check$random$make_java_util_splittable_random(seed){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma,(function (){var or__4131__auto__ = clojure.test.check.random.longs.__GT_long(seed);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad random seed!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null));\n}\n})()));\n});\nclojure.test.check.random.next_rng = (function (){var a = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),clojure.test.check.random.make_java_util_splittable_random((new Date()).valueOf())], null));\nreturn ((function (a){\nreturn (function (){\nreturn new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,((function (a){\nreturn (function (p__41339){\nvar map__41340 = p__41339;\nvar map__41340__$1 = (((((!((map__41340 == null))))?(((((map__41340.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41340.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41340):map__41340);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41340__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar vec__41345 = clojure.test.check.random.split(state);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41345,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41345,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),r1,new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163),r2], null);\n});})(a))\n));\n});\n;})(a))\n})();\n/**\n * Given an optional integer (or goog.math.Long) seed, returns an\n *   implementation of the IRandom protocol.\n */\nclojure.test.check.random.make_random = (function clojure$test$check$random$make_random(var_args){\nvar G__41352 = arguments.length;\nswitch (G__41352) {\ncase 0:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn (clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0 ? clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0() : clojure.test.check.random.next_rng.call(null));\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = (function (seed){\nreturn clojure.test.check.random.make_java_util_splittable_random(seed);\n});\n\nclojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",27,"~:author","Gary Fredericks","~:doc","Purely functional and splittable pseudo-random number generators."],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.doubles","^[","~$doubles","^[","~$clojure.test.check.random.longs","^11","~$longs","^11","^C","^C","~$goog","^13"],"~:seen",["^P",["~:require"]],"~:uses",["^ ","~$+","^11","~$*","^11","^R","^11","^T","^11","^Q","^11","^S","^11"],"~:require-macros",["^ ","^C","^C"],"~:form",["~#list",["~$ns","^V",["^19",["~:refer-clojure","~:exclude",["~$+","~$*","^R","^T","^Q","^S"]]],["^19",["^15",["^[","~:as","^10"],["^11","^1=","^12","~:refer",["~$+","~$*","^R","^T","^Q","^S"]]]]]],"~:flags",["^ ","^15",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^13","^C","^[","^11"]],"^X","^V","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random.cljs"],"~:compiled-at",1630228420413,"~:resource-name","clojure/test/check/random.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["x__4433__auto__","m__4434__auto__","clojure.test.check.random/rand-long","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","clojure.test.check.random/rand-double","clojure.test.check.random/split","clojure.test.check.random/split-n","clojure.test.check.random/IRandom","rng","n","clojure.test.check.random/hex-long","s","clojure.test.check.random.longs/from-string","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","z","G__41317","G__41318","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","_","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__41332","n-dec","ret","cljs.core/transient","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","seed","or__4131__auto__","clojure.test.check.random.longs/->long","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.test.check.random/next-rng","a","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/Date","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__41339","map__41340","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__41345","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","r1","r2","var_args","G__41352","clojure.test.check.random/make-random","js/Error"]]],"~:cache-keys",["~#cmap",[["^1C","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^13","~$goog.array","~$goog.asserts"]]],["^1C","goog/array/array.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1U"]]],["^1C","goog/debug/error.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","clojure/test/check/random/doubles.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^C","^11"]]],["^1C","goog/dom/nodetype.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","clojure/test/check/random.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^C","^[","^11"]]],["^1C","goog/object/object.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1C","goog/math/long.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1U","~$goog.reflect"]]],["^1C","goog/string/internal.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","goog/functions/functions.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","goog/structs/map.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1C","goog/asserts/asserts.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1C","goog/uri/uri.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1T","^1U","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1C","goog/base.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",[]]],["^1C","goog/structs/structs.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1T","~$goog.object"]]],["^1C","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^C"]]],["^1C","goog/string/string.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","~$goog.string.internal"]]],["^1C","goog/reflect/reflect.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","goog/string/stringbuffer.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","goog/iter/iter.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1T","^1U","~$goog.functions","~$goog.math"]]],["^1C","cljs/core.cljs"],[1630228118934,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["~$goog.math.Long","~$goog.math.Integer","^20","^26","^1T","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1C","clojure/test/check/random/longs.cljs"],[1630228119162,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^C","~$clojure.test.check.random.longs.bit-count-impl","^2:","^C"]]],["^1C","goog/math/integer.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13"]]],["^1C","goog/uri/utils.js"],[1630228359392,"^1P",["^ ","^1Q",null,"^1R",["^P",[]],"^1S",["^13","^1T","^1U","^20"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random.cljs","^7",12,"^8",2,"^9",12,"^:",27,"^;","Gary Fredericks","^<","Purely functional and splittable pseudo-random number generators."],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M"],"~:shadow/protocol-prefixes",["^P",["clojure$test$check$random$IRandom$"]],"^N",null,"^O",["^P",["^Q","^R","^S","~$*","^T","~$+"]],"^U","^V","^Y",null,"^Z",["^ ","^[","^[","^10","^[","^11","^11","^12","^11","^C","^C","^13","^13"],"^14",["^P",["^15"]],"~:shadow/js-access-global",["^P",["Date","Error"]],"^16",["^ ","~$+","^11","~$*","^11","^R","^11","^T","^11","^Q","^11","^S","^11"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",71,"^8",16,"^9",71,"^:",33,"~:private",true],"^32",true,"^U","~$clojure.test.check.random/mix-gamma-const-1","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",71,"^9",71,"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",123,"^8",7,"^9",123,"^:",39,"~:arglists",["^19",["~$quote",["^19",[["~$seed"]]]]]],"^U","~$clojure.test.check.random/make-java-util-splittable-random","^6","clojure/test/check/random.cljs","^:",39,"~:method-params",["^19",[["^3:"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^8",1,"~:variadic?",false,"^7",123,"~:ret-tag","~$clojure.test.check.random/JavaUtilSplittableRandom","^9",123,"~:max-fixed-arity",1,"~:fn-var",true,"^38",["^19",["^39",["^19",[["^3:"]]]]]],"~$rand-long",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",20,"^8",4,"^9",20,"^:",13,"~:protocol","~$clojure.test.check.random/IRandom","^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^38",["^19",["^39",["^19",[["~$rng"]]]]]],"^3E","^3F","^U","~$clojure.test.check.random/rand-long","^6","clojure/test/check/random.cljs","^:",13,"^3<",["^19",[["^3G"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",19,"^3@","^35","^9",20,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["^3G"]]]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",62,"^8",17,"^9",62,"^:",23,"^32",true,"^38",["^19",["^39",["^19",[["~$n"]]]]]],"^32",true,"^U","~$clojure.test.check.random/mix-64","^6","clojure/test/check/random.cljs","^:",23,"^3<",["^19",[["~$n"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",62,"^3@","^35","^9",62,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["~$n"]]]]]],"~$golden-gamma",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",120,"^8",16,"^9",120,"^:",28,"^32",true],"^32",true,"^U","~$clojure.test.check.random/golden-gamma","^6","clojure/test/check/random.cljs","^:",28,"^8",1,"^7",120,"^9",120,"^34","^35"],"~$mix-gamma-const-2",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",72,"^8",16,"^9",72,"^:",33,"^32",true],"^32",true,"^U","~$clojure.test.check.random/mix-gamma-const-2","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",72,"^9",72,"^34","^35"],"~$mix-64-const-2",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",60,"^8",16,"^9",60,"^:",30,"^32",true],"^32",true,"^U","~$clojure.test.check.random/mix-64-const-2","^6","clojure/test/check/random.cljs","^:",30,"^8",1,"^7",60,"^9",60,"^34","^35"],"~$bxoubsr",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",54,"^8",17,"^9",54,"^:",24,"^32",true,"^38",["^19",["^39",["^19",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^32",true,"^U","~$clojure.test.check.random/bxoubsr","^6","clojure/test/check/random.cljs","^:",24,"^3<",["^19",[["~$x","~$n"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",54,"^3@","^35","^9",54,"^3B",2,"^3C",true,"^38",["^19",["^39",["^19",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",139,"^8",7,"^9",139,"^:",18,"^38",["^19",["^39",["^19",[[],["^3:"]]]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^3?",false,"~:fixed-arity",1,"^3B",1,"^3<",["^19",[[],["^3:"]]],"^38",["^19",[[],["^3:"]]],"^3>",["^19",[null,null]]]],"^U","~$clojure.test.check.random/make-random","^6","clojure/test/check/random.cljs","^:",18,"^3T",["^ ","^3?",false,"^3U",1,"^3B",1,"^3<",["^19",[[],["^3:"]]],"^38",["^19",[[],["^3:"]]],"^3>",["^19",[null,null]]],"^3<",["^19",[[],["^3:"]]],"^3=",null,"^3U",1,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"~:methods",[["^ ","^3U",0,"^3?",false,"^34","^35"],["^ ","^3U",1,"^3?",false,"^34","^3A"]],"^7",139,"^9",139,"^3B",1,"^3C",true,"^38",["^19",[[],["^3:"]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",75,"^8",17,"^9",75,"^:",26,"^32",true,"^38",["^19",["^39",["^19",[["~$n"]]]]]],"^32",true,"^U","~$clojure.test.check.random/mix-gamma","^6","clojure/test/check/random.cljs","^:",26,"^3<",["^19",[["~$n"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",75,"^3@","^35","^9",75,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",73,"^8",16,"^9",73,"^:",33,"^32",true],"^32",true,"^U","~$clojure.test.check.random/mix-gamma-const-3","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",73,"^9",73,"^34","^35"],"~$split-n",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",37,"^8",4,"^9",37,"^:",11,"^3E","^3F","^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^38",["^19",["^39",["^19",[["^3G","~$n"]]]]]],"^3E","^3F","^U","~$clojure.test.check.random/split-n","^6","clojure/test/check/random.cljs","^:",11,"^3<",["^19",[["^3G","~$n"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",19,"^3@","^35","^9",37,"^3B",2,"^3C",true,"^38",["^19",["^39",["^19",[["^3G","~$n"]]]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",130,"^8",16,"^9",130,"^:",24,"^32",true],"^32",true,"^U","~$clojure.test.check.random/next-rng","^6","clojure/test/check/random.cljs","^:",24,"^8",1,"^7",130,"^9",130,"^34","~$function"],"~$hex-long",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",49,"^8",17,"^9",49,"^:",25,"^32",true,"^38",["^19",["^39",["^19",[["~$s"]]]]],"^<","Helper for defining constants."],"^32",true,"^U","~$clojure.test.check.random/hex-long","^6","clojure/test/check/random.cljs","^:",25,"^3<",["^19",[["~$s"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",49,"^3@","^35","^9",49,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["~$s"]]]]],"^<","Helper for defining constants."],"~$rand-double",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",25,"^8",4,"^9",25,"^:",15,"^3E","^3F","^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^38",["^19",["^39",["^19",[["^3G"]]]]]],"^3E","^3F","^U","~$clojure.test.check.random/rand-double","^6","clojure/test/check/random.cljs","^:",15,"^3<",["^19",[["^3G"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",19,"^3@","^35","^9",25,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["^3G"]]]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",59,"^8",16,"^9",59,"^:",30,"^32",true],"^32",true,"^U","~$clojure.test.check.random/mix-64-const-1","^6","clojure/test/check/random.cljs","^:",30,"^8",1,"^7",59,"^9",59,"^34","^35"],"~$split",["^ ","^37",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^3E","^3F","^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^38",["^19",["^39",["^19",[["^3G"]]]]]],"^3E","^3F","^U","~$clojure.test.check.random/split","^6","clojure/test/check/random.cljs","^:",9,"^3<",["^19",[["^3G"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^7",19,"^3@","^35","^9",31,"^3B",1,"^3C",true,"^38",["^19",["^39",["^19",[["^3G"]]]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^P",["^3F"]],"^U","^3A","^6","clojure/test/check/random.cljs","^:",34,"~:type",true,"^8",10,"^7",91,"~:record",false,"^9",91,"^34","^44","~:skip-protocol-flag",null],"~$IRandom",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",19,"^8",14,"^9",19,"^:",21,"~:protocol-symbol",true,"~:jsdoc",["^19",["@interface"]],"~:protocol-info",["^ ","^3W",["^ ","^3D",[["^3G"]],"^47",[["^3G"]],"^4;",[["^3G"]],"^40",[["^3G","~$n"]]]]],"^4D",true,"^U","^3F","^6","clojure/test/check/random.cljs","^:",21,"^8",1,"^7",19,"^4F",["^ ","^3W",["^ ","^3D",[["^3G"]],"^47",[["^3G"]],"^4;",[["^3G"]],"^40",[["^3G","~$n"]]]],"~:info",null,"^9",19,"^34","^35","~:impls",["^P",["^3A"]],"^4E",["^19",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^37",null,"^5",["^ ","^4?",["^P",["^3F"]],"^6","clojure/test/check/random.cljs","^:",34,"^8",10,"~:factory","~:positional","^7",91,"^9",91,"^38",["^19",["^39",["^19",[["~$gamma","~$state"]]]]],"^4B",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^4?",["^P",["^3F"]],"^U","~$clojure.test.check.random/->JavaUtilSplittableRandom","^6","clojure/test/check/random.cljs","^:",34,"^3<",["^19",[["^4L","^4M"]]],"^3=",null,"^3>",["^19",[null,null]],"^8",1,"^3?",false,"^4J","^4K","^7",91,"^3@","^3A","^9",91,"^3B",2,"^3C",true,"^38",["^19",["^39",["^19",[["^4L","^4M"]]]]],"^4B",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"^17",["^ ","^C","^C"],"~:cljs.analyzer/constants",["^ ","^14",["^P",["~:returned","~:state","~:seed","^4M","^4L"]],"~:order",["^4L","^4M","^4R","^4Q","^4P"]],"^1?",["^ ","^15",["^P",[]]],"^1@",["^ "],"^1A",["^13","^C","^[","^11"]],"^X","^V","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1O",[["^4V","~:static-fns"],true,["^4V","~:elide-asserts"],false,["^4V","~:optimize-constants"],null,["^4V","^1F"],null,["^4V","~:external-config"],null,["^4V","~:tooling-config"],null,["^4V","~:emit-constants"],null,["^4V","~:load-tests"],null,["^4V","~:form-size-threshold"],null,["^4V","~:infer-externs"],true,["^4V","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4V","~:fn-invoke-direct"],null,["^4V","~:source-map"],"/dev/null"]]]