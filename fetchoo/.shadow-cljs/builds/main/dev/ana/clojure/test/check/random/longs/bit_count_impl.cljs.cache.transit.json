["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('cljs.core');\nclojure.test.check.random.longs.bit_count_impl.lookup = (function (){var arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(arr[(0)] = (0));\n\nvar n__4607__auto___41212 = (256);\nvar i_41213 = (0);\nwhile(true){\nif((i_41213 < n__4607__auto___41212)){\n(arr[i_41213] = ((arr[(i_41213 >> (1))]) + (i_41213 & (1))));\n\nvar G__41214 = (i_41213 + (1));\ni_41213 = G__41214;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn arr;\n})();\n/**\n * Returns a JS number (not a Long), the number of set bits in the\n *   given Long.\n */\nclojure.test.check.random.longs.bit_count_impl.bit_count = (function clojure$test$check$random$longs$bit_count_impl$bit_count(x){\nvar low = x.low_;\nvar high = x.high_;\nreturn ((((((((clojure.test.check.random.longs.bit_count_impl.lookup[(low & (255))]) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (24)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[(high & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (24)) & (255))]));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs/bit_count_impl.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",48,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:op","~:ns","~:imports",null,"~:requires",["^ ","^B","^B","~$goog","^W"],"~:seen",["^O",[]],"~:uses",null,"~:require-macros",["^ ","^B","^B"],"~:form",["~#list",["~$ns","^R",["^10",["~:refer-clojure","~:exclude",["^P"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^W","^B"]],"^T","^R","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs/bit_count_impl.cljs"],"~:compiled-at",1630228420329,"~:resource-name","clojure/test/check/random/longs/bit_count_impl.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.longs.bit-count-impl\n  (:refer-clojure :exclude [bit-count]))\n\n;; Had to put this in a separate namespace because the + doesn't get\n;; inlined if it's called as (core/+ ...). This might change in future\n;; CLJS versions?\n\n(def ^:private lookup\n  (let [arr (make-array 256)]\n    (aset arr 0 0)\n    (dotimes [i 256]\n      (aset arr i (+ (aget arr (bit-shift-right i 1))\n                     (bit-and i 1))))\n    arr))\n\n(defn bit-count\n  \"Returns a JS number (not a Long), the number of set bits in the\n  given Long.\"\n  [x]\n  (let [low (.-low_ x)\n        high (.-high_ x)]\n    (+ (aget lookup (-> low  (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 24) (bit-and 255)))\n       (aget lookup (-> high (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 24) (bit-and 255))))))\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;AAiBA,AAAeA,AACbiBE,AAC3B,AAAA,AAASA;;AAF1B,AAAA,AAAA,AAAUA;;;;AAAV;;;;AAGAF;;AAEJ;;;;AAAA,AAAMG,AAGHC;AAHH,AAIE,AAAMC,AAAI,AAAQD;AACZE,AAAK,AAASF;AADpB,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAG,AAAML,AAAWM,AAAK,AAAA,AACtB,AAAMN,AAAWM,AAAK,AAAA,AAAoB,AAAA,AAC1C,AAAMN,AAAWM,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMN,AAAWM,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMN,AAAWO,AAAK,AAAA,AACtB,AAAMP,AAAWO,AAAK,AAAA,AAAoB,AAAA,AAC1C,AAAMP,AAAWO,AAAK,AAAA,AAAqB,AAAA,AAC3C,AAAMP,AAAWO,AAAK,AAAA,AAAqB,AAAA","names",["clojure.test.check.random.longs.bit-count-impl/lookup","arr","n__4607__auto__","i","clojure.test.check.random.longs.bit-count-impl/bit-count","x","low","high"]]],"~:cache-keys",["~#cmap",[["^18","goog/math/math.js"],[1630228359392,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["^W","~$goog.array","~$goog.asserts"]]],["^18","goog/array/array.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1J"]]],["^18","goog/debug/error.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/dom/nodetype.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/object/object.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^18","goog/math/long.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1J","~$goog.reflect"]]],["^18","goog/string/internal.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/functions/functions.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/structs/map.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^18","goog/asserts/asserts.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^18","goog/uri/uri.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1I","^1J","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^18","goog/base.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",[]]],["^18","goog/structs/structs.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1I","~$goog.object"]]],["^18","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^B"]]],["^18","goog/string/string.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","~$goog.string.internal"]]],["^18","goog/reflect/reflect.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/string/stringbuffer.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/iter/iter.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1I","^1J","~$goog.functions","~$goog.math"]]],["^18","cljs/core.cljs"],[1630228118934,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^1Q","^1W","^1I","~$goog.Uri","~$goog.string.StringBuffer"]]],["^18","goog/math/integer.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W"]]],["^18","goog/uri/utils.js"],[1630228359392,"^1E",["^ ","^1F",null,"^1G",["^O",[]],"^1H",["^W","^1I","^1J","^1Q"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",11,"^8",2,"^9",11,"^:",48,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P"]],"^Q","^R","^U",null,"^V",["^ ","^B","^B","^W","^W"],"^X",["^O",[]],"^Y",null,"~:defs",["^ ","~$lookup",["^ ","^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",16,"^9",18,"^:",22,"~:private",true],"^2P",true,"^Q","~$clojure.test.check.random.longs.bit-count-impl/lookup","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^:",22,"^8",1,"^7",18,"^9",18,"~:tag","~$array"],"^P",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",26,"^8",7,"^9",26,"^:",16,"~:arglists",["^10",["~$quote",["^10",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^Q","~$clojure.test.check.random.longs.bit-count-impl/bit-count","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^:",16,"~:method-params",["^10",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",26,"~:ret-tag","~$number","^9",26,"~:max-fixed-arity",1,"~:fn-var",true,"^2U",["^10",["^2V",["^10",[["~$x"]]]]],"^2W","Returns a JS number (not a Long), the number of set bits in the\n  given Long."]],"^Z",["^ ","^B","^B"],"^14",["^ "],"^15",["^ "],"^16",["^W","^B"]],"^T","^R","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1D",[["^37","~:static-fns"],true,["^37","~:elide-asserts"],false,["^37","~:optimize-constants"],null,["^37","^1;"],null,["^37","~:external-config"],null,["^37","~:tooling-config"],null,["^37","~:emit-constants"],null,["^37","~:load-tests"],null,["^37","~:form-size-threshold"],null,["^37","~:infer-externs"],true,["^37","^1="],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^37","~:fn-invoke-direct"],null,["^37","~:source-map"],"/dev/null"]]]