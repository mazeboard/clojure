["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.form_state');\ngoog.require('cljs.core');\ngoog.require('cljs.spec.alpha');\ngoog.require('clojure.set');\ngoog.require('taoensso.timbre');\ngoog.require('edn_query_language.core');\ngoog.require('ghostwheel.core');\ngoog.require('com.fulcrologic.fulcro.algorithms.tempid');\ngoog.require('com.fulcrologic.fulcro.mutations');\ngoog.require('com.fulcrologic.fulcro.components');\ncom.fulcrologic.fulcro.algorithms.form_state.ident_generator = (function com$fulcrologic$fulcro$algorithms$form_state$ident_generator(){\nreturn cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.createAsIfByAssoc([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),(1)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"other\",\"by-id\",\"other/by-id\",-2109321389),(9)], null)]));\n});\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),new cljs.core.Symbol(\"edn-query-language.core\",\"ident?\",\"edn-query-language.core/ident?\",-1410852474,null),new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"ident-generator\",\"com.fulcrologic.fulcro.algorithms.form-state/ident-generator\",-370854661,null)),cljs.spec.alpha.with_gen(edn_query_language.core.ident_QMARK_,com.fulcrologic.fulcro.algorithms.form_state.ident_generator));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"every\",\"cljs.spec.alpha/every\",123912744,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,\"keyword?\",\"keyword?\",1917797069,null),cljs.core.keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64971){\nreturn cljs.core.set_QMARK_(G__64971);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.set_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"every\",\"cljs.spec.alpha/every\",123912744,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null))], null),null));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Symbol(null,\"keyword?\",\"keyword?\",1917797069,null),new cljs.core.Symbol(null,\"any?\",\"any?\",-318999933,null)),cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword_QMARK_,cljs.core.any_QMARK_], null)),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"into\",\"into\",-150836029),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64978){\nreturn cljs.core.map_QMARK_(G__64978);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.map_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"kfn\",\"cljs.spec.alpha/kfn\",672643897),(function (i__12903__auto__,v__12904__auto__){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v__12904__auto__,(0));\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))], null),null));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Symbol(null,\"keyword?\",\"keyword?\",1917797069,null),new cljs.core.Symbol(null,\"any?\",\"any?\",-318999933,null)),cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword_QMARK_,cljs.core.any_QMARK_], null)),new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"into\",\"into\",-150836029),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64985){\nreturn cljs.core.map_QMARK_(G__64985);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.map_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"kfn\",\"cljs.spec.alpha/kfn\",672643897),(function (i__12903__auto__,v__12904__auto__){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v__12904__auto__,(0));\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))], null),null));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"every\",\"cljs.spec.alpha/every\",123912744,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(null,\"keyword?\",\"keyword?\",1917797069,null),cljs.core.keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__64986){\nreturn cljs.core.set_QMARK_(G__64986);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.set_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"every\",\"cljs.spec.alpha/every\",123912744,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"set?\",\"cljs.core/set?\",-1176684971,null))], null),null));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833)], null),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__64990){\nreturn cljs.core.map_QMARK_(G__64990);\n}),(function (G__64990){\nreturn cljs.core.contains_QMARK_(G__64990,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965));\n}),(function (G__64990){\nreturn cljs.core.contains_QMARK_(G__64990,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\n})], null),(function (G__64990){\nreturn ((cljs.core.map_QMARK_(G__64990)) && (cljs.core.contains_QMARK_(G__64990,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965))) && (cljs.core.contains_QMARK_(G__64990,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833))));\n}),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833)))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705)], null)])));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"validity\",\"com.fulcrologic.fulcro.algorithms.form-state/validity\",-1003224837),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),\"null\",new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),\"null\",new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516),\"null\"], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),null,new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),null,new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516),null], null), null));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"denormalized-form\",\"com.fulcrologic.fulcro.algorithms.form-state/denormalized-form\",2115950844),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__65005){\nreturn cljs.core.map_QMARK_(G__65005);\n}),(function (G__65005){\nreturn cljs.core.contains_QMARK_(G__65005,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\n})], null),(function (G__65005){\nreturn ((cljs.core.map_QMARK_(G__65005)) && (cljs.core.contains_QMARK_(G__65005,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)))], null),null])));\n/**\n * Returns the set of defined form fields for the given component class (or instance).\n */\ncom.fulcrologic.fulcro.algorithms.form_state.get_form_fields = (function com$fulcrologic$fulcro$algorithms$form_state$get_form_fields(class$){\nreturn com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic(class$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"form-fields\",\"form-fields\",35924568)], 0));\n});\n/**\n * Returns the form database table ID for the given entity ident.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.form_id = (function com$fulcrologic$fulcro$algorithms$form_state$form_id(entity_ident){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),cljs.core.first(entity_ident),new cljs.core.Keyword(null,\"row\",\"row\",-570139521),cljs.core.second(entity_ident)], null);\n});\n\nvar options__57867__auto___65295 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),(function com$fulcrologic$fulcro$algorithms$form_state$query_STAR_(this$){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282)], null);\n}),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),(function com$fulcrologic$fulcro$algorithms$form_state$ident_STAR_(this$,p__65039){\nvar map__65040 = p__65039;\nvar map__65040__$1 = (((((!((map__65040 == null))))?(((((map__65040.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65040.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65040):map__65040);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65040__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65040__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65040__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65040__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar pristine_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65040__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"forms-by-ident\",\"com.fulcrologic.fulcro.algorithms.form-state/forms-by-ident\",827952006),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),cljs.core.first(id),new cljs.core.Keyword(null,\"row\",\"row\",-570139521),cljs.core.second(id)], null)], null);\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),(function com$fulcrologic$fulcro$algorithms$form_state$render_FormConfig(this$){\nreturn com.fulcrologic.fulcro.components.wrapped_render(this$,(function (){\nvar map__65047 = com.fulcrologic.fulcro.components.props(this$);\nvar map__65047__$1 = (((((!((map__65047 == null))))?(((((map__65047.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65047.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65047):map__65047);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar pristine_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282));\nreturn null;\n}));\n})], null);\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.form_state !== 'undefined') && (typeof com.fulcrologic.fulcro.algorithms.form_state.FormConfig !== 'undefined')){\n} else {\n/**\n * A component supporting normalization of form state configuration. Use Fulcro Inspect for viewing that data.\n *   Rendering isn't supported on this component so it will work with React Native.\n *   Can also render the form config, if that is useful to you.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.FormConfig = ((function (options__57867__auto___65295){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$FormConfig(props__57868__auto__){\nvar this__57869__auto__ = this;\nvar temp__5751__auto___65299 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(options__57867__auto___65295,new cljs.core.Keyword(null,\"initLocalState\",\"initLocalState\",-46503876));\nif(cljs.core.truth_(temp__5751__auto___65299)){\nvar init_state__57870__auto___65300 = temp__5751__auto___65299;\nthis__57869__auto__.state = (function (){var obj65059 = ({\"fulcro$state\":(function (){var G__65060 = this__57869__auto__;\nvar G__65061 = goog.object.get(props__57868__auto__,\"fulcro$value\");\nreturn (init_state__57870__auto___65300.cljs$core$IFn$_invoke$arity$2 ? init_state__57870__auto___65300.cljs$core$IFn$_invoke$arity$2(G__65060,G__65061) : init_state__57870__auto___65300.call(null,G__65060,G__65061));\n})()});\nreturn obj65059;\n})();\n} else {\nthis__57869__auto__.state = (function (){var obj65063 = ({\"fulcro$state\":cljs.core.PersistentArrayMap.EMPTY});\nreturn obj65063;\n})();\n}\n\nreturn null;\n});})(options__57867__auto___65295))\n;\n}\n\ncom.fulcrologic.fulcro.components.configure_component_BANG_(com.fulcrologic.fulcro.algorithms.form_state.FormConfig,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"FormConfig\",\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\",-841101890),options__57867__auto___65295);\n/**\n * A query join to ::form-config. This should be added to the query of a component that is\n *   using form state support.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.form_config_join = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854),com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.algorithms.form_state.FormConfig)], null);\n/**\n * Generate a form config given:\n * \n *   entity-ident - The ident of the entity you're configuring forms for.\n *   fields - A set of keywords on the entity that is the form.\n *   subforms - An optional set of keywords on the entity that is the form, for the joins to subforms.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.form_config = (function com$fulcrologic$fulcro$algorithms$form_state$form_config(var_args){\nvar G__65068 = arguments.length;\nswitch (G__65068) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$2 = (function (entity_ident,fields){\nreturn com.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$3(entity_ident,fields,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$3 = (function (entity_ident,fields,subforms){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),entity_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833),fields,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705),cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__65074){\nvar vec__65075 = p__65074;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65075,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65075,(1),null);\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([k,cljs.core.with_meta(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),v], null))]);\n})),subforms)], null);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$lang$maxFixedArity = 3;\n\ncom.fulcrologic.fulcro.algorithms.form_state.derive_form_info = (function com$fulcrologic$fulcro$algorithms$form_state$derive_form_info(class$){\nvar query_nodes = (function (){var G__65081 = class$;\nvar G__65081__$1 = (((G__65081 == null))?null:com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(G__65081));\nvar G__65081__$2 = (((G__65081__$1 == null))?null:edn_query_language.core.query__GT_ast(G__65081__$1));\nif((G__65081__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__65081__$2);\n}\n})();\nvar query_nodes_by_key = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (query_nodes){\nreturn (function (n){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(n),n], null);\n});})(query_nodes))\n),query_nodes);\nvar join_component = ((function (query_nodes,query_nodes_by_key){\nreturn (function (k){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(query_nodes_by_key,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,new cljs.core.Keyword(null,\"component\",\"component\",1555936782)], null));\n});})(query_nodes,query_nodes_by_key))\n;\nvar map__65080 = cljs.core.group_by(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),query_nodes);\nvar map__65080__$1 = (((((!((map__65080 == null))))?(((((map__65080.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65080.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65080):map__65080);\nvar props = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65080__$1,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332));\nvar joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65080__$1,new cljs.core.Keyword(null,\"join\",\"join\",-758861890));\nvar join_keys = cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),joins));\nvar prop_keys = cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),props));\nvar queries_for_config_QMARK_ = cljs.core.contains_QMARK_(join_keys,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar all_fields = com.fulcrologic.fulcro.algorithms.form_state.get_form_fields(class$);\nvar has_fields_QMARK_ = cljs.core.seq(all_fields);\nvar fields = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(all_fields,prop_keys);\nvar subform_keys = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(all_fields,join_keys);\nvar subforms = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (query_nodes,query_nodes_by_key,join_component,map__65080,map__65080__$1,props,joins,join_keys,prop_keys,queries_for_config_QMARK_,all_fields,has_fields_QMARK_,fields,subform_keys){\nreturn (function (k){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.with_meta(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),join_component(k)], null))], null);\n});})(query_nodes,query_nodes_by_key,join_component,map__65080,map__65080__$1,props,joins,join_keys,prop_keys,queries_for_config_QMARK_,all_fields,has_fields_QMARK_,fields,subform_keys))\n),subform_keys);\nif(queries_for_config_QMARK_){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Attempt to add form configuration to \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(class$)),\", but it does not query for config!\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"offending-component\",\"offending-component\",385750063),class$], null));\n}\n\nif(has_fields_QMARK_){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Attempt to add form configuration to \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(class$)),\", but it does not declare any fields!\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"offending-component\",\"offending-component\",385750063),class$], null));\n}\n\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [fields,subforms,subform_keys], null);\n});\n/**\n * Add form configuration data to a *denormalized* entity (e.g. pre-merge). This is useful in\n *   initial state or when using `merge-component!`. This function *will not* touch an entity\n *   that already has form config but will recurse the entire form set. It can therefore be\n *   invoked on the top-level of the form set when adding, for example, an instance of a sub-form.\n * \n *   class - The component class.\n *   entity - A denormalized (tree) of data that matches the given component class.\n * \n *   Returns the (possibly updated) denormalized entity, ready to merge.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.add_form_config = (function com$fulcrologic$fulcro$algorithms$form_state$add_form_config(class$,entity){\nvar vec__65093 = com.fulcrologic.fulcro.algorithms.form_state.derive_form_info(class$);\nvar fields = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65093,(0),null);\nvar subform_classmap = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65093,(1),null);\nvar subform_keys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65093,(2),null);\nvar local_entity = ((cljs.core.contains_QMARK_(entity,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)))?entity:(function (){var pristine_state = cljs.core.select_keys(entity,fields);\nvar subform_ident = ((function (pristine_state,vec__65093,fields,subform_classmap,subform_keys){\nreturn (function (k,entity__$1){\nvar G__65096 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(subform_classmap,k);\nvar G__65096__$1 = (((G__65096 == null))?null:cljs.core.meta(G__65096));\nvar G__65096__$2 = (((G__65096__$1 == null))?null:new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__65096__$1));\nif((G__65096__$2 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(G__65096__$2,entity__$1);\n}\n});})(pristine_state,vec__65093,fields,subform_classmap,subform_keys))\n;\nvar subform_keys__$1 = cljs.core.set(cljs.core.keys(subform_classmap));\nvar subform_refs = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (pristine_state,subform_ident,subform_keys__$1,vec__65093,fields,subform_classmap,subform_keys){\nreturn (function (refs,k){\nvar items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,k);\nif(cljs.core.map_QMARK_(items)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(refs,k,subform_ident(k,items));\n} else {\nif(cljs.core.vector_QMARK_(items)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(refs,k,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (items,pristine_state,subform_ident,subform_keys__$1,vec__65093,fields,subform_classmap,subform_keys){\nreturn (function (p1__65091_SHARP_){\nreturn subform_ident(k,p1__65091_SHARP_);\n});})(items,pristine_state,subform_ident,subform_keys__$1,vec__65093,fields,subform_classmap,subform_keys))\n,items));\n} else {\nreturn refs;\n\n}\n}\n});})(pristine_state,subform_ident,subform_keys__$1,vec__65093,fields,subform_classmap,subform_keys))\n,cljs.core.PersistentArrayMap.EMPTY,subform_keys__$1);\nvar pristine_state__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pristine_state,subform_refs], 0));\nvar config = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(class$,entity),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833),fields,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),pristine_state__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705),(function (){var or__4131__auto__ = subform_classmap;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})()], null);\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([entity,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854),config], null)], 0));\n})());\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__65093,fields,subform_classmap,subform_keys,local_entity){\nreturn (function (resulting_entity,k){\nvar c = (function (){var G__65099 = subform_classmap;\nvar G__65099__$1 = (((G__65099 == null))?null:cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__65099,k));\nvar G__65099__$2 = (((G__65099__$1 == null))?null:cljs.core.meta(G__65099__$1));\nif((G__65099__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__65099__$2);\n}\n})();\nvar child = cljs.core.get.cljs$core$IFn$_invoke$arity$2(resulting_entity,k);\ntry{if(cljs.core.truth_((function (){var and__4120__auto__ = c;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = child;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.vector_QMARK_(child);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resulting_entity,k,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (c,child,vec__65093,fields,subform_classmap,subform_keys,local_entity){\nreturn (function (p1__65092_SHARP_){\nreturn (com.fulcrologic.fulcro.algorithms.form_state.add_form_config.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.form_state.add_form_config.cljs$core$IFn$_invoke$arity$2(c,p1__65092_SHARP_) : com.fulcrologic.fulcro.algorithms.form_state.add_form_config.call(null,c,p1__65092_SHARP_));\n});})(c,child,vec__65093,fields,subform_classmap,subform_keys,local_entity))\n,child));\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = c;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn child;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(resulting_entity,k,(com.fulcrologic.fulcro.algorithms.form_state.add_form_config.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.form_state.add_form_config.cljs$core$IFn$_invoke$arity$2(c,child) : com.fulcrologic.fulcro.algorithms.form_state.add_form_config.call(null,c,child)));\n} else {\nreturn resulting_entity;\n\n}\n}\n}catch (e65103){var e = e65103;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Subform \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(c)),\" of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(class$)),\" failed to initialize.\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"nested-exception\",\"nested-exception\",162394239),e], null));\n}});})(vec__65093,fields,subform_classmap,subform_keys,local_entity))\n,local_entity,subform_keys);\n});\n/**\n * Identical to `add-form-config`, but works against normalized entities in the\n *   app state. This makes it ideal for composition within mutations.\n * \n *   state-map - The application state database (map, not atom).\n *   class - The component class. Must have declared form fields.\n *   entity-ident - The ident of the normalized entity of the given class that you wish to initialize.\n * \n *   Returns an updated state map with normalized form configuration in place for the entity.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$add_form_config_STAR_(state_map,class$,entity_ident){\nvar vec__65113 = com.fulcrologic.fulcro.algorithms.form_state.derive_form_info(class$);\nvar fields = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65113,(0),null);\nvar subform_classmap = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65113,(1),null);\nvar subform_keys = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65113,(2),null);\nvar entity = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,entity_ident);\nvar updated_state_map = ((cljs.core.contains_QMARK_(entity,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)))?state_map:(function (){var pristine_state = cljs.core.select_keys(entity,clojure.set.union.cljs$core$IFn$_invoke$arity$2(subform_keys,fields));\nvar config = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965),entity_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833),fields,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),pristine_state,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705),(function (){var or__4131__auto__ = subform_classmap;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})()], null);\nvar cfg_ident = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"forms-by-ident\",\"com.fulcrologic.fulcro.algorithms.form-state/forms-by-ident\",827952006),com.fulcrologic.fulcro.algorithms.form_state.form_id(entity_ident)], null);\nreturn cljs.core.assoc_in(cljs.core.assoc_in(state_map,cfg_ident,config),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(entity_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854)),cfg_ident);\n})());\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__65113,fields,subform_classmap,subform_keys,entity,updated_state_map){\nreturn (function (smap,subform_key){\nvar subform_class = (function (){var G__65119 = subform_classmap;\nvar G__65119__$1 = (((G__65119 == null))?null:cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__65119,subform_key));\nvar G__65119__$2 = (((G__65119__$1 == null))?null:cljs.core.meta(G__65119__$1));\nif((G__65119__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__65119__$2);\n}\n})();\nvar subform_target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,subform_key);\ntry{if(cljs.core.truth_((function (){var and__4120__auto__ = subform_class;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = subform_target;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.every_QMARK_(edn_query_language.core.ident_QMARK_,subform_target);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (subform_class,subform_target,vec__65113,fields,subform_classmap,subform_keys,entity,updated_state_map){\nreturn (function (s,subform_ident){\nreturn (com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.cljs$core$IFn$_invoke$arity$3 ? com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.cljs$core$IFn$_invoke$arity$3(s,subform_class,subform_ident) : com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.call(null,s,subform_class,subform_ident));\n});})(subform_class,subform_target,vec__65113,fields,subform_classmap,subform_keys,entity,updated_state_map))\n,smap,subform_target);\n} else {\nif(cljs.core.truth_((function (){var and__4120__auto__ = subform_class;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn edn_query_language.core.ident_QMARK_(subform_target);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn (com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.cljs$core$IFn$_invoke$arity$3 ? com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.cljs$core$IFn$_invoke$arity$3(smap,subform_class,subform_target) : com.fulcrologic.fulcro.algorithms.form_state.add_form_config_STAR_.call(null,smap,subform_class,subform_target));\n} else {\nreturn smap;\n\n}\n}\n}catch (e65120){var e = e65120;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Subform \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(subform_class)),\" of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.component_name(class$)),\" failed to initialize.\"].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"nested-exception\",\"nested-exception\",162394239),e], null));\n}});})(vec__65113,fields,subform_classmap,subform_keys,entity,updated_state_map))\n,updated_state_map,subform_keys);\n});\n/**\n * Get the instances of the immediate subforms that are joined into the given entity by\n * subform-join-keys (works with to-one and to-many).\n * \n * - `entity` - a denormalized (UI) entity.\n * - `subform-join-keys` - The keys of the subforms of this entity, as a set.\n * \n * Returns a sequence of those entities (all denormalized).\n */\ncom.fulcrologic.fulcro.algorithms.form_state.immediate_subforms = (function com$fulcrologic$fulcro$algorithms$form_state$immediate_subforms(entity,subform_join_keys){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__65128_SHARP_){\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,p1__65128_SHARP_);\nif(cljs.core.sequential_QMARK_(v)){\nreturn v;\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null);\n}\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([subform_join_keys], 0)));\n});\n/**\n * Returns true if the given ui-entity-props that are configured as a form differ from the pristine version.\n *   Recursively follows subforms if given no field. Returns true if anything doesn't match up.\n * \n *   If given a field, it only checks that field.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_ = (function com$fulcrologic$fulcro$algorithms$form_state$dirty_QMARK_(var_args){\nvar G__65132 = arguments.length;\nswitch (G__65132) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (ui_entity_props,field){\nvar map__65134 = ui_entity_props;\nvar map__65134__$1 = (((((!((map__65134 == null))))?(((((map__65134.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65134.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65134):map__65134);\nvar map__65135 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65134__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar map__65135__$1 = (((((!((map__65135 == null))))?(((((map__65135.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65135.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65135):map__65135);\nvar pristine_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65135__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282));\nvar current = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ui_entity_props,field);\nvar original = cljs.core.get.cljs$core$IFn$_invoke$arity$2(pristine_state,field);\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current,original);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (ui_entity_props){\nvar map__65139 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854).cljs$core$IFn$_invoke$arity$1(ui_entity_props);\nvar map__65139__$1 = (((((!((map__65139 == null))))?(((((map__65139.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65139.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65139):map__65139);\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65139__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65139__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar dirty_field_QMARK_ = ((function (map__65139,map__65139__$1,subforms,fields){\nreturn (function (k){\nreturn com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2(ui_entity_props,k);\n});})(map__65139,map__65139__$1,subforms,fields))\n;\nvar subform_entities = com.fulcrologic.fulcro.algorithms.form_state.immediate_subforms(ui_entity_props,cljs.core.set(cljs.core.keys(subforms)));\nreturn cljs.core.boolean$((function (){var or__4131__auto__ = cljs.core.some(dirty_field_QMARK_,fields);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.some(com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_,subform_entities);\n}\n})());\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns false if and only if the given key has a spec, and the spec is not valid for the value found in the given\n *   map of entity props (e.g. `(s/valid? key (get entity-props key))`).\n * \n *   Returns true otherwise.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.no_spec_or_valid_QMARK_ = (function com$fulcrologic$fulcro$algorithms$form_state$no_spec_or_valid_QMARK_(entity_props,key){\nreturn ((cljs.core.not(cljs.spec.alpha.get_spec(key))) || (cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(key,cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity_props,key))));\n});\n/**\n * Returns a new validity based on the combination of two.\n * \n *   * :valid :valid = :valid\n *   * :valid :invalid = :invalid\n *   * :valid :unchecked = :unchecked\n *   * :invalid :valid = :invalid\n *   * :invalid :invalid = :invalid\n *   * :invalid :unchecked = :unchecked\n *   * :unchecked :valid = :unchecked\n *   * :unchecked :invalid = :unchecked\n *   * :unchecked :unchecked = :unchecked\n *   \n */\ncom.fulcrologic.fulcro.algorithms.form_state.merge_validity = (function com$fulcrologic$fulcro$algorithms$form_state$merge_validity(a,b){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"validity\",\"com.fulcrologic.fulcro.algorithms.form-state/validity\",-1003224837),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"validity\",\"com.fulcrologic.fulcro.algorithms.form-state/validity\",-1003224837),ghostwheel.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"validity\",\"com.fulcrologic.fulcro.algorithms.form-state/validity\",-1003224837)], null);\n\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),a)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),b)))){\nreturn new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378);\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),a)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),b)))){\nreturn new cljs.core.Keyword(null,\"valid\",\"valid\",155614240);\n} else {\nreturn new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516);\n\n}\n}\n});\n/**\n * Create a form/field validation function using a supplied field checker. The field checker will be given\n *   then entire form (denormalized) and a single field key that is to be checked. It must return\n *   a boolean indicating if that given field is valid.\n * \n *   During a recursive check for a form, the validation function will be in the correct context (e.g. the form supplied will contain\n *   the field. There is no need to search for it in subforms).\n * \n *   make-validator returns a dual arity function:\n * \n *   - `(fn [form] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the entire form.\n *   - `(fn [form field] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the single field.\n * \n *   Typical usage would be to show messages around the form fields:\n * \n *   ```\n *   (def field-valid? [form field] true) ; just say everything is valid\n * \n *   (def my-validator (make-validator field-valid?))\n * \n *   (defn valid? [form field]\n *   (= :valid (my-validator form field)))\n * \n *   (defn checked? [form field]\n *   (not= :unchecked (my-validator form field)))\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.algorithms.form_state.make_validator = (function com$fulcrologic$fulcro$algorithms$form_state$make_validator(field_valid_QMARK_){\nreturn (function() {\nvar com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_ = null;\nvar com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___1 = (function (ui_entity_props){\nvar map__65156 = ui_entity_props;\nvar map__65156__$1 = (((((!((map__65156 == null))))?(((((map__65156.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65156.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65156):map__65156);\nvar map__65157 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65156__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar map__65157__$1 = (((((!((map__65157 == null))))?(((((map__65157.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65157.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65157):map__65157);\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65157__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65157__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar immediate_subforms = com.fulcrologic.fulcro.algorithms.form_state.immediate_subforms(ui_entity_props,cljs.core.set(cljs.core.keys(subforms)));\nvar field_validity = ((function (map__65156,map__65156__$1,map__65157,map__65157__$1,fields,subforms,immediate_subforms){\nreturn (function (current_validity,k){\nreturn com.fulcrologic.fulcro.algorithms.form_state.merge_validity(current_validity,com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_.cljs$core$IFn$_invoke$arity$2(ui_entity_props,k));\n});})(map__65156,map__65156__$1,map__65157,map__65157__$1,fields,subforms,immediate_subforms))\n;\nvar subform_validities = cljs.core.map.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_,immediate_subforms);\nvar subform_validity = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.algorithms.form_state.merge_validity,new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),subform_validities);\nvar this_validity = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(field_validity,new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),fields);\nreturn com.fulcrologic.fulcro.algorithms.form_state.merge_validity(this_validity,subform_validity);\n});\nvar com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___2 = (function (ui_entity_props,field){\nvar map__65149 = ui_entity_props;\nvar map__65149__$1 = (((((!((map__65149 == null))))?(((((map__65149.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65149.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65149):map__65149);\nvar map__65150 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65149__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar map__65150__$1 = (((((!((map__65150 == null))))?(((((map__65150.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65150.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65150):map__65150);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65150__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344));\nvar complete_QMARK___$1 = (function (){var or__4131__auto__ = complete_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nif(cljs.core.not((complete_QMARK___$1.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK___$1.cljs$core$IFn$_invoke$arity$1(field) : complete_QMARK___$1.call(null,field)))){\nreturn new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378);\n} else {\nif(cljs.core.not((field_valid_QMARK_.cljs$core$IFn$_invoke$arity$2 ? field_valid_QMARK_.cljs$core$IFn$_invoke$arity$2(ui_entity_props,field) : field_valid_QMARK_.call(null,ui_entity_props,field)))){\nreturn new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516);\n} else {\nreturn new cljs.core.Keyword(null,\"valid\",\"valid\",155614240);\n\n}\n}\n});\ncom$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_ = function(ui_entity_props,field){\nswitch(arguments.length){\ncase 1:\nreturn com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___1.call(this,ui_entity_props);\ncase 2:\nreturn com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___2.call(this,ui_entity_props,field);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ncom$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___1;\ncom$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_.cljs$core$IFn$_invoke$arity$2 = com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR___2;\nreturn com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_;\n})()\n});\nvar spec_validator_65351 = com.fulcrologic.fulcro.algorithms.form_state.make_validator(com.fulcrologic.fulcro.algorithms.form_state.no_spec_or_valid_QMARK_);\n/**\n * Get the validity (:valid :invalid or :unchecked) for the given form/field using Clojure specs of the field keys.\n * \n *  - `ui-entity-props` : A denormalized (UI) entity, which can have subforms.\n *  - `field` : Optional. Returns the validity of just the single field on the top-level form.\n * \n *  Returns `:invalid` if all of the fields have been interacted with, and *any* are invalid.\n * \n *  Returns `:unchecked` if any field is not yet been interacted with.\n * \n *  Fields are marked as having been interacted with by programmatic action on your part via\n *  the validate* mutation helper can be used in a mutation to mark fields ready for validation.\n * \n *  If given a field then it checks just that field.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.get_spec_validity = ((function (spec_validator_65351){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$get_spec_validity(var_args){\nvar G__65166 = arguments.length;\nswitch (G__65166) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});})(spec_validator_65351))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1 = ((function (spec_validator_65351){\nreturn (function (form){\nreturn (spec_validator_65351.cljs$core$IFn$_invoke$arity$1 ? spec_validator_65351.cljs$core$IFn$_invoke$arity$1(form) : spec_validator_65351.call(null,form));\n});})(spec_validator_65351))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2 = ((function (spec_validator_65351){\nreturn (function (form,field){\nreturn (spec_validator_65351.cljs$core$IFn$_invoke$arity$2 ? spec_validator_65351.cljs$core$IFn$_invoke$arity$2(form,field) : spec_validator_65351.call(null,form,field));\n});})(spec_validator_65351))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns true if the given field (or the entire denormalized (UI) form recursively) is :valid\n *   according to clojure specs. Returns false if unchecked or invalid. Use `checked-spec?` or `get-spec-validity`\n *   for better detail.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_ = (function com$fulcrologic$fulcro$algorithms$form_state$valid_spec_QMARK_(var_args){\nvar G__65172 = arguments.length;\nswitch (G__65172) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (ui_form){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1(ui_form));\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (ui_form,field){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"valid\",\"valid\",155614240),com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2(ui_form,field));\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.valid_spec_QMARK_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns true if the given field (or any field if only a form is given) in the denormalized (UI) form is :invalid\n *   (recursively) according to clojure specs. Returns false if the field is marked unchecked. Use `checked-spec?` or\n *   `get-spec-validity` for better detail.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_ = (function com$fulcrologic$fulcro$algorithms$form_state$invalid_spec_QMARK_(var_args){\nvar G__65177 = arguments.length;\nswitch (G__65177) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (ui_form){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516),com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1(ui_form));\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (ui_form,field){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"invalid\",\"invalid\",412869516),com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2(ui_form,field));\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$lang$maxFixedArity = 2;\n\nvar do_not_care_65358 = cljs.core.constantly(true);\nvar carefree_validator_65359 = com.fulcrologic.fulcro.algorithms.form_state.make_validator(do_not_care_65358);\n/**\n * Returns true if the field (or entire denormalized (UI) form) is ready to be checked for validation.\n *  Until this returns true validators will simply return :unchecked for a form/field.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_ = ((function (do_not_care_65358,carefree_validator_65359){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$checked_QMARK_(var_args){\nvar G__65181 = arguments.length;\nswitch (G__65181) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});})(do_not_care_65358,carefree_validator_65359))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$core$IFn$_invoke$arity$1 = ((function (do_not_care_65358,carefree_validator_65359){\nreturn (function (ui_form){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),(carefree_validator_65359.cljs$core$IFn$_invoke$arity$1 ? carefree_validator_65359.cljs$core$IFn$_invoke$arity$1(ui_form) : carefree_validator_65359.call(null,ui_form)));\n});})(do_not_care_65358,carefree_validator_65359))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$core$IFn$_invoke$arity$2 = ((function (do_not_care_65358,carefree_validator_65359){\nreturn (function (ui_form,field){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"unchecked\",\"unchecked\",924418378),(carefree_validator_65359.cljs$core$IFn$_invoke$arity$2 ? carefree_validator_65359.cljs$core$IFn$_invoke$arity$2(ui_form,field) : carefree_validator_65359.call(null,ui_form,field)));\n});})(do_not_care_65358,carefree_validator_65359))\n;\n\ncom.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Get the idents of the immediate subforms that are joined into entity by\n * subform-join-keys (works with to-one and to-many). Entity is a NORMALIZED entity from the state map.\n * \n * Returns a sequence of those idents.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.immediate_subform_idents = (function com$fulcrologic$fulcro$algorithms$form_state$immediate_subform_idents(entity,subform_join_keys){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function com$fulcrologic$fulcro$algorithms$form_state$immediate_subform_idents_$_immediate_subform_idents_step(k){\nvar v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,k);\nvar result = ((((cljs.core.sequential_QMARK_(v)) && (cljs.core.every_QMARK_(edn_query_language.core.ident_QMARK_,v))))?v:((edn_query_language.core.ident_QMARK_(v))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null):cljs.core.PersistentVector.EMPTY\n));\nreturn result;\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([subform_join_keys], 0)));\n});\n/**\n * Recursively update a form and its subforms. This function works against the state database (normalized state).\n * \n *   `state-map` : The application state map\n *   `xform` : A function (fn [entity form-config] [entity' form-config']) that is passed the normalized entity and form-config,\n *  and must return an updated version of them.\n *   `starting-entity-ident` : An ident in the state map of an entity that has been initialized as a form.\n * \n *   Returns the updated state map.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.update_forms = (function com$fulcrologic$fulcro$algorithms$form_state$update_forms(state_map,xform,starting_entity_ident){\nvar entity = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,starting_entity_ident);\nvar config_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(entity,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar config = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,config_ident);\nvar map__65186 = config;\nvar map__65186__$1 = (((((!((map__65186 == null))))?(((((map__65186.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65186.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65186):map__65186);\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65186__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar vec__65187 = (xform.cljs$core$IFn$_invoke$arity$2 ? xform.cljs$core$IFn$_invoke$arity$2(entity,config) : xform.call(null,entity,config));\nvar updated_entity = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65187,(0),null);\nvar updated_config = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65187,(1),null);\nvar subform_idents = com.fulcrologic.fulcro.algorithms.form_state.immediate_subform_idents(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,starting_entity_ident),cljs.core.set(cljs.core.keys(subforms)));\nvar sm = state_map;\nvar sm__$1 = cljs.core.assoc_in(sm,starting_entity_ident,updated_entity);\nvar sm__$2 = cljs.core.assoc_in(sm__$1,config_ident,updated_config);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (sm,sm__$1,sm__$2,entity,config_ident,config,map__65186,map__65186__$1,subforms,vec__65187,updated_entity,updated_config,subform_idents){\nreturn (function (s,id){\nreturn (com.fulcrologic.fulcro.algorithms.form_state.update_forms.cljs$core$IFn$_invoke$arity$3 ? com.fulcrologic.fulcro.algorithms.form_state.update_forms.cljs$core$IFn$_invoke$arity$3(s,xform,id) : com.fulcrologic.fulcro.algorithms.form_state.update_forms.call(null,s,xform,id));\n});})(sm,sm__$1,sm__$2,entity,config_ident,config,map__65186,map__65186__$1,subforms,vec__65187,updated_entity,updated_config,subform_idents))\n,sm__$2,subform_idents);\n});\n/**\n * Obtains all of the dirty fields for the given (denormalized) ui-entity, recursively. This works against UI props\n *   because submission mutations should close over the data as parameters to a mutation. In other words, your form\n *   submission to a server should be triggered from UI with the output of this function as parameters:\n * \n *   ```\n *   (dom/input { :onClick #(comp/transact! this `[(some-submit-function {:diff ~(f/dirty-fields props true)})]) })\n *   ```\n * \n *   - `ui-entity` - The entity (denormalized) from the UI.\n *   - `as-delta?` - If false, each field's reported (new) value will just be the new value. When true, each value will be a map with :before and :after keys\n *   with the old and new values (useful for optimistic transaction semantics).\n * \n *   Returns a map keyed by form ID (for each form/subform) whose values are maps of key/value pairs of\n *   changes. Fields from entities that have a temporary IDs will always be included.\n * \n *   In other words, a change that happened for an entity with ident `entity-ident` on field `:field`:\n * \n *   With `as-delta?` true:\n * \n *   ```\n *   {entity-ident {:field {:before 1 :after 2}}}\n *   ```\n * \n *   with `as-delta?` false:\n * \n *   ```\n *   {entity-ident {:field 2}}\n *   ```\n *   \n */\ncom.fulcrologic.fulcro.algorithms.form_state.dirty_fields = (function com$fulcrologic$fulcro$algorithms$form_state$dirty_fields(ui_entity,as_delta_QMARK_){\nvar map__65199 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ui_entity,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar map__65199__$1 = (((((!((map__65199 == null))))?(((((map__65199.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65199.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65199):map__65199);\nvar config = map__65199__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65199__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"id\",\"com.fulcrologic.fulcro.algorithms.form-state/id\",476357965));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65199__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar pristine_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65199__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282));\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65199__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar subform_keys = cljs.core.set(cljs.core.keys(subforms));\nvar subform_ident = ((function (map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys){\nreturn (function (k,entity){\nvar G__65204 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(subforms,k);\nvar G__65204__$1 = (((G__65204 == null))?null:cljs.core.meta(G__65204));\nvar G__65204__$2 = (((G__65204__$1 == null))?null:new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__65204__$1));\nif((G__65204__$2 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2(G__65204__$2,entity);\n}\n});})(map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys))\n;\nvar new_entity_QMARK_ = com.fulcrologic.fulcro.algorithms.tempid.tempid_QMARK_(cljs.core.second(id));\nvar delta = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(((function (map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_){\nreturn (function (k){\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(pristine_state,k);\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ui_entity,k);\nif(((new_entity_QMARK_) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(before,after)))){\nif(cljs.core.truth_(as_delta_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,after], null);\n}\n} else {\nreturn null;\n}\n});})(map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_))\n,fields));\nvar delta_with_refs = cljs.core.into.cljs$core$IFn$_invoke$arity$2(delta,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(((function (map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta){\nreturn (function (k){\nvar items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ui_entity,k);\nvar old_value = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(ui_entity,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),k], null));\nvar current_value = ((cljs.core.map_QMARK_(items))?subform_ident(k,items):((cljs.core.vector_QMARK_(items))?cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (items,old_value,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta){\nreturn (function (p1__65194_SHARP_){\nreturn subform_ident(k,p1__65194_SHARP_);\n});})(items,old_value,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta))\n,items):items\n));\nvar has_tempids_QMARK_ = ((cljs.core.every_QMARK_(edn_query_language.core.ident_QMARK_,current_value))?cljs.core.some(((function (items,old_value,current_value,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta){\nreturn (function (p1__65195_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tempid.tempid_QMARK_(cljs.core.second(p1__65195_SHARP_));\n});})(items,old_value,current_value,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta))\n,current_value):com.fulcrologic.fulcro.algorithms.tempid.tempid_QMARK_(cljs.core.second(current_value)));\nif(cljs.core.truth_((function (){var or__4131__auto__ = has_tempids_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_value,current_value);\n}\n})())){\nif(cljs.core.truth_(as_delta_QMARK_)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),old_value,new cljs.core.Keyword(null,\"after\",\"after\",594996914),current_value], null)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,current_value], null);\n}\n} else {\nreturn null;\n}\n});})(map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta))\n,subform_keys));\nvar local_dirty_fields = ((cljs.core.empty_QMARK_(delta_with_refs))?cljs.core.PersistentArrayMap.EMPTY:cljs.core.PersistentArrayMap.createAsIfByAssoc([id,delta_with_refs]));\nvar complete_delta = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta,delta_with_refs,local_dirty_fields){\nreturn (function (dirty_fields_so_far,subform_join_field){\nvar subform = cljs.core.get.cljs$core$IFn$_invoke$arity$2(ui_entity,subform_join_field);\nif(cljs.core.vector_QMARK_(subform)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (subform,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta,delta_with_refs,local_dirty_fields){\nreturn (function (d,f){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([d,(com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.cljs$core$IFn$_invoke$arity$2(f,as_delta_QMARK_) : com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.call(null,f,as_delta_QMARK_))], 0));\n});})(subform,map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta,delta_with_refs,local_dirty_fields))\n,dirty_fields_so_far,subform);\n} else {\nif(cljs.core.map_QMARK_(subform)){\nvar dirty_subform_fields = (com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.cljs$core$IFn$_invoke$arity$2(subform,as_delta_QMARK_) : com.fulcrologic.fulcro.algorithms.form_state.dirty_fields.call(null,subform,as_delta_QMARK_));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([dirty_fields_so_far,dirty_subform_fields], 0));\n} else {\nreturn dirty_fields_so_far;\n\n}\n}\n});})(map__65199,map__65199__$1,config,id,fields,pristine_state,subforms,subform_keys,subform_ident,new_entity_QMARK_,delta,delta_with_refs,local_dirty_fields))\n,local_dirty_fields,subform_keys);\nreturn complete_delta;\n});\n/**\n * Mark the fields incomplete so that validation checks will no longer return values. This function works on an app state database\n *   map (not atom) and is meant to be composed into mutations. See the `mark-incomplete!` mutation if you do not need to combine\n *   this with other operations.\n * \n *   Follows the subforms recursively through state, unless a specific field is given.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$clear_complete_STAR_(var_args){\nvar G__65212 = arguments.length;\nswitch (G__65212) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (state_map,entity_ident,field){\nvar form_config_path = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(entity_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar form_config_path__$1 = ((edn_query_language.core.ident_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,form_config_path)))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,form_config_path):(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.form-state\",null,485,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (form_config_path){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"FORM NOT NORMALIZED: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(entity_ident)].join('')], null);\n});})(form_config_path))\n,null)),null,-1268662602);\n\nreturn form_config_path;\n})()\n);\nvar complete_path = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(form_config_path__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344));\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(state_map,complete_path,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),field);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (state_map,entity_ident){\nreturn com.fulcrologic.fulcro.algorithms.form_state.update_forms(state_map,(function com$fulcrologic$fulcro$algorithms$form_state$mark_STAR__step(e,form_config){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(form_config,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),cljs.core.PersistentHashSet.EMPTY)], null);\n}),entity_ident);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_.cljs$lang$maxFixedArity = 3;\n\n/**\n * Mark the fields complete so that validation checks will return values. This function works on a app state database\n *   map (not atom) and is meant to be composed into mutations. See the `mark-complete!` mutation if you do not need to combine\n *   this with other operations.\n * \n *   Follows the subforms recursively through state, unless a specific field is given.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$mark_complete_STAR_(var_args){\nvar G__65223 = arguments.length;\nswitch (G__65223) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (state_map,entity_ident,field){\nvar form_config_path = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(entity_ident,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"config\",\"com.fulcrologic.fulcro.algorithms.form-state/config\",35807854));\nvar form_config_path__$1 = ((edn_query_language.core.ident_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,form_config_path)))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,form_config_path):(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.form-state\",null,506,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (form_config_path){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [[\"FORM NOT NORMALIZED: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(entity_ident)].join('')], null);\n});})(form_config_path))\n,null)),null,1688958102);\n\nreturn form_config_path;\n})()\n);\nvar complete_path = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(form_config_path__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344));\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(state_map,complete_path,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),field);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (state_map,entity_ident){\nreturn com.fulcrologic.fulcro.algorithms.form_state.update_forms(state_map,(function com$fulcrologic$fulcro$algorithms$form_state$mark_STAR__step(e,form_config){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(form_config,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.form-state/complete?\",-1647562344),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833).cljs$core$IFn$_invoke$arity$1(form_config))], null);\n}),entity_ident);\n});\n\ncom.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$lang$maxFixedArity = 3;\n\n/**\n * Removes copies of entities used by form-state logic.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.delete_form_state_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$delete_form_state_STAR_(state_map,entity_ident_or_idents){\nvar entity_idents = ((edn_query_language.core.ident_QMARK_(entity_ident_or_idents))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [entity_ident_or_idents], null):entity_ident_or_idents);\nvar ks = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (entity_idents){\nreturn (function (p__65231){\nvar vec__65232 = p__65231;\nvar t = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65232,(0),null);\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65232,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),t,new cljs.core.Keyword(null,\"row\",\"row\",-570139521),r], null);\n});})(entity_idents))\n,entity_idents);\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(state_map,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"forms-by-ident\",\"com.fulcrologic.fulcro.algorithms.form-state/forms-by-ident\",827952006),((function (entity_idents,ks){\nreturn (function (s){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,s,ks);\n});})(entity_idents,ks))\n);\n});\n/**\n * Copy the pristine state over top of the originating entity of the given form. Meant to be used inside of a\n *   mutation. Recursively follows subforms in app state. Returns the new app state map.\n * \n *   state-map - The normalized state database (map, not atom)\n *   entity-ident - The ident of the entity that you wish to restore to its original pristine state.\n * \n *   Only affects declared fields and sub-forms.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.pristine__GT_entity_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$pristine__GT_entity_STAR_(state_map,entity_ident){\nreturn com.fulcrologic.fulcro.algorithms.form_state.update_forms(state_map,(function com$fulcrologic$fulcro$algorithms$form_state$pristine__GT_entity_STAR__$_reset_form_step(e,p__65238){\nvar map__65239 = p__65238;\nvar map__65239__$1 = (((((!((map__65239 == null))))?(((((map__65239.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65239.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65239):map__65239);\nvar config = map__65239__$1;\nvar pristine_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65239__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([e,pristine_state], 0)),config], null);\n}),entity_ident);\n});\n/**\n * Overwrite the pristine state (form state's copy) of the entity. This is meant to be used from a mutation\n *   to update the form state tracking recursively to make the form as 'unmodified'. That is to say, as if you\n *   committed the values to the server, and the current entity state is now the pristine state.\n * \n *   This function does no sanity checks, so you should ensure the entity is valid!\n * \n *   Recursively updates all sub forms.\n * \n *   Returns the updated state-map (database).\n */\ncom.fulcrologic.fulcro.algorithms.form_state.entity__GT_pristine_STAR_ = (function com$fulcrologic$fulcro$algorithms$form_state$entity__GT_pristine_STAR_(state_map,entity_ident){\nreturn com.fulcrologic.fulcro.algorithms.form_state.update_forms(state_map,(function com$fulcrologic$fulcro$algorithms$form_state$entity__GT_pristine_STAR__$_commit_form_step(e,p__65246){\nvar map__65247 = p__65246;\nvar map__65247__$1 = (((((!((map__65247 == null))))?(((((map__65247.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65247.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65247):map__65247);\nvar config = map__65247__$1;\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65247__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"fields\",\"com.fulcrologic.fulcro.algorithms.form-state/fields\",-71495833));\nvar subforms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65247__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"subforms\",\"com.fulcrologic.fulcro.algorithms.form-state/subforms\",-714949705));\nvar subform_keys = cljs.core.set(cljs.core.keys(subforms));\nvar new_pristine_state = cljs.core.select_keys(e,clojure.set.union.cljs$core$IFn$_invoke$arity$2(subform_keys,fields));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.form-state\",\"pristine-state\",\"com.fulcrologic.fulcro.algorithms.form-state/pristine-state\",1623330282),new_pristine_state)], null);\n}),entity_ident);\n});\n/**\n * Mutation: Reset the form (recursively) to its (last recorded) pristine state. If form ident is not supplied it uses the ident\n * of the calling component. See `pristine->entity*` for a function you can compose into your own mutations.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.reset_form_BANG_ = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"reset-form!\",\"com.fulcrologic.fulcro.algorithms.form-state/reset-form!\",-1216636000,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"reset-form!\",\"com.fulcrologic.fulcro.algorithms.form-state/reset-form!\",-1216636000,null),(function (fulcro_mutation_env_symbol){\nvar map__65250 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__65250__$1 = (((((!((map__65250 == null))))?(((((map__65250.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65250.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65250):map__65250);\nvar form_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65250__$1,new cljs.core.Keyword(null,\"form-ident\",\"form-ident\",-387954473));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__65250,map__65250__$1,form_ident){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$action(p__65253){\nvar map__65254 = p__65253;\nvar map__65254__$1 = (((((!((map__65254 == null))))?(((((map__65254.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65254.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65254):map__65254);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65254__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65254__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(state,com.fulcrologic.fulcro.algorithms.form_state.pristine__GT_entity_STAR_,(function (){var or__4131__auto__ = form_ident;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn ref;\n}\n})());\n\nreturn null;\n});})(map__65250,map__65250__$1,form_ident))\n,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),((function (map__65250,map__65250__$1,form_ident){\nreturn (function (env){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar default_action = temp__5753__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n});})(map__65250,map__65250__$1,form_ident))\n], null);\n}));\n/**\n * Mutation: Mark a given form (recursively) or field complete.\n * \n *   entity-ident - The ident of the entity to mark complete. This is optional, but if not supplied it will derive it from\n *               the ident of the invoking component.\n *   field - (optional) limit the marking to a single field.\n * \n *   See `mark-complete*` for a function you can compose into your own mutations.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.mark_complete_BANG_ = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"mark-complete!\",\"com.fulcrologic.fulcro.algorithms.form-state/mark-complete!\",1441268369,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"mark-complete!\",\"com.fulcrologic.fulcro.algorithms.form-state/mark-complete!\",1441268369,null),(function (fulcro_mutation_env_symbol){\nvar map__65262 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__65262__$1 = (((((!((map__65262 == null))))?(((((map__65262.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65262.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65262):map__65262);\nvar entity_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65262__$1,new cljs.core.Keyword(null,\"entity-ident\",\"entity-ident\",-1883769419));\nvar field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65262__$1,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__65262,map__65262__$1,entity_ident,field){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$action(p__65264){\nvar map__65265 = p__65264;\nvar map__65265__$1 = (((((!((map__65265 == null))))?(((((map__65265.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65265.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65265):map__65265);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65265__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65265__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar entity_ident_65428__$1 = (function (){var or__4131__auto__ = entity_ident;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn ref;\n}\n})();\nif(cljs.core.truth_(field)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_,entity_ident_65428__$1,field);\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(state,com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_,entity_ident_65428__$1);\n}\n\nreturn null;\n});})(map__65262,map__65262__$1,entity_ident,field))\n,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),((function (map__65262,map__65262__$1,entity_ident,field){\nreturn (function (env){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar default_action = temp__5753__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n});})(map__65262,map__65262__$1,entity_ident,field))\n], null);\n}));\n/**\n * Mutation: Mark a given form (recursively) or field incomplete.\n * \n *   entity-ident - The ident of the entity to mark. This is optional, but if not supplied it will derive it from\n *               the ident of the invoking component.\n *   field - (optional) limit the marking to a single field.\n * \n *   See `clear-complete*` for a function you can compose into your own mutations.\n */\ncom.fulcrologic.fulcro.algorithms.form_state.clear_complete_BANG_ = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"clear-complete!\",\"com.fulcrologic.fulcro.algorithms.form-state/clear-complete!\",-143538490,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.algorithms.form-state\",\"clear-complete!\",\"com.fulcrologic.fulcro.algorithms.form-state/clear-complete!\",-143538490,null),(function (fulcro_mutation_env_symbol){\nvar map__65272 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__65272__$1 = (((((!((map__65272 == null))))?(((((map__65272.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65272.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65272):map__65272);\nvar entity_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65272__$1,new cljs.core.Keyword(null,\"entity-ident\",\"entity-ident\",-1883769419));\nvar field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65272__$1,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__65272,map__65272__$1,entity_ident,field){\nreturn (function com$fulcrologic$fulcro$algorithms$form_state$action(p__65276){\nvar map__65277 = p__65276;\nvar map__65277__$1 = (((((!((map__65277 == null))))?(((((map__65277.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65277.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65277):map__65277);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65277__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65277__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar entity_ident_65434__$1 = (function (){var or__4131__auto__ = entity_ident;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn ref;\n}\n})();\nif(cljs.core.truth_(field)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,com.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_,entity_ident_65434__$1,field);\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(state,com.fulcrologic.fulcro.algorithms.form_state.clear_complete_STAR_,entity_ident_65434__$1);\n}\n\nreturn null;\n});})(map__65272,map__65272__$1,entity_ident,field))\n,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),((function (map__65272,map__65272__$1,entity_ident,field){\nreturn (function (env){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar default_action = temp__5753__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n});})(map__65272,map__65272__$1,entity_ident,field))\n], null);\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Functions that assist with supporting form editing/checking/diffing in Fulcro UI.  These functions work\n  by making a pristine copy of your entity, and tracking what fields have been touched.  You are responsible\n  for triggering these various states by marking fields as complete (`mark-complete!`), telling it to\n  copy the data to/from pristine (e.g. `entity->pristine`), and by asking for out-of-date data for the current\n  vs. pristine copy (`dirty-fields`).\n\n  There is also support for detecting which fields have been marked complete and are dirty.\n\n  Validation can be done via Clojure spec, or by defining your own field validation functions via\n  `make-validator`. This general-purpose validation factor function can easily be used to create more\n  automated validation factories that can be more configuration-driven, but this is left as an exercise for the community.\n\n  See the Developer's Guide for more information.\n  ","~:file","com/fulcrologic/fulcro/algorithms/form_state.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",49],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$>defn","~$ghostwheel.core","~$>defn-","^O","~$defmutation","~$com.fulcrologic.fulcro.mutations","~$defsc","~$com.fulcrologic.fulcro.components"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.form-state","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$edn-query-language.core","^13","^?","^@","~$log","~$taoensso.timbre","~$comp","^T","~$eql","^13","^B","^B","~$goog","^18","^12","^12","~$com.fulcrologic.fulcro.algorithms.tempid","^19","^R","^R","~$s","^@","^O","^O","~$gw","^O","^T","^T","^15","^15","^@","^@","~$tempid","^19"],"~:seen",["^V",["~:require"]],"~:uses",["^ ","^N","^O","^P","^O","~$=>","^O","^Q","^R","^S","^T"],"~:require-macros",["^ ","^?","^@","^14","^15","^16","^T","^B","^B","^R","^R","~$s","^@","^O","^O","^1:","^O","^T","^T","^15","^15","^@","^@"],"~:form",["~#list",["~$ns","^X","Functions that assist with supporting form editing/checking/diffing in Fulcro UI.  These functions work\n  by making a pristine copy of your entity, and tracking what fields have been touched.  You are responsible\n  for triggering these various states by marking fields as complete (`mark-complete!`), telling it to\n  copy the data to/from pristine (e.g. `entity->pristine`), and by asking for out-of-date data for the current\n  vs. pristine copy (`dirty-fields`).\n\n  There is also support for detecting which fields have been marked complete and are dirty.\n\n  Validation can be done via Clojure spec, or by defining your own field validation functions via\n  `make-validator`. This general-purpose validation factor function can easily be used to create more\n  automated validation factories that can be more configuration-driven, but this is left as an exercise for the community.\n\n  See the Developer's Guide for more information.\n  ",["^1B",["^1=",["^?","~:as","~$s"],["^12","^1D","^11"],["^15","^1D","^14"],["^13","^1D","^17"],["^O","^1D","^1:","~:refer",["^N","^P","^1?"]],["^19","^1D","^1;"],["^R","^1E",["^Q"]],["^T","^1D","^16","^1E",["^S"]]]]]],"~:flags",["^ ","^1=",["^V",[]]],"~:js-deps",["^ "],"~:deps",["^18","^B","^@","^12","^15","^13","^O","^19","^R","^T"]],"^Z","^X","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/form_state.cljc"],"~:compiled-at",1630228425105,"~:resource-name","com/fulcrologic/fulcro/algorithms/form_state.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.form-state\n  \"Functions that assist with supporting form editing/checking/diffing in Fulcro UI.  These functions work\n  by making a pristine copy of your entity, and tracking what fields have been touched.  You are responsible\n  for triggering these various states by marking fields as complete (`mark-complete!`), telling it to\n  copy the data to/from pristine (e.g. `entity->pristine`), and by asking for out-of-date data for the current\n  vs. pristine copy (`dirty-fields`).\n\n  There is also support for detecting which fields have been marked complete and are dirty.\n\n  Validation can be done via Clojure spec, or by defining your own field validation functions via\n  `make-validator`. This general-purpose validation factor function can easily be used to create more\n  automated validation factories that can be more configuration-driven, but this is left as an exercise for the community.\n\n  See the Developer's Guide for more information.\n  \"\n  (:require\n    [clojure.spec.alpha :as s]\n    [clojure.set :as set]\n    [taoensso.timbre :as log]\n    [edn-query-language.core :as eql]\n    [ghostwheel.core :as gw :refer [>defn >defn- =>]]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]))\n\n(def ident-generator #(s/gen #{[:table 1] [:other/by-id 9]}))\n\n(s/def ::id (s/with-gen eql/ident? ident-generator))      ; form config uses the entity's ident as an ID\n(s/def ::fields (s/every keyword? :kind set?))            ; a set of kws that are fields to track\n(s/def ::subforms (s/map-of keyword? any?))               ; a map of subform field to component class\n(s/def ::pristine-state (s/map-of keyword? any?))         ; the saved state of the form\n(s/def ::complete? (s/every keyword? :kind set?))         ; the fields that have been interacted with\n(s/def ::config (s/keys :req [::id ::fields] :opt [::pristine-state ::complete? ::subforms]))\n(s/def ::validity #{:valid :invalid :unchecked})\n(s/def ::denormalized-form (s/keys :req [::config]))\n\n(>defn get-form-fields\n  \"Returns the set of defined form fields for the given component class (or instance).\"\n  [class]\n  [comp/component-class? => (s/nilable ::fields)]\n  (comp/component-options class :form-fields))\n\n(>defn form-id\n  \"Returns the form database table ID for the given entity ident.\"\n  [entity-ident]\n  [(s/cat :id eql/ident?) => map?]\n  {:table (first entity-ident)\n   :row   (second entity-ident)})\n\n(defsc FormConfig\n  \"A component supporting normalization of form state configuration. Use Fulcro Inspect for viewing that data.\n  Rendering isn't supported on this component so it will work with React Native.\n  Can also render the form config, if that is useful to you.\"\n  [this {:keys [::id ::complete? ::fields ::subforms ::pristine-state]}]\n  {:query [::id ::fields ::complete? ::subforms ::pristine-state]\n   :ident (fn []\n            [::forms-by-ident {:table (first id)\n                               :row   (second id)}])})\n\n(def form-config-join\n  \"A query join to ::form-config. This should be added to the query of a component that is\n  using form state support.\"\n  {::config (comp/get-query FormConfig)})\n\n(>defn form-config\n  \"Generate a form config given:\n\n  entity-ident - The ident of the entity you're configuring forms for.\n  fields - A set of keywords on the entity that is the form.\n  subforms - An optional set of keywords on the entity that is the form, for the joins to subforms.\"\n  ([entity-ident fields]\n   [eql/ident? ::fields => ::config]\n   (form-config entity-ident fields {}))\n  ([entity-ident fields subforms]\n   [eql/ident? ::fields ::fields => ::config]\n   {::id       entity-ident\n    ::fields   fields\n    ::subforms (into {}\n                 (map (fn [[k v]] {k (with-meta {} {:component v})}))\n                 subforms)}))\n\n(defn- derive-form-info [class]\n  (let [query-nodes         (some-> class\n                              (comp/get-query)\n                              (eql/query->ast)\n                              :children)\n        query-nodes-by-key  (into {}\n                              (map (fn [n] [(:dispatch-key n) n]))\n                              query-nodes)\n        join-component      (fn [k] (get-in query-nodes-by-key [k :component]))\n        {props :prop joins :join} (group-by :type query-nodes)\n        join-keys           (->> joins (map :dispatch-key) set)\n        prop-keys           (->> props (map :dispatch-key) set)\n        queries-for-config? (contains? join-keys ::config)\n        all-fields          (get-form-fields class)\n        has-fields?         (seq all-fields)\n        fields              (set/intersection all-fields prop-keys)\n        subform-keys        (set/intersection all-fields join-keys)\n        subforms            (into {}\n                              (map (fn [k] [k (with-meta {} {:component (join-component k)})]))\n                              subform-keys)]\n    (when-not queries-for-config?\n      (throw (ex-info (str \"Attempt to add form configuration to \" (comp/component-name class) \", but it does not query for config!\")\n               {:offending-component class})))\n    (when-not has-fields?\n      (throw (ex-info (str \"Attempt to add form configuration to \" (comp/component-name class) \", but it does not declare any fields!\")\n               {:offending-component class})))\n    [fields subforms subform-keys]))\n\n(>defn add-form-config\n  \"Add form configuration data to a *denormalized* entity (e.g. pre-merge). This is useful in\n  initial state or when using `merge-component!`. This function *will not* touch an entity\n  that already has form config but will recurse the entire form set. It can therefore be\n  invoked on the top-level of the form set when adding, for example, an instance of a sub-form.\n\n  class - The component class.\n  entity - A denormalized (tree) of data that matches the given component class.\n\n  Returns the (possibly updated) denormalized entity, ready to merge.\"\n  [class entity]\n  [comp/component-class? map? => (s/keys :req [::config])]\n  (let [[fields subform-classmap subform-keys] (derive-form-info class)\n        local-entity (if (contains? entity ::config)\n                       entity\n                       (let [pristine-state (select-keys entity fields)\n                             subform-ident  (fn [k entity] (some-> (get subform-classmap k) meta\n                                                             :component (comp/get-ident entity)))\n                             subform-keys   (-> subform-classmap keys set)\n                             subform-refs   (reduce\n                                              (fn [refs k]\n                                                (let [items (get entity k)]\n                                                  (cond\n                                                    ; to-one\n                                                    (map? items) (assoc refs k (subform-ident k items))\n                                                    ; to-many\n                                                    (vector? items) (assoc refs k (mapv #(subform-ident k %) items))\n                                                    :else refs)))\n                                              {}\n                                              subform-keys)\n                             pristine-state (merge pristine-state subform-refs)\n                             config         {::id             (comp/get-ident class entity)\n                                             ::fields         fields\n                                             ::pristine-state pristine-state\n                                             ::subforms       (or subform-classmap {})}]\n                         (merge entity {::config config})))]\n    (reduce\n      (fn [resulting-entity k]\n        (let [c     (some-> subform-classmap (get k) meta :component)\n              child (get resulting-entity k)]\n          (try\n            (cond\n              (and c child (vector? child)) (assoc resulting-entity k (mapv #(add-form-config c %) child))\n              (and c child) (assoc resulting-entity k (add-form-config c child))\n              :else resulting-entity)\n            (catch #?(:clj Exception :cljs :default) e\n              (throw (ex-info (str \"Subform \" (comp/component-name c) \" of \" (comp/component-name class) \" failed to initialize.\")\n                       {:nested-exception e}))))))\n      local-entity\n      subform-keys)))\n\n\n\n(>defn add-form-config*\n  \"Identical to `add-form-config`, but works against normalized entities in the\n  app state. This makes it ideal for composition within mutations.\n\n  state-map - The application state database (map, not atom).\n  class - The component class. Must have declared form fields.\n  entity-ident - The ident of the normalized entity of the given class that you wish to initialize.\n\n  Returns an updated state map with normalized form configuration in place for the entity.\"\n  [state-map class entity-ident]\n  [map? comp/component-class? eql/ident? => map?]\n  (let [[fields subform-classmap subform-keys] (derive-form-info class)\n        entity            (get-in state-map entity-ident)\n        updated-state-map (if (contains? entity ::config)\n                            state-map\n                            (let [pristine-state (select-keys entity (set/union subform-keys fields))\n                                  config         {::id             entity-ident\n                                                  ::fields         fields\n                                                  ::pristine-state pristine-state\n                                                  ::subforms       (or subform-classmap {})}\n                                  cfg-ident      [::forms-by-ident (form-id entity-ident)]]\n                              (-> state-map\n                                (assoc-in cfg-ident config)\n                                (assoc-in (conj entity-ident ::config) cfg-ident))))]\n    (reduce\n      (fn [smap subform-key]\n        (let [subform-class  (some-> subform-classmap (get subform-key) meta :component)\n              subform-target (get entity subform-key)]\n          (try\n            (cond\n              (and subform-class subform-target (every? eql/ident? subform-target))\n              (reduce (fn [s subform-ident] (add-form-config* s subform-class subform-ident)) smap subform-target)\n\n              (and subform-class (eql/ident? subform-target))\n              (add-form-config* smap subform-class subform-target)\n\n              :else smap)\n            (catch #?(:clj Exception :cljs :default) e\n              (throw (ex-info (str \"Subform \" (comp/component-name subform-class) \" of \" (comp/component-name class) \" failed to initialize.\")\n                       {:nested-exception e}))))))\n      updated-state-map\n      subform-keys)))\n\n(>defn immediate-subforms\n  \"Get the instances of the immediate subforms that are joined into the given entity by\n   subform-join-keys (works with to-one and to-many).\n\n   - `entity` - a denormalized (UI) entity.\n   - `subform-join-keys` - The keys of the subforms of this entity, as a set.\n\n   Returns a sequence of those entities (all denormalized).\"\n  [entity subform-join-keys]\n  [map? set? => (s/coll-of map?)]\n  (remove nil?\n    (mapcat #(let [v (get entity %)]\n               (if (sequential? v) v [v])) subform-join-keys)))\n\n(>defn dirty?\n  \"Returns true if the given ui-entity-props that are configured as a form differ from the pristine version.\n  Recursively follows subforms if given no field. Returns true if anything doesn't match up.\n\n  If given a field, it only checks that field.\"\n  ([ui-entity-props field]\n   [map? keyword? => boolean?]\n   (let [{{pristine-state ::pristine-state} ::config} ui-entity-props\n         current  (get ui-entity-props field)\n         original (get pristine-state field)]\n     (not= current original)))\n  ([ui-entity-props]\n   [map? => boolean?]\n   (let [{:keys [::subforms ::fields]} (::config ui-entity-props)\n         dirty-field?     (fn [k] (dirty? ui-entity-props k))\n         subform-entities (immediate-subforms ui-entity-props (-> subforms (keys) (set)))]\n     (boolean\n       (or\n         (some dirty-field? fields)\n         (some dirty? subform-entities))))))\n\n(>defn no-spec-or-valid?\n  \"Returns false if and only if the given key has a spec, and the spec is not valid for the value found in the given\n  map of entity props (e.g. `(s/valid? key (get entity-props key))`).\n\n  Returns true otherwise.\"\n  [entity-props key]\n  [map? keyword? => boolean?]\n  (or (not (s/get-spec key))\n    (s/valid? key (get entity-props key))))\n\n(defn- merge-validity\n  \"Returns a new validity based on the combination of two.\n\n  * :valid :valid = :valid\n  * :valid :invalid = :invalid\n  * :valid :unchecked = :unchecked\n  * :invalid :valid = :invalid\n  * :invalid :invalid = :invalid\n  * :invalid :unchecked = :unchecked\n  * :unchecked :valid = :unchecked\n  * :unchecked :invalid = :unchecked\n  * :unchecked :unchecked = :unchecked\n  \"\n  [a b]\n  [::validity ::validity => ::validity]\n  (cond\n    (or (= :unchecked a) (= :unchecked b)) :unchecked\n    (and (= :valid a) (= :valid b)) :valid\n    :otherwise :invalid))\n\n(defn make-validator\n  \"Create a form/field validation function using a supplied field checker. The field checker will be given\n  then entire form (denormalized) and a single field key that is to be checked. It must return\n  a boolean indicating if that given field is valid.\n\n  During a recursive check for a form, the validation function will be in the correct context (e.g. the form supplied will contain\n  the field. There is no need to search for it in subforms).\n\n  make-validator returns a dual arity function:\n\n  - `(fn [form] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the entire form.\n  - `(fn [form field] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the single field.\n\n  Typical usage would be to show messages around the form fields:\n\n  ```\n  (def field-valid? [form field] true) ; just say everything is valid\n\n  (def my-validator (make-validator field-valid?))\n\n  (defn valid? [form field]\n     (= :valid (my-validator form field)))\n\n  (defn checked? [form field]\n     (not= :unchecked (my-validator form field)))\n  ```\n  \"\n  [field-valid?]\n  (fn custom-get-validity*\n    ([ui-entity-props field]\n     (let [{{complete? ::complete?} ::config} ui-entity-props\n           complete? (or complete? #{})]\n       (cond\n         (not (complete? field)) :unchecked\n         (not (field-valid? ui-entity-props field)) :invalid\n         :else :valid)))\n    ([ui-entity-props]\n     (let [{{:keys [::fields ::subforms]} ::config} ui-entity-props\n           immediate-subforms (immediate-subforms ui-entity-props (-> subforms keys set))\n           field-validity     (fn [current-validity k] (merge-validity current-validity (custom-get-validity* ui-entity-props k)))\n           subform-validities (map custom-get-validity* immediate-subforms)\n           subform-validity   (reduce merge-validity :valid subform-validities)\n           this-validity      (reduce field-validity :valid fields)]\n       (merge-validity this-validity subform-validity)))))\n\n(let [spec-validator (make-validator no-spec-or-valid?)]\n  (defn get-spec-validity\n    \"Get the validity (:valid :invalid or :unchecked) for the given form/field using Clojure specs of the field keys.\n\n    - `ui-entity-props` : A denormalized (UI) entity, which can have subforms.\n    - `field` : Optional. Returns the validity of just the single field on the top-level form.\n\n    Returns `:invalid` if all of the fields have been interacted with, and *any* are invalid.\n\n    Returns `:unchecked` if any field is not yet been interacted with.\n\n    Fields are marked as having been interacted with by programmatic action on your part via\n    the validate* mutation helper can be used in a mutation to mark fields ready for validation.\n\n    If given a field then it checks just that field.\"\n    ([form] (spec-validator form))\n    ([form field] (spec-validator form field))))\n\n(defn valid-spec?\n  \"Returns true if the given field (or the entire denormalized (UI) form recursively) is :valid\n  according to clojure specs. Returns false if unchecked or invalid. Use `checked-spec?` or `get-spec-validity`\n  for better detail.\"\n  ([ui-form] (= :valid (get-spec-validity ui-form)))\n  ([ui-form field] (= :valid (get-spec-validity ui-form field))))\n\n(defn invalid-spec?\n  \"Returns true if the given field (or any field if only a form is given) in the denormalized (UI) form is :invalid\n  (recursively) according to clojure specs. Returns false if the field is marked unchecked. Use `checked-spec?` or\n  `get-spec-validity` for better detail.\"\n  ([ui-form] (= :invalid (get-spec-validity ui-form)))\n  ([ui-form field] (= :invalid (get-spec-validity ui-form field))))\n\n(let [do-not-care        (constantly true)\n      carefree-validator (make-validator do-not-care)]\n  (defn checked?\n    \"Returns true if the field (or entire denormalized (UI) form) is ready to be checked for validation.\n    Until this returns true validators will simply return :unchecked for a form/field.\"\n    ([ui-form] (not= :unchecked (carefree-validator ui-form)))\n    ([ui-form field]\n     (not= :unchecked (carefree-validator ui-form field)))))\n\n(>defn- immediate-subform-idents\n  \"Get the idents of the immediate subforms that are joined into entity by\n   subform-join-keys (works with to-one and to-many). Entity is a NORMALIZED entity from the state map.\n\n   Returns a sequence of those idents.\"\n  [entity subform-join-keys]\n  [map? (s/coll-of keyword? :kind set?) => (s/coll-of eql/ident?)]\n  (remove nil?\n    (mapcat (fn immediate-subform-idents-step [k]\n              (let [v      (get entity k)\n                    result (cond\n                             (and (sequential? v) (every? eql/ident? v)) v\n                             (eql/ident? v) [v]\n                             :else [])]\n                result)) subform-join-keys)))\n\n(>defn update-forms\n  \"Recursively update a form and its subforms. This function works against the state database (normalized state).\n\n  `state-map` : The application state map\n  `xform` : A function (fn [entity form-config] [entity' form-config']) that is passed the normalized entity and form-config,\n    and must return an updated version of them.\n  `starting-entity-ident` : An ident in the state map of an entity that has been initialized as a form.\n\n  Returns the updated state map.\"\n  [state-map xform starting-entity-ident]\n  [map? fn? eql/ident? => map?]\n  (let [entity         (get-in state-map starting-entity-ident)\n        config-ident   (get entity ::config)\n        config         (get-in state-map config-ident)\n        {:keys [::subforms]} config\n        [updated-entity updated-config] (xform entity config)\n        subform-idents (immediate-subform-idents (get-in state-map starting-entity-ident) (-> subforms keys set))]\n    (as-> state-map sm\n      (assoc-in sm starting-entity-ident updated-entity)\n      (assoc-in sm config-ident updated-config)\n      (reduce (fn [s id]\n                (update-forms s xform id)) sm subform-idents))))\n\n(>defn dirty-fields\n  \"Obtains all of the dirty fields for the given (denormalized) ui-entity, recursively. This works against UI props\n  because submission mutations should close over the data as parameters to a mutation. In other words, your form\n  submission to a server should be triggered from UI with the output of this function as parameters:\n\n  ```\n  (dom/input { :onClick #(comp/transact! this `[(some-submit-function {:diff ~(f/dirty-fields props true)})]) })\n  ```\n\n  - `ui-entity` - The entity (denormalized) from the UI.\n  - `as-delta?` - If false, each field's reported (new) value will just be the new value. When true, each value will be a map with :before and :after keys\n  with the old and new values (useful for optimistic transaction semantics).\n\n  Returns a map keyed by form ID (for each form/subform) whose values are maps of key/value pairs of\n  changes. Fields from entities that have a temporary IDs will always be included.\n\n  In other words, a change that happened for an entity with ident `entity-ident` on field `:field`:\n\n  With `as-delta?` true:\n\n  ```\n  {entity-ident {:field {:before 1 :after 2}}}\n  ```\n\n  with `as-delta?` false:\n\n  ```\n  {entity-ident {:field 2}}\n  ```\n  \"\n  [ui-entity as-delta?]\n  [::denormalized-form boolean? => map?]\n  (let [{:keys [::id ::fields ::pristine-state ::subforms] :as config} (get ui-entity ::config)\n        subform-keys       (-> subforms keys set)\n        subform-ident      (fn [k entity] (some-> (get subforms k) meta :component (comp/get-ident entity)))\n        new-entity?        (tempid/tempid? (second id))\n        delta              (into {} (keep (fn [k]\n                                            (let [before (get pristine-state k)\n                                                  after  (get ui-entity k)]\n                                              (if (or new-entity? (not= before after))\n                                                (if as-delta?\n                                                  [k {:before before :after after}]\n                                                  [k after])\n                                                nil))) fields))\n        delta-with-refs    (into delta\n                             (keep\n                               (fn [k]\n                                 (let [items         (get ui-entity k)\n                                       old-value     (get-in ui-entity [::config ::pristine-state k])\n                                       current-value (cond\n                                                       (map? items) (subform-ident k items)\n                                                       (vector? items) (mapv #(subform-ident k %) items)\n                                                       :else items)\n                                       has-tempids?  (if (every? eql/ident? current-value)\n                                                       (some #(tempid/tempid? (second %)) current-value)\n                                                       (tempid/tempid? (second current-value)))]\n                                   (if (or has-tempids? (not= old-value current-value))\n                                     (if as-delta?\n                                       [k {:before old-value :after current-value}]\n                                       [k current-value])\n                                     nil)))\n                               subform-keys))\n        local-dirty-fields (if (empty? delta-with-refs) {} {id delta-with-refs})\n        complete-delta     (reduce\n                             (fn [dirty-fields-so-far subform-join-field]\n                               (let [subform (get ui-entity subform-join-field)]\n                                 (cond\n                                   ; to many\n                                   (vector? subform) (reduce (fn [d f] (merge d (dirty-fields f as-delta?))) dirty-fields-so-far subform)\n                                   ; to one\n                                   (map? subform) (let [dirty-subform-fields (dirty-fields subform as-delta?)]\n                                                    (merge dirty-fields-so-far dirty-subform-fields))\n                                   ; missing subform\n                                   :else dirty-fields-so-far)))\n                             local-dirty-fields\n                             subform-keys)]\n    complete-delta))\n\n(defn clear-complete*\n  \"Mark the fields incomplete so that validation checks will no longer return values. This function works on an app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-incomplete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given.\"\n  ([state-map entity-ident field]\n   (let [form-config-path (conj entity-ident ::config)\n         form-config-path (if (eql/ident? (get-in state-map form-config-path))\n                            (get-in state-map form-config-path)\n                            (do\n                              (log/error (str \"FORM NOT NORMALIZED: \" entity-ident))\n                              form-config-path))\n         complete-path    (conj form-config-path ::complete?)]\n     (update-in state-map complete-path (fnil disj #{}) field)))\n  ([state-map entity-ident]\n   (update-forms state-map\n     (fn mark*-step [e form-config]\n       [e (assoc form-config ::complete? #{})]) entity-ident)))\n\n(>defn mark-complete*\n  \"Mark the fields complete so that validation checks will return values. This function works on a app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-complete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given.\"\n  ([state-map entity-ident field]\n   [map? eql/ident? keyword? => map?]\n   (let [form-config-path (conj entity-ident ::config)\n         form-config-path (if (eql/ident? (get-in state-map form-config-path))\n                            (get-in state-map form-config-path)\n                            (do\n                              (log/error (str \"FORM NOT NORMALIZED: \" entity-ident))\n                              form-config-path))\n         complete-path    (conj form-config-path ::complete?)]\n     (update-in state-map complete-path (fnil conj #{}) field)))\n  ([state-map entity-ident]\n   [map? eql/ident? => map?]\n   (update-forms state-map\n     (fn mark*-step [e form-config]\n       [e (assoc form-config ::complete? (::fields form-config))]) entity-ident)))\n\n(>defn delete-form-state*\n  \"Removes copies of entities used by form-state logic.\"\n  [state-map entity-ident-or-idents]\n  [map? (s/or :i eql/ident? :is (s/coll-of eql/ident?)) => map?]\n  (let [entity-idents (if (eql/ident? entity-ident-or-idents)\n                        [entity-ident-or-idents]\n                        entity-ident-or-idents)\n\n        ks            (mapv (fn [[t r]]\n                              {:table t :row r})\n                        entity-idents)]\n    (update state-map ::forms-by-ident\n      (fn [s]\n        (apply dissoc s ks)))))\n\n(>defn pristine->entity*\n  \"Copy the pristine state over top of the originating entity of the given form. Meant to be used inside of a\n  mutation. Recursively follows subforms in app state. Returns the new app state map.\n\n  state-map - The normalized state database (map, not atom)\n  entity-ident - The ident of the entity that you wish to restore to its original pristine state.\n\n  Only affects declared fields and sub-forms.\"\n  [state-map entity-ident]\n  [map? eql/ident? => map?]\n  (update-forms state-map (fn reset-form-step [e {:keys [::pristine-state] :as config}]\n                            [(merge e pristine-state) config]) entity-ident))\n\n(>defn entity->pristine*\n  \"Overwrite the pristine state (form state's copy) of the entity. This is meant to be used from a mutation\n  to update the form state tracking recursively to make the form as 'unmodified'. That is to say, as if you\n  committed the values to the server, and the current entity state is now the pristine state.\n\n  This function does no sanity checks, so you should ensure the entity is valid!\n\n  Recursively updates all sub forms.\n\n  Returns the updated state-map (database).\"\n  [state-map entity-ident]\n  [map? eql/ident? => map?]\n  (update-forms state-map (fn commit-form-step [e {:keys [::fields ::subforms] :as config}]\n                            (let [subform-keys       (-> subforms keys set)\n                                  new-pristine-state (select-keys e (set/union subform-keys fields))]\n                              [e (assoc config ::pristine-state new-pristine-state)])) entity-ident))\n\n(defmutation reset-form!\n  \"Mutation: Reset the form (recursively) to its (last recorded) pristine state. If form ident is not supplied it uses the ident\n   of the calling component. See `pristine->entity*` for a function you can compose into your own mutations.\"\n  [{:keys [form-ident]}]\n  (action [{:keys [ref state]}]\n    (swap! state pristine->entity* (or form-ident ref))))\n\n(defmutation mark-complete!\n  \"Mutation: Mark a given form (recursively) or field complete.\n\n  entity-ident - The ident of the entity to mark complete. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `mark-complete*` for a function you can compose into your own mutations.\"\n  [{:keys [entity-ident field]}]\n  (action [{:keys [ref state]}]\n    (let [entity-ident (or entity-ident ref)]\n      (if field\n        (swap! state mark-complete* entity-ident field)\n        (swap! state mark-complete* entity-ident)))))\n\n(defmutation clear-complete!\n  \"Mutation: Mark a given form (recursively) or field incomplete.\n\n  entity-ident - The ident of the entity to mark. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `clear-complete*` for a function you can compose into your own mutations.\"\n  [{:keys [entity-ident field]}]\n  (action [{:keys [ref state]}]\n    (let [entity-ident (or entity-ident ref)]\n      (if field\n        (swap! state clear-complete* entity-ident field)\n        (swap! state clear-complete* entity-ident)))))\n","~:reader-features",["^V",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.form-state/ident-generator","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$1","cljs.spec.alpha/def-impl","cljs.spec.alpha/with-gen","edn-query-language.core/ident?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__64971","cljs.core/keyword?","cljs.core/set?","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","G__64978","cljs.core/map?","i__12903__auto__","v__12904__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/any?","G__64985","G__64986","cljs.spec.alpha/map-spec-impl","G__64990","cljs.core/contains?","G__65005","com.fulcrologic.fulcro.algorithms.form-state/get-form-fields","class","com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.form-state/form-id","entity-ident","cljs.core/first","cljs.core/second","options__57867__auto__","p__65039","map__65040","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","id","cljs.core.get.cljs$core$IFn$_invoke$arity$2","complete?","fields","subforms","pristine-state","com.fulcrologic.fulcro.components/wrapped-render","map__65047","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.form-state","js/com.fulcrologic.fulcro.algorithms.form-state.FormConfig","props__57868__auto__","this__57869__auto__","temp__5751__auto__","init-state__57870__auto__","obj65059","G__65060","G__65061","goog.object/get","obj65063","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.fulcro.algorithms.form-state/FormConfig","this","com.fulcrologic.fulcro.algorithms.form-state/form-config-join","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","var_args","G__65068","com.fulcrologic.fulcro.algorithms.form-state/form-config","js/Error","com.fulcrologic.fulcro.algorithms.form_state.form_config.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__65074","vec__65075","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core/with-meta","com.fulcrologic.fulcro.algorithms.form-state/derive-form-info","map__65080","query-nodes","G__65081","edn-query-language.core/query->ast","query-nodes-by-key","n","join-component","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","props","joins","cljs.core/group-by","join-keys","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set","prop-keys","queries-for-config?","all-fields","has-fields?","cljs.core/seq","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","subform-keys","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro.algorithms.form-state/add-form-config","entity","vec__65093","subform-classmap","local-entity","cljs.core/select-keys","subform-ident","G__65096","cljs.core/meta","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","subform-refs","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","refs","items","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vector?","p1__65091#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","config","or__4131__auto__","resulting-entity","c","G__65099","child","e65103","and__4120__auto__","p1__65092#","e","com.fulcrologic.fulcro.algorithms.form-state/add-form-config*","state-map","vec__65113","updated-state-map","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cfg-ident","cljs.core/assoc-in","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","smap","subform-key","subform-class","G__65119","subform-target","e65120","cljs.core/every?","s","com.fulcrologic.fulcro.algorithms.form-state/immediate-subforms","subform-join-keys","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","p1__65128#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/sequential?","G__65132","com.fulcrologic.fulcro.algorithms.form-state/dirty?","ui-entity-props","field","map__65134","map__65135","current","original","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","map__65139","dirty-field?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2","subform-entities","cljs.core/boolean","cljs.core/some","com.fulcrologic.fulcro.algorithms.form-state/no-spec-or-valid?","entity-props","key","cljs.core/not","cljs.spec.alpha/get-spec","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.form-state/merge-validity","a","b","ghostwheel.core/=>","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.form-state/make-validator","field-valid?","map__65149","map__65150","map__65156","map__65157","immediate-subforms","field-validity","current-validity","com$fulcrologic$fulcro$algorithms$form_state$make_validator_$_custom_get_validity_STAR_.cljs$core$IFn$_invoke$arity$2","subform-validities","custom-get-validity*","subform-validity","this-validity","spec-validator","G__65166","com.fulcrologic.fulcro.algorithms.form-state/get-spec-validity","form","G__65172","com.fulcrologic.fulcro.algorithms.form-state/valid-spec?","ui-form","com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2","G__65177","com.fulcrologic.fulcro.algorithms.form-state/invalid-spec?","do-not-care","cljs.core/constantly","carefree-validator","G__65181","com.fulcrologic.fulcro.algorithms.form-state/checked?","com.fulcrologic.fulcro.algorithms.form-state/immediate-subform-idents","result","com.fulcrologic.fulcro.algorithms.form-state/update-forms","xform","starting-entity-ident","map__65186","vec__65187","config-ident","updated-entity","updated-config","subform-idents","sm","com.fulcrologic.fulcro.algorithms.form-state/dirty-fields","ui-entity","as-delta?","map__65199","G__65204","new-entity?","com.fulcrologic.fulcro.algorithms.tempid/tempid?","delta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","before","after","delta-with-refs","old-value","current-value","p1__65194#","has-tempids?","p1__65195#","local-dirty-fields","cljs.core/empty?","complete-delta","dirty-fields-so-far","subform-join-field","subform","d","f","dirty-subform-fields","G__65212","com.fulcrologic.fulcro.algorithms.form-state/clear-complete*","form-config-path","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","complete-path","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/disj","form-config","G__65223","com.fulcrologic.fulcro.algorithms.form-state/mark-complete*","cljs.core/conj","com.fulcrologic.fulcro.algorithms.form-state/delete-form-state*","entity-ident-or-idents","entity-idents","ks","p__65231","vec__65232","t","r","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.form-state/pristine->entity*","p__65238","map__65239","com.fulcrologic.fulcro.algorithms.form-state/entity->pristine*","p__65246","map__65247","new-pristine-state","com.fulcrologic.fulcro.algorithms.form-state/reset-form!","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__65250","p__65253","map__65254","env","temp__5753__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","form-ident","ref","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.form-state/mark-complete!","map__65262","p__65264","map__65265","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.form-state/clear-complete!","map__65272","p__65276","map__65277"]]],"~:cache-keys",["~#cmap",[["^1J","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^V",[]],"~:deps-syms",["^18","^B","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^1J","com/fulcrologic/fulcro/algorithms/normalize.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$com.fulcrologic.fulcro.algorithms.do-not-use","^13","^15","^T"]]],["^1J","goog/dom/tagname.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.dom.HtmlElement"]]],["^1J","goog/async/freelist.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/labs/useragent/platform.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.labs.userAgent.util","~$goog.string"]]],["^1J","expound/util.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","ghostwheel/reporting.cljc"],[1630228119207,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^@","^F","^D","~$expound.alpha","~$clojure.string","~$ghostwheel.logging"]]],["^1J","goog/timer/timer.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.Promise","~$goog.events.EventTarget"]]],["^1J","orchestra_cljs/spec/test.cljs"],[1630228119080,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$goog.object","~$goog.userAgent.product","^27","~$cljs.stacktrace","^J","^@","^H"]]],["^1J","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^15"]]],["^1J","cljs/spec/gen/alpha.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$goog.Uri"]]],["^1J","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^25"]]],["^1J","goog/math/math.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.array","~$goog.asserts"]]],["^1J","goog/string/stringformat.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^25"]]],["^1J","cljs/env.cljc"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/events/eventtype.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1J","goog/labs/useragent/browser.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^24","^2;","~$goog.string.internal"]]],["^1J","goog/array/array.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1J","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^15","^13","^2;","^@"]]],["^1J","expound/problems.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$expound.paths","^@","^1[","^27","~$expound.printer","~$expound.ansi"]]],["^1J","goog/useragent/useragent.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^24","~$goog.reflect","^25"]]],["^1J","goog/structs/prioritypool.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1J","clojure/test/check/properties.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^1J","goog/async/run.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1J","clojure/test/check/generators.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^25"]]],["^1J","taoensso/encore.cljs"],[1630228119299,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^12","~$cljs.reader","~$cljs.tools.reader.edn","^2;","^25","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1J","goog/debug/error.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/async/workqueue.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","~$goog.async.FreeList"]]],["^1J","com/fulcrologic/fulcro/dom/events.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/events/events.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2A","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1J","goog/promise/resolver.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/events/browserfeature.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2B"]]],["^1J","cljs/tools/reader/edn.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^25","^2Z"]]],["^1J","clojure/test/check/random/doubles.cljs"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$clojure.test.check.random.longs"]]],["^1J","goog/structs/priorityqueue.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.structs.Heap"]]],["^1J","goog/net/xhrio.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.Timer","^2?","^2@","^38","^2:","~$goog.json.hybrid","~$goog.log","^35","^34","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2;","^25","^33","~$goog.structs.Map","~$goog.uri.utils","^2B"]]],["^1J","goog/promise/thenable.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/dom/nodetype.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","cljs/pprint.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^25","^2Z"]]],["^1J","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^@","^12","^O","^15","^13"]]],["^1J","cljs/tools/reader.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^3=","^3>","^3?","^3<","^2?","^25","^2Z"]]],["^1J","expound/alpha.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$expound.problems","^@","^27","^12","^1[","^2Y","^25","^2H","~$expound.util","^2I","^H"]]],["^1J","clojure/test/check/rose_tree.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","clojure/test/check/impl.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1J","goog/events/eventtarget.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.Disposable","^2@","^2[","~$goog.events.Event","^3:","^3;","^2;"]]],["^1J","clojure/test/check/random.cljs"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$clojure.test.check.random.doubles","^3A"]]],["^1J","goog/disposable/disposable.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.disposable.IDisposable"]]],["^1J","expound/ansi.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27"]]],["^2D","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^2E","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1J","cljs/spec/test/alpha.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2;","^2<","^27","^2=","^J","^@","^H"]]],["^1J","shadow/js.js"],[1630228360071,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/object/object.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/structs/set.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^33","~$goog.structs.Collection","^3H"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^2D","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^2E","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1J","cljs/stacktrace.cljc"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^25","^27"]]],["^1J","goog/math/long.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","^2M"]]],["^1J","goog/events/listener.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.events.ListenableKey"]]],["^1J","goog/events/listenermap.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","~$goog.events.Listener","^2;"]]],["^1J","goog/events/eventid.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","taoensso/truss.cljs"],[1630228118689,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$taoensso.truss.impl"]]],["^1J","goog/string/internal.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","com/fulcrologic/fulcro/algorithms/merge.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$com.fulcrologic.fulcro.algorithms.data-targeting","^T","~$com.fulcrologic.fulcro.algorithms.lookup","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^22","^13","^15"]]],["^1J","clojure/test/check.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2P","^2U","^2Q","^2V","~$clojure.test.check.impl"]]],["^1J","edn_query_language/core.cljc"],[1630228119293,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^@","~$clojure.test.check","^2P","~$clojure.test.check.properties"]]],["^1J","goog/functions/functions.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","expound/paths.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^@","^3K"]]],["^1J","taoensso/truss/impl.cljs"],[1630228118689,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^12"]]],["^1J","clojure/walk.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/useragent/product.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2J","^2L","^2B"]]],["^1J","goog/net/eventtype.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/structs/map.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1J","goog/net/xhriopool.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^30","~$goog.structs.PriorityPool"]]],["^1J","goog/structs/queue.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?"]]],["^1J","goog/labs/useragent/engine.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^24","^25"]]],["^1J","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","~$taoensso.encore"]]],["^1J","cljs/reader.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2;","^3@","^2X","^2Z"]]],["^1J","com/fulcrologic/fulcro/mutations.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^T","~$com.fulcrologic.fulcro.dom.events","^O","^13","^15","^49","^@","^3[","~$com.fulcrologic.fulcro.algorithms.merge","^40","^19","^27"]]],["^1J","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2;","~$cljsjs.react","^13","^@","^15","^1[","^27","^22","^42","^40","^12"]]],["^1J","goog/asserts/asserts.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1J","goog/debug/logbuffer.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","~$goog.debug.LogRecord"]]],["^1J","cljs/tagged_literals.cljc"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2W"]]],["^1J","goog/uri/uri.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2@","^25","^33","^3H","^3I","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1J","ghostwheel/threading_macros.cljc"],[1630228119207,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^28","~$ghostwheel.utils"]]],["^1J","goog/net/errorcode.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^2D","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^2E"]]],["^1J","ghostwheel/logging.cljc"],[1630228119285,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^J"]]],["^1J","goog/disposable/idisposable.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/promise/promise.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","~$goog.Thenable","^2@","^37","~$goog.async.run","^2T","^4=","~$goog.promise.Resolver"]]],["^1J","cljs/spec/alpha.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^2;","^1[","^H","^27"]]],["^1J","goog/debug/logrecord.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/base.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",[]]],["^1J","goog/json/hybrid.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","~$goog.json"]]],["^1J","goog/structs/structs.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2;"]]],["^1J","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^3=","^27","~$cljs.tools.reader.impl.inspect"]]],["^1J","cljsjs/react.cljs"],[1630228358937,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$module$node_modules$react$index"]]],["^1J","clojure/string.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^25","^2Z"]]],["^1J","com/fulcrologic/fulcro/algorithms/tempid.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^15","^1["]]],["^1J","goog/structs/pool.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^3N","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1J","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^2D","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^2E","^3V"]]],["^1J","goog/net/httpstatus.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/structs/heap.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2;","~$goog.structs.Node"]]],["^1J","goog/debug/entrypointregistry.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@"]]],["^1J","goog/string/string.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2C"]]],["^1J","com/fulcrologic/fulcro/algorithms/form_state.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^@","^12","^15","^13","^O","^19","^R","^T"]]],["^1J","goog/reflect/reflect.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/labs/useragent/util.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2C"]]],["^1J","expound/printer.cljc"],[1630228118972,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^@","^J","^1[","^12","^3K","^2I"]]],["^1J","goog/debug/debug.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","~$goog.debug.errorcontext","^2B"]]],["^1J","goog/string/stringbuffer.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/debug/errorcontext.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^3>","^25","^2Z"]]],["^1J","goog/iter/iter.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2@","~$goog.functions","~$goog.math"]]],["^1J","goog/async/nexttick.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^38","~$goog.dom.TagName","^4M","^2J","^2K"]]],["^1J","goog/debug/logger.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2@","~$goog.debug","~$goog.debug.LogBuffer","^4?"]]],["^1J","ghostwheel/core.cljc"],[1630228119207,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^12","^1[","^D","^44","^2P","^45","^@","^F","^H","~$ghostwheel.reporting","~$ghostwheel.unghost","^4B","^28","~$ghostwheel.threading-macros","^26","~$cljs.analyzer.api","^21"]]],["^2D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^2E"]]],["^1J","goog/events/event.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^3N","~$goog.events.EventId"]]],["^1J","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^3<","^3=","^3>"]]],["^1J","goog/dom/htmlelement.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","cljs/core.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["~$goog.math.Long","~$goog.math.Integer","^25","^2;","^2?","^2>","^2Z"]]],["^1J","clojure/test/check/random/longs.cljs"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","~$clojure.test.check.random.longs.bit-count-impl","^4W","^B"]]],["^1J","goog/log/log.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^4P","~$goog.debug.LogManager","^4?","~$goog.debug.Logger"]]],["^1J","goog/structs/collection.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/events/browserevent.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^4P","^2A","^3O","~$goog.events.EventType","^2M","^2B"]]],["^1J","cljs/analyzer/api.cljc"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^20","~$cljs.analyzer"]]],["^1J","goog/math/integer.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/structs/node.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","clojure/set.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/uri/utils.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2?","^2@","^25"]]],["^1J","taoensso/timbre.cljs"],[1630228119105,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^49","~$taoensso.timbre.appenders.core"]]],["^1J","cljs/analyzer.cljc"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^25","^27","^12","^20","~$cljs.tagged-literals","^3@","^3=","^2W"]]],["^1J","goog/json/json.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]],["^1J","goog/events/listenable.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^4V"]]],["^1J","goog/net/xmlhttpfactory.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^3L"]]],["^1J","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^13"]]],["^1J","ghostwheel/unghost.cljc"],[1630228119555,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/net/xmlhttp.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^2@","~$goog.net.WrapperXmlHttpFactory","^3M"]]],["^1J","cljs/test.cljs"],[1630228118934,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B","^27","^J"]]],["^1J","clojure/test/check/results.cljc"],[1630228119162,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18","^B"]]],["^1J","goog/net/xhrlike.js"],[1630228359392,"^1W",["^ ","^1X",null,"^1Y",["^V",[]],"^1Z",["^18"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/test/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/reporting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/printer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/test.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/paths.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/ansi.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/problems.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/test.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/test/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/mutations.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Functions that assist with supporting form editing/checking/diffing in Fulcro UI.  These functions work\n  by making a pristine copy of your entity, and tracking what fields have been touched.  You are responsible\n  for triggering these various states by marking fields as complete (`mark-complete!`), telling it to\n  copy the data to/from pristine (e.g. `entity->pristine`), and by asking for out-of-date data for the current\n  vs. pristine copy (`dirty-fields`).\n\n  There is also support for detecting which fields have been marked complete and are dirty.\n\n  Validation can be done via Clojure spec, or by defining your own field validation functions via\n  `make-validator`. This general-purpose validation factor function can easily be used to create more\n  automated validation factories that can be more configuration-driven, but this is left as an exercise for the community.\n\n  See the Developer's Guide for more information.\n  ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",1,"^9",5,"^:",1,"^;",49],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",["^ ","^N","^O","^P","^O","^Q","^R","^S","^T"],"^U",["^V",[]],"^W","^X","^[",null,"^10",["^ ","^11","^12","^13","^13","^?","^@","^14","^15","^16","^T","^17","^13","^B","^B","^18","^18","^12","^12","^19","^19","^R","^R","~$s","^@","^O","^O","^1:","^O","^T","^T","^15","^15","^@","^@","^1;","^19"],"^1<",["^V",["^1="]],"~:shadow/js-access-global",["^V",["Error"]],"^1>",["^ ","^N","^O","^P","^O","^1?","^O","^Q","^R","^S","^T"],"~:defs",["^ ","~$form-id",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",43,"^9",8,"^:",43,"^;",15,"~:arglists",["^1B",["~$quote",["^1B",[["~$entity-ident"]]]]],"^6","Returns the form database table ID for the given entity ident."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/form-id","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",15,"~:method-params",["^1B",[["^77"]]],"~:protocol-impl",null,"~:arglists-meta",["^1B",[null,null]],"^9",1,"~:variadic?",false,"^8",43,"~:ret-tag","~$cljs.core/IMap","^:",43,"~:max-fixed-arity",1,"~:fn-var",true,"^75",["^1B",["^76",["^1B",[["^77"]]]]],"^6","Returns the form database table ID for the given entity ident."],"~$valid-spec?",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",334,"^9",7,"^:",334,"^;",18,"^75",["^1B",["^76",["^1B",[["~$ui-form"],["^7B","~$field"]]]]],"^6","Returns true if the given field (or the entire denormalized (UI) form recursively) is :valid\n  according to clojure specs. Returns false if unchecked or invalid. Use `checked-spec?` or `get-spec-validity`\n  for better detail.","~:top-fn",["^ ","^7<",false,"~:fixed-arity",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/valid-spec?","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",18,"^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^7:",null,"^7E",2,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"~:methods",[["^ ","^7E",1,"^7<",false,"~:tag","~$boolean"],["^ ","^7E",2,"^7<",false,"^7H","^7I"]],"^8",334,"^:",334,"^7?",2,"^7@",true,"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^6","Returns true if the given field (or the entire denormalized (UI) form recursively) is :valid\n  according to clojure specs. Returns false if unchecked or invalid. Use `checked-spec?` or `get-spec-validity`\n  for better detail."],"~$update-forms",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",373,"^9",8,"^:",373,"^;",20,"^75",["^1B",["^76",["^1B",[["~$state-map","~$xform","~$starting-entity-ident"]]]]],"^6","Recursively update a form and its subforms. This function works against the state database (normalized state).\n\n  `state-map` : The application state map\n  `xform` : A function (fn [entity form-config] [entity' form-config']) that is passed the normalized entity and form-config,\n    and must return an updated version of them.\n  `starting-entity-ident` : An ident in the state map of an entity that has been initialized as a form.\n\n  Returns the updated state map."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/update-forms","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",20,"^79",["^1B",[["^7K","^7L","^7M"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",373,"^7=",["^V",[null,"~$any"]],"^:",373,"^7?",3,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7K","^7L","^7M"]]]]],"^6","Recursively update a form and its subforms. This function works against the state database (normalized state).\n\n  `state-map` : The application state map\n  `xform` : A function (fn [entity form-config] [entity' form-config']) that is passed the normalized entity and form-config,\n    and must return an updated version of them.\n  `starting-entity-ident` : An ident in the state map of an entity that has been initialized as a form.\n\n  Returns the updated state map."],"~$get-spec-validity",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",317,"^9",9,"^:",317,"^;",26,"^75",["^1B",["^76",["^1B",[["~$form"],["^7Q","^7C"]]]]],"^6","Get the validity (:valid :invalid or :unchecked) for the given form/field using Clojure specs of the field keys.\n\n    - `ui-entity-props` : A denormalized (UI) entity, which can have subforms.\n    - `field` : Optional. Returns the validity of just the single field on the top-level form.\n\n    Returns `:invalid` if all of the fields have been interacted with, and *any* are invalid.\n\n    Returns `:unchecked` if any field is not yet been interacted with.\n\n    Fields are marked as having been interacted with by programmatic action on your part via\n    the validate* mutation helper can be used in a mutation to mark fields ready for validation.\n\n    If given a field then it checks just that field.","^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7Q"],["^7Q","^7C"]]],"^75",["^1B",[["^7Q"],["^7Q","^7C"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/get-spec-validity","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",26,"^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7Q"],["^7Q","^7C"]]],"^75",["^1B",[["^7Q"],["^7Q","^7C"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7Q"],["^7Q","^7C"]]],"^7:",null,"^7E",2,"^7;",["^1B",[null,null]],"^9",3,"^7<",false,"^7G",[["^ ","^7E",1,"^7<",false,"^7H","^7O"],["^ ","^7E",2,"^7<",false,"^7H","^7O"]],"^8",317,"^:",317,"^7?",2,"^7@",true,"^75",["^1B",[["^7Q"],["^7Q","^7C"]]],"^6","Get the validity (:valid :invalid or :unchecked) for the given form/field using Clojure specs of the field keys.\n\n    - `ui-entity-props` : A denormalized (UI) entity, which can have subforms.\n    - `field` : Optional. Returns the validity of just the single field on the top-level form.\n\n    Returns `:invalid` if all of the fields have been interacted with, and *any* are invalid.\n\n    Returns `:unchecked` if any field is not yet been interacted with.\n\n    Fields are marked as having been interacted with by programmatic action on your part via\n    the validate* mutation helper can be used in a mutation to mark fields ready for validation.\n\n    If given a field then it checks just that field."],"~$merge-validity",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",251,"^9",8,"^:",251,"^;",22,"~:private",true,"^75",["^1B",["^76",["^1B",[["~$a","~$b"]]]]],"^6","Returns a new validity based on the combination of two.\n\n  * :valid :valid = :valid\n  * :valid :invalid = :invalid\n  * :valid :unchecked = :unchecked\n  * :invalid :valid = :invalid\n  * :invalid :invalid = :invalid\n  * :invalid :unchecked = :unchecked\n  * :unchecked :valid = :unchecked\n  * :unchecked :invalid = :unchecked\n  * :unchecked :unchecked = :unchecked\n  "],"^7T",true,"^W","~$com.fulcrologic.fulcro.algorithms.form-state/merge-validity","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",22,"^79",["^1B",[["~$a","~$b"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",251,"^7=","~$cljs.core/Keyword","^:",251,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["~$a","~$b"]]]]],"^6","Returns a new validity based on the combination of two.\n\n  * :valid :valid = :valid\n  * :valid :invalid = :invalid\n  * :valid :unchecked = :unchecked\n  * :invalid :valid = :invalid\n  * :invalid :invalid = :invalid\n  * :invalid :unchecked = :unchecked\n  * :unchecked :valid = :unchecked\n  * :unchecked :invalid = :unchecked\n  * :unchecked :unchecked = :unchecked\n  "],"~$invalid-spec?",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",341,"^9",7,"^:",341,"^;",20,"^75",["^1B",["^76",["^1B",[["^7B"],["^7B","^7C"]]]]],"^6","Returns true if the given field (or any field if only a form is given) in the denormalized (UI) form is :invalid\n  (recursively) according to clojure specs. Returns false if the field is marked unchecked. Use `checked-spec?` or\n  `get-spec-validity` for better detail.","^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/invalid-spec?","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",20,"^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^7:",null,"^7E",2,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^7G",[["^ ","^7E",1,"^7<",false,"^7H","^7I"],["^ ","^7E",2,"^7<",false,"^7H","^7I"]],"^8",341,"^:",341,"^7?",2,"^7@",true,"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^6","Returns true if the given field (or any field if only a form is given) in the denormalized (UI) form is :invalid\n  (recursively) according to clojure specs. Returns false if the field is marked unchecked. Use `checked-spec?` or\n  `get-spec-validity` for better detail."],"~$make-validator",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",271,"^9",7,"^:",271,"^;",21,"^75",["^1B",["^76",["^1B",[["~$field-valid?"]]]]],"^6","Create a form/field validation function using a supplied field checker. The field checker will be given\n  then entire form (denormalized) and a single field key that is to be checked. It must return\n  a boolean indicating if that given field is valid.\n\n  During a recursive check for a form, the validation function will be in the correct context (e.g. the form supplied will contain\n  the field. There is no need to search for it in subforms).\n\n  make-validator returns a dual arity function:\n\n  - `(fn [form] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the entire form.\n  - `(fn [form field] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the single field.\n\n  Typical usage would be to show messages around the form fields:\n\n  ```\n  (def field-valid? [form field] true) ; just say everything is valid\n\n  (def my-validator (make-validator field-valid?))\n\n  (defn valid? [form field]\n     (= :valid (my-validator form field)))\n\n  (defn checked? [form field]\n     (not= :unchecked (my-validator form field)))\n  ```\n  "],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/make-validator","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",21,"^79",["^1B",[["^7Z"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",271,"^7=","~$function","^:",271,"^7?",1,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7Z"]]]]],"^6","Create a form/field validation function using a supplied field checker. The field checker will be given\n  then entire form (denormalized) and a single field key that is to be checked. It must return\n  a boolean indicating if that given field is valid.\n\n  During a recursive check for a form, the validation function will be in the correct context (e.g. the form supplied will contain\n  the field. There is no need to search for it in subforms).\n\n  make-validator returns a dual arity function:\n\n  - `(fn [form] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the entire form.\n  - `(fn [form field] ...)` - Calling this version will return :unchecked, :valid, or :invalid for the single field.\n\n  Typical usage would be to show messages around the form fields:\n\n  ```\n  (def field-valid? [form field] true) ; just say everything is valid\n\n  (def my-validator (make-validator field-valid?))\n\n  (defn valid? [form field]\n     (= :valid (my-validator form field)))\n\n  (defn checked? [form field]\n     (not= :unchecked (my-validator form field)))\n  ```\n  "],"~$checked?",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",350,"^9",9,"^:",350,"^;",17,"^75",["^1B",["^76",["^1B",[["^7B"],["^7B","^7C"]]]]],"^6","Returns true if the field (or entire denormalized (UI) form) is ready to be checked for validation.\n    Until this returns true validators will simply return :unchecked for a form/field.","^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/checked?","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",17,"^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7B"],["^7B","^7C"]]],"^7:",null,"^7E",2,"^7;",["^1B",[null,null]],"^9",3,"^7<",false,"^7G",[["^ ","^7E",1,"^7<",false,"^7H","^7I"],["^ ","^7E",2,"^7<",false,"^7H","^7I"]],"^8",350,"^:",350,"^7?",2,"^7@",true,"^75",["^1B",[["^7B"],["^7B","^7C"]]],"^6","Returns true if the field (or entire denormalized (UI) form) is ready to be checked for validation.\n    Until this returns true validators will simply return :unchecked for a form/field."],"~$clear-complete!",["^ ","^W","~$com.fulcrologic.fulcro.algorithms.form-state/clear-complete!","^6","Mutation: Mark a given form (recursively) or field incomplete.\n\n  entity-ident - The ident of the entity to mark. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `clear-complete*` for a function you can compose into your own mutations.","^5",["^ ","^6","Mutation: Mark a given form (recursively) or field incomplete.\n\n  entity-ident - The ident of the entity to mark. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `clear-complete*` for a function you can compose into your own mutations.","^7",null],"^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",583,"^9",1,"^7H","~$com.fulcrologic.fulcro.mutations/Mutation"],"~$no-spec-or-valid?",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",241,"^9",8,"^:",241,"^;",25,"^75",["^1B",["^76",["^1B",[["~$entity-props","~$key"]]]]],"^6","Returns false if and only if the given key has a spec, and the spec is not valid for the value found in the given\n  map of entity props (e.g. `(s/valid? key (get entity-props key))`).\n\n  Returns true otherwise."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/no-spec-or-valid?","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",25,"^79",["^1B",[["^87","^88"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",241,"^7=","^7I","^:",241,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^87","^88"]]]]],"^6","Returns false if and only if the given key has a spec, and the spec is not valid for the value found in the given\n  map of entity props (e.g. `(s/valid? key (get entity-props key))`).\n\n  Returns true otherwise."],"~$dirty?",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",220,"^9",8,"^:",220,"^;",14,"^75",["^1B",["^76",["^1B",[["~$ui-entity-props","^7C"],["^8;"]]]]],"^6","Returns true if the given ui-entity-props that are configured as a form differ from the pristine version.\n  Recursively follows subforms if given no field. Returns true if anything doesn't match up.\n\n  If given a field, it only checks that field.","^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^8;","^7C"],["^8;"]]],"^75",["^1B",[["^8;","^7C"],["^8;"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/dirty?","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",14,"^7D",["^ ","^7<",false,"^7E",2,"^7?",2,"^79",["^1B",[["^8;","^7C"],["^8;"]]],"^75",["^1B",[["^8;","^7C"],["^8;"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^8;","^7C"],["^8;"]]],"^7:",null,"^7E",2,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^7G",[["^ ","^7E",2,"^7<",false,"^7H","^7I"],["^ ","^7E",1,"^7<",false,"^7H","^7I"]],"^8",220,"^:",220,"^7?",2,"^7@",true,"^75",["^1B",[["^8;","^7C"],["^8;"]]],"^6","Returns true if the given ui-entity-props that are configured as a form differ from the pristine version.\n  Recursively follows subforms if given no field. Returns true if anything doesn't match up.\n\n  If given a field, it only checks that field."],"~$form-config",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",65,"^9",8,"^:",65,"^;",19,"^75",["^1B",["^76",["^1B",[["^77","~$fields"],["^77","^8>","~$subforms"]]]]],"^6","Generate a form config given:\n\n  entity-ident - The ident of the entity you're configuring forms for.\n  fields - A set of keywords on the entity that is the form.\n  subforms - An optional set of keywords on the entity that is the form, for the joins to subforms.","^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^75",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/form-config","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",19,"^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^75",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^7:",null,"^7E",3,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^7G",[["^ ","^7E",2,"^7<",false,"^7H","^7O"],["^ ","^7E",3,"^7<",false,"^7H","^7>"]],"^8",65,"^:",65,"^7?",3,"^7@",true,"^75",["^1B",[["^77","^8>"],["^77","^8>","^8?"]]],"^6","Generate a form config given:\n\n  entity-ident - The ident of the entity you're configuring forms for.\n  fields - A set of keywords on the entity that is the form.\n  subforms - An optional set of keywords on the entity that is the form, for the joins to subforms."],"~$ident-generator",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",26,"^9",6,"^:",26,"^;",21],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/ident-generator","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",21,"^79",["^1B",[[]]],"^7:",null,"^7;",["^1B",[]],"^9",1,"^7<",false,"^8",26,"^7=","^7O","^:",26,"^7?",0,"^7@",true,"^75",null],"~$add-form-config*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",163,"^9",8,"^:",163,"^;",24,"^75",["^1B",["^76",["^1B",[["^7K","~$class","^77"]]]]],"^6","Identical to `add-form-config`, but works against normalized entities in the\n  app state. This makes it ideal for composition within mutations.\n\n  state-map - The application state database (map, not atom).\n  class - The component class. Must have declared form fields.\n  entity-ident - The ident of the normalized entity of the given class that you wish to initialize.\n\n  Returns an updated state map with normalized form configuration in place for the entity."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/add-form-config*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",24,"^79",["^1B",[["^7K","^8D","^77"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",163,"^7=",["^V",[null,"^7O"]],"^:",163,"^7?",3,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7K","^8D","^77"]]]]],"^6","Identical to `add-form-config`, but works against normalized entities in the\n  app state. This makes it ideal for composition within mutations.\n\n  state-map - The application state database (map, not atom).\n  class - The component class. Must have declared form fields.\n  entity-ident - The ident of the normalized entity of the given class that you wish to initialize.\n\n  Returns an updated state map with normalized form configuration in place for the entity."],"~$immediate-subform-idents",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",357,"^9",9,"^:",357,"^;",33,"^7T",true,"^75",["^1B",["^76",["^1B",[["~$entity","~$subform-join-keys"]]]]],"^6","Get the idents of the immediate subforms that are joined into entity by\n   subform-join-keys (works with to-one and to-many). Entity is a NORMALIZED entity from the state map.\n\n   Returns a sequence of those idents."],"^7T",true,"^W","~$com.fulcrologic.fulcro.algorithms.form-state/immediate-subform-idents","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",33,"^79",["^1B",[["^8G","^8H"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",357,"^7=","~$cljs.core/LazySeq","^:",357,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8G","^8H"]]]]],"^6","Get the idents of the immediate subforms that are joined into entity by\n   subform-join-keys (works with to-one and to-many). Entity is a NORMALIZED entity from the state map.\n\n   Returns a sequence of those idents."],"~$pristine->entity*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",531,"^9",8,"^:",531,"^;",25,"^75",["^1B",["^76",["^1B",[["^7K","^77"]]]]],"^6","Copy the pristine state over top of the originating entity of the given form. Meant to be used inside of a\n  mutation. Recursively follows subforms in app state. Returns the new app state map.\n\n  state-map - The normalized state database (map, not atom)\n  entity-ident - The ident of the entity that you wish to restore to its original pristine state.\n\n  Only affects declared fields and sub-forms."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/pristine->entity*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",25,"^79",["^1B",[["^7K","^77"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",531,"^7=",["^V",[null,"^7O"]],"^:",531,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7K","^77"]]]]],"^6","Copy the pristine state over top of the originating entity of the given form. Meant to be used inside of a\n  mutation. Recursively follows subforms in app state. Returns the new app state map.\n\n  state-map - The normalized state database (map, not atom)\n  entity-ident - The ident of the entity that you wish to restore to its original pristine state.\n\n  Only affects declared fields and sub-forms."],"~$clear-complete*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",474,"^9",7,"^:",474,"^;",22,"^75",["^1B",["^76",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]]]],"^6","Mark the fields incomplete so that validation checks will no longer return values. This function works on an app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-incomplete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given.","^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/clear-complete*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",22,"^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7:",null,"^7E",3,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^7G",[["^ ","^7E",3,"^7<",false,"^7H",["^V",["~$clj","^7O"]]],["^ ","^7E",2,"^7<",false,"^7H",["^V",[null,"^7O"]]]],"^8",474,"^:",474,"^7?",3,"^7@",true,"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^6","Mark the fields incomplete so that validation checks will no longer return values. This function works on an app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-incomplete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given."],"~$derive-form-info",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",82,"^9",8,"^:",82,"^;",24,"^7T",true,"^75",["^1B",["^76",["^1B",[["^8D"]]]]]],"^7T",true,"^W","~$com.fulcrologic.fulcro.algorithms.form-state/derive-form-info","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",24,"^79",["^1B",[["^8D"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",82,"^7=","~$cljs.core/IVector","^:",82,"^7?",1,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8D"]]]]]],"~$mark-complete!",["^ ","^W","~$com.fulcrologic.fulcro.algorithms.form-state/mark-complete!","^6","Mutation: Mark a given form (recursively) or field complete.\n\n  entity-ident - The ident of the entity to mark complete. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `mark-complete*` for a function you can compose into your own mutations.","^5",["^ ","^6","Mutation: Mark a given form (recursively) or field complete.\n\n  entity-ident - The ident of the entity to mark complete. This is optional, but if not supplied it will derive it from\n                 the ident of the invoking component.\n  field - (optional) limit the marking to a single field.\n\n  See `mark-complete*` for a function you can compose into your own mutations.","^7",null],"^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",568,"^9",1,"^7H","^85"],"~$reset-form!",["^ ","^W","~$com.fulcrologic.fulcro.algorithms.form-state/reset-form!","^6","Mutation: Reset the form (recursively) to its (last recorded) pristine state. If form ident is not supplied it uses the ident\n   of the calling component. See `pristine->entity*` for a function you can compose into your own mutations.","^5",["^ ","^6","Mutation: Reset the form (recursively) to its (last recorded) pristine state. If form ident is not supplied it uses the ident\n   of the calling component. See `pristine->entity*` for a function you can compose into your own mutations.","^7",null],"^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",561,"^9",1,"^7H","^85"],"~$form-config-join",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",60,"^9",6,"^:",60,"^;",22],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/form-config-join","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",22,"^9",1,"^8",60,"^:",60,"^7H","^7>","^6","A query join to ::form-config. This should be added to the query of a component that is\n  using form state support."],"~$dirty-fields",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",396,"^9",8,"^:",396,"^;",20,"^75",["^1B",["^76",["^1B",[["~$ui-entity","~$as-delta?"]]]]],"^6","Obtains all of the dirty fields for the given (denormalized) ui-entity, recursively. This works against UI props\n  because submission mutations should close over the data as parameters to a mutation. In other words, your form\n  submission to a server should be triggered from UI with the output of this function as parameters:\n\n  ```\n  (dom/input { :onClick #(comp/transact! this `[(some-submit-function {:diff ~(f/dirty-fields props true)})]) })\n  ```\n\n  - `ui-entity` - The entity (denormalized) from the UI.\n  - `as-delta?` - If false, each field's reported (new) value will just be the new value. When true, each value will be a map with :before and :after keys\n  with the old and new values (useful for optimistic transaction semantics).\n\n  Returns a map keyed by form ID (for each form/subform) whose values are maps of key/value pairs of\n  changes. Fields from entities that have a temporary IDs will always be included.\n\n  In other words, a change that happened for an entity with ident `entity-ident` on field `:field`:\n\n  With `as-delta?` true:\n\n  ```\n  {entity-ident {:field {:before 1 :after 2}}}\n  ```\n\n  with `as-delta?` false:\n\n  ```\n  {entity-ident {:field 2}}\n  ```\n  "],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/dirty-fields","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",20,"^79",["^1B",[["^8Z","^8["]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",396,"^7=",["^V",[null,"^7O"]],"^:",396,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8Z","^8["]]]]],"^6","Obtains all of the dirty fields for the given (denormalized) ui-entity, recursively. This works against UI props\n  because submission mutations should close over the data as parameters to a mutation. In other words, your form\n  submission to a server should be triggered from UI with the output of this function as parameters:\n\n  ```\n  (dom/input { :onClick #(comp/transact! this `[(some-submit-function {:diff ~(f/dirty-fields props true)})]) })\n  ```\n\n  - `ui-entity` - The entity (denormalized) from the UI.\n  - `as-delta?` - If false, each field's reported (new) value will just be the new value. When true, each value will be a map with :before and :after keys\n  with the old and new values (useful for optimistic transaction semantics).\n\n  Returns a map keyed by form ID (for each form/subform) whose values are maps of key/value pairs of\n  changes. Fields from entities that have a temporary IDs will always be included.\n\n  In other words, a change that happened for an entity with ident `entity-ident` on field `:field`:\n\n  With `as-delta?` true:\n\n  ```\n  {entity-ident {:field {:before 1 :after 2}}}\n  ```\n\n  with `as-delta?` false:\n\n  ```\n  {entity-ident {:field 2}}\n  ```\n  "],"~$delete-form-state*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",516,"^9",8,"^:",516,"^;",26,"^75",["^1B",["^76",["^1B",[["^7K","~$entity-ident-or-idents"]]]]],"^6","Removes copies of entities used by form-state logic."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/delete-form-state*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",26,"^79",["^1B",[["^7K","^92"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",516,"^7=",["^V",["^8O","^7O"]],"^:",516,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7K","^92"]]]]],"^6","Removes copies of entities used by form-state logic."],"~$entity->pristine*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",544,"^9",8,"^:",544,"^;",25,"^75",["^1B",["^76",["^1B",[["^7K","^77"]]]]],"^6","Overwrite the pristine state (form state's copy) of the entity. This is meant to be used from a mutation\n  to update the form state tracking recursively to make the form as 'unmodified'. That is to say, as if you\n  committed the values to the server, and the current entity state is now the pristine state.\n\n  This function does no sanity checks, so you should ensure the entity is valid!\n\n  Recursively updates all sub forms.\n\n  Returns the updated state-map (database)."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/entity->pristine*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",25,"^79",["^1B",[["^7K","^77"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",544,"^7=",["^V",[null,"^7O"]],"^:",544,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^7K","^77"]]]]],"^6","Overwrite the pristine state (form state's copy) of the entity. This is meant to be used from a mutation\n  to update the form state tracking recursively to make the form as 'unmodified'. That is to say, as if you\n  committed the values to the server, and the current entity state is now the pristine state.\n\n  This function does no sanity checks, so you should ensure the entity is valid!\n\n  Recursively updates all sub forms.\n\n  Returns the updated state-map (database)."],"~$mark-complete*",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",494,"^9",8,"^:",494,"^;",22,"^75",["^1B",["^76",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]]]],"^6","Mark the fields complete so that validation checks will return values. This function works on a app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-complete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given.","^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7;",["^1B",[null,null]]]],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/mark-complete*","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",22,"^7D",["^ ","^7<",false,"^7E",3,"^7?",3,"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7;",["^1B",[null,null]]],"^79",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^7:",null,"^7E",3,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^7G",[["^ ","^7E",3,"^7<",false,"^7H",["^V",["^8O","^7O"]]],["^ ","^7E",2,"^7<",false,"^7H",["^V",[null,"^7O"]]]],"^8",494,"^:",494,"^7?",3,"^7@",true,"^75",["^1B",[["^7K","^77","^7C"],["^7K","^77"]]],"^6","Mark the fields complete so that validation checks will return values. This function works on a app state database\n  map (not atom) and is meant to be composed into mutations. See the `mark-complete!` mutation if you do not need to combine\n  this with other operations.\n\n  Follows the subforms recursively through state, unless a specific field is given."],"~$FormConfig",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",50,"^9",8,"^:",50,"^;",18,"^6","A component supporting normalization of form state configuration. Use Fulcro Inspect for viewing that data.\n  Rendering isn't supported on this component so it will work with React Native.\n  Can also render the form config, if that is useful to you."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/FormConfig","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",18,"^79",["^1B",[["~$props__57868__auto__"]]],"^7:",null,"^7;",["^1B",[]],"^9",1,"^7<",false,"^8",50,"^7=","~$clj-nil","^:",50,"^7?",1,"^7@",true,"^75",null,"^6","A component supporting normalization of form state configuration. Use Fulcro Inspect for viewing that data.\n  Rendering isn't supported on this component so it will work with React Native.\n  Can also render the form config, if that is useful to you."],"~$add-form-config",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",110,"^9",8,"^:",110,"^;",23,"^75",["^1B",["^76",["^1B",[["^8D","^8G"]]]]],"^6","Add form configuration data to a *denormalized* entity (e.g. pre-merge). This is useful in\n  initial state or when using `merge-component!`. This function *will not* touch an entity\n  that already has form config but will recurse the entire form set. It can therefore be\n  invoked on the top-level of the form set when adding, for example, an instance of a sub-form.\n\n  class - The component class.\n  entity - A denormalized (tree) of data that matches the given component class.\n\n  Returns the (possibly updated) denormalized entity, ready to merge."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/add-form-config","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",23,"^79",["^1B",[["^8D","^8G"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",110,"^7=",["^V",[null,"^7O"]],"^:",110,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8D","^8G"]]]]],"^6","Add form configuration data to a *denormalized* entity (e.g. pre-merge). This is useful in\n  initial state or when using `merge-component!`. This function *will not* touch an entity\n  that already has form config but will recurse the entire form set. It can therefore be\n  invoked on the top-level of the form set when adding, for example, an instance of a sub-form.\n\n  class - The component class.\n  entity - A denormalized (tree) of data that matches the given component class.\n\n  Returns the (possibly updated) denormalized entity, ready to merge."],"~$get-form-fields",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",37,"^9",8,"^:",37,"^;",23,"^75",["^1B",["^76",["^1B",[["^8D"]]]]],"^6","Returns the set of defined form fields for the given component class (or instance)."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/get-form-fields","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",23,"^79",["^1B",[["^8D"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",37,"^7=",["^V",[null,"^7O"]],"^:",37,"^7?",1,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8D"]]]]],"^6","Returns the set of defined form fields for the given component class (or instance)."],"~$immediate-subforms",["^ ","^74",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^8",206,"^9",8,"^:",206,"^;",26,"^75",["^1B",["^76",["^1B",[["^8G","^8H"]]]]],"^6","Get the instances of the immediate subforms that are joined into the given entity by\n   subform-join-keys (works with to-one and to-many).\n\n   - `entity` - a denormalized (UI) entity.\n   - `subform-join-keys` - The keys of the subforms of this entity, as a set.\n\n   Returns a sequence of those entities (all denormalized)."],"^W","~$com.fulcrologic.fulcro.algorithms.form-state/immediate-subforms","^7","com/fulcrologic/fulcro/algorithms/form_state.cljc","^;",26,"^79",["^1B",[["^8G","^8H"]]],"^7:",null,"^7;",["^1B",[null,null]],"^9",1,"^7<",false,"^8",206,"^7=","^8J","^:",206,"^7?",2,"^7@",true,"^75",["^1B",["^76",["^1B",[["^8G","^8H"]]]]],"^6","Get the instances of the immediate subforms that are joined into the given entity by\n   subform-join-keys (works with to-one and to-many).\n\n   - `entity` - a denormalized (UI) entity.\n   - `subform-join-keys` - The keys of the subforms of this entity, as a set.\n\n   Returns a sequence of those entities (all denormalized)."]],"^1@",["^ ","^?","^@","^14","^15","^16","^T","^B","^B","^R","^R","~$s","^@","^O","^O","^1:","^O","^T","^T","^15","^15","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1<",["^V",["~:valid","~:req-un","~:opt-un","^8V","~:gfn","~:children","~$cljs.core/keyword?","~:pred-exprs","~:into","~:keys-pred","~$any?","~:table","~:opt-keys","~$edn-query-language.core/ident?","~:else","^84","~:com.fulcrologic.fulcro.algorithms.form-state/forms-by-ident","~:ref","~:cljs.spec.alpha/kind-form","~:com.fulcrologic.fulcro.algorithms.form-state/fields","~$cljs.spec.alpha/every","~:req-specs","~:unchecked","~:com.fulcrologic.fulcro.algorithms.form-state/pristine-state","~:params","~:ast","~:field","~:type","~$cljs.spec.alpha/tuple","~:invalid","~:state","~:com.fulcrologic.fulcro.algorithms.form-state/id","~$cljs.core/contains?","~$cljs.core/map?","~$keyword?","~:cljs.spec.alpha/cpred","~:component","~:com.fulcrologic.fulcro.algorithms.form-state/config","~$%","~:offending-component","~:otherwise","~$cljs.spec.alpha/keys","^8T","~:req","~:render","~:after","~:other/by-id","~$cljs.spec.alpha/with-gen","~:prop","~:kind","~$cljs.spec.alpha/map-of","~:entity-ident","~$cljs.core/set?","~:app","~:req-keys","~:ident","~$cljs.core/fn","~:dispatch-key","~:opt-specs","~:form-ident","~:com.fulcrologic.fulcro.algorithms.form-state/subforms","~:pred-forms","~:action","~:com.fulcrologic.fulcro.algorithms.form-state/complete?","~:error","~:form-fields","~:cljs.spec.alpha/kfn","~:default-result-action!","~:result-action","~:query","~:com.fulcrologic.fulcro.algorithms.form-state/validity","^8B","~:initLocalState","~:com.fulcrologic.fulcro.algorithms.form-state/denormalized-form","~:before","~:auto","~:p","~:cljs.spec.alpha/conform-all","~:com.fulcrologic.fulcro.algorithms.form-state/FormConfig","~$cljs.core/any?","~:join","~:row","~:nested-exception","~:cljs.spec.alpha/describe","~:opt"]],"~:order",["^9M","^:A","^:4","^:B","^9O","^8B","^9T","^9U","^9H","^:D","^:G","^:7","^9S","^:8","^;8","^:O","^:E","^;4","^:1","^9L","^9J","^:U","^;2","^:6","^9X","^:R","^::","^:=","^:>","^;9","^9D","^9E","^9F","^9I","^9K","^9N","^9V","^:I","^:M","^:P","^:K","~$%","^:5","^:Y","^9C","^9W","^:2","^:[","^:T","^;6","^:X","^:J","^:?","^9Q","^:Z","^;3","^:9","^9G","^:L","^:0","^:C","^;5","^:;","^9P","^;7","^:<","^;0","^:@","^:S","~:p","^;1","^8V","^9Y","^9Z","^:N","^:Q","^:W","^9R","^:3","^:H","^:V","^8T","^:F","^9[","^84"]],"^1F",["^ ","^1=",["^V",[]]],"^1G",["^ "],"^1H",["^18","^B","^@","^12","^15","^13","^O","^19","^R","^T"]],"^Z","^X","~:ns-specs",["^ ","^9T",["^1B",["^9U","^9H","^:D","^:G"]],"^9X",["^1B",["^:E","^9H","^;4"]],"^:4",["^1B",["^:B","^9O","^8B"]],"^::",["^1B",["^:=","^:>",["^:4","^9T"],"^;9",["^9X","^:R","^:O"]]],"^:O",["^1B",["^:E","^9H","^;4"]],"^:R",["^1B",["^9U","^9H","^:D","^:G"]],"^:Y",["^V",["^9C","^9W","^:2"]],"^:[",["^1B",["^:=","^:>",["^::"]]]],"~:ns-speced-vars",[],"~:compiler-options",["^1V",[["^;=","~:static-fns"],true,["^;=","~:elide-asserts"],false,["^;=","~:optimize-constants"],null,["^;=","^1M"],null,["^;=","~:external-config"],null,["^;=","~:tooling-config"],null,["^;=","~:emit-constants"],null,["^;=","~:load-tests"],null,["^;=","~:form-size-threshold"],null,["^;=","~:infer-externs"],true,["^;=","^1O"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;=","~:fn-invoke-direct"],null,["^;=","~:source-map"],"/dev/null"]]]