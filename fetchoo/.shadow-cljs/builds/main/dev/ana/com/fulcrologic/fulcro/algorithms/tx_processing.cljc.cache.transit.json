["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517)], null);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__59807){\nreturn cljs.core.vector_QMARK_(G__59807);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null))], null);\n\nvar parallel_QMARK_ = (function (p__59830){\nvar map__59831 = p__59830;\nvar map__59831__$1 = (((((!((map__59831 == null))))?(((((map__59831.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59831.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59831):map__59831);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59831__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__59823 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__59823__$1 = (((((!((map__59823 == null))))?(((((map__59823.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59823.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59823):map__59823);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),cljs.core.fn_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59875_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59875_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59888_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59888_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null);\n\nvar vec__59896 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59896,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59896,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (vec__59896,active_queue,send_queue__$1){\nreturn (function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n});})(vec__59896,active_queue,send_queue__$1))\n,cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__59900 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__59896,active_queue,send_queue__$1,id_sequence,clusters){\nreturn (function (result,id){\nvar vec__59916 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__59917 = cljs.core.seq(vec__59916);\nvar first__59918 = cljs.core.first(seq__59917);\nvar seq__59917__$1 = cljs.core.next(seq__59917);\nvar map__59919 = first__59918;\nvar map__59919__$1 = (((((!((map__59919 == null))))?(((((map__59919.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59919.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59919):map__59919);\nvar n = map__59919__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59919__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__59917__$1;\nvar cluster = vec__59916;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n});})(vec__59896,active_queue,send_queue__$1,id_sequence,clusters))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__59900__$1 = (((((!((map__59900 == null))))?(((((map__59900.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59900.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59900):map__59900);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59900__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59900__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__59929){\nvar map__59930 = p__59929;\nvar map__59930__$1 = (((((!((map__59930 == null))))?(((((map__59930.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59930.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59930):map__59930);\nvar ast = map__59930__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),((function (map__59930,map__59930__$1,ast,type,key,children){\nreturn (function (G__59933){\nreturn cljs.core.coll_QMARK_(G__59933);\n});})(map__59930,map__59930__$1,ast,type,key,children))\n,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796))], null),null)], null);\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__59939){\nreturn cljs.core.map_QMARK_(G__59939);\n}),(function (G__59939){\nreturn cljs.core.contains_QMARK_(G__59939,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\n})], null),(function (G__59939){\nreturn ((cljs.core.map_QMARK_(G__59939)) && (cljs.core.contains_QMARK_(G__59939,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421))));\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null)]))], null);\n\nvar vec__59953 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59953,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59953,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__59956 = cljs.core.split_with(((function (vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options){\nreturn (function (p1__59934_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__59934_SHARP_));\n});})(vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options))\n,send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59956,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59956,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer){\nreturn (function (acc,p__59963){\nvar map__59964 = p__59963;\nvar map__59964__$1 = (((((!((map__59964 == null))))?(((((map__59964.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59964.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59964):map__59964);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59964__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n});})(vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer))\n,cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),((function (vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__59969){\nvar map__59970 = p__59969;\nvar map__59970__$1 = (((((!((map__59970 == null))))?(((((map__59970.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59970.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59970):map__59970);\nvar combined_result = map__59970__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59970__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__59974 = cljs.core.seq(to_send);\nvar chunk__59975 = null;\nvar count__59976 = (0);\nvar i__59977 = (0);\nwhile(true){\nif((i__59977 < count__59976)){\nvar map__59985 = chunk__59975.cljs$core$IIndexed$_nth$arity$2(null,i__59977);\nvar map__59985__$1 = (((((!((map__59985 == null))))?(((((map__59985.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59985.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59985):map__59985);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59985__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__60497 = seq__59974;\nvar G__60498 = chunk__59975;\nvar G__60499 = count__59976;\nvar G__60500 = (i__59977 + (1));\nseq__59974 = G__60497;\nchunk__59975 = G__60498;\ncount__59976 = G__60499;\ni__59977 = G__60500;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__59974);\nif(temp__5753__auto__){\nvar seq__59974__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__59974__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__59974__$1);\nvar G__60501 = cljs.core.chunk_rest(seq__59974__$1);\nvar G__60502 = c__4550__auto__;\nvar G__60503 = cljs.core.count(c__4550__auto__);\nvar G__60504 = (0);\nseq__59974 = G__60501;\nchunk__59975 = G__60502;\ncount__59976 = G__60503;\ni__59977 = G__60504;\ncontinue;\n} else {\nvar map__59989 = cljs.core.first(seq__59974__$1);\nvar map__59989__$1 = (((((!((map__59989 == null))))?(((((map__59989.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59989.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59989):map__59989);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59989__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__60505 = cljs.core.next(seq__59974__$1);\nvar G__60506 = null;\nvar G__60507 = (0);\nvar G__60508 = (0);\nseq__59974 = G__60505;\nchunk__59975 = G__60506;\ncount__59976 = G__60507;\ni__59977 = G__60508;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});})(vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),((function (vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__59997){\nvar map__59998 = p__59997;\nvar map__59998__$1 = (((((!((map__59998 == null))))?(((((map__59998.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__59998.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__59998):map__59998);\nvar combined_result = map__59998__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59998__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__60000_60513 = cljs.core.seq(to_send);\nvar chunk__60001_60514 = null;\nvar count__60002_60515 = (0);\nvar i__60003_60516 = (0);\nwhile(true){\nif((i__60003_60516 < count__60002_60515)){\nvar map__60023_60518 = chunk__60001_60514.cljs$core$IIndexed$_nth$arity$2(null,i__60003_60516);\nvar map__60023_60519__$1 = (((((!((map__60023_60518 == null))))?(((((map__60023_60518.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60023_60518.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60023_60518):map__60023_60518);\nvar ast_60520__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60023_60519__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_60521 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60023_60519__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_60524 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60520__$1)):body);\nvar result_60525 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60524);\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{var map__60030_60529 = result_60525;\nvar map__60030_60530__$1 = (((((!((map__60030_60529 == null))))?(((((map__60030_60529.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60030_60529.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60030_60529):map__60030_60529);\nvar status_code_60531 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60030_60530__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_60532__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60030_60530__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60531)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60532__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60531));\n}\n}catch (e60028){var e_60534 = e60028;\n}} else {\n}\n\n(result_handler_60521.cljs$core$IFn$_invoke$arity$1 ? result_handler_60521.cljs$core$IFn$_invoke$arity$1(result_60525) : result_handler_60521.call(null,result_60525));\n\n\nvar G__60535 = seq__60000_60513;\nvar G__60536 = chunk__60001_60514;\nvar G__60537 = count__60002_60515;\nvar G__60538 = (i__60003_60516 + (1));\nseq__60000_60513 = G__60535;\nchunk__60001_60514 = G__60536;\ncount__60002_60515 = G__60537;\ni__60003_60516 = G__60538;\ncontinue;\n} else {\nvar temp__5753__auto___60539 = cljs.core.seq(seq__60000_60513);\nif(temp__5753__auto___60539){\nvar seq__60000_60540__$1 = temp__5753__auto___60539;\nif(cljs.core.chunked_seq_QMARK_(seq__60000_60540__$1)){\nvar c__4550__auto___60541 = cljs.core.chunk_first(seq__60000_60540__$1);\nvar G__60542 = cljs.core.chunk_rest(seq__60000_60540__$1);\nvar G__60543 = c__4550__auto___60541;\nvar G__60544 = cljs.core.count(c__4550__auto___60541);\nvar G__60545 = (0);\nseq__60000_60513 = G__60542;\nchunk__60001_60514 = G__60543;\ncount__60002_60515 = G__60544;\ni__60003_60516 = G__60545;\ncontinue;\n} else {\nvar map__60034_60546 = cljs.core.first(seq__60000_60540__$1);\nvar map__60034_60547__$1 = (((((!((map__60034_60546 == null))))?(((((map__60034_60546.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60034_60546.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60034_60546):map__60034_60546);\nvar ast_60548__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60034_60547__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_60549 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60034_60547__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_60553 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60548__$1)):body);\nvar result_60554 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60553);\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{var map__60038_60557 = result_60554;\nvar map__60038_60558__$1 = (((((!((map__60038_60557 == null))))?(((((map__60038_60557.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60038_60557.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60038_60557):map__60038_60557);\nvar status_code_60559 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60038_60558__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_60560__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60038_60558__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60559)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60560__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60559));\n}\n}catch (e60037){var e_60563 = e60037;\n}} else {\n}\n\n(result_handler_60549.cljs$core$IFn$_invoke$arity$1 ? result_handler_60549.cljs$core$IFn$_invoke$arity$1(result_60554) : result_handler_60549.call(null,result_60554));\n\n\nvar G__60564 = cljs.core.next(seq__60000_60540__$1);\nvar G__60565 = null;\nvar G__60566 = (0);\nvar G__60567 = (0);\nseq__60000_60513 = G__60564;\nchunk__60001_60514 = G__60565;\ncount__60002_60515 = G__60566;\ni__60003_60516 = G__60567;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n});})(vec__59953,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__59956,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar b2__44459__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__44459__auto__)){\nvar remote = b2__44459__auto__;\nvar b2__44459__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__44459__auto____$1)){\nvar transmit_BANG_ = b2__44459__auto____$1;\ntry{if(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{var tx_60582 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_60582);\n}catch (e60050){var e_60583 = e60050;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\n}catch (e60042){var e = e60042;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e,transmit_BANG_,b2__44459__auto____$1,remote,b2__44459__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node)),\"See https://book.fulcrologic.com/#err-txp-send-exc\"], null);\n});})(e,transmit_BANG_,b2__44459__auto____$1,remote,b2__44459__auto__))\n,null)),null,933493316,null);\n\ntry{if(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\n}catch (e60045){var e_60587__$1 = e60045;\n}} else {\n}\n\nvar G__60047 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__60046 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60046.cljs$core$IFn$_invoke$arity$1 ? fexpr__60046.cljs$core$IFn$_invoke$arity$1(G__60047) : fexpr__60046.call(null,G__60047));\n}catch (e60044){var e__$1 = e60044;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e__$1,e,transmit_BANG_,b2__44459__auto____$1,remote,b2__44459__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n});})(e__$1,e,transmit_BANG_,b2__44459__auto____$1,remote,b2__44459__auto__))\n,null)),null,-807535529,null);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__44459__auto____$1,remote,b2__44459__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\n});})(b2__44459__auto____$1,remote,b2__44459__auto__))\n,null)),null,-1522718243,null);\n\nvar G__60052 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__60051 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60051.cljs$core$IFn$_invoke$arity$1 ? fexpr__60051.cljs$core$IFn$_invoke$arity$1(G__60052) : fexpr__60051.call(null,G__60052));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__44459__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\n});})(b2__44459__auto__))\n,null)),null,688025678,null);\n\nvar G__60054 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__60053 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__60053.cljs$core$IFn$_invoke$arity$1 ? fexpr__60053.cljs$core$IFn$_invoke$arity$1(G__60054) : fexpr__60053.call(null,G__60054));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__60056){\nvar map__60057 = p__60056;\nvar map__60057__$1 = (((((!((map__60057 == null))))?(((((map__60057.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60057.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60057):map__60057);\nvar app__$1 = map__60057__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60057__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807)], null);\n\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom){\nreturn (function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__60060 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60060,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60060,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__60064_60602 = cljs.core.seq(p);\nvar chunk__60065_60603 = null;\nvar count__60066_60604 = (0);\nvar i__60067_60605 = (0);\nwhile(true){\nif((i__60067_60605 < count__60066_60604)){\nvar item_60606 = chunk__60065_60603.cljs$core$IIndexed$_nth$arity$2(null,i__60067_60605);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60064_60602,chunk__60065_60603,count__60066_60604,i__60067_60605,item_60606,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60606,remote);\n});})(seq__60064_60602,chunk__60065_60603,count__60066_60604,i__60067_60605,item_60606,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom))\n);\n\n\nvar G__60609 = seq__60064_60602;\nvar G__60610 = chunk__60065_60603;\nvar G__60611 = count__60066_60604;\nvar G__60612 = (i__60067_60605 + (1));\nseq__60064_60602 = G__60609;\nchunk__60065_60603 = G__60610;\ncount__60066_60604 = G__60611;\ni__60067_60605 = G__60612;\ncontinue;\n} else {\nvar temp__5753__auto___60615 = cljs.core.seq(seq__60064_60602);\nif(temp__5753__auto___60615){\nvar seq__60064_60621__$1 = temp__5753__auto___60615;\nif(cljs.core.chunked_seq_QMARK_(seq__60064_60621__$1)){\nvar c__4550__auto___60622 = cljs.core.chunk_first(seq__60064_60621__$1);\nvar G__60623 = cljs.core.chunk_rest(seq__60064_60621__$1);\nvar G__60624 = c__4550__auto___60622;\nvar G__60625 = cljs.core.count(c__4550__auto___60622);\nvar G__60626 = (0);\nseq__60064_60602 = G__60623;\nchunk__60065_60603 = G__60624;\ncount__60066_60604 = G__60625;\ni__60067_60605 = G__60626;\ncontinue;\n} else {\nvar item_60627 = cljs.core.first(seq__60064_60621__$1);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60064_60602,chunk__60065_60603,count__60066_60604,i__60067_60605,item_60627,seq__60064_60621__$1,temp__5753__auto___60615,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60627,remote);\n});})(seq__60064_60602,chunk__60065_60603,count__60066_60604,i__60067_60605,item_60627,seq__60064_60621__$1,temp__5753__auto___60615,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom))\n);\n\n\nvar G__60630 = cljs.core.next(seq__60064_60621__$1);\nvar G__60631 = null;\nvar G__60632 = (0);\nvar G__60633 = (0);\nseq__60064_60602 = G__60630;\nchunk__60065_60603 = G__60631;\ncount__60066_60604 = G__60632;\ni__60067_60605 = G__60633;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__60069 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__60069__$1 = (((((!((map__60069 == null))))?(((((map__60069.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60069.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60069):map__60069);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60069__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60069__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (map__60069,map__60069__$1,send_queue__$1,send_node,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n});})(map__60069,map__60069__$1,send_queue__$1,send_node,send_queue,vec__60060,p,serial,front,send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom))\n);\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n});})(send_queues,remote_names,operations,map__60057,map__60057__$1,app__$1,runtime_atom))\n,cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nvar seq__60073_60638 = cljs.core.seq(cljs.core.deref(operations));\nvar chunk__60074_60639 = null;\nvar count__60075_60640 = (0);\nvar i__60076_60641 = (0);\nwhile(true){\nif((i__60076_60641 < count__60075_60640)){\nvar op_60645 = chunk__60074_60639.cljs$core$IIndexed$_nth$arity$2(null,i__60076_60641);\n(op_60645.cljs$core$IFn$_invoke$arity$0 ? op_60645.cljs$core$IFn$_invoke$arity$0() : op_60645.call(null));\n\n\nvar G__60646 = seq__60073_60638;\nvar G__60647 = chunk__60074_60639;\nvar G__60648 = count__60075_60640;\nvar G__60649 = (i__60076_60641 + (1));\nseq__60073_60638 = G__60646;\nchunk__60074_60639 = G__60647;\ncount__60075_60640 = G__60648;\ni__60076_60641 = G__60649;\ncontinue;\n} else {\nvar temp__5753__auto___60650 = cljs.core.seq(seq__60073_60638);\nif(temp__5753__auto___60650){\nvar seq__60073_60651__$1 = temp__5753__auto___60650;\nif(cljs.core.chunked_seq_QMARK_(seq__60073_60651__$1)){\nvar c__4550__auto___60653 = cljs.core.chunk_first(seq__60073_60651__$1);\nvar G__60654 = cljs.core.chunk_rest(seq__60073_60651__$1);\nvar G__60655 = c__4550__auto___60653;\nvar G__60656 = cljs.core.count(c__4550__auto___60653);\nvar G__60657 = (0);\nseq__60073_60638 = G__60654;\nchunk__60074_60639 = G__60655;\ncount__60075_60640 = G__60656;\ni__60076_60641 = G__60657;\ncontinue;\n} else {\nvar op_60658 = cljs.core.first(seq__60073_60651__$1);\n(op_60658.cljs$core$IFn$_invoke$arity$0 ? op_60658.cljs$core$IFn$_invoke$arity$0() : op_60658.call(null));\n\n\nvar G__60659 = cljs.core.next(seq__60073_60651__$1);\nvar G__60660 = null;\nvar G__60661 = (0);\nvar G__60662 = (0);\nseq__60073_60638 = G__60659;\nchunk__60074_60639 = G__60660;\ncount__60075_60640 = G__60661;\ni__60076_60641 = G__60662;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__60081 = arguments.length;\nswitch (G__60081) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n});})(ast,ast_nodes))\n),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n});})(ast,ast_nodes))\n)),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2;\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__60086 = arguments.length;\nswitch (G__60086) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__60088,addl){\nvar map__60089 = p__60088;\nvar map__60089__$1 = (((((!((map__60089 == null))))?(((((map__60089.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60089.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60089):map__60089);\nvar tx_node = map__60089__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60089__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nvar map__60093 = options;\nvar map__60093__$1 = (((((!((map__60093 == null))))?(((((map__60093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60093):map__60093);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60093__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60093__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__60095 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__60095__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60095,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__60095);\nvar G__60095__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60095__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__60095__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60095__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__60095__$2;\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__60097){\nvar map__60098 = p__60097;\nvar map__60098__$1 = (((((!((map__60098 == null))))?(((((map__60098.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60098.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60098):map__60098);\nvar tx_node = map__60098__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60098__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3;\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e60102){var e = e60102;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__60103 = env__$1;\nvar G__60103__$1 = (((G__60103 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__60103));\nif((G__60103__$1 == null)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__60103__$1);\n}\n})(),\"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\"], null);\n});})(e))\n,null)),null,-333423423,null);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = ((function (do_dispatch){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__60105){\nvar map__60106 = p__60105;\nvar map__60106__$1 = (((((!((map__60106 == null))))?(((((map__60106.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60106.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60106):map__60106);\nvar ele = map__60106__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60106__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__60108 = original_ast_node;\nvar map__60108__$1 = (((((!((map__60108 == null))))?(((((map__60108.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60108.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60108):map__60108);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60108__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__60112 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60112,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__60112;\n}\n});})(do_dispatch))\n;\nvar dispatch_all = ((function (do_dispatch,dispatch){\nreturn (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});})(do_dispatch,dispatch))\n;\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Should be called after the application renders to ensure that transactions blocked until the next render become\n * unblocked. Schedules an activation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__60115,options){\nvar map__60116 = p__60115;\nvar map__60116__$1 = (((((!((map__60116 == null))))?(((((map__60116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60116):map__60116);\nvar app__$1 = map__60116__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60116__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nif(cljs.core.truth_(cljs.core.some(((function (map__60116,map__60116__$1,app__$1,runtime_atom){\nreturn (function (p1__60114_SHARP_){\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__60114_SHARP_)));\n});})(map__60116,map__60116__$1,app__$1,runtime_atom))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),((function (map__60116,map__60116__$1,app__$1,runtime_atom){\nreturn (function (queue){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__60116,map__60116__$1,app__$1,runtime_atom){\nreturn (function (node){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\n});})(map__60116,map__60116__$1,app__$1,runtime_atom))\n,queue);\n});})(map__60116,map__60116__$1,app__$1,runtime_atom))\n);\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app__$1,(0)));\n} else {\nreturn null;\n}\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n * \n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__60123){\nvar map__60124 = p__60123;\nvar map__60124__$1 = (((((!((map__60124 == null))))?(((((map__60124.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60124.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60124):map__60124);\nvar app__$1 = map__60124__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60124__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__60126 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar map__60126__$1 = (((((!((map__60126 == null))))?(((((map__60126.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60126.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60126):map__60126);\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60126__$1,true);\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60126__$1,false);\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__60126,map__60126__$1,blocked,ready,map__60124,map__60124__$1,app__$1,runtime_atom){\nreturn (function (p1__60120_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__60120_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__60120_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n});})(map__60126,map__60126__$1,blocked,ready,map__60124,map__60124__$1,app__$1,runtime_atom))\n,ready);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,((function (map__60126,map__60126__$1,blocked,ready,dispatched_nodes,map__60124,map__60124__$1,app__$1,runtime_atom){\nreturn (function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),((function (map__60126,map__60126__$1,blocked,ready,dispatched_nodes,map__60124,map__60124__$1,app__$1,runtime_atom){\nreturn (function (p1__60121_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__60121_SHARP_,dispatched_nodes);\n});})(map__60126,map__60126__$1,blocked,ready,dispatched_nodes,map__60124,map__60124__$1,app__$1,runtime_atom))\n),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\n});})(map__60126,map__60126__$1,blocked,ready,dispatched_nodes,map__60124,map__60124__$1,app__$1,runtime_atom))\n);\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__60132 = arguments.length;\nswitch (G__60132) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__60136 = arguments.length;\nswitch (G__60136) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__60139 = arguments.length;\nswitch (G__60139) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__60143){\nvar map__60144 = p__60143;\nvar map__60144__$1 = (((((!((map__60144 == null))))?(((((map__60144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60144):map__60144);\nvar node = map__60144__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,map__60144,map__60144__$1,node,id,elements){\nreturn (function (p__60146,element){\nvar map__60148 = p__60146;\nvar map__60148__$1 = (((((!((map__60148 == null))))?(((((map__60148.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60148.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60148):map__60148);\nvar acc = map__60148__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60148__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60148__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__60151 = element;\nvar map__60151__$1 = (((((!((map__60151 == null))))?(((((map__60151.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60151.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60151):map__60151);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60151__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__60152 = dispatch;\nvar map__60152__$1 = (((((!((map__60152 == null))))?(((((map__60152.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60152.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60152):map__60152);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60152__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var or__4131__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4120__auto__ = (function (){var or__4131__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e60158){var e_60806 = e60158;\nvar mutation_symbol_60807 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,340,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (mutation_symbol_60807,e_60806,map__60151,map__60151__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__60152,map__60152__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_id_before,state,state_before,updated_element,done_QMARK___$1,new_acc,env,map__60148,map__60148__$1,acc,done_QMARK_,new_elements,remotes,map__60144,map__60144__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60806,\"The `action` section of mutation\",mutation_symbol_60807,\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"], null);\n});})(mutation_symbol_60807,e_60806,map__60151,map__60151__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__60152,map__60152__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_id_before,state,state_before,updated_element,done_QMARK___$1,new_acc,env,map__60148,map__60148__$1,acc,done_QMARK_,new_elements,remotes,map__60144,map__60144__$1,node,id,elements))\n,null)),null,503142597,null);\n}\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{var tx_60817 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_60817], null));\n}catch (e60160){var e_60820 = e60160;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n});})(remotes,map__60144,map__60144__$1,node,id,elements))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__60163){\nvar map__60164 = p__60163;\nvar map__60164__$1 = (((((!((map__60164 == null))))?(((((map__60164.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60164.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60164):map__60164);\nvar node = map__60164__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60164__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60164__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60164,map__60164__$1,node,id,elements){\nreturn (function (new_elements,element){\nvar map__60167 = element;\nvar map__60167__$1 = (((((!((map__60167 == null))))?(((((map__60167.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60167.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60167):map__60167);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60167__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__60168 = dispatch;\nvar map__60168__$1 = (((((!((map__60168 == null))))?(((((map__60168.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60168.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60168):map__60168);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60168__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\nvar state_before = cljs.core.deref(state);\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e60173){var e_60853 = e60173;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,373,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_60853,map__60167,map__60167__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__60168,map__60168__$1,action,exec_QMARK_,state_id_before,state,state_before,updated_node,new_acc,env,map__60164,map__60164__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60853,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\"], null);\n});})(e_60853,map__60167,map__60167__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__60168,map__60168__$1,action,exec_QMARK_,state_id_before,state,state_before,updated_node,new_acc,env,map__60164,map__60164__$1,node,id,elements))\n,null)),null,556895419,null);\n}\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntry{var tx_60861 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_60861], null));\n}catch (e60175){var e_60865 = e60175;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n});})(map__60164,map__60164__$1,node,id,elements))\n,cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__60178){\nvar map__60179 = p__60178;\nvar map__60179__$1 = (((((!((map__60179 == null))))?(((((map__60179.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60179.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60179):map__60179);\nvar tx_node = map__60179__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60179__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nvar element_complete_QMARK_ = ((function (map__60179,map__60179__$1,tx_node,elements){\nreturn (function (p__60182){\nvar map__60183 = p__60182;\nvar map__60183__$1 = (((((!((map__60183 == null))))?(((((map__60183.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60183.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60183):map__60183);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60183__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60183__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});})(map__60179,map__60179__$1,tx_node,elements))\n;\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__60187,remote,txn_id,ele_idx){\nvar map__60188 = p__60187;\nvar map__60188__$1 = (((((!((map__60188 == null))))?(((((map__60188.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60188.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60188):map__60188);\nvar app__$1 = map__60188__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60188__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar map__60191 = cljs.core.deref(runtime_atom);\nvar map__60191__$1 = (((((!((map__60191 == null))))?(((((map__60191.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60191.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60191):map__60191);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60191__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue = cljs.core.filterv(((function (map__60191,map__60191__$1,send_queues,old_queue,map__60188,map__60188__$1,app__$1,runtime_atom){\nreturn (function (p__60193){\nvar map__60194 = p__60193;\nvar map__60194__$1 = (((((!((map__60194 == null))))?(((((map__60194.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60194.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60194):map__60194);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60194__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60194__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n});})(map__60191,map__60191__$1,send_queues,old_queue,map__60188,map__60188__$1,app__$1,runtime_atom))\n,old_queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__60199 = arguments.length;\nswitch (G__60199) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__60201,txn_id,ele_idx,remote,result,result_key){\nvar map__60202 = p__60201;\nvar map__60202__$1 = (((((!((map__60202 == null))))?(((((map__60202.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60202.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60202):map__60202);\nvar app__$1 = map__60202__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60202__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_queue,map__60202,map__60202__$1,app__$1,runtime_atom){\nreturn (function (idx,p__60206){\nvar map__60207 = p__60206;\nvar map__60207__$1 = (((((!((map__60207 == null))))?(((((map__60207.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60207.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60207):map__60207);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60207__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n});})(active_queue,map__60202,map__60202__$1,app__$1,runtime_atom))\n,(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,421,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (active_queue,txn_idx,not_found_QMARK_,map__60202,map__60202__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\"], null);\n});})(active_queue,txn_idx,not_found_QMARK_,map__60202,map__60202__$1,app__$1,runtime_atom))\n,null)),null,-249584569,null);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nnew cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6;\n\n/**\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app__$1,remote,tx_node,tx_element){\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nvar map__60212 = tx_element;\nvar map__60212__$1 = (((((!((map__60212 == null))))?(((((map__60212.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60212.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60212):map__60212);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60212__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60212__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60212__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,442,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__60212,map__60212__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire,\"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\"], null);\n});})(map__60212,map__60212__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire))\n,null)),null,-1389360853,null);\n\nreturn remote_desire;\n})()\n\n))));\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nvar ast = (cljs.core.truth_((function (){var and__4120__auto__ = desired_ast;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn query_transform;\n} else {\nreturn and__4120__auto__;\n}\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\nvar G__60217 = tx_element;\nvar G__60217__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__60217,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__60217);\nif(cljs.core.truth_(ast)){\nreturn cljs.core.assoc_in(G__60217__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\n} else {\nreturn G__60217__$1;\n}\n});\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__60219,p__60220,ele_idx,remote){\nvar map__60221 = p__60219;\nvar map__60221__$1 = (((((!((map__60221 == null))))?(((((map__60221.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60221.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60221):map__60221);\nvar app__$1 = map__60221__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60221__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60222 = p__60220;\nvar map__60222__$1 = (((((!((map__60222 == null))))?(((((map__60222.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60222.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60222):map__60222);\nvar tx_node = map__60222__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60222__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),null)], null);\n\nvar update_handler = ((function (map__60221,map__60221__$1,app__$1,runtime_atom,map__60222,map__60222__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(map__60221,map__60221__$1,app__$1,runtime_atom,map__60222,map__60222__$1,tx_node,id,options))\n;\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\nvar handler = ((function (update_handler,ast,map__60221,map__60221__$1,app__$1,runtime_atom,map__60222,map__60222__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(update_handler,ast,map__60221,map__60221__$1,app__$1,runtime_atom,map__60222,map__60222__$1,tx_node,id,options))\n;\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__60230){\nvar map__60231 = p__60230;\nvar map__60231__$1 = (((((!((map__60231 == null))))?(((((map__60231.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60231.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60231):map__60231);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60231__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60231__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60231__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,to_dispatch,map__60231,map__60231__$1,idx,dispatch,started_QMARK_){\nreturn (function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),((function (remotes,to_dispatch,map__60231,map__60231__$1,idx,dispatch,started_QMARK_){\nreturn (function (tx_element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\n});})(remotes,to_dispatch,map__60231,map__60231__$1,idx,dispatch,started_QMARK_))\n),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\n\nreturn updated_node;\n}\n});})(remotes,to_dispatch,map__60231,map__60231__$1,idx,dispatch,started_QMARK_))\n,tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__60234){\nvar map__60237 = p__60234;\nvar map__60237__$1 = (((((!((map__60237 == null))))?(((((map__60237.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60237.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60237):map__60237);\nvar tx_node = map__60237__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60237__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\n\nreturn cljs.core.every_QMARK_(((function (map__60237,map__60237__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__60239){\nvar map__60240 = p__60239;\nvar map__60240__$1 = (((((!((map__60240 == null))))?(((((map__60240.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60240.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60240):map__60240);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60240__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60240__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n});})(map__60237,map__60237__$1,tx_node,elements))\n,elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__60243){\nvar map__60244 = p__60243;\nvar map__60244__$1 = (((((!((map__60244 == null))))?(((((map__60244.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60244.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60244):map__60244);\nvar element = map__60244__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60244__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60244__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),null)], null);\n\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__60248){\nvar map__60249 = p__60248;\nvar map__60249__$1 = (((((!((map__60249 == null))))?(((((map__60249.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60249.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60249):map__60249);\nvar tx_node = map__60249__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60249__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__60254){\nvar map__60255 = p__60254;\nvar map__60255__$1 = (((((!((map__60255 == null))))?(((((map__60255.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60255.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60255):map__60255);\nvar tx_node = map__60255__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60255__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60255__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (optimistic_QMARK_,map__60255,map__60255__$1,tx_node,options,elements){\nreturn (function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n});})(optimistic_QMARK_,map__60255,map__60255__$1,tx_node,options,elements))\n,tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__60258,remote){\nvar map__60259 = p__60258;\nvar map__60259__$1 = (((((!((map__60259 == null))))?(((((map__60259.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60259.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60259):map__60259);\nvar tx_element = map__60259__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60259__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_61074 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_61075 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_61075)){\nvar env_61078 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_61074], null));\ntry{(handler_61075.cljs$core$IFn$_invoke$arity$1 ? handler_61075.cljs$core$IFn$_invoke$arity$1(env_61078) : handler_61075.call(null,env_61078));\n}catch (e60263){var e_61079 = e60263;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,574,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_61079,env_61078,result_61074,handler_61075,map__60259,map__60259__$1,tx_element,results,dispatch,desired_ast_nodes,transmitted_ast_nodes,original_ast_node){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61079,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"], null);\n});})(e_61079,env_61078,result_61074,handler_61075,map__60259,map__60259__$1,tx_element,results,dispatch,desired_ast_nodes,transmitted_ast_nodes,original_ast_node))\n,null)),null,-1237061909,null);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__60265){\nvar map__60267 = p__60265;\nvar map__60267__$1 = (((((!((map__60267 == null))))?(((((map__60267.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60267.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60267):map__60267);\nvar tx_element = map__60267__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60267__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60267__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60267,map__60267__$1,tx_element,results,complete_QMARK_){\nreturn (function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n});})(map__60267,map__60267__$1,tx_element,results,complete_QMARK_))\n,tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__60271){\nvar map__60272 = p__60271;\nvar map__60272__$1 = (((((!((map__60272 == null))))?(((((map__60272.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60272.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60272):map__60272);\nvar tx_node = map__60272__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60272__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__60272,map__60272__$1,tx_node,elements){\nreturn (function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n});})(map__60272,map__60272__$1,tx_node,elements))\n,elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__60276){\nvar map__60277 = p__60276;\nvar map__60277__$1 = (((((!((map__60277 == null))))?(((((map__60277.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60277.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60277):map__60277);\nvar tx_node = map__60277__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60277__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\n\nvar get_env = ((function (map__60277,map__60277__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});})(map__60277,map__60277__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (get_env,map__60277,map__60277__$1,tx_node,elements){\nreturn (function (node,p__60280){\nvar map__60281 = p__60280;\nvar map__60281__$1 = (((((!((map__60281 == null))))?(((((map__60281.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60281.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60281):map__60281);\nvar element = map__60281__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar seq__60283_61101 = cljs.core.seq(progress);\nvar chunk__60284_61102 = null;\nvar count__60285_61103 = (0);\nvar i__60286_61104 = (0);\nwhile(true){\nif((i__60286_61104 < count__60285_61103)){\nvar vec__60300_61106 = chunk__60284_61102.cljs$core$IIndexed$_nth$arity$2(null,i__60286_61104);\nvar remote_61107 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60300_61106,(0),null);\nvar value_61108 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60300_61106,(1),null);\nvar env_61111 = get_env(remote_61107,value_61108);\nvar action_61112 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_61112)){\ntry{(action_61112.cljs$core$IFn$_invoke$arity$1 ? action_61112.cljs$core$IFn$_invoke$arity$1(env_61111) : action_61112.call(null,env_61111));\n}catch (e60303){var e_61114 = e60303;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60283_61101,chunk__60284_61102,count__60285_61103,i__60286_61104,e_61114,env_61111,action_61112,vec__60300_61106,remote_61107,value_61108,map__60281,map__60281__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60277,map__60277__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61114,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\n});})(seq__60283_61101,chunk__60284_61102,count__60285_61103,i__60286_61104,e_61114,env_61111,action_61112,vec__60300_61106,remote_61107,value_61108,map__60281,map__60281__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60277,map__60277__$1,tx_node,elements))\n,null)),null,2076792779,null);\n}} else {\n}\n\n\nvar G__61119 = seq__60283_61101;\nvar G__61120 = chunk__60284_61102;\nvar G__61121 = count__60285_61103;\nvar G__61122 = (i__60286_61104 + (1));\nseq__60283_61101 = G__61119;\nchunk__60284_61102 = G__61120;\ncount__60285_61103 = G__61121;\ni__60286_61104 = G__61122;\ncontinue;\n} else {\nvar temp__5753__auto___61123 = cljs.core.seq(seq__60283_61101);\nif(temp__5753__auto___61123){\nvar seq__60283_61124__$1 = temp__5753__auto___61123;\nif(cljs.core.chunked_seq_QMARK_(seq__60283_61124__$1)){\nvar c__4550__auto___61125 = cljs.core.chunk_first(seq__60283_61124__$1);\nvar G__61126 = cljs.core.chunk_rest(seq__60283_61124__$1);\nvar G__61127 = c__4550__auto___61125;\nvar G__61128 = cljs.core.count(c__4550__auto___61125);\nvar G__61129 = (0);\nseq__60283_61101 = G__61126;\nchunk__60284_61102 = G__61127;\ncount__60285_61103 = G__61128;\ni__60286_61104 = G__61129;\ncontinue;\n} else {\nvar vec__60305_61134 = cljs.core.first(seq__60283_61124__$1);\nvar remote_61135 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60305_61134,(0),null);\nvar value_61136 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60305_61134,(1),null);\nvar env_61141 = get_env(remote_61135,value_61136);\nvar action_61142 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_61142)){\ntry{(action_61142.cljs$core$IFn$_invoke$arity$1 ? action_61142.cljs$core$IFn$_invoke$arity$1(env_61141) : action_61142.call(null,env_61141));\n}catch (e60308){var e_61144 = e60308;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60283_61101,chunk__60284_61102,count__60285_61103,i__60286_61104,e_61144,env_61141,action_61142,vec__60305_61134,remote_61135,value_61136,seq__60283_61124__$1,temp__5753__auto___61123,map__60281,map__60281__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60277,map__60277__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61144,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\n});})(seq__60283_61101,chunk__60284_61102,count__60285_61103,i__60286_61104,e_61144,env_61141,action_61142,vec__60305_61134,remote_61135,value_61136,seq__60283_61124__$1,temp__5753__auto___61123,map__60281,map__60281__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__60277,map__60277__$1,tx_node,elements))\n,null)),null,1247080324,null);\n}} else {\n}\n\n\nvar G__61150 = cljs.core.next(seq__60283_61124__$1);\nvar G__61151 = null;\nvar G__61152 = (0);\nvar G__61153 = (0);\nseq__60283_61101 = G__61150;\nchunk__60284_61102 = G__61151;\ncount__60285_61103 = G__61152;\ni__60286_61104 = G__61153;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n});})(get_env,map__60277,map__60277__$1,tx_node,elements))\n,tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__60311){\nvar map__60312 = p__60311;\nvar map__60312__$1 = (((((!((map__60312 == null))))?(((((map__60312.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60312.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60312):map__60312);\nvar tx_node = map__60312__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60312__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),null)], null);\n\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__60315 = tx_node;\nvar G__60315__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__60315):G__60315);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__60315__$1);\n} else {\nreturn G__60315__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__60318){\nreturn cljs.core.coll_QMARK_(G__60318);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.set_QMARK_], null);\n\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (env){\nreturn (function (acc,element){\nvar map__60319 = element;\nvar map__60319__$1 = (((((!((map__60319 == null))))?(((((map__60319.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60319.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60319):map__60319);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60319__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n});})(env))\n,outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__60324,remotes){\nvar map__60325 = p__60324;\nvar map__60325__$1 = (((((!((map__60325 == null))))?(((((map__60325.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60325.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60325):map__60325);\nvar tx_node = map__60325__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60325__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\n\nvar active_on_element = ((function (map__60325,map__60325__$1,tx_node,elements){\nreturn (function (p__60327){\nvar map__60328 = p__60327;\nvar map__60328__$1 = (((((!((map__60328 == null))))?(((((map__60328.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60328.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60328):map__60328);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60328__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60328__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});})(map__60325,map__60325__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_on_element,map__60325,map__60325__$1,tx_node,elements){\nreturn (function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n});})(active_on_element,map__60325,map__60325__$1,tx_node,elements))\n,cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005)], null);\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__60333){\nvar map__60334 = p__60333;\nvar map__60334__$1 = (((((!((map__60334 == null))))?(((((map__60334.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60334.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60334):map__60334);\nvar app__$1 = map__60334__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60334__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60334__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\n\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60334,map__60334__$1,app__$1,state_atom,runtime_atom){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n});})(map__60334,map__60334__$1,app__$1,state_atom,runtime_atom))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = ((function (new_queue,map__60334,map__60334__$1,app__$1,state_atom,runtime_atom){\nreturn (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});})(new_queue,map__60334,map__60334__$1,app__$1,state_atom,runtime_atom))\n;\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n/**\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n * are allowed to).\n * \n * NOTE: any *remote* behaviors of `tx` will *still be async*.\n * \n * This function:\n * \n * * Runs the optimistic side of the mutation(s)\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n *   but with the optimistic part already done.\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n * \n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n * component so it can refresh immediately and avoid DOM input issues.\n * \n * Returns the new component props or the final state map if no component was used in the transaction.\n * \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app__$1,tx,p__60341){\nvar map__60342 = p__60341;\nvar map__60342__$1 = (((((!((map__60342 == null))))?(((((map__60342.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60342.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60342):map__60342);\nvar options = map__60342__$1;\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60342__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60342__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (mutation_nodes,map__60342,map__60342__$1,options,component,ref){\nreturn (function (ast_node){\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\n});})(mutation_nodes,map__60342,map__60342__$1,options,component,ref))\n,mutation_nodes));\nvar map__60346 = cljs.core.group_by(((function (mutation_nodes,ast_node__GT_operation,map__60342,map__60342__$1,options,component,ref){\nreturn (function (p1__60339_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__60339_SHARP_) : ast_node__GT_operation.call(null,p1__60339_SHARP_)))));\n});})(mutation_nodes,ast_node__GT_operation,map__60342,map__60342__$1,options,component,ref))\n,mutation_nodes);\nvar map__60346__$1 = (((((!((map__60346 == null))))?(((((map__60346.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60346.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60346):map__60346);\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60346__$1,true);\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60346__$1,false);\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\n})():null);\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nif(cljs.core.truth_(optimistic_tx_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,optimistic_tx_node);\n} else {\n}\n\nif(cljs.core.truth_(mixed_tx_node)){\nvar node_61219 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,mixed_tx_node);\nvar runtime_atom_61220 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1);\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_61219));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_61220,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_61219], 0));\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(20));\n} else {\n}\n\nif(cljs.core.truth_((function (){var and__4120__auto__ = component;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\n} else {\nif(cljs.core.truth_(ref)){\nvar r_BANG__61222 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\nif(cljs.core.truth_(r_BANG__61222)){\n(r_BANG__61222.cljs$core$IFn$_invoke$arity$1 ? r_BANG__61222.cljs$core$IFn$_invoke$arity$1(app__$1) : r_BANG__61222.call(null,app__$1));\n} else {\n}\n} else {\nif(cljs.core.truth_(goog.DEBUG)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,744,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (mutation_nodes,ast_node__GT_operation,map__60346,map__60346__$1,optimistic,mixed,optimistic_tx_node,mixed_tx_node,resulting_node_id,map__60342,map__60342__$1,options,component,ref){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\"], null);\n});})(mutation_nodes,ast_node__GT_operation,map__60346,map__60346__$1,optimistic,mixed,optimistic_tx_node,mixed_tx_node,resulting_node_id,map__60342,map__60342__$1,options,component,ref))\n,null)),null,1758357967,null);\n} else {\n}\n\n}\n}\n\nreturn cljs.core.deref(resulting_node_id);\n});\n/**\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n *   that might be used by the transaction processing (or UI refresh).\n * \n *   Some that may be supported (depending on application settings):\n * \n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n *   - `:ref` - ident. The component ident to include in the transaction env.\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n *  The ident-optimized render treats these as \"extras\".\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n *  components using these are the *only* things that will be refreshed in the UI.\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n * \n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n *         force a normal refresh via `app/render!`.\n * \n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n * \n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n *   algorithm will influence their necessity.\n * \n *   Returns the transaction ID of the submitted transaction.\n *   \n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\nvar G__60354 = arguments.length;\nswitch (G__60354) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__60357,tx,p__60358){\nvar map__60359 = p__60357;\nvar map__60359__$1 = (((((!((map__60359 == null))))?(((((map__60359.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60359.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60359):map__60359);\nvar app__$1 = map__60359__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60359__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60360 = p__60358;\nvar map__60360__$1 = (((((!((map__60360 == null))))?(((((map__60360.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60360.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60360):map__60360);\nvar options = map__60360__$1;\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60360__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\n\nif(cljs.core.truth_(synchronous_QMARK_)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app__$1,tx,options);\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\n\nvar map__60364 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\nvar map__60364__$1 = (((((!((map__60364 == null))))?(((((map__60364.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60364.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60364):map__60364);\nvar options__$1 = map__60364__$1;\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60364__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60364__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60364__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_){\nreturn (function (p1__60352_SHARP_){\nreturn (((p1__60352_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__60352_SHARP_)));\n});})(map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_))\n,tx));\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\nvar accumulate = ((function (map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_){\nreturn (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});})(map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_))\n;\nvar refresh__$1 = (function (){var G__60368 = cljs.core.set(refresh);\nvar G__60368__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__60368,follow_on_reads):G__60368);\nif(cljs.core.truth_(ref)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__60368__$1,ref);\n} else {\nreturn G__60368__$1;\n}\n})();\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,((function (map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_){\nreturn (function (s){\nvar G__60370 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),((function (map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_){\nreturn (function (v,n){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\n});})(map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_))\n,node);\nvar G__60370__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60370,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__60370);\nif(cljs.core.seq(only_refresh)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60370__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\n} else {\nreturn G__60370__$1;\n}\n});})(map__60364,map__60364__$1,options__$1,refresh,only_refresh,ref,follow_on_reads,node,accumulate,refresh__$1,map__60359,map__60359__$1,app__$1,runtime_atom,map__60360,map__60360__$1,options,synchronous_QMARK_))\n);\n\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3;\n\n/**\n * Abort any elements in the given send-queue that have the given abort id.\n * \n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n *   virtual result will still be sent for that node.\n * \n *   Returns a new send-queue that no longer contains the aborted nodes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__60373,send_queue,abort_id){\nvar map__60374 = p__60373;\nvar map__60374__$1 = (((((!((map__60374 == null))))?(((((map__60374.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60374.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60374):map__60374);\nvar remote = map__60374__$1;\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60374__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nif(cljs.core.truth_(abort_BANG_)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60374,map__60374__$1,remote,abort_BANG_){\nreturn (function (result,p__60376){\nvar map__60377 = p__60376;\nvar map__60377__$1 = (((((!((map__60377 == null))))?(((((map__60377.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60377.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60377):map__60377);\nvar send_node = map__60377__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60377__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60377__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60377__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar aid = (function (){var or__4131__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\n} else {\nif(cljs.core.truth_(active_QMARK_)){\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\n\nreturn result;\n} else {\nvar G__60380_61275 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60380_61275) : result_handler.call(null,G__60380_61275));\n\nreturn result;\n\n}\n}\n});})(map__60374,map__60374__$1,remote,abort_BANG_))\n,cljs.core.PersistentVector.EMPTY,send_queue);\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,822,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__60374,map__60374__$1,remote,abort_BANG_){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\"], null);\n});})(map__60374,map__60374__$1,remote,abort_BANG_))\n,null)),null,540765417,null);\n\nreturn send_queue;\n}\n});\n/**\n * Implementation of abort when using this tx processing\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app__$1,abort_id){\nvar map__60383 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__60383__$1 = (((((!((map__60383 == null))))?(((((map__60383.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60383.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60383):map__60383);\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar runtime_state = cljs.core.deref(runtime_atom);\nvar map__60384 = runtime_state;\nvar map__60384__$1 = (((((!((map__60384 == null))))?(((((map__60384.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60384.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60384):map__60384);\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60384__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60384__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar remote_names = cljs.core.keys(send_queues);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__60383,map__60383__$1,runtime_atom,runtime_state,map__60384,map__60384__$1,remotes,send_queues,remote_names){\nreturn (function (result,remote_name){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\n});})(map__60383,map__60383__$1,runtime_atom,runtime_state,map__60384,map__60384__$1,remotes,send_queues,remote_names))\n,cljs.core.PersistentArrayMap.EMPTY,remote_names);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n});\n/**\n * Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n *   items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n *   that is in the send queue of the given remote.\n * \n *   This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_remote_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_remote_BANG_(app_ish,remote){\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\nvar map__60390 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\nvar map__60390__$1 = (((((!((map__60390 == null))))?(((((map__60390.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60390.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60390):map__60390);\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60390__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60390__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__60391 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote], null));\nvar map__60391__$1 = (((((!((map__60391 == null))))?(((((map__60391.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60391.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60391):map__60391);\nvar the_remote = map__60391__$1;\nvar abort_network_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60391__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\nvar old_send_queue = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.PersistentVector.EMPTY);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([remote], 0));\n\nvar seq__60395 = cljs.core.seq(old_send_queue);\nvar chunk__60400 = null;\nvar count__60401 = (0);\nvar i__60402 = (0);\nwhile(true){\nif((i__60402 < count__60401)){\nvar map__60444 = chunk__60400.cljs$core$IIndexed$_nth$arity$2(null,i__60402);\nvar map__60444__$1 = (((((!((map__60444 == null))))?(((((map__60444.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60444.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60444):map__60444);\nvar send_node = map__60444__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60444__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60444__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60444__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__60403_61294 = cljs.core.seq((function (){var or__4131__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__60404_61295 = null;\nvar count__60405_61296 = (0);\nvar i__60406_61297 = (0);\nwhile(true){\nif((i__60406_61297 < count__60405_61296)){\nvar aid_61300 = chunk__60404_61295.cljs$core$IIndexed$_nth$arity$2(null,i__60406_61297);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61300) : abort_network_BANG_.call(null,the_remote,aid_61300));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,aid_61300,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,aid_61300,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-2058885131,null);\n}\n} else {\n}\n\nvar G__60457_61306 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60457_61306) : result_handler.call(null,G__60457_61306));\n}catch (e60455){var e_61313 = e60455;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,e_61313,aid_61300,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61313,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,e_61313,aid_61300,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,344528247,null);\n}\n\nvar G__61316 = seq__60403_61294;\nvar G__61317 = chunk__60404_61295;\nvar G__61318 = count__60405_61296;\nvar G__61319 = (i__60406_61297 + (1));\nseq__60403_61294 = G__61316;\nchunk__60404_61295 = G__61317;\ncount__60405_61296 = G__61318;\ni__60406_61297 = G__61319;\ncontinue;\n} else {\nvar temp__5753__auto___61320 = cljs.core.seq(seq__60403_61294);\nif(temp__5753__auto___61320){\nvar seq__60403_61321__$1 = temp__5753__auto___61320;\nif(cljs.core.chunked_seq_QMARK_(seq__60403_61321__$1)){\nvar c__4550__auto___61322 = cljs.core.chunk_first(seq__60403_61321__$1);\nvar G__61323 = cljs.core.chunk_rest(seq__60403_61321__$1);\nvar G__61324 = c__4550__auto___61322;\nvar G__61325 = cljs.core.count(c__4550__auto___61322);\nvar G__61326 = (0);\nseq__60403_61294 = G__61323;\nchunk__60404_61295 = G__61324;\ncount__60405_61296 = G__61325;\ni__60406_61297 = G__61326;\ncontinue;\n} else {\nvar aid_61329 = cljs.core.first(seq__60403_61321__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61329) : abort_network_BANG_.call(null,the_remote,aid_61329));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,aid_61329,seq__60403_61321__$1,temp__5753__auto___61320,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,aid_61329,seq__60403_61321__$1,temp__5753__auto___61320,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-734386094,null);\n}\n} else {\n}\n\nvar G__60460_61337 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60460_61337) : result_handler.call(null,G__60460_61337));\n}catch (e60458){var e_61339 = e60458;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,e_61339,aid_61329,seq__60403_61321__$1,temp__5753__auto___61320,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61339,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__60403_61294,chunk__60404_61295,count__60405_61296,i__60406_61297,seq__60395,chunk__60400,count__60401,i__60402,e_61339,aid_61329,seq__60403_61321__$1,temp__5753__auto___61320,map__60444,map__60444__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,-2098618661,null);\n}\n\nvar G__61344 = cljs.core.next(seq__60403_61321__$1);\nvar G__61345 = null;\nvar G__61346 = (0);\nvar G__61347 = (0);\nseq__60403_61294 = G__61344;\nchunk__60404_61295 = G__61345;\ncount__60405_61296 = G__61346;\ni__60406_61297 = G__61347;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__61349 = seq__60395;\nvar G__61350 = chunk__60400;\nvar G__61351 = count__60401;\nvar G__61352 = (i__60402 + (1));\nseq__60395 = G__61349;\nchunk__60400 = G__61350;\ncount__60401 = G__61351;\ni__60402 = G__61352;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__60395);\nif(temp__5753__auto__){\nvar seq__60395__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__60395__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__60395__$1);\nvar G__61354 = cljs.core.chunk_rest(seq__60395__$1);\nvar G__61355 = c__4550__auto__;\nvar G__61356 = cljs.core.count(c__4550__auto__);\nvar G__61357 = (0);\nseq__60395 = G__61354;\nchunk__60400 = G__61355;\ncount__60401 = G__61356;\ni__60402 = G__61357;\ncontinue;\n} else {\nvar map__60463 = cljs.core.first(seq__60395__$1);\nvar map__60463__$1 = (((((!((map__60463 == null))))?(((((map__60463.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__60463.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__60463):map__60463);\nvar send_node = map__60463__$1;\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60463__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60463__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60463__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar seq__60396_61362 = cljs.core.seq((function (){var or__4131__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\nvar chunk__60397_61363 = null;\nvar count__60398_61364 = (0);\nvar i__60399_61365 = (0);\nwhile(true){\nif((i__60399_61365 < count__60398_61364)){\nvar aid_61369 = chunk__60397_61363.cljs$core$IIndexed$_nth$arity$2(null,i__60399_61365);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61369) : abort_network_BANG_.call(null,the_remote,aid_61369));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,aid_61369,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,aid_61369,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1306130475,null);\n}\n} else {\n}\n\nvar G__60474_61372 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60474_61372) : result_handler.call(null,G__60474_61372));\n}catch (e60473){var e_61373 = e60473;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,e_61373,aid_61369,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61373,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,e_61373,aid_61369,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1007519044,null);\n}\n\nvar G__61377 = seq__60396_61362;\nvar G__61378 = chunk__60397_61363;\nvar G__61379 = count__60398_61364;\nvar G__61380 = (i__60399_61365 + (1));\nseq__60396_61362 = G__61377;\nchunk__60397_61363 = G__61378;\ncount__60398_61364 = G__61379;\ni__60399_61365 = G__61380;\ncontinue;\n} else {\nvar temp__5753__auto___61381__$1 = cljs.core.seq(seq__60396_61362);\nif(temp__5753__auto___61381__$1){\nvar seq__60396_61382__$1 = temp__5753__auto___61381__$1;\nif(cljs.core.chunked_seq_QMARK_(seq__60396_61382__$1)){\nvar c__4550__auto___61383 = cljs.core.chunk_first(seq__60396_61382__$1);\nvar G__61384 = cljs.core.chunk_rest(seq__60396_61382__$1);\nvar G__61385 = c__4550__auto___61383;\nvar G__61386 = cljs.core.count(c__4550__auto___61383);\nvar G__61387 = (0);\nseq__60396_61362 = G__61384;\nchunk__60397_61363 = G__61385;\ncount__60398_61364 = G__61386;\ni__60399_61365 = G__61387;\ncontinue;\n} else {\nvar aid_61388 = cljs.core.first(seq__60396_61382__$1);\ntry{if(cljs.core.truth_(active_QMARK_)){\nif(cljs.core.truth_(abort_network_BANG_)){\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_61388) : abort_network_BANG_.call(null,the_remote,aid_61388));\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,aid_61388,seq__60396_61382__$1,temp__5753__auto___61381__$1,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\n});})(seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,aid_61388,seq__60396_61382__$1,temp__5753__auto___61381__$1,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1941886005,null);\n}\n} else {\n}\n\nvar G__60478_61390 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60478_61390) : result_handler.call(null,G__60478_61390));\n}catch (e60477){var e_61393 = e60477;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,e_61393,aid_61388,seq__60396_61382__$1,temp__5753__auto___61381__$1,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_61393,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\n});})(seq__60396_61362,chunk__60397_61363,count__60398_61364,i__60399_61365,seq__60395,chunk__60400,count__60401,i__60402,e_61393,aid_61388,seq__60396_61382__$1,temp__5753__auto___61381__$1,map__60463,map__60463__$1,send_node,active_QMARK_,options,result_handler,seq__60395__$1,temp__5753__auto__,app__$1,map__60390,map__60390__$1,state_atom,runtime_atom,map__60391,map__60391__$1,the_remote,abort_network_BANG_,old_send_queue))\n,null)),null,1826292259,null);\n}\n\nvar G__61394 = cljs.core.next(seq__60396_61382__$1);\nvar G__61395 = null;\nvar G__61396 = (0);\nvar G__61397 = (0);\nseq__60396_61362 = G__61394;\nchunk__60397_61363 = G__61395;\ncount__60398_61364 = G__61396;\ni__60399_61365 = G__61397;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nvar G__61398 = cljs.core.next(seq__60395__$1);\nvar G__61399 = null;\nvar G__61400 = (0);\nvar G__61401 = (0);\nseq__60395 = G__61398;\nchunk__60400 = G__61399;\ncount__60401 = G__61400;\ni__60402 = G__61401;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^I","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^Y","^?","^@","^L","^L","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^Y","~$com.fulcrologic.fulcro.algorithms.denormalize","^13","~$cljs.core","^14","^I","^I","~$goog","^15","~$com.fulcrologic.fulcro.specs","^16","~$inspect","^I","^X","^X","~$com.fulcrologic.fulcro.algorithms.tempid","^18","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1:","~$sched","^1:","~$enc","~$taoensso.encore","^19","^19","~$s","^@","^V","^V","^11","^11","^[","^[","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1=","^1=","^@","^@","~$fdn","^13","~$tempid","^18","^1?","^1?"],"~:seen",["^N",["~:require"]],"~:uses",["^ ","~$schedule!","^1:","^H","^I","^J","^I","^K","^L","~$=>","^L","~$|","^L"],"~:require-macros",["^ ","^?","^@","^L","^L","^Z","^[","^10","^11","^14","^14","^I","^I","^17","^I","~$m","^19","^1<","^1=","^19","^19","~$s","^@","^11","^11","^[","^[","^1=","^1=","^@","^@"],"~:form",["~#list",["~$ns","^P","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1I",["^1C",["^X","~:as","^W"],["^?","^1K","~$s"],["^V","^1K","^U"],["^18","^1K","^1A"],["^13","^1K","^1@"],["^1?","^1K","^1>"],["^1:","^1K","^1;","~:refer",["^1E"]],["^19","^1K","~$m"],["^11","^1K","^10"],["^16"],["^I","^1K","^17","^1L",["^H","^J"]],"^16",["^L","^1L",["^K","^1F","~$|"]],["^Y","^1K","^12"],["^1=","^1K","^1<"],["^[","^1K","^Z"]]]]],"~:flags",["^ ","^1C",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^15","^14","^X","^@","^V","^18","^13","^1?","^1:","^19","^11","^16","^I","^L","^Y","^1=","^["]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1630698455153,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)) \"See https://book.fulcrologic.com/#err-txp-send-exc\")\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name \"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\")\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-id-before (inspect/current-history-id app)\n                                 state           (:com.fulcrologic.fulcro.application/state-atom app)\n                                 state-before    @state\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                               :state-id-before state-id-before\n                                                                               :db-before       state-before\n                                                                               :db-after        @state\n                                                                               :tx              tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?           (and action (not (complete? :action)))\n                               state-id-before (inspect/current-history-id app)\n                               state           (:com.fulcrologic.fulcro.application/state-atom app)\n                               state-before    @state\n                               updated-node    (if exec? (-> element\n                                                           (assoc ::state-before-action state-before)\n                                                           (update ::complete? conj :action)) element)\n                               new-acc         (conj new-elements updated-node)\n                               env             (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\")))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                             :state-id-before state-id-before\n                                                                             :db-before       state-before\n                                                                             :db-after        @state\n                                                                             :tx              tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire \"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\")\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"))))))\n  (update tx-element ::complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component ref] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (cond\n      (and component (comp/component? component) (comp/has-ident? component)) (comp/refresh-component! component)\n      ref (let [r! (ah/app-algorithm app :render!)] (when r! (r! app)))\n      :else (when #?(:cljs js/goog.DEBUG :clj true)\n              (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn abort-remote!\n  \"Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \\\"received\\\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\"\n  [app-ish remote]\n  (let [app            (comp/any->app app-ish)\n        {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (comp/any->app app)\n        {abort-network! :abort!\n         :as            the-remote} (get @runtime-atom [:com.fulcrologic.fulcro.application/remotes remote])\n        old-send-queue (get-in @runtime-atom [::send-queues remote])]\n    (swap! runtime-atom assoc-in [::send-queues remote] [])\n    (swap! state-atom update :com.fulcrologic.fulcro.application/active-remotes (fnil disj #{}) remote)\n    (doseq [{::keys [active? options result-handler] :as send-node} old-send-queue\n            aid (or (-> options ::abort-id) (-> options :abort-id))]\n      (try\n        (when active?\n          (if abort-network!\n            (abort-network! the-remote aid)\n            (log/warn \"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\")))\n        (result-handler {:status-code 500\n                         :body        {}\n                         :status-text \"Globally Aborted\"\n                         ::aborted?   true})\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"))))))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","com.fulcrologic.guardrails.core/=>","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","cljs.spec.alpha.every_impl","G__59807","cljs.core/vector?","cljs.spec.alpha/cat-impl","map__59823","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","parallel?","p__59830","map__59831","options","cljs.core/boolean","or__4131__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core/fn?","cljs.core/boolean?","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__59875#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__59888#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__59896","cljs.core.nth","map__59900","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__59916","seq__59917","cljs.core/seq","first__59918","cljs.core/next","map__59919","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__59929","map__59930","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","G__59933","cljs.core/coll?","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","cljs.spec.alpha/map-spec-impl","G__59939","cljs.core/map?","cljs.core/contains?","vec__59953","vec__59956","active-nodes","id-to-send","to-send","to-defer","p1__59934#","tx","p__59963","map__59964","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__59969","map__59970","body","combined-result","seq__59974","chunk__59975","count__59976","i__59977","map__59985","temp__5753__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__59989","update-handler","p__59997","map__59998","seq__60000","chunk__60001","count__60002","i__60003","map__60023","map__60034","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc","and__4120__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__60030","e","e60028","map__60038","e60037","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","cljs.core/any?","b2__44459__auto__","remote","transmit!","e60042","e60050","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e60044","e60045","G__60047","fexpr__60046","G__60052","fexpr__60051","G__60054","fexpr__60053","p__60056","map__60057","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__60060","p","serial","front","seq__60064","chunk__60065","count__60066","i__60067","item","cljs.core.swap_BANG_","cljs.core/conj","map__60069","cljs.core/assoc","seq__60073","chunk__60074","count__60075","i__60076","op","var_args","G__60081","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__60086","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__60088","map__60089","p__60097","map__60098","tx-node","addl","map__60093","ref","component","G__60095","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e60102","G__60103","dispatch","p__60105","map__60106","original-ast-node","ele","map__60108","G__60112","dispatch-all","eles","p__60115","map__60116","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__60114#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__60123","map__60124","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__60126","blocked","ready","dispatched-nodes","p1__60120#","com.fulcrologic.fulcro.mutations/mutate","a","p1__60121#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__60132","tm","cljs.core/int?","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__60136","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__60139","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__60143","map__60144","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__60146","map__60148","done?","new-elements","element","map__60151","map__60152","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-id-before","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","state","state-before","updated-element","new-acc","cljs.core.conj","e60158","mutation-symbol","e60160","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__60163","map__60164","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__60167","map__60168","updated-node","e60173","e60175","p__60178","map__60179","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__60182","map__60183","active-keys","clojure.set.union","desired-set","p__60187","map__60188","txn-id","ele-idx","map__60191","old-queue","cljs.core/filterv","p__60193","map__60194","cljs.core/assoc-in","G__60199","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__60201","map__60202","result-key","cljs.core/keyword?","txn-idx","p__60206","map__60207","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__60212","state-before-action","remote-fn","remote-desire","desired-ast","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__60217","p__60219","p__60220","map__60221","map__60222","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.spec.alpha/nilable-impl","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","p__60230","map__60231","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__60234","map__60237","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__60239","map__60240","in-progress","p__60243","map__60244","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__60248","map__60249","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__60254","map__60255","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__60258","map__60259","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e60263","p__60265","map__60267","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__60271","map__60272","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__60276","map__60277","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__60280","map__60281","seq__60283","chunk__60284","count__60285","i__60286","vec__60300","vec__60305","value","e60303","e60308","p__60311","map__60312","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__60315","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","G__60318","cljs.core/set?","outer-acc","map__60319","refresh","p__60324","map__60325","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__60327","map__60328","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__60333","map__60334","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__60341","map__60342","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__60346","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__60339#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/refresh-component!","r!","G__60354","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__60357","p__60358","map__60359","map__60360","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__60364","only-refresh","follow-on-reads","p1__60352#","cljs.core/Keyword","edn-query-language.core/ident?","G__60368","s","G__60370","v","p__60373","map__60374","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__60376","map__60377","active?","aid","G__60380","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__60383","map__60384","com.fulcrologic.fulcro.components/any->app","runtime-state","com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","app-ish","map__60390","map__60391","abort-network!","the-remote","old-send-queue","cljs.core/disj","seq__60395","chunk__60400","count__60401","i__60402","map__60444","seq__60403","chunk__60404","count__60405","i__60406","map__60463","seq__60396","chunk__60397","count__60398","i__60399","e60455","e60458","e60473","e60477","G__60457","G__60460","G__60474","G__60478"]],"~:used-vars",["^N",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$cljs.core/boolean?","~$cljs.core/keyword?","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$cljs.spec.alpha/every-impl","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/int?","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.spec.alpha/nilable-impl","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.spec.alpha/map-spec-impl","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$cljs.spec.alpha/cat-impl","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/set?","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/disj","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$cljs.core/coll?","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/any?","~$cljs.core/boolean","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1Q","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^15","^14","^1?","^Y","^[","^11"]]],["^1Q","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.dom.HtmlElement"]]],["^1Q","goog/async/freelist.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core/async/impl/ioc_helpers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cljs.core.async.impl.protocols"]]],["^1Q","goog/i18n/datetimesymbols.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.labs.userAgent.util","~$goog.string"]]],["^1Q","expound/util.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/crypt/crypt.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.array","~$goog.asserts"]]],["^1Q","cljs/core/async.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","^4N"]]],["^1Q","goog/timer/timer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Promise","~$goog.events.EventTarget"]]],["^1Q","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^["]]],["^1Q","cljs/spec/gen/alpha.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$goog.Uri"]]],["^1Q","cljs/tools/reader/impl/utils.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$clojure.string","^4M"]]],["^1Q","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O"]]],["^1Q","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/string/stringformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4M"]]],["^1Q","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1Q","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4L","~$goog.object","~$goog.string.internal"]]],["^1Q","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^50"]]],["^1Q","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^[","^4X","^Y","^4[","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1Q","expound/problems.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$expound.paths","^@"]]],["^1Q","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4L","~$goog.reflect","^4M"]]],["^1Q","goog/structs/prioritypool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1Q","goog/async/run.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1Q","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1Q","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/async/workqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.async.FreeList"]]],["^1Q","com/fulcrologic/fulcro/dom/events.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4Y","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1Q","goog/promise/resolver.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4Z"]]],["^1Q","cljs/tools/reader/edn.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4M","~$goog.string.StringBuffer"]]],["^1Q","goog/structs/priorityqueue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.structs.Heap"]]],["^1Q","goog/net/xhrio.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Timer","^4N","^4O","^5F","^4V","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^4[","^4M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^4Z"]]],["^1Q","goog/promise/thenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/fulcro/algorithms/transit.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$cognitect.transit","^L","^@","^18"]]],["^1Q","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$clojure.walk"]]],["^1Q","cljs/tools/reader/impl/inspect.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4["]]],["^1Q","cljs/pprint.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^4M","^5O"]]],["^1Q","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X","^@","^L","^Y","^["]]],["^1Q","cljs/tools/reader.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5K","^5L","^5M","^5J","^4N","^4M","^5O"]]],["^1Q","expound/alpha.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$expound.problems","^@","^4X","^X","^60","~$expound.printer","~$expound.util","~$expound.ansi","^F"]]],["^1Q","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","~$goog.i18n.DateTimeFormat","^1=","~$taoensso.timbre.appenders.core"]]],["^1Q","goog/net/wrapperxmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1Q","goog/events/eventtarget.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Disposable","^4O","~$goog.events","~$goog.events.Event","^5H","^5I","^4["]]],["^1Q","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^4X","~$expound.alpha"]]],["^1Q","goog/date/datelike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.disposable.IDisposable"]]],["^1Q","expound/ansi.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X"]]],["^1Q","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","91f343238d339a21b91ac3d4f1d804783ecfdecb","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1Q","shadow/js.js"],["a28c87ae0213bed612cfecb8f26fb03110b51629","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^X","~$cljs.reader","~$cljs.tools.reader.edn","^4[","^4N","^4M","~$goog.string.format","^5O","^6:","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^5U","^5T","~$taoensso.truss"]]],["^1Q","goog/structs/set.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5X","~$goog.structs.Collection","^5Y"]]],"~:SHADOW-TIMESTAMP",[1630697950000,1630697950000,1630228118000],["^6@","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","91f343238d339a21b91ac3d4f1d804783ecfdecb","754b7a48941975257c8955f6d5e511cb3a878737","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6A","~$module$node_modules$object_assign$index"]]],["^1Q","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^1="]]],["^1Q","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^5="]]],["^1Q","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.events.ListenableKey"]]],["^1Q","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.html.trustedtypes","^53","^54","^55","^56"]]],["^1Q","cljs/core/async/impl/channels.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","^4S","^4Q"]]],["^1Q","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","~$goog.events.Listener","^4["]]],["^1Q","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$taoensso.truss.impl"]]],["^1Q","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/fulcro/algorithms/merge.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.fulcrologic.fulcro.algorithms.data-targeting","^11","^V","~$com.fulcrologic.fulcro.algorithms.normalize","^13","^1?","^Y","^[","^18"]]],["^1Q","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@"]]],["^1Q","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core/async/impl/dispatch.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4Q","^5A"]]],["^1Q","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.html.SafeUrl","^55","^56","^50"]]],["^1Q","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^6T","^52","~$goog.html.uncheckedconversions","^55","^50"]]],["^1Q","expound/paths.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@","^63"]]],["^1Q","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X"]]],["^1Q","clojure/walk.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/useragent/product.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5:","^5<","^4Z"]]],["^1Q","cljs/core/async/impl/protocols.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/net/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1Q","goog/net/xhriopool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^6G","~$goog.structs.PriorityPool"]]],["^1Q","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/date/date.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.date.DateLike","~$goog.i18n.DateTimeSymbols","^4M"]]],["^1Q","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.dom.TagName","~$goog.dom.tags","^6X","^6Y","~$goog.html.SafeStyleSheet","^6T","^52","^6O","^53","^54","^5:","^4[","^55","^56","^50"]]],["^1Q","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4["]]],["^1Q","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","com/fulcrologic/fulcro/raw/components.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","^X","^4X","^60","^13","^1?","^V","~$com.fulcrologic.fulcro.algorithms.transit","^Y","^1=","^["]]],["^1Q","goog/structs/queue.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N"]]],["^1Q","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4L","^4M"]]],["^1Q","com/fulcrologic/fulcro/inspect/transit.cljs"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5[","~$com.cognitect.transit.types","^77","^["]]],["^1Q","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5D","^78"]]],["^1Q","cljs/reader.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","^5N","^6E","^5O"]]],["^1Q","com/fulcrologic/fulcro/mutations.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.dom.events","^L","^Y","^[","^1=","^@","^1?","^6R","~$com.fulcrologic.fulcro.algorithms.merge","^V","^18","^4X"]]],["^1Q","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^74","~$goog.dom.safe","^6W","^6Z","~$goog.math.Coordinate","~$goog.math.Size","^4[","^4M","~$goog.string.Unicode","^4Z"]]],["^1Q","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.fulcrologic.guardrails.registry","^6="]]],["^1Q","com/fulcrologic/fulcro/components.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","~$cljsjs.react","^Y","^@","^[","^60","^4X","^1?","^13","^V","^7;","^L","^X"]]],["^1Q","com/fulcrologic/fulcro/specs.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@","^L","^1?","^Y"]]],["^1Q","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.debug.Error","^7?"]]],["^1Q","cljs/core/async/impl/buffers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K"]]],["^1Q","goog/i18n/timezone.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^72","^4[","^4M"]]],["^1Q","goog/debug/logbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.debug.LogRecord"]]],["^1Q","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^4M","^5X","^5Y","^5Z","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Q","goog/net/errorcode.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^6@","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","91f343238d339a21b91ac3d4f1d804783ecfdecb","519ffd5a4c91b67302cc9947b794966d629860cd","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6A"]]],["^1Q","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/promise/promise.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.Thenable","^4O","^5E","~$goog.async.run","^5B","^7F","~$goog.promise.Resolver"]]],["^1Q","cljs/core/async/impl/timers.cljs"],["dbe356df16976e1d820463722b6f0e3c3b3f8e26","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4K","^4P","^4S"]]],["^1Q","cljs/spec/alpha.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4[","^60","^F","^4X"]]],["^1Q","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/debug/logrecord.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",[]]],["^1Q","goog/json/hybrid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.json"]]],["^1Q","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4["]]],["^1Q","cljs/tools/reader/impl/errors.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5K","^4X","~$cljs.tools.reader.impl.inspect"]]],["^1Q","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^L","^B","^["]]],["^1Q","cljsjs/react.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$module$node_modules$react$index"]]],["^1Q","clojure/string.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4M","^5O"]]],["^1Q","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^[","^60"]]],["^1Q","goog/structs/pool.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^69","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1Q","com/fulcrologic/fulcro/inspect/diff.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^@"]]],["^6@","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","91f343238d339a21b91ac3d4f1d804783ecfdecb","0a81b45abe33f0ad39b726512604018f94261db9","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^6A","^6M"]]],["^1Q","goog/net/httpstatus.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/i18n/datetimeformat.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.date","^73","~$goog.i18n.TimeZone","^4M"]]],["^1Q","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79","^78","~$goog.math.Long"]]],["^1Q","goog/structs/heap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4[","~$goog.structs.Node"]]],["^1Q","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O"]]],["^1Q","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7@","^6Z","^55","^50"]]],["^1Q","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79","~$com.cognitect.transit.eq","^7T"]]],["^1Q","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^50"]]],["^1Q","expound/printer.cljc"],["757c1e307707f1a8125157a5677dce3b34d74139","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^4X","^@","^D","^X","^63","^64","^59","^60","^6F","^4M"]]],["^1Q","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X","^@","^V","^18","^13","^1?","^1:","^19","^11","^16","^I","^L","^Y","^1=","^["]]],["^1Q","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79"]]],["^1Q","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","~$goog.debug.errorcontext","^4Z"]]],["^1Q","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","~$goog.math"]]],["^1Q","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/tools/reader/reader_types.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5L","^4M","^5O"]]],["^1Q","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^6V","^7X"]]],["^1Q","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5F","~$goog.dom","^74","^7@","^6V","^6W","^52","^5:","^5;","^55"]]],["^1Q","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^6W","^6X","^6Y","^76","^6T","^52","^55","^50"]]],["^1Q","goog/debug/logger.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","~$goog.debug","~$goog.debug.LogBuffer","^7G"]]],["^1Q","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7:"]]],["^1Q","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^69","~$goog.events.EventId"]]],["^1Q","cljs/tools/reader/impl/commons.cljs"],["edd15ac0f3bbd862106bb6ba74797f0cdf57b655","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^5J","^5K","^5L"]]],["^1Q","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cljs/core.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7T","~$goog.math.Integer","^4M","^4[","^4N","^4W","^5O"]]],["^1Q","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^78","^7V","^5C","^5D"]]],["^1Q","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^6O","^55","^56"]]],["^1Q","goog/log/log.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7Z","~$goog.debug.LogManager","^7G","~$goog.debug.Logger"]]],["^1Q","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^6Y","^4[","^55","^56","^50"]]],["^1Q","goog/structs/collection.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^7Z","^4Y","^6;","~$goog.events.EventType","^5=","^4Z"]]],["^1Q","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^5="]]],["^1Q","goog/structs/node.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4Z"]]],["^1Q","clojure/set.cljs"],["a0e637ee383cfd62a1f790929210efb2e372a9ce","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14"]]],["^1Q","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4N","^4O","^4M"]]],["^1Q","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^56"]]],["^1Q","goog/json/json.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^80"]]],["^1Q","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^79","^5D","~$com.cognitect.transit.handlers","^78","^7:","^7T"]]],["^1Q","goog/net/xmlhttpfactory.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^67"]]],["^1Q","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^X","^Y","^["]]],["^1Q","goog/net/xmlhttp.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","~$goog.net.WrapperXmlHttpFactory","^68"]]],["^1Q","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["b14394806317d2d71b9ee21d94baa9ac23f0a7c0","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","^Y","^V","^4[","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^1=","^["]]],["^1Q","goog/net/xhrlike.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15"]]],["^1Q","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^14","~$com.cognitect.transit","^78","^7V","^7T"]]],["^1Q","goog/crypt/base64.js"],["6025affb7181cd40418600864f58eed1ea80055d","^4F",["^ ","^4G",null,"^4H",["^N",[]],"^4I",["^15","^4O","^57","^4M","^4Z","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/concurrent.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/dispatch.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/raw/components.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/ast.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer.jvm/1.1.0/tools.analyzer.jvm-1.1.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/alpha.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader/impl/errors.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/utils.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/mutations.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/protocols.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader/impl/inspect.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/util.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/exec/threadpool.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/buffers.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/printer.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/ansi.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/ioc_macros.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/timers.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/mutex.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/cljs/core/async/impl/ioc_macros.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/components.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader/edn.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader/default_data_readers.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/paths.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.8.5/expound-0.8.5.jar!/expound/problems.cljc",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.5.4/fulcro-3.5.4.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/clojure/tools/reader/reader_types.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.analyzer/1.0.0/tools.analyzer-1.0.0.jar!/clojure/tools/analyzer/env.clj",1630617534000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/1.3.610/core.async-1.3.610.jar!/clojure/core/async/impl/channels.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1630697949000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1630697949000,"jar:file:/Users/mazeboard/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1630617535000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1630697950000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1630697949000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.4/tools.reader-1.3.4.jar!/cljs/tools/reader/reader_types.clj",1630697950000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^I","^K","^L"],"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^V","^W","^X","^Y","^Y","^?","^@","^L","^L","^Z","^[","^10","^11","^12","^Y","^13","^13","^14","^14","^I","^I","^15","^15","^16","^16","^17","^I","^X","^X","^18","^18","~$m","^19","^1:","^1:","^1;","^1:","^1<","^1=","^19","^19","~$s","^@","^V","^V","^11","^11","^[","^[","^1>","^1?","^1=","^1=","^@","^@","^1@","^13","^1A","^18","^1?","^1?"],"^1B",["^N",["^1C"]],"~:shadow/js-access-global",["^N",["Error"]],"^1D",["^ ","^1E","^1:","^H","^I","^J","^I","^K","^L","^1F","^L","~$|","^L"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",7,"^:",142,"^;",16,"~:arglists",["^1I",["~$quote",["^1I",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^O","^25","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"~:method-params",["^1I",[["^:H","^:I","^:J"]]],"~:protocol-impl",null,"~:arglists-meta",["^1I",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^N",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^:I","^:J"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",577,"^9",7,"^:",577,"^;",34,"^:F",["^1I",["^:G",["^1I",[["^:H","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1K","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^O","^2@","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^:K",["^1I",[["^:H","^:T","~$p__60265"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",577,"^:O",["^N",[null,"^:P"]],"^:",577,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^:T",["^ ","^:U",["^:V","^:W"],"^1K","^:X"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",599,"^9",7,"^:",599,"^;",23,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1K","^:T"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^O","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^:H","~$p__60276"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",599,"^:O",["^N",[null,"^:P"]],"^:",599,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",652,"^9",7,"^:",652,"^;",29,"^:F",["^1I",["^:G",["^1I",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1K","^:T"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^O","^2;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^:K",["^1I",[["~$p__60324","^;4"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",652,"^:O",["^N",[null,"^:P"]],"^:",652,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;2",["^;3"],"^1K","^:T"],"^;4"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",7,"^:",32,"^;",24,"^:F",["^1I",["^:G",["^1I",[["^:H"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^O","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:K",["^1I",[["^:H"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",32,"^:O",["^N",["~$clj","^:P","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",525,"^9",7,"^:",525,"^;",23,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^O","^2<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^:H","~$p__60248"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",525,"^:O",["^N",[null,"^:P"]],"^:",525,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$abort-remote!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",842,"^9",7,"^:",842,"^;",20,"^:F",["^1I",["^:G",["^1I",[["~$app-ish","~$remote"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"^O","^2J","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:K",["^1I",[["^;>","^;?"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",842,"^:O","^;:","^:",842,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^;>","^;?"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"~$active-remotes",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",668,"^9",7,"^:",668,"^;",21,"^:F",["^1I",["^:G",["^1I",[["~$queue","^;4"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^O","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:K",["^1I",[["^;A","^;4"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",668,"^:O",["^N",[null,"^:P"]],"^:",668,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^;A","^;4"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",540,"^9",7,"^:",540,"^;",19,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^:["],"^1K","^:T"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^O","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:K",["^1I",[["^:H","~$p__60254"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",540,"^:O",["^N",[null,"^:P"]],"^:",540,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^;C","^:["],"^1K","^:T"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",679,"^9",7,"^:",679,"^;",21,"^:F",["^1I",["^:G",["^1I",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1K","^:H"]]]]]],"^6","Run through the active queue and do a processing step."],"^O","^41","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:K",["^1I",[["~$p__60333"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",679,"^:O","^;:","^:",679,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;G","^;H"],"^1K","^:H"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",7,"^:",238,"^;",24,"^:F",["^1I",["^:G",["^1I",[["^:T","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^O","^26","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:K",["^1I",[["^:T","^;K","^;L"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",238,"^:O",["^N",["^;7","^:P"]],"^:",238,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:T","^;K","^;L"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",798,"^9",8,"^:",798,"^;",23,"~:private",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["~$abort!"],"^1K","^;?"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^;N",true,"^O","^2U","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["~$p__60373","^;P","^;Q"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",798,"^:O",["^N",[null,"^:P"]],"^:",798,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^;O"],"^1K","^;?"],"^;P","^;Q"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",395,"^9",7,"^:",395,"^;",19,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;?","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^O","^2I","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:K",["^1I",[["~$p__60187","^;?","^;T","^;U"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",395,"^:O",["^N",[null,"^:P"]],"^:",395,"^:Q",4,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;?","^;T","^;U"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",485,"^9",7,"^:",485,"^;",27,"^:F",["^1I",["^:G",["^1I",[["^:H","^:T",["^ ","^:U",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^O","^3V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^:K",["^1I",[["^:H","^:T","~$p__60230"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",485,"^:O",["^N",[null,"^:P"]],"^:",485,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^:T",["^ ","^:U",["^;X","^;Y","^;Z"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",7,"^:",90,"^;",15,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["~$type","~$key","~$children"],"^1K","~$ast"]]]]]]],"^O","^22","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^:K",["^1I",[["~$p__59929"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",90,"^:O",["^N",["^;7","^:P","^;8"]],"^:",90,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^<1","^<2","^<3"],"^1K","^<4"]]]]]]],"~$schedule-activation!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",7,"^:",281,"^;",27,"^:F",["^1I",["^:G",["^1I",[["^:H","~$tm"],["^:H"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^:N",false,"~:fixed-arity",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]]],"^O","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:L",null,"^<9",2,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"~:methods",[["^ ","^<9",2,"^:N",false,"~:tag",["^N",["~$js","^;:"]]],["^ ","^<9",1,"^:N",false,"^<;",["^N",["^<<","^;:"]]]],"^8",281,"^:",281,"^:Q",2,"^:R",true,"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",21,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","~$result","~$result-key"],["^:H","^;T","^;U","^;?","^<>"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^<8",["^ ","^:N",false,"^<9",6,"^:Q",6,"^:K",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^:F",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^:M",["^1I",[null,null]]]],"^O","^32","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^<8",["^ ","^:N",false,"^<9",6,"^:Q",6,"^:K",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^:F",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^:L",null,"^<9",6,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",6,"^:N",false,"^<;",["^N",[null,"^:P","^;:"]]],["^ ","^<9",5,"^:N",false,"^<;",["^N",[null,"^:P","^;:"]]]],"^8",405,"^:",405,"^:Q",6,"^:R",true,"^:F",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],"^;T","^;U","^;?","^<>","^<?"],["^:H","^;T","^;U","^;?","^<>"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",619,"^9",7,"^:",619,"^;",23,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]]]]],"^O","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^:H","~$p__60311"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",619,"^:O",["^N",["^;7","^:P","^;:"]],"^:",619,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]]]]],"~$add-send!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",7,"^:",456,"^;",16,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],["^ ","^;2",["~$id","~$options"],"^1K","^:T"],"^;U","^;?"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^O","^2A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^:K",["^1I",[["~$p__60219","~$p__60220","^;U","^;?"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",456,"^:O",["^N",["~$cljs.core/IMap","^;:"]],"^:",456,"^:Q",4,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"],["^ ","^;2",["^<C","^<D"],"^1K","^:T"],"^;U","^;?"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",7,"^:",49,"^;",17,"^:F",["^1I",["^:G",["^1I",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^O","^3A","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:K",["^1I",[["^<I","^<J"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",49,"^:O",["^N",["~$boolean","^:P"]],"^:",49,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^<I","^<J"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",7,"^:",63,"^;",17,"^:F",["^1I",["^:G",["^1I",[["^<I"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^O","^3B","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:K",["^1I",[["^<I"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",63,"^:O",["^N",["^<K","^:P"]],"^:",63,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^<I"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",589,"^9",7,"^:",589,"^;",26,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^O","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^:K",["^1I",[["^:H","~$p__60271"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",589,"^:O",["^N",["^;7","^:P"]],"^:",589,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",385,"^9",7,"^:",385,"^;",22,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]]],"^O","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^:K",["^1I",[["^:H","~$p__60178"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",385,"^:O","^<K","^:",385,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^:U",["^:["],"^1K","^:T"]]]]]]],"~$schedule-queue-processing!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",7,"^:",291,"^;",33,"^:F",["^1I",["^:G",["^1I",[["^:H","^<7"],["^:H"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]]],"^O","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",33,"^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:L",null,"^<9",2,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",2,"^:N",false,"^<;",["^N",["^<<","^;:"]]],["^ ","^<9",1,"^:N",false,"^<;",["^N",["^<<","^;:"]]]],"^8",291,"^:",291,"^:Q",2,"^:R",true,"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",7,"^:",26,"^;",19,"^:F",["^1I",["^:G",["^1I",[["^:H"]]]]],"^6","Returns the remotes map from an app"],"^O","^3D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:K",["^1I",[["^:H"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",26,"^:O","^:P","^:",26,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",353,"^9",7,"^:",353,"^;",19,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^;2",["^<C","^;3"],"^1K","~$node"]]]]]]],"^O","^3C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^:K",["^1I",[["^:H","~$p__60163"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",353,"^:O",["^N",["^;7","^:P"]],"^:",353,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^;2",["^<C","^;3"],"^1K","^<T"]]]]]]],"~$process-send-queues!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",7,"^:",167,"^;",27,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^O","^2[","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^:K",["^1I",[["~$p__60056"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",167,"^:O",["^N",[null,"^:P"]],"^:",167,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^;F",["^;H"],"^1K","^:H"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",513,"^9",7,"^:",513,"^;",24,"^:F",["^1I",["^:G",["^1I",[["~$remote-names",["^ ","^:U",["^;Y","^;Z"],"^1K","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^O","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^:K",["^1I",[["^<Y","~$p__60243"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",513,"^:O",["^N",[null,"^:P","^;:"]],"^:",513,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^<Y",["^ ","^:U",["^;Y","^;Z"],"^1K","^<Z"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",7,"^:",38,"^;",23,"^:F",["^1I",["^:G",["^1I",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^O","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^=1"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",38,"^:O","~$cljs.core/IVector","^:",38,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^=1"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1K","^:H"],"^<D"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^O","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^:K",["^1I",[["~$p__60115","^<D"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",257,"^:O",["^N",["^:P","^;:"]],"^:",257,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^=4"],"^1K","^:H"],"^<D"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"~$addl"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]]]],"^<8",["^ ","^:N",false,"^<9",3,"^:Q",3,"^:K",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]],"^:F",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]],"^:M",["^1I",[null,null]]]],"^O","^3W","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^<8",["^ ","^:N",false,"^<9",3,"^:Q",3,"^:K",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]],"^:F",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]],"^:L",null,"^<9",3,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",3,"^:N",false,"^<;",["^N",["^;7","^:P","^;:"]]],["^ ","^<9",2,"^:N",false,"^<;",["^N",["^;7","^:P","^;:"]]]],"^8",225,"^:",225,"^:Q",3,"^:R",true,"^:F",["^1I",[["^:H",["^ ","^;2",["^<D"],"^1K","^:T"],"^=7"],["^:H",["^ ","^:U",["^;C"],"^1K","^:T"]]]]],"~$schedule-sends!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",7,"^:",301,"^;",22,"^:F",["^1I",["^:G",["^1I",[["^:H","^<7"],["^:H"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]]],"^O","^2O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^:H","^<7"],["^:H"]]],"^:L",null,"^<9",2,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",2,"^:N",false,"^<;",["^N",["^<<","^;:"]]],["^ ","^<9",1,"^:N",false,"^<;",["^N",["^<<","^;:"]]]],"^8",301,"^:",301,"^:Q",2,"^:R",true,"^:F",["^1I",[["^:H","^<7"],["^:H"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",7,"^:",69,"^;",37,"^:F",["^1I",["^:G",["^1I",[["^;P"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^O","^2N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",37,"^:K",["^1I",[["^;P"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",69,"^:O",["^N",[null,"^;7","^:P"]],"^:",69,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^;P"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^;O",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",825,"^9",7,"^:",825,"^;",13,"^:F",["^1I",["^:G",["^1I",[["^:H","^;Q"]]]]],"^6","Implementation of abort when using this tx processing"],"^O","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^:K",["^1I",[["^:H","^;Q"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",825,"^:O",["^N",[null,"^:P"]],"^:",825,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^;Q"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",427,"^9",7,"^:",427,"^;",31,"^:F",["^1I",["^:G",["^1I",[["^:H","^;?","^:T","^:X"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^O","^4:","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",31,"^:K",["^1I",[["^:H","^;?","^:T","^:X"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",427,"^:O",["^N",[null,"^;7","^:P"]],"^:",427,"^:Q",4,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^;?","^:T","^:X"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",23,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^;2",["^<C","^;3"],"^1K","^<T"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^O","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^:H","~$p__60143"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",310,"^:O",["^N",["^;7","^:P"]],"^:",310,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H",["^ ","^;2",["^<C","^;3"],"^1K","^<T"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",7,"^:",57,"^;",20,"^:F",["^1I",["^:G",["^1I",[["^<I"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^O","^49","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:K",["^1I",[["^<I"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",57,"^:O",["^N",["^<K","^:P"]],"^:",57,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^<I"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",28,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^=4"],"^1K","^:H"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^O","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^:K",["^1I",[["~$p__60123"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",266,"^:O","^:P","^:",266,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^=4"],"^1K","^:H"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",20,"^:F",["^1I",["^:G",["^1I",[["^:H","^:J","^;P"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^O","^4C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^:K",["^1I",[["^:H","^:J","^;P"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",97,"^:O","^<G","^:",97,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^:J","^;P"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",747,"^9",7,"^:",747,"^;",18,"^:F",["^1I",["^:G",["^1I",[["^:H","~$tx"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["~$synchronous?"],"^1K","^<D"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^<8",["^ ","^:N",false,"^<9",3,"^:Q",3,"^:K",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^:F",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^:M",["^1I",[null,null]]]],"^O","^3Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^<8",["^ ","^:N",false,"^<9",3,"^:Q",3,"^:K",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^:F",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^:L",null,"^<9",3,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",2,"^:N",false,"^<;","^:P"],["^ ","^<9",3,"^:N",false,"^<;","^:P"]],"^8",747,"^:",747,"^:Q",3,"^:R",true,"^:F",["^1I",[["^:H","^=B"],[["^ ","^;F",["^;H"],"^1K","^:H"],"^=B",["^ ","^:U",["^=C"],"^1K","^<D"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",702,"^9",7,"^:",702,"^;",21,"^:F",["^1I",["^:G",["^1I",[["^:H","^=B",["^ ","^:U",["~$component","~$ref"],"^1K","^<D"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^O","^3M","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^:K",["^1I",[["^:H","^=B","~$p__60341"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",702,"^:O","^:P","^:",702,"^:Q",3,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^=B",["^ ","^:U",["^=E","^=F"],"^1K","^<D"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",503,"^9",7,"^:",503,"^;",17,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Returns true if the given node has no active network operations."],"^O","^4=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^:K",["^1I",[["~$p__60234"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",503,"^:O","^<K","^:",503,"^:Q",1,"^:R",true,"^:F",["^1I",["^:G",["^1I",[[["^ ","^:U",["^:["],"^1K","^:T"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",634,"^9",7,"^:",634,"^;",26,"^:F",["^1I",["^:G",["^1I",[["^:H","^;A"]]]]]],"^O","^21","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^:K",["^1I",[["^:H","^;A"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",634,"^:O",["^N",[null,"^:P"]],"^:",634,"^:Q",2,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^;A"]]]]]],"~$dispatch-result!",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",555,"^9",7,"^:",555,"^;",23,"^:F",["^1I",["^:G",["^1I",[["^:H","^:T",["^ ","^;2",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1K","^:X"],"^;?"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^O","^3L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^:K",["^1I",[["^:H","^:T","~$p__60258","^;?"]]],"^:L",null,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^8",555,"^:O",["^N",["^;7","^:P"]],"^:",555,"^:Q",4,"^:R",true,"^:F",["^1I",["^:G",["^1I",[["^:H","^:T",["^ ","^;2",["^=L","^=M","^=N","^=O","^=P"],"^1K","^:X"],"^;?"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^:T",["^ ","^:E",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^:F",["^1I",["^:G",["^1I",[["^=B"],["^=B","^<D"]]]]],"^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^=B"],["^=B","^<D"]]],"^:F",["^1I",[["^=B"],["^=B","^<D"]]],"^:M",["^1I",[null,null]]]],"^O","^3Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",14,"^<8",["^ ","^:N",false,"^<9",2,"^:Q",2,"^:K",["^1I",[["^=B"],["^=B","^<D"]]],"^:F",["^1I",[["^=B"],["^=B","^<D"]]],"^:M",["^1I",[null,null]]],"^:K",["^1I",[["^=B"],["^=B","^<D"]]],"^:L",null,"^<9",2,"^:M",["^1I",[null,null]],"^9",1,"^:N",false,"^<:",[["^ ","^<9",1,"^:N",false,"^<;","^:P"],["^ ","^<9",2,"^:N",false,"^<;","^<G"]],"^8",199,"^:",199,"^:Q",2,"^:R",true,"^:F",["^1I",[["^=B"],["^=B","^<D"]]]]],"^1G",["^ ","^?","^@","^L","^L","^Z","^[","^10","^11","^14","^14","^I","^I","^17","^I","~$m","^19","^1<","^1=","^19","^19","~$s","^@","^11","^11","^[","^[","^1=","^1=","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1B",["^N",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:req-un","~:opt-un","~:remote","~:state-id-before","~:only-refresh","~:gfn","~:children","~:pred-exprs","~:keys-pred","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","^29","^:V","~:transacted-ast","~:opt-keys","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:db-after","~:ref","~$cljs.spec.alpha/coll-of","~:synchronous?","~:cljs.spec.alpha/kind-form","~:render!","~:warn","~:req-specs","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element","~:state","^33","^35","~:cljs.spec.alpha/cpred","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^:[","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~$%","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:db-before","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:req","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:root","~:result","^=4","^;Y","~:kind","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","~:req-keys","^;Z","~$cljs.core/fn","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:opt-specs","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:pred-forms","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.application/remote-name","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^;C","~:parallel?","~:auto","~:edn-query-language.ast/key","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:cljs.spec.alpha/conform-all","~:rest","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^:W","^;X","~:message","~:com.fulcrologic.fulcro.application/remote-names","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:cljs.spec.alpha/describe","~:opt","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^?0","^?X","^=4","^@3","^?Y","^>B","^>O","^?:","^?Z","^@5","^29","^>@","~:p","^?[","^>1","^;C","^?S","^@7","^>6","^?8","^>K","^=Z","^><","^@1","^?E","^@8","^>2","^>:","^>8","^?U","^?K","^=T","^=U","^=Y","^=[","^>0","^>4","^>E","^?3","^??","^?C","^?F","^@6","^?@","~~:ns-specs",["^ ","^=S","^4?","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^>1",["^1I",["^>@","^?Y","^?:","^29"]],"^:V",["^1I",["~$cljs.spec.alpha/map-of","^24","^4?"]],"^>5","^@>","^>6","~:edn-query-language.ast/node","^>7","~$cljs.core/ifn?","^>;","^23","^>I","^23","^>M",["^1I",["~$cljs.spec.alpha/keys","^?3",["^;X","^?W","^;Z","^:W","^:V","^;Y"],"^@6",["^@4","^@:","^?N"]]],"^:[",["^1I",["^>@","^>M","^?:","^29"]],"^?4",["^1I",["^@B","^?3",["^?E","^>5","^;C","^?<","^:["],"^@6",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^@="]]],"^;Y","^35","^?<","^29","^;Z","^3P","^?B",["^1I",["^>@","^?4","^?:","^29"]],"^?D",["^1I",["^>@","^?4","^?:","^29"]],"^?E","~$cljs.core/uuid?","^@C","^@>","^?L",["^1I",["^@?","^?K","^>1"]],"^?N",["^1I",["^@?","^24","^4?"]],"^?R","^23","^;C",["^1I",["^@B","^@6",["^=S"],"^=U",["^=S"]]],"^?W","^>6","^?Y",["^1I",["^@B","^?3",["^?E","^;X","^>6","^@9","^>7","^@1"],"^@6",["^;C"]]],"^@1","^23","^:W","^3P","^;X","^2M","^@4",["^1I",["^@?","^24","^@@"]],"^@7","^23","^@9","^@A","^@:",["^1I",["^@?","^24","^@@"]]],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^4E",[["^@F","~:static-fns"],true,["^@F","~:shadow-tweaks"],null,["^@F","~:source-map-inline"],null,["^@F","~:elide-asserts"],false,["^@F","~:optimize-constants"],null,["^@F","^1T"],null,["^@F","~:external-config"],null,["^@F","~:tooling-config"],null,["^@F","~:emit-constants"],null,["^@F","~:load-tests"],null,["^@F","~:form-size-threshold"],null,["^@F","~:data-readers"],null,["^@F","~:infer-externs"],"^?T",["^@F","^1V"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^@F","~:fn-invoke-direct"],null,["^@F","~:source-map"],"/dev/null"]]]