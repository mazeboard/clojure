["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\ngoog.require('cljs.spec.alpha');\ngoog.require('com.fulcrologic.fulcro.algorithms.lookup');\ngoog.require('com.fulcrologic.fulcro.algorithms.tempid');\ngoog.require('com.fulcrologic.fulcro.algorithms.do_not_use');\ngoog.require('com.fulcrologic.fulcro.algorithms.scheduling');\ngoog.require('com.fulcrologic.fulcro.mutations');\ngoog.require('com.fulcrologic.fulcro.specs');\ngoog.require('com.fulcrologic.fulcro.inspect.inspect_client');\ngoog.require('ghostwheel.core');\ngoog.require('edn_query_language.core');\ngoog.require('taoensso.encore');\ngoog.require('taoensso.timbre');\n\n\n/**\n * Returns the remotes map from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\n});\n/**\n * Returns a set of the names of the remotes from an app\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\n});\n/**\n * Splits the given send queue into two send queues:\n *   [parallel-items sequential-items].\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\nvar parallel_QMARK_ = (function (p__64970){\nvar map__64972 = p__64970;\nvar map__64972__$1 = (((((!((map__64972 == null))))?(((((map__64972.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64972.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64972):map__64972);\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64972__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn cljs.core.boolean$((function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\n}\n})());\n});\nvar map__64969 = cljs.core.group_by(parallel_QMARK_,sends);\nvar map__64969__$1 = (((((!((map__64969 == null))))?(((((map__64969.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64969.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64969):map__64969);\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64969__$1,true);\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64969__$1,false);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\n});\n/**\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\n} else {\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\n}\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64987_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64987_SHARP_));\n}));\n});\n/**\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__64992_SHARP_){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__64992_SHARP_));\n}));\n});\n/**\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n *   appear before reads, without changing the relative order in blocks of reads/writes.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\nvar vec__64996 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64996,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64996,(1),null);\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (vec__64996,active_queue,send_queue__$1){\nreturn (function (n){\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\n});})(vec__64996,active_queue,send_queue__$1))\n,cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\nvar map__64999 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__64996,active_queue,send_queue__$1,id_sequence,clusters){\nreturn (function (result,id){\nvar vec__65000 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\nvar seq__65001 = cljs.core.seq(vec__65000);\nvar first__65002 = cljs.core.first(seq__65001);\nvar seq__65001__$1 = cljs.core.next(seq__65001);\nvar map__65003 = first__65002;\nvar map__65003__$1 = (((((!((map__65003 == null))))?(((((map__65003.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65003.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65003):map__65003);\nvar n = map__65003__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65003__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar _ = seq__65001__$1;\nvar cluster = vec__65000;\nif((ast == null)){\nreturn result;\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\n} else {\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\n} else {\nreturn result;\n\n}\n}\n}\n});})(vec__64996,active_queue,send_queue__$1,id_sequence,clusters))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\nvar map__64999__$1 = (((((!((map__64999 == null))))?(((((map__64999.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64999.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64999):map__64999);\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64999__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64999__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\nreturn send_queue__$2;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__65007){\nvar map__65008 = p__65007;\nvar map__65008__$1 = (((((!((map__65008 == null))))?(((((map__65008.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65008.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65008):map__65008);\nvar ast = map__65008__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65008__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65008__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65008__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\n} else {\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\n}\n});\n/**\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n *   along with the updated send queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\nvar vec__65011 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65011,(0),null);\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65011,(1),null);\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\nvar vec__65014 = cljs.core.split_with(((function (vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options){\nreturn (function (p1__65010_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__65010_SHARP_));\n});})(vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options))\n,send_queue__$2);\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65014,(0),null);\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65014,(1),null);\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer){\nreturn (function (acc,p__65017){\nvar map__65018 = p__65017;\nvar map__65018__$1 = (((((!((map__65018 == null))))?(((((map__65018.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65018.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65018):map__65018);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65018__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar tx = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast)))?edn_query_language.core.ast__GT_query(ast):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [edn_query_language.core.ast__GT_query(ast)], null));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\n});})(vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer))\n,cljs.core.PersistentVector.EMPTY,to_send);\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\nvar combined_node_idx = (0);\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),((function (vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__65023){\nvar map__65024 = p__65023;\nvar map__65024__$1 = (((((!((map__65024 == null))))?(((((map__65024.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65024.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65024):map__65024);\nvar combined_result = map__65024__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65024__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__65026 = cljs.core.seq(to_send);\nvar chunk__65027 = null;\nvar count__65028 = (0);\nvar i__65029 = (0);\nwhile(true){\nif((i__65029 < count__65028)){\nvar map__65037 = chunk__65027.cljs$core$IIndexed$_nth$arity$2(null,i__65029);\nvar map__65037__$1 = (((((!((map__65037 == null))))?(((((map__65037.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65037.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65037):map__65037);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65037__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__65366 = seq__65026;\nvar G__65367 = chunk__65027;\nvar G__65368 = count__65028;\nvar G__65369 = (i__65029 + (1));\nseq__65026 = G__65366;\nchunk__65027 = G__65367;\ncount__65028 = G__65368;\ni__65029 = G__65369;\ncontinue;\n} else {\nvar temp__5753__auto__ = cljs.core.seq(seq__65026);\nif(temp__5753__auto__){\nvar seq__65026__$1 = temp__5753__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__65026__$1)){\nvar c__4550__auto__ = cljs.core.chunk_first(seq__65026__$1);\nvar G__65371 = cljs.core.chunk_rest(seq__65026__$1);\nvar G__65372 = c__4550__auto__;\nvar G__65373 = cljs.core.count(c__4550__auto__);\nvar G__65374 = (0);\nseq__65026 = G__65371;\nchunk__65027 = G__65372;\ncount__65028 = G__65373;\ni__65029 = G__65374;\ncontinue;\n} else {\nvar map__65045 = cljs.core.first(seq__65026__$1);\nvar map__65045__$1 = (((((!((map__65045 == null))))?(((((map__65045.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65045.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65045):map__65045);\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65045__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\nif(cljs.core.truth_(update_handler)){\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\n} else {\n}\n\n\nvar G__65375 = cljs.core.next(seq__65026__$1);\nvar G__65376 = null;\nvar G__65377 = (0);\nvar G__65378 = (0);\nseq__65026 = G__65375;\nchunk__65027 = G__65376;\ncount__65028 = G__65377;\ni__65029 = G__65378;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});})(vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),((function (vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx){\nreturn (function (p__65049){\nvar map__65050 = p__65049;\nvar map__65050__$1 = (((((!((map__65050 == null))))?(((((map__65050.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65050.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65050):map__65050);\nvar combined_result = map__65050__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65050__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar seq__65052_65379 = cljs.core.seq(to_send);\nvar chunk__65053_65380 = null;\nvar count__65054_65381 = (0);\nvar i__65055_65382 = (0);\nwhile(true){\nif((i__65055_65382 < count__65054_65381)){\nvar map__65078_65384 = chunk__65053_65380.cljs$core$IIndexed$_nth$arity$2(null,i__65055_65382);\nvar map__65078_65385__$1 = (((((!((map__65078_65384 == null))))?(((((map__65078_65384.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65078_65384.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65078_65384):map__65078_65384);\nvar ast_65386__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65078_65385__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_65387 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65078_65385__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_65390 = cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_65386__$1));\nvar result_65391 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_65390);\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var map__65083_65392 = result_65391;\nvar map__65083_65393__$1 = (((((!((map__65083_65392 == null))))?(((((map__65083_65392.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65083_65392.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65083_65392):map__65083_65392);\nvar status_code_65394 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083_65393__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_65395__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65083_65393__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_65394)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_65395__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,remote_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_65394));\n}\n}catch (e65082){var e_65396 = e65082;\n}} else {\n}\n\n(result_handler_65387.cljs$core$IFn$_invoke$arity$1 ? result_handler_65387.cljs$core$IFn$_invoke$arity$1(result_65391) : result_handler_65387.call(null,result_65391));\n\n\nvar G__65397 = seq__65052_65379;\nvar G__65398 = chunk__65053_65380;\nvar G__65399 = count__65054_65381;\nvar G__65400 = (i__65055_65382 + (1));\nseq__65052_65379 = G__65397;\nchunk__65053_65380 = G__65398;\ncount__65054_65381 = G__65399;\ni__65055_65382 = G__65400;\ncontinue;\n} else {\nvar temp__5753__auto___65401 = cljs.core.seq(seq__65052_65379);\nif(temp__5753__auto___65401){\nvar seq__65052_65402__$1 = temp__5753__auto___65401;\nif(cljs.core.chunked_seq_QMARK_(seq__65052_65402__$1)){\nvar c__4550__auto___65403 = cljs.core.chunk_first(seq__65052_65402__$1);\nvar G__65404 = cljs.core.chunk_rest(seq__65052_65402__$1);\nvar G__65405 = c__4550__auto___65403;\nvar G__65406 = cljs.core.count(c__4550__auto___65403);\nvar G__65407 = (0);\nseq__65052_65379 = G__65404;\nchunk__65053_65380 = G__65405;\ncount__65054_65381 = G__65406;\ni__65055_65382 = G__65407;\ncontinue;\n} else {\nvar map__65086_65408 = cljs.core.first(seq__65052_65402__$1);\nvar map__65086_65409__$1 = (((((!((map__65086_65408 == null))))?(((((map__65086_65408.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65086_65408.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65086_65408):map__65086_65408);\nvar ast_65410__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65086_65409__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\nvar result_handler_65411 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65086_65409__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\nvar new_body_65413 = cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_65410__$1));\nvar result_65414 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_65413);\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var map__65089_65415 = result_65414;\nvar map__65089_65416__$1 = (((((!((map__65089_65415 == null))))?(((((map__65089_65415.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65089_65415.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65089_65415):map__65089_65415);\nvar status_code_65417 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65089_65416__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\nvar body_65418__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65089_65416__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_65417)){\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_65418__$1);\n} else {\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,remote_name,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_65417));\n}\n}catch (e65088){var e_65419 = e65088;\n}} else {\n}\n\n(result_handler_65411.cljs$core$IFn$_invoke$arity$1 ? result_handler_65411.cljs$core$IFn$_invoke$arity$1(result_65414) : result_handler_65411.call(null,result_65414));\n\n\nvar G__65420 = cljs.core.next(seq__65052_65402__$1);\nvar G__65421 = null;\nvar G__65422 = (0);\nvar G__65423 = (0);\nseq__65052_65379 = G__65420;\nchunk__65053_65380 = G__65421;\ncount__65054_65381 = G__65422;\ni__65055_65382 = G__65423;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\n});})(vec__65011,active_nodes,send_queue__$1,send_queue__$2,id_to_send,options,vec__65014,to_send,to_defer,tx,ast,combined_node_id,combined_node_idx))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\nif(cljs.core.seq(to_send)){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\n}\n});\n/**\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n *   if the remote itself throws exceptions.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\nvar b2__45871__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\nif(cljs.core.truth_(b2__45871__auto__)){\nvar remote = b2__45871__auto__;\nvar b2__45871__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\nif(cljs.core.truth_(b2__45871__auto____$1)){\nvar transmit_BANG_ = b2__45871__auto____$1;\nvar b2__45871__auto____$2 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\nif(cljs.core.truth_(b2__45871__auto____$2)){\nvar query_transform = b2__45871__auto____$2;\nvar b2__45871__auto____$3 = (cljs.core.truth_(query_transform)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(send_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),query_transform):send_node);\nif(cljs.core.truth_(b2__45871__auto____$3)){\nvar send_node__$1 = b2__45871__auto____$3;\ntry{if(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_65431 = edn_query_language.core.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node__$1));\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node__$1),tx_65431);\n}catch (e65104){var e_65432 = e65104;\n}} else {\n}\n\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node__$1) : transmit_BANG_.call(null,remote,send_node__$1));\n}catch (e65097){var e = e65097;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception!\"], null);\n});})(e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,56699819);\n\ntry{if(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node__$1),\"Transmit Exception\");\n}catch (e65100){var e_65433__$1 = e65100;\n}} else {\n}\n\nvar G__65102 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\nvar fexpr__65101 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node__$1);\nreturn (fexpr__65101.cljs$core$IFn$_invoke$arity$1 ? fexpr__65101.cljs$core$IFn$_invoke$arity$1(G__65102) : fexpr__65101.call(null,G__65102));\n}catch (e65098){var e__$1 = e65098;\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e__$1,e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\n});})(e__$1,e,send_node__$1,b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-1291924180);\n}}} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$3,query_transform,b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-1497276543);\n\nvar G__65106 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__65105 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__65105.cljs$core$IFn$_invoke$arity$1 ? fexpr__65105.cljs$core$IFn$_invoke$arity$1(G__65106) : fexpr__65105.call(null,G__65106));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$2,transmit_BANG_,b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-745635682);\n\nvar G__65108 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__65107 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__65107.cljs$core$IFn$_invoke$arity$1 ? fexpr__65107.cljs$core$IFn$_invoke$arity$1(G__65108) : fexpr__65107.call(null,G__65108));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto____$1,remote,b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto____$1,remote,b2__45871__auto__))\n,null)),null,-1156719470);\n\nvar G__65110 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__65109 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__65109.cljs$core$IFn$_invoke$arity$1 ? fexpr__65109.cljs$core$IFn$_invoke$arity$1(G__65110) : fexpr__65109.call(null,G__65110));\n}\n} else {\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (b2__45871__auto__){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name], null);\n});})(b2__45871__auto__))\n,null)),null,495919220);\n\nvar G__65112 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\nvar fexpr__65111 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\nreturn (fexpr__65111.cljs$core$IFn$_invoke$arity$1 ? fexpr__65111.cljs$core$IFn$_invoke$arity$1(G__65112) : fexpr__65111.call(null,G__65112));\n}\n});\n/**\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__65116){\nvar map__65117 = p__65116;\nvar map__65117__$1 = (((((!((map__65117 == null))))?(((((map__65117.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65117.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65117):map__65117);\nvar app__$1 = map__65117__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65117__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (send_queues,remote_names,map__65117,map__65117__$1,app__$1,runtime_atom){\nreturn (function (new_send_queues,remote){\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\nvar vec__65121 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65121,(0),null);\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65121,(1),null);\nvar front = cljs.core.first(serial);\nvar seq__65124_65446 = cljs.core.seq(p);\nvar chunk__65125_65447 = null;\nvar count__65126_65448 = (0);\nvar i__65127_65449 = (0);\nwhile(true){\nif((i__65127_65449 < count__65126_65448)){\nvar item_65450 = chunk__65125_65447.cljs$core$IIndexed$_nth$arity$2(null,i__65127_65449);\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_65450,remote);\n\n\nvar G__65451 = seq__65124_65446;\nvar G__65452 = chunk__65125_65447;\nvar G__65453 = count__65126_65448;\nvar G__65454 = (i__65127_65449 + (1));\nseq__65124_65446 = G__65451;\nchunk__65125_65447 = G__65452;\ncount__65126_65448 = G__65453;\ni__65127_65449 = G__65454;\ncontinue;\n} else {\nvar temp__5753__auto___65455 = cljs.core.seq(seq__65124_65446);\nif(temp__5753__auto___65455){\nvar seq__65124_65456__$1 = temp__5753__auto___65455;\nif(cljs.core.chunked_seq_QMARK_(seq__65124_65456__$1)){\nvar c__4550__auto___65457 = cljs.core.chunk_first(seq__65124_65456__$1);\nvar G__65458 = cljs.core.chunk_rest(seq__65124_65456__$1);\nvar G__65459 = c__4550__auto___65457;\nvar G__65460 = cljs.core.count(c__4550__auto___65457);\nvar G__65461 = (0);\nseq__65124_65446 = G__65458;\nchunk__65125_65447 = G__65459;\ncount__65126_65448 = G__65460;\ni__65127_65449 = G__65461;\ncontinue;\n} else {\nvar item_65462 = cljs.core.first(seq__65124_65456__$1);\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_65462,remote);\n\n\nvar G__65463 = cljs.core.next(seq__65124_65456__$1);\nvar G__65464 = null;\nvar G__65465 = (0);\nvar G__65466 = (0);\nseq__65124_65446 = G__65463;\nchunk__65125_65447 = G__65464;\ncount__65126_65448 = G__65465;\ni__65127_65449 = G__65466;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\n} else {\nvar map__65129 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\nvar map__65129__$1 = (((((!((map__65129 == null))))?(((((map__65129.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65129.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65129):map__65129);\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65129__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65129__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\nif(cljs.core.truth_(send_node)){\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\n}\n});})(send_queues,remote_names,map__65117,map__65117__$1,app__$1,runtime_atom))\n,cljs.core.PersistentArrayMap.EMPTY,remote_names);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\n\nreturn new_send_queues;\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\nvar G__65137 = arguments.length;\nswitch (G__65137) {\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\nvar ast = edn_query_language.core.query__GT_ast(tx);\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\n});})(ast,ast_nodes))\n),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(((function (ast,ast_nodes){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\n});})(ast,ast_nodes))\n)),ast_nodes);\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2;\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\nvar G__65142 = arguments.length;\nswitch (G__65142) {\ncase 3:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__65143,addl){\nvar map__65144 = p__65143;\nvar map__65144__$1 = (((((!((map__65144 == null))))?(((((map__65144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65144):map__65144);\nvar tx_node = map__65144__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65144__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar map__65146 = options;\nvar map__65146__$1 = (((((!((map__65146 == null))))?(((((map__65146.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65146.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65146):map__65146);\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65146__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65146__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nvar G__65148 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\nvar G__65148__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__65148,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__65148);\nvar G__65148__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__65148__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__65148__$1);\nif(cljs.core.truth_(component)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__65148__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__65148__$2;\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__65152){\nvar map__65153 = p__65152;\nvar map__65153__$1 = (((((!((map__65153 == null))))?(((((map__65153.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65153.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65153):map__65153);\nvar tx_node = map__65153__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65153__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3;\n\n/**\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n *   of things to do on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\n}catch (e65160){var e = e65160;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,241,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch of mutation failed with an exception. No dispatch generated.\"], null);\n});})(e))\n,null)),null,-406492111);\n\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}});\nvar dispatch = ((function (do_dispatch){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__65161){\nvar map__65162 = p__65161;\nvar map__65162__$1 = (((((!((map__65162 == null))))?(((((map__65162.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65162.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65162):map__65162);\nvar ele = map__65162__$1;\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65162__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__65165 = original_ast_node;\nvar map__65165__$1 = (((((!((map__65165 == null))))?(((((map__65165.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65165.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65165):map__65165);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65165__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\nvar G__65168 = ele;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__65168,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\n} else {\nreturn G__65168;\n}\n});})(do_dispatch))\n;\nvar dispatch_all = ((function (do_dispatch,dispatch){\nreturn (function (eles){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\n});})(do_dispatch,dispatch))\n;\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\n});\n/**\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\n *   a single processing step will run for the active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__65173){\nvar map__65174 = p__65173;\nvar map__65174__$1 = (((((!((map__65174 == null))))?(((((map__65174.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65174.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65174):map__65174);\nvar app__$1 = map__65174__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65174__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__65174,map__65174__$1,app__$1,runtime_atom){\nreturn (function (p1__65169_SHARP_){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__65169_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__65169_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\n});})(map__65174,map__65174__$1,app__$1,runtime_atom))\n,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,((function (dispatched_nodes,map__65174,map__65174__$1,app__$1,runtime_atom){\nreturn (function (a){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),((function (dispatched_nodes,map__65174,map__65174__$1,app__$1,runtime_atom){\nreturn (function (p1__65170_SHARP_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__65170_SHARP_,dispatched_nodes);\n});})(dispatched_nodes,map__65174,map__65174__$1,app__$1,runtime_atom))\n),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.PersistentVector.EMPTY);\n});})(dispatched_nodes,map__65174,map__65174__$1,app__$1,runtime_atom))\n);\n\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\n});\n/**\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\nvar G__65179 = arguments.length;\nswitch (G__65179) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(10));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\n * If `tm` is not supplied (in ms) it defaults to 10ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\nvar G__65183 = arguments.length;\nswitch (G__65183) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(10));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\nvar G__65185 = arguments.length;\nswitch (G__65185) {\ncase 2:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 1:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * Runs any incomplete and non-blocked optimistic operations on a node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__65191){\nvar map__65192 = p__65191;\nvar map__65192__$1 = (((((!((map__65192 == null))))?(((((map__65192.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65192.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65192):map__65192);\nvar node = map__65192__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65192__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65192__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,map__65192,map__65192__$1,node,id,elements){\nreturn (function (p__65196,element){\nvar map__65197 = p__65196;\nvar map__65197__$1 = (((((!((map__65197 == null))))?(((((map__65197.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65197.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65197):map__65197);\nvar acc = map__65197__$1;\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65197__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65197__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\nif(cljs.core.truth_(done_QMARK_)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\n} else {\nvar map__65201 = element;\nvar map__65201__$1 = (((((!((map__65201 == null))))?(((((map__65201.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65201.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65201):map__65201);\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65201__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65201__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65201__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65201__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar map__65202 = dispatch;\nvar map__65202__$1 = (((((!((map__65202 == null))))?(((((map__65202.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65202.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65202):map__65202);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65202__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var or__4131__auto__ = done_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar G__65206 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__65206) : complete_QMARK_.call(null,G__65206));\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar fully_complete_QMARK_ = (function (){var and__4120__auto__ = (function (){var or__4131__auto__ = exec_QMARK_;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar G__65208 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__65208) : complete_QMARK_.call(null,G__65208));\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{if(cljs.core.truth_(action)){\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n} else {\n}\n}catch (e65209){var e_65504 = e65209;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,319,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_65504,map__65201,map__65201__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__65202,map__65202__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_before,updated_element,done_QMARK___$1,new_acc,env,map__65197,map__65197__$1,acc,done_QMARK_,new_elements,remotes,map__65192,map__65192__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65504,\"Failure dispatching optimistic action for AST node\",element,\"of transaction node\",node], null);\n});})(e_65504,map__65201,map__65201__$1,complete_QMARK_,dispatch,original_ast_node,idx,map__65202,map__65202__$1,action,remote_set,exec_QMARK_,fully_complete_QMARK_,state_before,updated_element,done_QMARK___$1,new_acc,env,map__65197,map__65197__$1,acc,done_QMARK_,new_elements,remotes,map__65192,map__65192__$1,node,id,elements))\n,null)),null,-1623490856);\n}\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_65505 = edn_query_language.core.ast__GT_query(original_ast_node);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_65505], null));\n}catch (e65210){var e_65506 = e65210;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n}\n});})(remotes,map__65192,map__65192__$1,node,id,elements))\n,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__65213){\nvar map__65214 = p__65213;\nvar map__65214__$1 = (((((!((map__65214 == null))))?(((((map__65214.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65214.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65214):map__65214);\nvar node = map__65214__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65214__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65214__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__65214,map__65214__$1,node,id,elements){\nreturn (function (new_elements,element){\nvar map__65216 = element;\nvar map__65216__$1 = (((((!((map__65216 == null))))?(((((map__65216.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65216.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65216):map__65216);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65216__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65216__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65216__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65216__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar map__65217 = dispatch;\nvar map__65217__$1 = (((((!((map__65217 == null))))?(((((map__65217.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65217.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65217):map__65217);\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65217__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\nvar exec_QMARK_ = (function (){var and__4120__auto__ = action;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var G__65220 = new cljs.core.Keyword(null,\"action\",\"action\",-811238024);\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(G__65220) : complete_QMARK_.call(null,G__65220));\n})());\n} else {\nreturn and__4120__auto__;\n}\n})();\nvar state_before = cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1));\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\nif(cljs.core.truth_(exec_QMARK_)){\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\n}catch (e65221){var e_65507 = e65221;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,348,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_65507,map__65216,map__65216__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__65217,map__65217__$1,action,exec_QMARK_,state_before,updated_node,new_acc,env,map__65214,map__65214__$1,node,id,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65507,\"Failure dispatching optimistic action for AST node\",element,\"of transaction node\",node], null);\n});})(e_65507,map__65216,map__65216__$1,idx,complete_QMARK_,dispatch,original_ast_node,map__65217,map__65217__$1,action,exec_QMARK_,state_before,updated_node,new_acc,env,map__65214,map__65214__$1,node,id,elements))\n,null)),null,1148059568);\n}\nif(cljs.core.truth_((function (){var or__4131__auto__ = goog.DEBUG;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\n}\n})())){\ntry{var tx_65508 = edn_query_language.core.ast__GT_query(original_ast_node);\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-before\",\"state-before\",759087843),state_before,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_65508], null));\n}catch (e65224){var e_65509 = e65224;\n}} else {\n}\n} else {\n}\n\nreturn new_acc;\n});})(map__65214,map__65214__$1,node,id,elements))\n,cljs.core.PersistentVector.EMPTY,elements);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__65225){\nvar map__65226 = p__65225;\nvar map__65226__$1 = (((((!((map__65226 == null))))?(((((map__65226.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65226.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65226):map__65226);\nvar tx_node = map__65226__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65226__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar element_complete_QMARK_ = ((function (map__65226,map__65226__$1,tx_node,elements){\nreturn (function (p__65228){\nvar map__65229 = p__65228;\nvar map__65229__$1 = (((((!((map__65229 == null))))?(((((map__65229.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65229.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65229):map__65229);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65229__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65229__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\n});})(map__65226,map__65226__$1,tx_node,elements))\n;\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\n});\n/**\n * Removes the send node (if present) from the send queue on the given remote.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__65235,remote,txn_id,ele_idx){\nvar map__65236 = p__65235;\nvar map__65236__$1 = (((((!((map__65236 == null))))?(((((map__65236.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65236.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65236):map__65236);\nvar app__$1 = map__65236__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65236__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__65241 = cljs.core.deref(runtime_atom);\nvar map__65241__$1 = (((((!((map__65241 == null))))?(((((map__65241.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65241.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65241):map__65241);\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65241__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\nvar queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\nvar queue__$1 = cljs.core.filterv(((function (map__65241,map__65241__$1,send_queues,queue,map__65236,map__65236__$1,app__$1,runtime_atom){\nreturn (function (p__65243){\nvar map__65244 = p__65243;\nvar map__65244__$1 = (((((!((map__65244 == null))))?(((((map__65244.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65244.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65244):map__65244);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65244__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65244__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\n});})(map__65241,map__65241__$1,send_queues,queue,map__65236,map__65236__$1,app__$1,runtime_atom))\n,queue);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue__$1);\n});\n/**\n * Record a network result on the given txn/element.\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n * queue so that remaining items can proceed, and schedules send processing.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\nvar G__65252 = arguments.length;\nswitch (G__65252) {\ncase 6:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\n\nbreak;\ncase 5:\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__65256,txn_id,ele_idx,remote,result,result_key){\nvar map__65257 = p__65256;\nvar map__65257__$1 = (((((!((map__65257 == null))))?(((((map__65257.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65257.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65257):map__65257);\nvar app__$1 = map__65257__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65257__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_queue,map__65257,map__65257__$1,app__$1,runtime_atom){\nreturn (function (idx,p__65259){\nvar map__65260 = p__65259;\nvar map__65260__$1 = (((((!((map__65260 == null))))?(((((map__65260.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65260.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65260):map__65260);\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65260__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\nreturn cljs.core.reduced(idx);\n} else {\nreturn (idx + (1));\n}\n});})(active_queue,map__65257,map__65257__$1,app__$1,runtime_atom))\n,(0),active_queue);\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\nif(not_found_QMARK_){\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,394,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (active_queue,txn_idx,not_found_QMARK_,map__65257,map__65257__$1,app__$1,runtime_atom){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue!\"], null);\n});})(active_queue,txn_idx,not_found_QMARK_,map__65257,map__65257__$1,app__$1,runtime_atom))\n,null)),null,990055454);\n} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\n}\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\n});\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6;\n\n/**\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__65267,p__65268,ele_idx,remote){\nvar map__65269 = p__65267;\nvar map__65269__$1 = (((((!((map__65269 == null))))?(((((map__65269.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65269.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65269):map__65269);\nvar app__$1 = map__65269__$1;\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65269__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar map__65270 = p__65268;\nvar map__65270__$1 = (((((!((map__65270 == null))))?(((((map__65270.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65270.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65270):map__65270);\nvar tx_node = map__65270__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65270__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar handler = ((function (map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\n\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options))\n;\nvar update_handler = ((function (handler,map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n});})(handler,map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options))\n;\nvar map__65275 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null));\nvar map__65275__$1 = (((((!((map__65275 == null))))?(((((map__65275.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65275.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65275):map__65275);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65275__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\nvar ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,423,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (handler,update_handler,map__65275,map__65275__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire,map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire], null);\n});})(handler,update_handler,map__65275,map__65275__$1,dispatch,original_ast_node,state_before_action,env,remote_fn,remote_desire,map__65269,map__65269__$1,app__$1,runtime_atom,map__65270,map__65270__$1,tx_node,id,options))\n,null)),null,-600760155);\n\nreturn remote_desire;\n})()\n\n))));\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\nif(cljs.core.truth_(ast)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\n\nreturn send_node;\n} else {\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),\"The remote AST was empty!\"], null));\n\nreturn null;\n}\n});\n/**\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__65280){\nvar map__65281 = p__65280;\nvar map__65281__$1 = (((((!((map__65281 == null))))?(((((map__65281.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65281.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65281):map__65281);\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65281__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (remotes,to_dispatch,map__65281,map__65281__$1,idx,dispatch,started_QMARK_){\nreturn (function (node,remote){\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\nreturn node;\n} else {\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,node,idx,remote);\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\n}\n});})(remotes,to_dispatch,map__65281,map__65281__$1,idx,dispatch,started_QMARK_))\n,tx_node,to_dispatch);\n});\n/**\n * Returns true if the given node has no active network operations.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__65283){\nvar map__65284 = p__65283;\nvar map__65284__$1 = (((((!((map__65284 == null))))?(((((map__65284.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65284.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65284):map__65284);\nvar tx_node = map__65284__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65284__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.every_QMARK_(((function (map__65284,map__65284__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__65286){\nvar map__65287 = p__65286;\nvar map__65287__$1 = (((((!((map__65287 == null))))?(((((map__65287.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65287.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65287):map__65287);\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65287__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65287__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\nreturn cljs.core.empty_QMARK_(in_progress);\n});})(map__65284,map__65284__$1,tx_node,elements))\n,elements);\n});\n/**\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n * is no such element.\n * \n *   remote-names is the set of legal remote names.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__65289){\nvar map__65290 = p__65289;\nvar map__65290__$1 = (((((!((map__65290 == null))))?(((((map__65290.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65290.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65290):map__65290);\nvar element = map__65290__$1;\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65290__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65290__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\nif(cljs.core.seq(remaining)){\nreturn element;\n} else {\nreturn null;\n}\n});\n/**\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n *   tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__65292){\nvar map__65293 = p__65292;\nvar map__65293__$1 = (((((!((map__65293 == null))))?(((((map__65293.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65293.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65293):map__65293);\nvar tx_node = map__65293__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65293__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\nvar element = cljs.core.some(with_work,elements);\nif(cljs.core.truth_(element)){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\n} else {\nreturn tx_node;\n}\n} else {\nreturn tx_node;\n}\n});\n/**\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n *   multi-element nodes will only queue one remote operation at a time.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__65296){\nvar map__65297 = p__65296;\nvar map__65297__$1 = (((((!((map__65297 == null))))?(((((map__65297.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65297.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65297):map__65297);\nvar tx_node = map__65297__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65297__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65297__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nif(optimistic_QMARK_){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (optimistic_QMARK_,map__65297,map__65297__$1,tx_node,options,elements){\nreturn (function (node,element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\n});})(optimistic_QMARK_,map__65297,map__65297__$1,tx_node,options,elements))\n,tx_node,elements);\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\n}\n});\n/**\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n *   to it.\n * \n *   Returns the tx-element with the remote marked complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__65301,remote){\nvar map__65303 = p__65301;\nvar map__65303__$1 = (((((!((map__65303 == null))))?(((((map__65303.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65303.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65303):map__65303);\nvar tx_element = map__65303__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65303__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65303__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65303__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\n\nvar result_65554 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\nvar handler_65555 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\nif(cljs.core.truth_(handler_65555)){\nvar env_65556 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_65554], null));\ntry{(handler_65555.cljs$core$IFn$_invoke$arity$1 ? handler_65555.cljs$core$IFn$_invoke$arity$1(env_65556) : handler_65555.call(null,env_65556));\n}catch (e65305){var e_65557 = e65305;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,523,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (e_65557,env_65556,result_65554,handler_65555,map__65303,map__65303__$1,tx_element,results,dispatch,original_ast_node){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65557,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception.\"], null);\n});})(e_65557,env_65556,result_65554,handler_65555,map__65303,map__65303__$1,tx_element,results,dispatch,original_ast_node))\n,null)),null,1167359481);\n}} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\n});\n/**\n * Distribute results and mark the remotes for those elements as complete.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__65306){\nvar map__65307 = p__65306;\nvar map__65307__$1 = (((((!((map__65307 == null))))?(((((map__65307.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65307.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65307):map__65307);\nvar tx_element = map__65307__$1;\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65307__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65307__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__65307,map__65307__$1,tx_element,results,complete_QMARK_){\nreturn (function (new_element,remote){\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\nreturn new_element;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\n}\n});})(map__65307,map__65307__$1,tx_element,results,complete_QMARK_))\n,tx_element,cljs.core.keys(results));\n});\n/**\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\n *   not been distributed.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__65309){\nvar map__65310 = p__65309;\nvar map__65310__$1 = (((((!((map__65310 == null))))?(((((map__65310.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65310.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65310):map__65310);\nvar tx_node = map__65310__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65310__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(((function (map__65310,map__65310__$1,tx_node,elements){\nreturn (function (element){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\n});})(map__65310,map__65310__$1,tx_node,elements))\n,elements));\n});\n/**\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\n *   Returns the updated tx-node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__65312){\nvar map__65313 = p__65312;\nvar map__65313__$1 = (((((!((map__65313 == null))))?(((((map__65313.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65313.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65313):map__65313);\nvar tx_node = map__65313__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65313__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar get_env = ((function (map__65313,map__65313__$1,tx_node,elements){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\n});})(map__65313,map__65313__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (get_env,map__65313,map__65313__$1,tx_node,elements){\nreturn (function (node,p__65315){\nvar map__65316 = p__65315;\nvar map__65316__$1 = (((((!((map__65316 == null))))?(((((map__65316.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65316.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65316):map__65316);\nvar element = map__65316__$1;\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65316__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65316__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65316__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar seq__65318_65565 = cljs.core.seq(progress);\nvar chunk__65319_65566 = null;\nvar count__65320_65567 = (0);\nvar i__65321_65568 = (0);\nwhile(true){\nif((i__65321_65568 < count__65320_65567)){\nvar vec__65330_65569 = chunk__65319_65566.cljs$core$IIndexed$_nth$arity$2(null,i__65321_65568);\nvar remote_65570 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65330_65569,(0),null);\nvar value_65571 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65330_65569,(1),null);\nvar env_65572 = get_env(remote_65570,value_65571);\nvar action_65573 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_65573)){\ntry{(action_65573.cljs$core$IFn$_invoke$arity$1 ? action_65573.cljs$core$IFn$_invoke$arity$1(env_65572) : action_65573.call(null,env_65572));\n}catch (e65333){var e_65574 = e65333;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,563,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65318_65565,chunk__65319_65566,count__65320_65567,i__65321_65568,e_65574,env_65572,action_65573,vec__65330_65569,remote_65570,value_65571,map__65316,map__65316__$1,element,idx,progress,dispatch,get_env,map__65313,map__65313__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65574,\"Progress action threw an exception for txn element\",element], null);\n});})(seq__65318_65565,chunk__65319_65566,count__65320_65567,i__65321_65568,e_65574,env_65572,action_65573,vec__65330_65569,remote_65570,value_65571,map__65316,map__65316__$1,element,idx,progress,dispatch,get_env,map__65313,map__65313__$1,tx_node,elements))\n,null)),null,-418068208);\n}} else {\n}\n\n\nvar G__65575 = seq__65318_65565;\nvar G__65576 = chunk__65319_65566;\nvar G__65577 = count__65320_65567;\nvar G__65578 = (i__65321_65568 + (1));\nseq__65318_65565 = G__65575;\nchunk__65319_65566 = G__65576;\ncount__65320_65567 = G__65577;\ni__65321_65568 = G__65578;\ncontinue;\n} else {\nvar temp__5753__auto___65579 = cljs.core.seq(seq__65318_65565);\nif(temp__5753__auto___65579){\nvar seq__65318_65580__$1 = temp__5753__auto___65579;\nif(cljs.core.chunked_seq_QMARK_(seq__65318_65580__$1)){\nvar c__4550__auto___65581 = cljs.core.chunk_first(seq__65318_65580__$1);\nvar G__65582 = cljs.core.chunk_rest(seq__65318_65580__$1);\nvar G__65583 = c__4550__auto___65581;\nvar G__65584 = cljs.core.count(c__4550__auto___65581);\nvar G__65585 = (0);\nseq__65318_65565 = G__65582;\nchunk__65319_65566 = G__65583;\ncount__65320_65567 = G__65584;\ni__65321_65568 = G__65585;\ncontinue;\n} else {\nvar vec__65334_65586 = cljs.core.first(seq__65318_65580__$1);\nvar remote_65587 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65334_65586,(0),null);\nvar value_65588 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__65334_65586,(1),null);\nvar env_65591 = get_env(remote_65587,value_65588);\nvar action_65592 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\nif(cljs.core.truth_(action_65592)){\ntry{(action_65592.cljs$core$IFn$_invoke$arity$1 ? action_65592.cljs$core$IFn$_invoke$arity$1(env_65591) : action_65592.call(null,env_65591));\n}catch (e65337){var e_65594 = e65337;\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,563,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__65318_65565,chunk__65319_65566,count__65320_65567,i__65321_65568,e_65594,env_65591,action_65592,vec__65334_65586,remote_65587,value_65588,seq__65318_65580__$1,temp__5753__auto___65579,map__65316,map__65316__$1,element,idx,progress,dispatch,get_env,map__65313,map__65313__$1,tx_node,elements){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_65594,\"Progress action threw an exception for txn element\",element], null);\n});})(seq__65318_65565,chunk__65319_65566,count__65320_65567,i__65321_65568,e_65594,env_65591,action_65592,vec__65334_65586,remote_65587,value_65588,seq__65318_65580__$1,temp__5753__auto___65579,map__65316,map__65316__$1,element,idx,progress,dispatch,get_env,map__65313,map__65313__$1,tx_node,elements))\n,null)),null,483705937);\n}} else {\n}\n\n\nvar G__65596 = cljs.core.next(seq__65318_65580__$1);\nvar G__65597 = null;\nvar G__65598 = (0);\nvar G__65599 = (0);\nseq__65318_65565 = G__65596;\nchunk__65319_65566 = G__65597;\ncount__65320_65567 = G__65598;\ni__65321_65568 = G__65599;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\n});})(get_env,map__65313,map__65313__$1,tx_node,elements))\n,tx_node,elements);\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__65338){\nvar map__65339 = p__65338;\nvar map__65339__$1 = (((((!((map__65339 == null))))?(((((map__65339.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65339.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65339):map__65339);\nvar tx_node = map__65339__$1;\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65339__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\nreturn null;\n} else {\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__65342 = tx_node;\nvar G__65342__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__65342):G__65342);\nif((!(optimistic_QMARK_))){\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__65342__$1);\n} else {\nreturn G__65342__$1;\n}\n})())));\n}\n});\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (env){\nreturn (function (acc,element){\nvar map__65343 = element;\nvar map__65343__$1 = (((((!((map__65343 == null))))?(((((map__65343.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65343.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65343):map__65343);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65343__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\nif(cljs.core.truth_(refresh)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\n} else {\nreturn acc;\n}\n});})(env))\n,outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__65345,remotes){\nvar map__65346 = p__65345;\nvar map__65346__$1 = (((((!((map__65346 == null))))?(((((map__65346.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65346.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65346):map__65346);\nvar tx_node = map__65346__$1;\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65346__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\nvar active_on_element = ((function (map__65346,map__65346__$1,tx_node,elements){\nreturn (function (p__65348){\nvar map__65349 = p__65348;\nvar map__65349__$1 = (((((!((map__65349 == null))))?(((((map__65349.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65349.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65349):map__65349);\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65349__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65349__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\nvar remotes__$1 = cljs.core.set(remotes);\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\n});})(map__65346,map__65346__$1,tx_node,elements))\n;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (active_on_element,map__65346,map__65346__$1,tx_node,elements){\nreturn (function (acc,ele){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\n});})(active_on_element,map__65346,map__65346__$1,tx_node,elements))\n,cljs.core.PersistentHashSet.EMPTY,elements);\n});\n/**\n * Calculate which remotes still have network activity to do on the given active queue.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\n}),cljs.core.PersistentHashSet.EMPTY,queue);\n});\n/**\n * Run through the active queue and do a processing step.\n */\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__65353){\nvar map__65354 = p__65353;\nvar map__65354__$1 = (((((!((map__65354 == null))))?(((((map__65354.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__65354.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__65354):map__65354);\nvar app__$1 = map__65354__$1;\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65354__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65354__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (map__65354,map__65354__$1,app__$1,state_atom,runtime_atom){\nreturn (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar new_node = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\n} else {\nreturn new_queue;\n}\n});})(map__65354,map__65354__$1,app__$1,state_atom,runtime_atom))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\nvar accumulate = ((function (new_queue,map__65354,map__65354__$1,app__$1,state_atom,runtime_atom){\nreturn (function (r,items){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\n});})(new_queue,map__65354,map__65354__$1,app__$1,state_atom,runtime_atom))\n;\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\n\nif(cljs.core.seq(explicit_refresh)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\n} else {\n}\n\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\n\nreturn null;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^O","~$>defn","~$ghostwheel.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^13","^?","^@","~$log","~$taoensso.timbre","~$eql","^13","^B","^B","^O","^O","~$goog","^17","~$com.fulcrologic.fulcro.specs","^18","~$inspect","^O","^12","^12","~$com.fulcrologic.fulcro.algorithms.tempid","^1:","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1<","~$sched","^1<","~$enc","~$taoensso.encore","^1;","^1;","~$s","^@","^R","^R","^10","^10","^15","^15","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1?","^1?","^@","^@","~$tempid","^1:","^1A","^1A"],"~:seen",["^T",["~:require"]],"~:uses",["^ ","~$schedule!","^1<","^N","^O","^P","^O","^Q","^R","~$=>","^R","~$|","^R"],"~:require-macros",["^ ","^?","^@","^14","^15","^B","^B","^O","^O","^19","^O","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^15","^15","^1?","^1?","^@","^@"],"~:form",["~#list",["~$ns","^V","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .",["^1J",["^1D",["^12","~:as","^11"],["^?","^1L","~$s"],["^10","^1L","^["],["^1:","^1L","^1B"],["^1A","^1L","^1@"],["^1<","^1L","^1=","~:refer",["^1F"]],["^1;","^1L","~$m"],["^18"],["^O","^1L","^19","^1M",["^N","^P"]],"^18",["^R","^1M",["^Q","^1G","~$|"]],["^13","^1L","^16"],["^1?","^1L","^1>"],["^15","^1L","^14"]]]]],"~:flags",["^ ","^1D",["^T",[]]],"~:js-deps",["^ "],"~:deps",["^17","^B","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]],"^X","^V","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1630228425177,"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .\"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [ghostwheel.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(>defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(>defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(>defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(>defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(>defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(>defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(>defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(>defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(>defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (if (= :root (:type ast))\n                                         (eql/ast->query ast)\n                                         [(eql/ast->query ast)])]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (select-keys body (top-keys ast))\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app remote-name (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(>defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote          (get (app->remotes app) remote-name)\n               transmit!       (get remote :transmit!)\n               query-transform (ah/app-algorithm app :global-eql-transform)\n               send-node       (if query-transform\n                                 (update send-node ::ast query-transform)\n                                 send-node)]\n    (try\n      (inspect/ilet [tx (eql/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception!\")\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name)\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(>defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (net-send! app item remote))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (net-send! app send-node remote))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    new-send-queues))\n\n(>defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(>defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(>defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch of mutation failed with an exception. No dispatch generated.\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(>defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) (::submission-queue @runtime-atom))]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue []))))\n    (process-queue! app)))\n\n(>defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 10)))\n\n(>defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 10)))\n\n(>defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(>defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-before    (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (log/error e \"Failure dispatching optimistic action for AST node\" element \"of transaction node\" node)))\n                               (ilet [tx (eql/ast->query original-ast-node)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                               :state-before state-before\n                                                                               :tx           tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(>defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?        (and action (not (complete? :action)))\n                               state-before (-> app :com.fulcrologic.fulcro.application/state-atom deref)\n                               updated-node (if exec? (-> element\n                                                        (assoc ::state-before-action state-before)\n                                                        (update ::complete? conj :action)) element)\n                               new-acc      (conj new-elements updated-node)\n                               env          (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"Failure dispatching optimistic action for AST node\" element \"of transaction node\" node)))\n                             (ilet [tx (eql/ast->query original-ast-node)]\n                               (inspect/optimistic-action-finished! app env {:tx-id        (str id \"-\" idx)\n                                                                             :state-before state-before\n                                                                             :tx           tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(>defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(>defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        queue (get send-queues remote)\n        queue (filterv (fn [{:keys [::id ::idx]}]\n                         (not (and (= txn-id id) (= ele-idx idx)))) queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(>defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue!\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(>defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name => ::send-node]\n  (let [handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        {:keys [::dispatch ::original-ast-node ::state-before-action]} (get-in tx-node [::elements ele-idx])\n        env            (build-env app tx-node {:ast                 original-ast-node\n                                               :state-before-action state-before-action})\n        remote-fn      (get dispatch remote)\n        remote-desire  (when remote-fn (remote-fn env))\n        ast            (cond\n                         (or (false? remote-desire) (nil? remote-desire)) nil\n                         (true? remote-desire) original-ast-node\n                         (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                         (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                         :else (do\n                                 (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire)\n                                 remote-desire))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 500 :body \"The remote AST was empty!\"})\n        nil))))\n\n(>defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (do\n            (add-send! app node idx remote)\n            (update-in node [::elements idx ::started?] conj remote))))\n      tx-node\n      to-dispatch)))\n\n(>defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(>defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(>defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(>defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(>defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {:keys [::results ::dispatch ::original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch dispatch :result result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception.\"))))))\n  (update tx-element ::complete? conj remote))\n\n(>defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(>defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(>defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {:keys [::idx ::progress ::dispatch] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception for txn element\" element))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(>defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(>defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(>defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(>defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(>defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n","~:reader-features",["^T",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","map__64969","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","parallel?","p__64970","map__64972","options","cljs.core/boolean","or__4131__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__64987#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__64992#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__64996","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__64999","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","n","cljs.core/first","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","clusters","reads","writes","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","result","id","vec__65000","seq__65001","cljs.core/seq","first__65002","cljs.core/next","map__65003","ast","_","cluster","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p__65007","map__65008","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","vec__65011","vec__65014","active-nodes","id-to-send","to-send","to-defer","p1__65010#","tx","p__65017","map__65018","acc","edn-query-language.core/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0","combined-node-idx","combined-node","p__65023","map__65024","body","combined-result","seq__65026","chunk__65027","count__65028","i__65029","map__65037","temp__5753__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__65045","update-handler","p__65049","map__65050","seq__65052","chunk__65053","count__65054","i__65055","map__65078","map__65086","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__65083","e","e65082","map__65089","e65088","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","b2__45871__auto__","remote","transmit!","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","cljs.core.update.cljs$core$IFn$_invoke$arity$3","e65097","e65104","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","e65098","e65100","G__65102","fexpr__65101","G__65106","fexpr__65105","G__65108","fexpr__65107","G__65110","fexpr__65109","G__65112","fexpr__65111","p__65116","map__65117","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","new-send-queues","vec__65121","cljs.core.get.cljs$core$IFn$_invoke$arity$3","p","serial","front","seq__65124","chunk__65125","count__65126","i__65127","item","map__65129","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","var_args","G__65137","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2","ast-nodes","elements","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__65142","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__65143","map__65144","p__65152","map__65153","tx-node","addl","map__65146","ref","component","G__65148","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e65160","dispatch","p__65161","map__65162","original-ast-node","ele","map__65165","G__65168","dispatch-all","eles","p__65173","map__65174","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","dispatched-nodes","p1__65169#","com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.mutations/mutate","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","a","p1__65170#","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__65179","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","tm","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2","G__65183","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2","G__65185","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2","p__65191","map__65192","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","node","remotes","reduction","p__65196","map__65197","done?","new-elements","element","map__65201","map__65202","complete?","action","remote-set","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","exec?","and__4120__auto__","cljs.core/not","G__65206","fully-complete?","G__65208","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","state-before","updated-element","new-acc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","e65209","e65210","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__65213","map__65214","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__65216","map__65217","G__65220","updated-node","e65221","e65224","p__65225","map__65226","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__65228","map__65229","active-keys","clojure.set.union.cljs$core$IFn$_invoke$arity$2","desired-set","p__65235","map__65236","txn-id","ele-idx","map__65241","queue","cljs.core/filterv","p__65243","map__65244","cljs.core/assoc-in","G__65252","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__65256","map__65257","result-key","txn-idx","p__65259","map__65260","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6","p__65267","p__65268","map__65269","map__65270","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","map__65275","state-before-action","handler","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","remote-fn","remote-desire","cljs.core/map?","cljs.core/contains?","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","p__65280","map__65281","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","p__65283","map__65284","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__65286","map__65287","in-progress","p__65289","map__65290","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__65292","map__65293","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/some","p__65296","map__65297","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__65301","map__65303","results","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","tx-element","e65305","p__65306","map__65307","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__65309","map__65310","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__65312","map__65313","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__65315","map__65316","seq__65318","chunk__65319","count__65320","i__65321","vec__65330","vec__65334","value","e65333","e65337","cljs.core/dissoc","p__65338","map__65339","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__65342","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","outer-acc","map__65343","refresh","p__65345","map__65346","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__65348","map__65349","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__65353","map__65354","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","cljs.core/update"]]],"~:cache-keys",["~#cmap",[["^1R","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^T",[]],"~:deps-syms",["^17","^B","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^1R","com/fulcrologic/fulcro/algorithms/normalize.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^1A","^13","^15","~$com.fulcrologic.fulcro.components"]]],["^1R","goog/dom/tagname.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.dom.HtmlElement"]]],["^1R","goog/async/freelist.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core/async/impl/ioc_helpers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$cljs.core.async.impl.protocols"]]],["^1R","goog/labs/useragent/platform.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.labs.userAgent.util","~$goog.string"]]],["^1R","expound/util.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","ghostwheel/reporting.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@","^F","^D","~$expound.alpha","~$clojure.string","~$ghostwheel.logging"]]],["^1R","cljs/core/async.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2<","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1R","goog/timer/timer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Promise","~$goog.events.EventTarget"]]],["^1R","orchestra_cljs/spec/test.cljs"],[1630228119080,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$goog.object","~$goog.userAgent.product","^2@","~$cljs.stacktrace","^J","^@","^H"]]],["^1R","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^15"]]],["^1R","cljs/spec/gen/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$goog.Uri"]]],["^1R","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^2>"]]],["^1R","goog/math/math.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.asserts"]]],["^1R","goog/string/stringformat.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2>"]]],["^1R","cljs/env.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/events/eventtype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1R","goog/labs/useragent/browser.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2=","^2J","~$goog.string.internal"]]],["^1R","goog/array/array.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1R","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^15","^13","^2J","^@"]]],["^1R","expound/problems.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$expound.paths","^@","^27","^2@","~$expound.printer","~$expound.ansi"]]],["^1R","goog/useragent/useragent.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2=","~$goog.reflect","^2>"]]],["^1R","goog/structs/prioritypool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1R","clojure/test/check/properties.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^1R","goog/async/run.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1R","com/cognitect/transit/impl/reader.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1R","clojure/test/check/generators.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^2>"]]],["^1R","taoensso/encore.cljs"],[1630228119299,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^12","~$cljs.reader","~$cljs.tools.reader.edn","^2J","^2>","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1R","goog/debug/error.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/async/workqueue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.async.FreeList"]]],["^1R","com/fulcrologic/fulcro/dom/events.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/events/events.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2O","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1R","goog/promise/resolver.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/browserfeature.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2P"]]],["^1R","cljs/tools/reader/edn.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2>","^3>"]]],["^1R","clojure/test/check/random/doubles.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$clojure.test.check.random.longs"]]],["^1R","goog/structs/priorityqueue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.structs.Heap"]]],["^1R","goog/net/xhrio.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Timer","^2G","^2N","^3H","^2I","~$goog.json.hybrid","~$goog.log","^3E","^3D","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2J","^2>","^3C","~$goog.structs.Map","~$goog.uri.utils","^2P"]]],["^1R","goog/promise/thenable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/fulcrologic/fulcro/algorithms/transit.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$cognitect.transit","~$com.cognitect.transit","^1:"]]],["^1R","goog/dom/nodetype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","com/cognitect/transit/util.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2J"]]],["^1R","cljs/pprint.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^2>","^3>"]]],["^1R","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@","^12","^R","^15","^13"]]],["^1R","cljs/tools/reader.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3M","^3N","^3O","^3L","^2G","^2>","^3>"]]],["^1R","expound/alpha.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$expound.problems","^@","^2@","^12","^27","^3=","^2>","^2V","~$expound.util","^2W","^H"]]],["^1R","clojure/test/check/rose_tree.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","clojure/test/check/impl.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1R","goog/events/eventtarget.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Disposable","^2N","^3?","~$goog.events.Event","^3J","^3K","^2J"]]],["^1R","clojure/test/check/random.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$clojure.test.check.random.doubles","^3Q"]]],["^1R","goog/disposable/disposable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.disposable.IDisposable"]]],["^1R","expound/ansi.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@"]]],["^2R","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^2S","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1R","cljs/spec/test/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2J","^2K","^2@","^2L","^J","^@","^H"]]],["^1R","shadow/js.js"],[1630228360071,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/object/object.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/set.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3C","~$goog.structs.Collection","^3X"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^2R","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^2S","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1R","cljs/stacktrace.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2>","^2@"]]],["^1R","goog/math/long.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","^2["]]],["^1R","goog/events/listener.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.events.ListenableKey"]]],["^1R","cljs/core/async/impl/channels.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2<","^2E","^2C"]]],["^1R","goog/events/listenermap.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.events.Listener","^2J"]]],["^1R","goog/events/eventid.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","taoensso/truss.cljs"],[1630228118689,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$taoensso.truss.impl"]]],["^1R","goog/string/internal.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/fulcrologic/fulcro/algorithms/merge.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$com.fulcrologic.fulcro.algorithms.data-targeting","^2:","^10","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^1A","^13","^15"]]],["^1R","clojure/test/check.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^32","^39","^33","^3:","~$clojure.test.check.impl"]]],["^1R","edn_query_language/core.cljc"],[1630228119293,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@","~$clojure.test.check","^32","~$clojure.test.check.properties"]]],["^1R","goog/functions/functions.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core/async/impl/dispatch.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2C","^35"]]],["^1R","expound/paths.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@","^41"]]],["^1R","taoensso/truss/impl.cljs"],[1630228118689,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^12"]]],["^1R","clojure/walk.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/useragent/product.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2X","^2Z","^2P"]]],["^1R","cljs/core/async/impl/protocols.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/net/eventtype.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/map.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1R","goog/net/xhriopool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3@","~$goog.structs.PriorityPool"]]],["^1R","com/cognitect/transit/delimiters.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/queue.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G"]]],["^1R","goog/labs/useragent/engine.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2=","^2>"]]],["^1R","com/fulcrologic/fulcro/inspect/transit.cljs"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3Z","~$com.cognitect.transit.types","~$com.fulcrologic.fulcro.algorithms.transit"]]],["^1R","com/cognitect/transit/impl/decoder.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^38","^4J"]]],["^1R","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^1?"]]],["^1R","cljs/reader.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2J","^3P","^3<","^3>"]]],["^1R","com/fulcrologic/fulcro/mutations.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2:","~$com.fulcrologic.fulcro.dom.events","^R","^13","^15","^1?","^@","^4A","~$com.fulcrologic.fulcro.algorithms.merge","^10","^1:","^2@"]]],["^1R","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2J","~$cljsjs.react","^13","^@","^15","^27","^2@","^1A","^4C","^10","^12"]]],["^1R","com/fulcrologic/fulcro/specs.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@","^1A","^13"]]],["^1R","goog/asserts/asserts.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1R","cljs/core/async/impl/buffers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2<"]]],["^1R","goog/debug/logbuffer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.debug.LogRecord"]]],["^1R","cljs/tagged_literals.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3;"]]],["^1R","goog/uri/uri.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","^2>","^3C","^3X","^3Y","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1R","ghostwheel/threading_macros.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2A","~$ghostwheel.utils"]]],["^1R","goog/net/errorcode.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^2R","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^2S"]]],["^1R","ghostwheel/logging.cljc"],[1630228119285,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^J"]]],["^1R","goog/disposable/idisposable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/promise/promise.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","~$goog.Thenable","^2N","^3G","~$goog.async.run","^36","^4Q","~$goog.promise.Resolver"]]],["^1R","cljs/core/async/impl/timers.cljs"],[1630228358733,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2<","^2B","^2E"]]],["^1R","cljs/spec/alpha.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2J","^27","^H","^2@"]]],["^1R","goog/debug/logrecord.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/base.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",[]]],["^1R","goog/json/hybrid.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.json"]]],["^1R","goog/structs/structs.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2J"]]],["^1R","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3M","^2@","~$cljs.tools.reader.impl.inspect"]]],["^1R","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^R","^L"]]],["^1R","cljsjs/react.cljs"],[1630228358937,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$module$node_modules$react$index"]]],["^1R","clojure/string.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2>","^3>"]]],["^1R","com/fulcrologic/fulcro/algorithms/tempid.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^15","^27"]]],["^1R","goog/structs/pool.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^44","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1R","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","com/fulcrologic/fulcro/inspect/diff.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^@"]]],["^2R","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^2S","^4<"]]],["^1R","goog/net/httpstatus.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","com/cognitect/transit/handlers.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","^4J","~$goog.math.Long"]]],["^1R","goog/structs/heap.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2J","~$goog.structs.Node"]]],["^1R","goog/debug/entrypointregistry.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N"]]],["^1R","goog/string/string.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2Q"]]],["^1R","com/cognitect/transit/types.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","~$com.cognitect.transit.eq","^53"]]],["^1R","goog/reflect/reflect.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/labs/useragent/util.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2Q"]]],["^1R","expound/printer.cljc"],[1630228118972,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^@","^J","^27","^12","^41","^2W"]]],["^1R","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]]],["^1R","com/cognitect/transit/eq.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L"]]],["^1R","goog/debug/debug.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","~$goog.debug.errorcontext","^2P"]]],["^1R","goog/string/stringbuffer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/debug/errorcontext.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3N","^2>","^3>"]]],["^1R","goog/iter/iter.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","~$goog.functions","~$goog.math"]]],["^1R","goog/async/nexttick.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^3H","~$goog.dom.TagName","^57","^2X","^2Y"]]],["^1R","goog/debug/logger.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","~$goog.debug","~$goog.debug.LogBuffer","^4S"]]],["^1R","ghostwheel/core.cljc"],[1630228119207,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^12","^27","^D","^4E","^32","^4F","^@","^F","^H","~$ghostwheel.reporting","~$ghostwheel.unghost","^4V","^2A","~$ghostwheel.threading-macros","^2?","~$cljs.analyzer.api","^29"]]],["^1R","com/cognitect/transit/caching.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4M"]]],["^2R","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^2S"]]],["^1R","goog/events/event.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^44","~$goog.events.EventId"]]],["^1R","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3L","^3M","^3N"]]],["^1R","goog/dom/htmlelement.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cljs/core.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^53","~$goog.math.Integer","^2>","^2J","^2G","^2M","^3>"]]],["^1R","com/cognitect/transit.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^4J","^55","^37","^38"]]],["^1R","clojure/test/check/random/longs.cljs"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","~$clojure.test.check.random.longs.bit-count-impl","^53","^B"]]],["^1R","goog/log/log.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5:","~$goog.debug.LogManager","^4S","~$goog.debug.Logger"]]],["^1R","goog/structs/collection.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/browserevent.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5:","^2O","^45","~$goog.events.EventType","^2[","^2P"]]],["^1R","cljs/analyzer/api.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^28","~$cljs.analyzer"]]],["^1R","goog/math/integer.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/structs/node.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","clojure/set.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/uri/utils.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2G","^2N","^2>"]]],["^1R","taoensso/timbre.cljs"],[1630228119105,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^1?","~$taoensso.timbre.appenders.core"]]],["^1R","cljs/analyzer.cljc"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2>","^2@","^12","^28","~$cljs.tagged-literals","^3P","^3M","^3;"]]],["^1R","goog/json/json.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","goog/events/listenable.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^5@"]]],["^1R","com/cognitect/transit/impl/writer.js"],[1630228118604,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^4L","^38","~$com.cognitect.transit.handlers","^4J","^4M","^53"]]],["^1R","goog/net/xmlhttpfactory.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^42"]]],["^1R","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^13"]]],["^1R","ghostwheel/unghost.cljc"],[1630228119555,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","goog/net/xmlhttp.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^2N","~$goog.net.WrapperXmlHttpFactory","^43"]]],["^1R","cljs/test.cljs"],[1630228118934,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^2@","^J"]]],["^1R","clojure/test/check/results.cljc"],[1630228119162,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B"]]],["^1R","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],[1630228119420,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^13","^10","^2J","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^L","^1?","^15"]]],["^1R","goog/net/xhrlike.js"],[1630228359392,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17"]]],["^1R","cognitect/transit.cljs"],[1630228118516,"^23",["^ ","^24",null,"^25",["^T",[]],"^26",["^17","^B","^3[","^4J","^55","^53"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/concurrent.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/protocols.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/test/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/reporting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/printer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/test.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/paths.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/ansi.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/exec/threadpool.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/problems.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/test.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/test/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/clojure/core/async/impl/dispatch.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/core.async/0.4.500/core.async-0.4.500.jar!/cljs/core/async/impl/ioc_macros.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/mutations.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is pluggable. This namespace is the\n  implementation for the default transaction processing .","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",["^ ","^N","^O","^P","^O","^Q","^R"],"^S",["^T",[]],"^U","^V","^Y",null,"^Z",["^ ","^[","^10","^11","^12","^13","^13","^?","^@","^14","^15","^16","^13","^B","^B","^O","^O","^17","^17","^18","^18","^19","^O","^12","^12","^1:","^1:","~$m","^1;","^1<","^1<","^1=","^1<","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^10","^10","^15","^15","^1@","^1A","^1?","^1?","^@","^@","^1B","^1:","^1A","^1A"],"^1C",["^T",["^1D"]],"~:shadow/js-access-global",["^T",["Error"]],"^1E",["^ ","^1F","^1<","^N","^O","^P","^O","^Q","^R","^1G","^R","~$|","^R"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",138,"^9",8,"^:",138,"^;",17,"~:arglists",["^1J",["~$quote",["^1J",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"~:method-params",["^1J",[["^7X","^7Y","^7Z"]]],"~:protocol-impl",null,"~:arglists-meta",["^1J",[null,null]],"^9",1,"~:variadic?",false,"^8",138,"~:ret-tag",["^T",[null,"~$any"]],"^:",138,"~:max-fixed-arity",3,"~:fn-var",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Y","^7Z"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",526,"^9",8,"^:",526,"^;",35,"^7V",["^1J",["^7W",["^1J",[["^7X","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1L","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",35,"^80",["^1J",[["^7X","^89","~$p__65306"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",526,"^84",["^T",[null,"^85"]],"^:",526,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^8<"],"^1L","^8="]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",548,"^9",8,"^:",548,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1L","^89"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__65312"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",548,"^84",["^T",[null,"^85"]],"^:",548,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",601,"^9",8,"^:",601,"^;",30,"^7V",["^1J",["^7W",["^1J",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1L","^89"],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",30,"^80",["^1J",[["~$p__65345","^8G"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",601,"^84",["^T",[null,"^85"]],"^:",601,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8E",["^8F"],"^1L","^89"],"^8G"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",28,"^9",8,"^:",28,"^;",25,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^7X"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",28,"^84",["^T",["~$clj","^85","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",28,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",478,"^9",8,"^:",478,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__65292"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",478,"^84",["^T",[null,"^85"]],"^:",478,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$active-remotes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",617,"^9",8,"^:",617,"^;",22,"^7V",["^1J",["^7W",["^1J",[["~$queue","^8G"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^80",["^1J",[["^8T","^8G"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",617,"^84",["^T",[null,"^85"]],"^:",617,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^8T","^8G"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",493,"^9",8,"^:",493,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^8A"],"^1L","^89"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X","~$p__65296"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",493,"^84",["^T",[null,"^85"]],"^:",493,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W","^8A"],"^1L","^89"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",628,"^9",8,"^:",628,"^;",22,"^7V",["^1J",["^7W",["^1J",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1L","^7X"]]]]]],"^6","Run through the active queue and do a processing step."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^80",["^1J",[["~$p__65353"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",628,"^84","^8O","^:",628,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^90","^91"],"^1L","^7X"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",232,"^9",8,"^:",232,"^;",25,"^7V",["^1J",["^7W",["^1J",[["^89","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^89","^95","^96"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",232,"^84",["^T",["^8L","^85"]],"^:",232,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^89","^95","^96"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$remove-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",368,"^9",8,"^:",368,"^;",20,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"~$remote","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["~$p__65235","^99","^9:","^9;"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",368,"^84",["^T",[null,"^85"]],"^:",368,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^99","^9:","^9;"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",440,"^9",8,"^:",440,"^;",28,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^80",["^1J",[["^7X","^89","~$p__65280"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",440,"^84",["^T",[null,"^85"]],"^:",440,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^9?","^9@","^9A"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",86,"^9",8,"^:",86,"^;",16,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["~$type","~$key","~$children"],"^1L","~$ast"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^80",["^1J",[["~$p__65007"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",86,"^84",["^T",["^8L","^85","^8M"]],"^:",86,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^9E","^9F","^9G"],"^1L","^9H"]]]]]]],"~$schedule-activation!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",263,"^9",8,"^:",263,"^;",28,"^7V",["^1J",["^7W",["^1J",[["^7X","~$tm"],["^7X"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^83",false,"~:fixed-arity",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^81",null,"^9N",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"~:methods",[["^ ","^9N",2,"^83",false,"~:tag",["^T",["~$js","^8O"]]],["^ ","^9N",1,"^83",false,"^9Q",["^T",["^9R","^8O"]]]],"^8",263,"^:",263,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",378,"^9",8,"^:",378,"^;",22,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","~$result","~$result-key"],["^7X","^9:","^9;","^99","^9T"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^9M",["^ ","^83",false,"^9N",6,"^86",6,"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^9M",["^ ","^83",false,"^9N",6,"^86",6,"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^81",null,"^9N",6,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9P",[["^ ","^9N",6,"^83",false,"^9Q",["^T",[null,"^85","^8O"]]],["^ ","^9N",5,"^83",false,"^9Q",["^T",[null,"^85","^8O"]]]],"^8",378,"^:",378,"^86",6,"^87",true,"^7V",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],"^9:","^9;","^99","^9T","^9U"],["^7X","^9:","^9;","^99","^9T"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",568,"^9",8,"^:",568,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__65338"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",568,"^84",["^T",["^8L","^85","^8O"]],"^:",568,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]]],"~$add-send!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",400,"^9",8,"^:",400,"^;",17,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],["^ ","^8E",["~$id","~$options"],"^1L","^89"],"^9;","^99"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^80",["^1J",[["~$p__65267","~$p__65268","^9;","^99"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",400,"^84",["^T",["~$cljs.core/IMap","^8O"]],"^:",400,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"],["^ ","^8E",["^9[","^:0"],"^1L","^89"],"^9;","^99"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",45,"^9",8,"^:",45,"^;",18,"^7V",["^1J",["^7W",["^1J",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["^:6","^:7"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",45,"^84",["^T",["~$boolean","^85"]],"^:",45,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:6","^:7"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",59,"^9",8,"^:",59,"^;",18,"^7V",["^1J",["^7W",["^1J",[["^:6"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["^:6"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",59,"^84",["^T",["^:9","^85"]],"^:",59,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:6"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",538,"^9",8,"^:",538,"^;",27,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^80",["^1J",[["^7X","~$p__65309"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",538,"^84",["^T",["^8L","^85"]],"^:",538,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",358,"^9",8,"^:",358,"^;",23,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^80",["^1J",[["^7X","~$p__65225"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",358,"^84","^:9","^:",358,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8:",["^8A"],"^1L","^89"]]]]]]],"~$schedule-queue-processing!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",273,"^9",8,"^:",273,"^;",34,"^7V",["^1J",["^7W",["^1J",[["^7X","^9L"],["^7X"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^81",null,"^9N",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9P",[["^ ","^9N",2,"^83",false,"^9Q",["^T",["^9R","^8O"]]],["^ ","^9N",1,"^83",false,"^9Q",["^T",["^9R","^8O"]]]],"^8",273,"^:",273,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",22,"^9",8,"^:",22,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns the remotes map from an app"],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",22,"^84","^85","^:",22,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",330,"^9",8,"^:",330,"^;",20,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^9[","^8F"],"^1L","~$node"]]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^80",["^1J",[["^7X","~$p__65213"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",330,"^84",["^T",["^8L","^85"]],"^:",330,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^9[","^8F"],"^1L","^:G"]]]]]]],"~$process-send-queues!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",8,"^:",167,"^;",28,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^80",["^1J",[["~$p__65116"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",167,"^84",["^T",[null,"^85"]],"^:",167,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8[",["^91"],"^1L","^7X"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",466,"^9",8,"^:",466,"^;",25,"^7V",["^1J",["^7W",["^1J",[["~$remote-names",["^ ","^8:",["^9@","^9A"],"^1L","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",25,"^80",["^1J",[["^:N","~$p__65289"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",466,"^84",["^T",[null,"^85","^8O"]],"^:",466,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:N",["^ ","^8:",["^9@","^9A"],"^1L","^:O"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",34,"^9",8,"^:",34,"^;",24,"^7V",["^1J",["^7W",["^1J",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^:S"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",34,"^84","~$cljs.core/IVector","^:",34,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:S"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$build-env",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",219,"^9",8,"^:",219,"^;",17,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"~$addl"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]]],"^9M",["^ ","^83",false,"^9N",3,"^86",3,"^80",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^7V",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^9M",["^ ","^83",false,"^9N",3,"^86",3,"^80",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^7V",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]],"^81",null,"^9N",3,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9P",[["^ ","^9N",3,"^83",false,"^9Q",["^T",["^8L","^85","^8O"]]],["^ ","^9N",2,"^83",false,"^9Q",["^T",["^8L","^85","^8O"]]]],"^8",219,"^:",219,"^86",3,"^87",true,"^7V",["^1J",[["^7X",["^ ","^8E",["^:0"],"^1L","^89"],"^:W"],["^7X",["^ ","^8:",["^8W"],"^1L","^89"]]]]],"~$schedule-sends!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",283,"^9",8,"^:",283,"^;",23,"^7V",["^1J",["^7W",["^1J",[["^7X","^9L"],["^7X"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^7X","^9L"],["^7X"]]],"^81",null,"^9N",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9P",[["^ ","^9N",2,"^83",false,"^9Q",["^T",["^9R","^8O"]]],["^ ","^9N",1,"^83",false,"^9Q",["^T",["^9R","^8O"]]]],"^8",283,"^:",283,"^86",2,"^87",true,"^7V",["^1J",[["^7X","^9L"],["^7X"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",65,"^9",8,"^:",65,"^;",38,"^7V",["^1J",["^7W",["^1J",[["~$send-queue"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",38,"^80",["^1J",[["^;0"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",65,"^84",["^T",[null,"^8L","^85"]],"^:",65,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^;0"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"~$advance-actions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",292,"^9",8,"^:",292,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^9[","^8F"],"^1L","^:G"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","~$p__65191"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",292,"^84",["^T",["^8L","^85"]],"^:",292,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X",["^ ","^8E",["^9[","^8F"],"^1L","^:G"]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",53,"^9",8,"^:",53,"^;",21,"^7V",["^1J",["^7W",["^1J",[["^:6"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^80",["^1J",[["^:6"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",53,"^84",["^T",["^:9","^85"]],"^:",53,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^:6"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",251,"^9",8,"^:",251,"^;",29,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1L","^7X"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^80",["^1J",[["~$p__65173"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",251,"^84","^85","^:",251,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^;8"],"^1L","^7X"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue."],"~$combine-sends",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",93,"^9",8,"^:",93,"^;",21,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Z","^;0"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^80",["^1J",[["^7X","^7Z","^;0"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",93,"^84","^:4","^:",93,"^86",3,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^7Z","^;0"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$idle-node?",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",8,"^:",456,"^;",18,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Returns true if the given node has no active network operations."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^80",["^1J",[["~$p__65283"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",456,"^84","^:9","^:",456,"^86",1,"^87",true,"^7V",["^1J",["^7W",["^1J",[[["^ ","^8:",["^8A"],"^1L","^89"]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",583,"^9",8,"^:",583,"^;",27,"^7V",["^1J",["^7W",["^1J",[["^7X","^8T"]]]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^80",["^1J",[["^7X","^8T"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",583,"^84",["^T",[null,"^85"]],"^:",583,"^86",2,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^8T"]]]]]],"~$dispatch-result!",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",508,"^9",8,"^:",508,"^;",24,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^9@","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node"],"^1L","^8="],"^99"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^80",["^1J",[["^7X","^89","~$p__65301","^99"]]],"^81",null,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^8",508,"^84",["^T",["^8L","^85"]],"^:",508,"^86",4,"^87",true,"^7V",["^1J",["^7W",["^1J",[["^7X","^89",["^ ","^8:",["^8;","^9@","^;C"],"^1L","^8="],"^99"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^89",["^ ","^7U",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",193,"^9",8,"^:",193,"^;",15,"^7V",["^1J",["^7W",["^1J",[["~$tx"],["^;F","^:0"]]]]],"^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^;F"],["^;F","^:0"]]],"^7V",["^1J",[["^;F"],["^;F","^:0"]]],"^82",["^1J",[null,null]]]],"^U","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^9M",["^ ","^83",false,"^9N",2,"^86",2,"^80",["^1J",[["^;F"],["^;F","^:0"]]],"^7V",["^1J",[["^;F"],["^;F","^:0"]]],"^82",["^1J",[null,null]]],"^80",["^1J",[["^;F"],["^;F","^:0"]]],"^81",null,"^9N",2,"^82",["^1J",[null,null]],"^9",1,"^83",false,"^9P",[["^ ","^9N",1,"^83",false,"^9Q","^85"],["^ ","^9N",2,"^83",false,"^9Q","^:4"]],"^8",193,"^:",193,"^86",2,"^87",true,"^7V",["^1J",[["^;F"],["^;F","^:0"]]]]],"^1H",["^ ","^?","^@","^14","^15","^B","^B","^O","^O","^19","^O","~$m","^1;","^1>","^1?","^1;","^1;","~$s","^@","^R","^R","^15","^15","^1?","^1?","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1C",["^T",["~:remote","~:children","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","~:state-before","^8;","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:ref","~:done?","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:state","~:status-code","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^8A","~:com.fulcrologic.fulcro.application/state-atom","~:state-before-action","~:fatal","~:dispatch","~:transmit!","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:root","~:result","^;8","^9@","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","^9A","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^8W","~:parallel?","~:auto","~:p","~:new-elements","^;C","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^8<","^9?","~:message","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler"]],"~:order",["^<S","^;8","^8W","^<P","^<X","^<<","^;Z","^;J","^;U","^<V","^<E","^;O","^<Y","^;L","^;S","^;Q","^9?","^;P","^<Z","^<N","^<1","^<T","^;K","^<9","^;[","^<H","~:p","^<Q","^<7","^<F","^<W","^<J","^;C","^9A","^8<","^8;","^9@","^;N","^<?","^8A","^;V","^<2","^<0","^<A","^<5","^;Y","^<C","^<D","^<O","^;T","^;X","^;W","^<R","^<G","^<4","^<I","^;M","^<:","^<L","^<6","^<>","^<K","^<8","^<=","^<B","^;I","^<M","^<@","^;R","^<3","^<U","^<;"]],"^1N",["^ ","^1D",["^T",[]]],"^1O",["^ "],"^1P",["^17","^B","^12","^@","^10","^1:","^1A","^1<","^1;","^18","^O","^R","^13","^1?","^15"]],"^X","^V","~:ns-specs",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~$cljs.core/any?","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^;K",["^1J",["~$cljs.spec.alpha/coll-of","^<T","~:kind","~$cljs.core/vector?"]],"^8;",["^1J",["~$cljs.spec.alpha/map-of","~$cljs.core/keyword?","^=2"]],"^;N","^=4","^;O","~:edn-query-language.ast/node","^;P","~$cljs.core/fn?","^;T","~$cljs.core/boolean?","^;X","^=<","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element",["^1J",["~$cljs.spec.alpha/keys","~:req",["^9?","^;C","^9A","^8<","^8;","^9@"],"~:opt",["^<L"]]],"^8A",["^1J",["^=5","^==","^=6","^=7"]],"~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node",["^1J",["^=>","^=?",["^<E","^;N","^8W","^<?","^8A"],"^=@",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^=3"]]],"^9@","~$cljs.core/map?","^<?","^=7","^9A","~$cljs.core/set?","^<C",["^1J",["^=5","^=A","^=6","^=7"]],"^<D",["^1J",["^=5","^=A","^=6","^=7"]],"^<E","~$cljs.core/uuid?","^=B","^=4","^<J",["^1J",["^=8","~:com.fulcrologic.fulcro.application/remote-name","^;K"]],"^<L",["^1J",["^=8","^=9","^=2"]],"^<O","^=<","^8W",["^1J",["^=>","^=@",["^=1"],"~:opt-un",["^=1"]]],"^;C","^;O","^<T",["^1J",["^=>","^=?",["^<E","^9?","^;O","^<Z","^;P","^<V"],"^=@",["^8W"]]],"^<V","^=<","^8<","^=D","^9?","~$cljs.core/int?","^<X","^=<","^<Z","^=;"],"~:ns-speced-vars",[],"~:compiler-options",["^22",[["^=J","~:static-fns"],true,["^=J","~:elide-asserts"],false,["^=J","~:optimize-constants"],null,["^=J","^1U"],null,["^=J","~:external-config"],null,["^=J","~:tooling-config"],null,["^=J","~:emit-constants"],null,["^=J","~:load-tests"],null,["^=J","~:form-size-threshold"],null,["^=J","~:infer-externs"],true,["^=J","^1W"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^=J","~:fn-invoke-direct"],null,["^=J","~:source-map"],"/dev/null"]]]