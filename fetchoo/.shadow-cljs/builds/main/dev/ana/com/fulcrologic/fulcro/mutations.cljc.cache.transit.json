["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.mutations');\ngoog.require('cljs.core');\ngoog.require('com.fulcrologic.fulcro.components');\ngoog.require('com.fulcrologic.fulcro.dom.events');\ngoog.require('ghostwheel.core');\ngoog.require('edn_query_language.core');\ngoog.require('taoensso.timbre');\ngoog.require('taoensso.encore');\ngoog.require('cljs.spec.alpha');\ngoog.require('com.fulcrologic.fulcro.algorithms.data_targeting');\ngoog.require('com.fulcrologic.fulcro.algorithms.merge');\ngoog.require('com.fulcrologic.fulcro.algorithms.lookup');\ngoog.require('com.fulcrologic.fulcro.algorithms.tempid');\ngoog.require('clojure.string');\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"env\",\"com.fulcrologic.fulcro.mutations/env\",1382453742),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"state\",\"com.fulcrologic.fulcro.mutations/state\",1239206318),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"state\",\"com.fulcrologic.fulcro.mutations/state\",1239206318),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064)], null),null,null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__64817){\nreturn cljs.core.map_QMARK_(G__64817);\n}),(function (G__64817){\nreturn cljs.core.contains_QMARK_(G__64817,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\n}),(function (G__64817){\nreturn cljs.core.contains_QMARK_(G__64817,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\n})], null),(function (G__64817){\nreturn ((cljs.core.map_QMARK_(G__64817)) && (cljs.core.contains_QMARK_(G__64817,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099))) && (cljs.core.contains_QMARK_(G__64817,new cljs.core.Keyword(null,\"app\",\"app\",-560961707))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"state\",\"com.fulcrologic.fulcro.mutations/state\",1239206318),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064)], null),null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(null,\"app\",\"app\",-560961707)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"app\",\"app\",-560961707)))], null),null])));\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"returning\",\"com.fulcrologic.fulcro.mutations/returning\",-1484421614),new cljs.core.Symbol(\"com.fulcrologic.fulcro.components\",\"component-class?\",\"com.fulcrologic.fulcro.components/component-class?\",425799109,null),com.fulcrologic.fulcro.components.component_class_QMARK_);\n\n/**\n* @constructor\n * @implements {cljs.core.IFn}\n*/\ncom.fulcrologic.fulcro.mutations.Mutation = (function (sym){\nthis.sym = sym;\nthis.cljs$lang$protocol_mask$partition0$ = 1;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\ncom.fulcrologic.fulcro.mutations.Mutation.prototype.call = (function() {\nvar G__64961 = null;\nvar G__64961__1 = (function (self__){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nvar G__64828 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (this$.cljs$core$IFn$_invoke$arity$1 ? this$.cljs$core$IFn$_invoke$arity$1(G__64828) : this$.call(null,G__64828));\n});\nvar G__64961__2 = (function (self__,args){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn (new cljs.core.List(null,self__.sym,(new cljs.core.List(null,args,null,(1),null)),(2),null));\n});\nG__64961 = function(self__,args){\nswitch(arguments.length){\ncase 1:\nreturn G__64961__1.call(this,self__);\ncase 2:\nreturn G__64961__2.call(this,self__,args);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__64961.cljs$core$IFn$_invoke$arity$1 = G__64961__1;\nG__64961.cljs$core$IFn$_invoke$arity$2 = G__64961__2;\nreturn G__64961;\n})()\n;\n\ncom.fulcrologic.fulcro.mutations.Mutation.prototype.apply = (function (self__,args64824){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args64824)));\n});\n\ncom.fulcrologic.fulcro.mutations.Mutation.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar self__ = this;\nvar this$ = this;\nvar G__64829 = cljs.core.PersistentArrayMap.EMPTY;\nreturn (this$.cljs$core$IFn$_invoke$arity$1 ? this$.cljs$core$IFn$_invoke$arity$1(G__64829) : this$.call(null,G__64829));\n});\n\ncom.fulcrologic.fulcro.mutations.Mutation.prototype.cljs$core$IFn$_invoke$arity$1 = (function (args){\nvar self__ = this;\nvar this$ = this;\nreturn (new cljs.core.List(null,self__.sym,(new cljs.core.List(null,args,null,(1),null)),(2),null));\n});\n\ncom.fulcrologic.fulcro.mutations.Mutation.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"sym\",\"sym\",195671222,null)], null);\n});\n\ncom.fulcrologic.fulcro.mutations.Mutation.cljs$lang$type = true;\n\ncom.fulcrologic.fulcro.mutations.Mutation.cljs$lang$ctorStr = \"com.fulcrologic.fulcro.mutations/Mutation\";\n\ncom.fulcrologic.fulcro.mutations.Mutation.cljs$lang$ctorPrWriter = (function (this__4374__auto__,writer__4375__auto__,opt__4376__auto__){\nreturn cljs.core._write(writer__4375__auto__,\"com.fulcrologic.fulcro.mutations/Mutation\");\n});\n\n/**\n * Positional factory function for com.fulcrologic.fulcro.mutations/Mutation.\n */\ncom.fulcrologic.fulcro.mutations.__GT_Mutation = (function com$fulcrologic$fulcro$mutations$__GT_Mutation(sym){\nreturn (new com.fulcrologic.fulcro.mutations.Mutation(sym));\n});\n\n/**\n * A handler for mutation network results that will place an error, if detected in env, on the data at `ref`.\n *   Errors are placed at `k` (defaults to `::m/mutation-error`).\n * \n *   Typically used as part of the construction of a global default result handler for mutations.\n * \n *   Swaps against app state and returns `env`.\n */\ncom.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_ = (function com$fulcrologic$fulcro$mutations$update_errors_on_ui_component_BANG_(var_args){\nvar G__64836 = arguments.length;\nswitch (G__64836) {\ncase 1:\nreturn com.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn com.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"mutation-error\",\"com.fulcrologic.fulcro.mutations/mutation-error\",1667800978));\n});\n\ncom.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (env,k){\nvar map__64838 = env;\nvar map__64838__$1 = (((((!((map__64838 == null))))?(((((map__64838.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64838.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64838):map__64838);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64838__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64838__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64838__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64838__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nvar remote_error_QMARK_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nif(cljs.core.truth_(ref)){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state,((function (map__64838,map__64838__$1,app__$1,state,result,ref,remote_error_QMARK_){\nreturn (function (s){\nif(cljs.core.truth_((function (){var G__64843 = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(env);\nreturn (remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1 ? remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1(G__64843) : remote_error_QMARK_.call(null,G__64843));\n})())){\nreturn cljs.core.assoc_in(s,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ref,k),result);\n} else {\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(s,ref,cljs.core.dissoc,k);\n}\n});})(map__64838,map__64838__$1,app__$1,state,result,ref,remote_error_QMARK_))\n);\n} else {\n}\n\nreturn env;\n});\n\ncom.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$lang$maxFixedArity = 2;\n\n/**\n * When there is a `global-error-action` defined on the application, this function will checks for errors in the given\n *   mutation `env`. If any are found then it will call the global error action function with `env`.\n * \n *   Typically used as part of the construction of a global default result handler for mutations.\n * \n *   Always returns `env`.\n */\ncom.fulcrologic.fulcro.mutations.trigger_global_error_action_BANG_ = (function com$fulcrologic$fulcro$mutations$trigger_global_error_action_BANG_(env){\nvar map__64844 = env;\nvar map__64844__$1 = (((((!((map__64844 == null))))?(((((map__64844.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64844.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64844):map__64844);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64844__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64844__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar b2__45871__auto___64974 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-error-action\",\"global-error-action\",-924822372));\nif(cljs.core.truth_(b2__45871__auto___64974)){\nvar global_error_action_64975 = b2__45871__auto___64974;\nvar b2__45871__auto___64976__$1 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nif(cljs.core.truth_(b2__45871__auto___64976__$1)){\nvar remote_error_QMARK__64977 = b2__45871__auto___64976__$1;\nvar b2__45871__auto___64979__$2 = (remote_error_QMARK__64977.cljs$core$IFn$_invoke$arity$1 ? remote_error_QMARK__64977.cljs$core$IFn$_invoke$arity$1(result) : remote_error_QMARK__64977.call(null,result));\nif(cljs.core.truth_(b2__45871__auto___64979__$2)){\nvar __64980 = b2__45871__auto___64979__$2;\n(global_error_action_64975.cljs$core$IFn$_invoke$arity$1 ? global_error_action_64975.cljs$core$IFn$_invoke$arity$1(env) : global_error_action_64975.call(null,env));\n} else {\n}\n} else {\n}\n} else {\n}\n\nreturn env;\n});\n/**\n * Looks for network mutation result in `env`, checks it against the global definition of remote errors.  If there\n *   is an error and the mutation has defined an `error-action` section, then it calls it; otherwise, if the mutation\n *   has an `ok-action` it calls that.\n * \n *   Typically used as part of the construction of a global default result handler for mutations.\n * \n *   Returns env.\n */\ncom.fulcrologic.fulcro.mutations.dispatch_ok_error_actions_BANG_ = (function com$fulcrologic$fulcro$mutations$dispatch_ok_error_actions_BANG_(env){\nvar map__64849 = env;\nvar map__64849__$1 = (((((!((map__64849 == null))))?(((((map__64849.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64849.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64849):map__64849);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64849__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64849__$1,new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009));\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64849__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar map__64850 = dispatch;\nvar map__64850__$1 = (((((!((map__64850 == null))))?(((((map__64850.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64850.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64850):map__64850);\nvar ok_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64850__$1,new cljs.core.Keyword(null,\"ok-action\",\"ok-action\",1253795573));\nvar error_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64850__$1,new cljs.core.Keyword(null,\"error-action\",\"error-action\",-1147840498));\nvar remote_error_QMARK_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nif(cljs.core.truth_((remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1 ? remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1(result) : remote_error_QMARK_.call(null,result)))){\nif(cljs.core.truth_(error_action)){\n(error_action.cljs$core$IFn$_invoke$arity$1 ? error_action.cljs$core$IFn$_invoke$arity$1(env) : error_action.call(null,env));\n} else {\n}\n} else {\nif(cljs.core.truth_(ok_action)){\n(ok_action.cljs$core$IFn$_invoke$arity$1 ? ok_action.cljs$core$IFn$_invoke$arity$1(env) : ok_action.call(null,env));\n} else {\n}\n}\n\nreturn env;\n});\n/**\n * If there is a successful result from the remote mutation in `env` this function will merge it with app state\n *   (if there was a mutation join query), and will also rewrite any tempid remaps that were returned\n *   in all of the possible locations they might be in both app database and runtime application state (e.g. network queues).\n * \n *   Typically used as part of the construction of a global default result handler for mutations.\n * \n *   Returns env.\n */\ncom.fulcrologic.fulcro.mutations.integrate_mutation_return_value_BANG_ = (function com$fulcrologic$fulcro$mutations$integrate_mutation_return_value_BANG_(env){\nvar map__64858 = env;\nvar map__64858__$1 = (((((!((map__64858 == null))))?(((((map__64858.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64858.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64858):map__64858);\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64858__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64858__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64858__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nvar map__64859 = result;\nvar map__64859__$1 = (((((!((map__64859 == null))))?(((((map__64859.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64859.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64859):map__64859);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64859__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar transaction = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64859__$1,new cljs.core.Keyword(null,\"transaction\",\"transaction\",1777321997));\nvar remote_error_QMARK_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"remote-error?\",\"remote-error?\",-391127497));\nif(cljs.core.truth_((remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1 ? remote_error_QMARK_.cljs$core$IFn$_invoke$arity$1(result) : remote_error_QMARK_.call(null,result)))){\n} else {\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,com.fulcrologic.fulcro.algorithms.merge.merge_mutation_joins,transaction,body);\n\ncom.fulcrologic.fulcro.algorithms.tempid.resolve_tempids_BANG_(app__$1,body);\n}\n\nreturn env;\n});\n/**\n * The default Fulcro result action for `defmutation`, which can be overridden when you create your `app/fulcro-app`.\n * \n *   This function is the following composition of operations from this same namespace:\n * \n *   (-> env\n *  (update-errors-on-ui-component! ::mutation-error)\n *  (trigger-global-error-action!)\n *  (dispatch-ok-error-actions!)\n *  (integrate-mutation-return-value!))\n * \n *   This function returns `env`, so it can be used as part of the chain in your own definition of a \"default\"\n *   mutation result action.\n *   \n */\ncom.fulcrologic.fulcro.mutations.default_result_action_BANG_ = (function com$fulcrologic$fulcro$mutations$default_result_action_BANG_(env){\nreturn com.fulcrologic.fulcro.mutations.integrate_mutation_return_value_BANG_(com.fulcrologic.fulcro.mutations.dispatch_ok_error_actions_BANG_(com.fulcrologic.fulcro.mutations.trigger_global_error_action_BANG_(com.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.Keyword(\"com.fulcrologic.fulcro.mutations\",\"mutation-error\",\"com.fulcrologic.fulcro.mutations/mutation-error\",1667800978)))));\n});\ncom.fulcrologic.fulcro.mutations.mutation_declaration_QMARK_ = (function com$fulcrologic$fulcro$mutations$mutation_declaration_QMARK_(expr){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.mutations.Mutation,cljs.core.type(expr));\n});\n/**\n * Return the real symbol (for mutation dispatch) of `mutation`, which can be a symbol (this function is then identity)\n * or a mutation-declaration.\n */\ncom.fulcrologic.fulcro.mutations.mutation_symbol = (function com$fulcrologic$fulcro$mutations$mutation_symbol(mutation){\nif(com.fulcrologic.fulcro.mutations.mutation_declaration_QMARK_(mutation)){\nreturn cljs.core.first((mutation.cljs$core$IFn$_invoke$arity$0 ? mutation.cljs$core$IFn$_invoke$arity$0() : mutation.call(null)));\n} else {\nreturn mutation;\n}\n});\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.mutations !== 'undefined') && (typeof com.fulcrologic.fulcro.mutations.mutate !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.mutations.mutate = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__64869 = cljs.core.get_global_hierarchy;\nreturn (fexpr__64869.cljs$core$IFn$_invoke$arity$0 ? fexpr__64869.cljs$core$IFn$_invoke$arity$0() : fexpr__64869.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"com.fulcrologic.fulcro.mutations\",\"mutate\"),((function (method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__){\nreturn (function (env){\nreturn new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(env));\n});})(method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__,hierarchy__4617__auto__))\n,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\n/**\n * \n *   mutation: A convenience helper, generally used 'bit twiddle' the data on a particular database table (using the component's ident).\n *   Specifically, merge the given `params` into the state of the database object at the component's ident.\n *   In general, it is recommended this be used for ui-only properties that have no real use outside of the component.\n *   \n */\ncom.fulcrologic.fulcro.mutations.set_props = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"set-props\",\"com.fulcrologic.fulcro.mutations/set-props\",1644200406,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"set-props\",\"com.fulcrologic.fulcro.mutations/set-props\",1644200406,null),(function (fulcro_mutation_env_symbol){\nvar params = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (params){\nreturn (function com$fulcrologic$fulcro$mutations$action(p__64873){\nvar map__64874 = p__64873;\nvar map__64874__$1 = (((((!((map__64874 == null))))?(((((map__64874.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64874.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64874):map__64874);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64874__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64874__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nif((ref == null)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.mutations\",null,166,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__64874,map__64874__$1,state,ref,params){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"ui/set-props requires component to have an ident.\"], null);\n});})(map__64874,map__64874__$1,state,ref,params))\n,null)),null,43818494);\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.update_in,ref,((function (map__64874,map__64874__$1,state,ref,params){\nreturn (function (st){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([st,params], 0));\n});})(map__64874,map__64874__$1,state,ref,params))\n);\n\nreturn null;\n});})(params))\n,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),((function (params){\nreturn (function (env){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar default_action = temp__5753__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n});})(params))\n], null);\n}));\n/**\n * mutation: A helper method that toggles the true/false nature of a component's state by ident.\n *    Use for local UI data only. Use your own mutations for things that have a good abstract meaning. \n */\ncom.fulcrologic.fulcro.mutations.toggle = com.fulcrologic.fulcro.mutations.__GT_Mutation(new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"toggle\",\"com.fulcrologic.fulcro.mutations/toggle\",-299192620,null));\n\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"toggle\",\"com.fulcrologic.fulcro.mutations/toggle\",-299192620,null),(function (fulcro_mutation_env_symbol){\nvar map__64879 = new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(fulcro_mutation_env_symbol));\nvar map__64879__$1 = (((((!((map__64879 == null))))?(((((map__64879.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64879.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64879):map__64879);\nvar field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64879__$1,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500));\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__64879,map__64879__$1,field){\nreturn (function com$fulcrologic$fulcro$mutations$action(p__64884){\nvar map__64885 = p__64884;\nvar map__64885__$1 = (((((!((map__64885 == null))))?(((((map__64885.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64885.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64885):map__64885);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64885__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64885__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\nif((ref == null)){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.mutations\",null,175,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__64885,map__64885__$1,state,ref,map__64879,map__64879__$1,field){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"ui/toggle requires component to have an ident.\"], null);\n});})(map__64885,map__64885__$1,state,ref,map__64879,map__64879__$1,field))\n,null)),null,-1308230981);\n} else {\n}\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.update_in,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ref,field),cljs.core.not);\n\nreturn null;\n});})(map__64879,map__64879__$1,field))\n,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),((function (map__64879,map__64879__$1,field){\nreturn (function (env){\nvar temp__5753__auto__ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(new cljs.core.Keyword(null,\"app\",\"app\",-560961707).cljs$core$IFn$_invoke$arity$1(env),new cljs.core.Keyword(null,\"default-result-action!\",\"default-result-action!\",-622954374));\nif(cljs.core.truth_(temp__5753__auto__)){\nvar default_action = temp__5753__auto__;\nreturn (default_action.cljs$core$IFn$_invoke$arity$1 ? default_action.cljs$core$IFn$_invoke$arity$1(env) : default_action.call(null,env));\n} else {\nreturn null;\n}\n});})(map__64879,map__64879__$1,field))\n], null);\n}));\ncom.fulcrologic.fulcro.mutations.mutate.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (p__64890){\nvar map__64891 = p__64890;\nvar map__64891__$1 = (((((!((map__64891 == null))))?(((((map__64891.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64891.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64891):map__64891);\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64891__$1,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068));\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.mutations\",null,179,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (map__64891,map__64891__$1,ast){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Unknown app state mutation. Have you required the file with your mutations?\",new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(ast)], null);\n});})(map__64891,map__64891__$1,ast))\n,null)),null,-604173580);\n}));\n/**\n * Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n *   UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated.\n */\ncom.fulcrologic.fulcro.mutations.toggle_BANG_ = (function com$fulcrologic$fulcro$mutations$toggle_BANG_(comp,field){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(comp,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"toggle\",\"com.fulcrologic.fulcro.mutations/toggle\",-299192620,null),null,(1),null)),(new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),null,(1),null)),(new cljs.core.List(null,field,null,(1),null)))))),null,(1),null))))),null,(1),null)))))),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true], null));\n});\n/**\n * Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n *   UI-related data (e.g. form inputs that are used by the UI, and not persisted data). Changes made via these\n *   helpers are compressed in the history.\n */\ncom.fulcrologic.fulcro.mutations.set_value_BANG_ = (function com$fulcrologic$fulcro$mutations$set_value_BANG_(component,field,value){\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component,cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,new cljs.core.Symbol(\"com.fulcrologic.fulcro.mutations\",\"set-props\",\"com.fulcrologic.fulcro.mutations/set-props\",1644200406,null),null,(1),null)),(new cljs.core.List(null,cljs.core.PersistentArrayMap.createAsIfByAssoc([field,value]),null,(1),null))))),null,(1),null)))))),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true], null));\n});\n/**\n * Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n *   data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n */\ncom.fulcrologic.fulcro.mutations.ensure_integer = (function com$fulcrologic$fulcro$mutations$ensure_integer(v){\nvar rv = parseInt(v);\nif(cljs.core.truth_(isNaN(rv))){\nreturn (0);\n} else {\nreturn rv;\n}\n});\n/**\n * Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n * \n * It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n * and write clear top-level transactions for anything else. Calls to this are compressed in history.\n */\ncom.fulcrologic.fulcro.mutations.set_integer_BANG_ = (function com$fulcrologic$fulcro$mutations$set_integer_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65020 = arguments.length;\nvar i__4731__auto___65021 = (0);\nwhile(true){\nif((i__4731__auto___65021 < len__4730__auto___65020)){\nargs__4736__auto__.push((arguments[i__4731__auto___65021]));\n\nvar G__65022 = (i__4731__auto___65021 + (1));\ni__4731__auto___65021 = G__65022;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.mutations.set_integer_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.mutations.set_integer_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (component,field,p__64902){\nvar map__64903 = p__64902;\nvar map__64903__$1 = (((((!((map__64903 == null))))?(((((map__64903.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64903.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64903):map__64903);\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64903__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64903__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = event;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn value;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var and__4120__auto____$1 = event;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn value;\n} else {\nreturn and__4120__auto____$1;\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})())){\n} else {\nthrow (new Error([\"Assert failed: \",\"Supply either :event or :value\",\"\\n\",\"(and (or event value) (not (and event value)))\"].join('')));\n}\n\nvar value__$1 = com.fulcrologic.fulcro.mutations.ensure_integer((cljs.core.truth_(event)?com.fulcrologic.fulcro.dom.events.target_value(event):value));\nreturn com.fulcrologic.fulcro.mutations.set_value_BANG_(component,field,value__$1);\n});\n\ncom.fulcrologic.fulcro.mutations.set_integer_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.mutations.set_integer_BANG_.cljs$lang$applyTo = (function (seq64899){\nvar G__64900 = cljs.core.first(seq64899);\nvar seq64899__$1 = cljs.core.next(seq64899);\nvar G__64901 = cljs.core.first(seq64899__$1);\nvar seq64899__$2 = cljs.core.next(seq64899__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64900,G__64901,seq64899__$2);\n});\n\ncom.fulcrologic.fulcro.mutations.ensure_double = (function com$fulcrologic$fulcro$mutations$ensure_double(v){\nvar rv = parseFloat(v);\nif(cljs.core.truth_(isNaN(rv))){\nreturn (0);\n} else {\nreturn rv;\n}\n});\n/**\n * Set the given double on the given `field` of a `component`. Allows same parameters as `set-string!`.\n * \n * It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n * and write clear top-level transactions for anything else. Calls to this are compressed in history.\n */\ncom.fulcrologic.fulcro.mutations.set_double_BANG_ = (function com$fulcrologic$fulcro$mutations$set_double_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65032 = arguments.length;\nvar i__4731__auto___65033 = (0);\nwhile(true){\nif((i__4731__auto___65033 < len__4730__auto___65032)){\nargs__4736__auto__.push((arguments[i__4731__auto___65033]));\n\nvar G__65034 = (i__4731__auto___65033 + (1));\ni__4731__auto___65033 = G__65034;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.mutations.set_double_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.mutations.set_double_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (component,field,p__64917){\nvar map__64918 = p__64917;\nvar map__64918__$1 = (((((!((map__64918 == null))))?(((((map__64918.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64918.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64918):map__64918);\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64918__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64918__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = event;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn value;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var and__4120__auto____$1 = event;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn value;\n} else {\nreturn and__4120__auto____$1;\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})())){\n} else {\nthrow (new Error([\"Assert failed: \",\"Supply either :event or :value\",\"\\n\",\"(and (or event value) (not (and event value)))\"].join('')));\n}\n\nvar value__$1 = com.fulcrologic.fulcro.mutations.ensure_double((cljs.core.truth_(event)?com.fulcrologic.fulcro.dom.events.target_value(event):value));\nreturn com.fulcrologic.fulcro.mutations.set_value_BANG_(component,field,value__$1);\n});\n\ncom.fulcrologic.fulcro.mutations.set_double_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.mutations.set_double_BANG_.cljs$lang$applyTo = (function (seq64913){\nvar G__64914 = cljs.core.first(seq64913);\nvar seq64913__$1 = cljs.core.next(seq64913);\nvar G__64915 = cljs.core.first(seq64913__$1);\nvar seq64913__$2 = cljs.core.next(seq64913__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64914,G__64915,seq64913__$2);\n});\n\n/**\n * Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n *   can be auto-extracted from a UI event using the named parameter `:event`\n * \n *   Examples\n * \n *   ```\n *   (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n *   (set-string! this :ui/name :event evt) ; extract from UI event target value\n *   ```\n * \n *   It is recommended you use this function only on UI-related\n *   data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n *   Calls to this are compressed in history.\n */\ncom.fulcrologic.fulcro.mutations.set_string_BANG_ = (function com$fulcrologic$fulcro$mutations$set_string_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___65042 = arguments.length;\nvar i__4731__auto___65043 = (0);\nwhile(true){\nif((i__4731__auto___65043 < len__4730__auto___65042)){\nargs__4736__auto__.push((arguments[i__4731__auto___65043]));\n\nvar G__65044 = (i__4731__auto___65043 + (1));\ni__4731__auto___65043 = G__65044;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (component,field,p__64929){\nvar map__64930 = p__64929;\nvar map__64930__$1 = (((((!((map__64930 == null))))?(((((map__64930.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64930.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64930):map__64930);\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64930__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64930__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nif(cljs.core.truth_((function (){var and__4120__auto__ = (function (){var or__4131__auto__ = event;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn value;\n}\n})();\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not((function (){var and__4120__auto____$1 = event;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn value;\n} else {\nreturn and__4120__auto____$1;\n}\n})());\n} else {\nreturn and__4120__auto__;\n}\n})())){\n} else {\nthrow (new Error([\"Assert failed: \",\"Supply either :event or :value\",\"\\n\",\"(and (or event value) (not (and event value)))\"].join('')));\n}\n\nvar value__$1 = (cljs.core.truth_(event)?com.fulcrologic.fulcro.dom.events.target_value(event):value);\nreturn com.fulcrologic.fulcro.mutations.set_value_BANG_(component,field,value__$1);\n});\n\ncom.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$lang$applyTo = (function (seq64925){\nvar G__64926 = cljs.core.first(seq64925);\nvar seq64925__$1 = cljs.core.next(seq64925);\nvar G__64927 = cljs.core.first(seq64925__$1);\nvar seq64925__$2 = cljs.core.next(seq64925__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64926,G__64927,seq64925__$2);\n});\n\n/**\n * Indicate the the remote operation will return a value of the given component type.\n * \n *   `env` - The env of the mutation\n *   `class` - A component class that represents the return type.  You may supply a fully-qualified symbol instead of the\n *   actual class, and this method will look up the class for you (useful to avoid circular references).\n * \n *   Returns an update `env`, and is a valid return value from mutation remote sections.\n */\ncom.fulcrologic.fulcro.mutations.returning = (function com$fulcrologic$fulcro$mutations$returning(env,class$){\nvar class$__$1 = (((((class$ instanceof cljs.core.Keyword)) || ((class$ instanceof cljs.core.Symbol))))?com.fulcrologic.fulcro.components.registry_key__GT_class(class$):class$);\nvar map__64939 = env;\nvar map__64939__$1 = (((((!((map__64939 == null))))?(((((map__64939.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64939.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64939):map__64939);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64939__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64939__$1,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068));\nvar map__64940 = ast;\nvar map__64940__$1 = (((((!((map__64940 == null))))?(((((map__64940.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64940.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64940):map__64940);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64940__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64940__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64940__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar updated_query = (function (){var G__64943 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(class$__$1,cljs.core.deref(state));\nif(cljs.core.truth_(query)){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(G__64943,((function (G__64943,map__64939,map__64939__$1,state,ast,map__64940,map__64940__$1,key,params,query,class$__$1){\nreturn (function (p1__64935_SHARP_){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.meta(query),p1__64935_SHARP_], 0));\n});})(G__64943,map__64939,map__64939__$1,state,ast,map__64940,map__64940__$1,key,params,query,class$__$1))\n);\n} else {\nreturn G__64943;\n}\n})();\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),edn_query_language.core.query__GT_ast1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([(new cljs.core.List(null,key,(new cljs.core.List(null,params,null,(1),null)),(2),null)),updated_query])], null)));\n});\n/**\n * Set's a target for the return value from the mutation to be merged into. This can be combined with returning to define\n *   a path to insert the new entry.\n * \n *   `env` - The mutation env (you can thread together `returning` and `with-target`)\n *   `target` - A vector path, or any special target defined in `data-targeting` such as `append-to`.\n * \n *   Returns an updated env (which is a valid return value from remote sections of mutations).\n *   \n */\ncom.fulcrologic.fulcro.mutations.with_target = (function com$fulcrologic$fulcro$mutations$with_target(p__64947,target){\nvar map__64948 = p__64947;\nvar map__64948__$1 = (((((!((map__64948 == null))))?(((((map__64948.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64948.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64948):map__64948);\nvar env = map__64948__$1;\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64948__$1,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068));\nvar map__64950 = ast;\nvar map__64950__$1 = (((((!((map__64950 == null))))?(((((map__64950.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__64950.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__64950):map__64950);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64950__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64950__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64950__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar targeted_query = (cljs.core.truth_(query)?cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(query,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.data-targeting\",\"target\",\"com.fulcrologic.fulcro.algorithms.data-targeting/target\",-1540673140),target):cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"*\",\"*\",345799209,null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.data-targeting\",\"target\",\"com.fulcrologic.fulcro.algorithms.data-targeting/target\",-1540673140),target], null)));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),edn_query_language.core.query__GT_ast1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([(new cljs.core.List(null,key,(new cljs.core.List(null,params,null,(1),null)),(2),null)),targeted_query])], null)));\n});\n/**\n * Modify an AST containing a single mutation, changing it's parameters to those given as an argument. Overwrites\n * any existing params of the mutation.\n * \n * `env` - the mutation environment\n * `params` - A new map to use as the mutations parameters\n * \n * Returns an updated `env`, which can be used as the return value from a remote section of a mutation.\n */\ncom.fulcrologic.fulcro.mutations.with_params = (function com$fulcrologic$fulcro$mutations$with_params(env,params){\nreturn cljs.core.assoc_in(env,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),params);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/fulcro/mutations.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",37],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$>defn","~$ghostwheel.core"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$declare-mutation",["^ ","~:arglists",["~#list",[["~$name","~$target-symbol"]]],"~:doc","Define a quote-free interface for using the given `target-symbol` in mutations.\n     The declared mutation can be used in lieu of the true mutation symbol\n     as a way to prevent circular references while also allowing the shorthand of ns aliasing.\n\n     In IntelliJ, use Resolve-as `def` to get proper IDE integration.","^7",148,"^8",4,"^6","com/fulcrologic/fulcro/mutations.cljc","~:name","~$com.fulcrologic.fulcro.mutations/declare-mutation","~:ns","~$com.fulcrologic.fulcro.mutations","~:macro",true],"~$defmutation",["^ ","^W","Define a Fulcro mutation.\n\n     The given symbol will be prefixed with the namespace of the current namespace, and if you use a simple symbol it\n     will also be def'd into a name that when used as a function will simply resolve to that function call as data:\n\n     ```\n     (defmutation f [p]\n       ...)\n\n     (f {:x 1}) => `(f {:x 1})\n     ```\n\n     This allows mutations to behave as data in transactions without needing quoting.\n\n     Mutations can have any number of handlers. By convention things that contain logic use names that end\n     in `action`.  The remote behavior of a mutation is defined by naming a handler after the remote.\n\n     ```\n     (defmutation boo\n       \"docstring\" [params-map]\n       (action [env] ...)\n       (my-remote [env] ...)\n       (other-remote [env] ...)\n       (remote [env] ...))\n     ```\n\n     NOTE: Every handler in the defmutation is turned into a lambda, and that lambda will be available in `env` under\n     the key `:handlers`. Thus actions and remotes can cross-call (TODO: Make the macro rewrite cross calls so they\n     can look like fn calls?):\n\n     ```\n     (defmutation boo\n       \"docstring\" [params-map]\n       (action [env] ...)\n       (ok-action [env] ...)\n       (result-action [env] ((-> env :handlers :ok-action) env)))\n     ```\n\n     This macro normally adds a `:result-action` handler that does normal Fulcro mutation remote result logic unless\n     you supply your own.\n\n     Remotes in Fulcro 3 are also lambdas, and are called with an `env` that contains the state as it exists *after*\n     the `:action` has run in `state`, but also include the 'before action state' as a map in `:state-before-action`.\n\n     IMPORTANT: You can fully-qualify a mutation's symbol when declaring it to force it into a custom namespace,\n     but this is highly discouraged and will require quoting when used in a mutation.\n     ","^S",["^T",[["~$&","~$args"]]],"^7",352,"^8",4,"^6","com/fulcrologic/fulcro/mutations.cljc","^X","~$com.fulcrologic.fulcro.mutations/defmutation","^Z","^[","^10",true]],"^X","^[","~:op","^Z","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^19","^>","^?","~$log","~$taoensso.timbre","~$targeting","~$com.fulcrologic.fulcro.algorithms.data-targeting","~$com.fulcrologic.fulcro.dom.events","^1>","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^19","^A","^A","~$goog","^1B","^1=","^1=","~$com.fulcrologic.fulcro.algorithms.tempid","^1C","~$enc","~$taoensso.encore","~$evt","^1>","~$s","^?","^N","^N","^18","^18","~$merge","~$com.fulcrologic.fulcro.algorithms.merge","^1@","^1@","^1;","^1;","~$str","~$clojure.string","^1H","^1H","^1J","^1J","^1E","^1E","^?","^?","~$tempid","^1C"],"~:seen",["^P",["~:require","~:require-macros"]],"~:uses",["^ ","^M","^N","~$=>","^N"],"^1N",["^ ","^>","^?","^1:","^1;","^1?","^1@","^A","^A","^1D","^1E","^[","^[","~$s","^?","^N","^N","^1@","^1@","^1;","^1;","^1E","^1E","^?","^?"],"~:form",["^T",["~$ns","^[",["^T",["^1N","^["]],["^T",["^1M",["^1@","~:as","^1?"],["^1>","^1S","^1F"],["^N","~:refer",["^M","^1P"]],["^19","^1S","^1A"],["^1;","^1S","^1:"],["^1E","^1S","^1D"],["^>","^1S","~$s"],["^1=","^1S","^1<"],["^1H","^1S","^1G"],["^18","^1S","^17"],["^1C","^1S","^1K"],["^1J","^1S","^1I"]]]]],"~:flags",["^ ","^1N",["^P",[]],"^1M",["^P",[]]],"~:js-deps",["^ "],"~:deps",["^1B","^A","^1@","^1>","^N","^19","^1;","^1E","^?","^1=","^1H","^18","^1C","^1J"]],"^Z","^[","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/mutations.cljc"],"~:compiled-at",1630228424975,"~:resource-name","com/fulcrologic/fulcro/mutations.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.mutations\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.mutations))\n  (:require\n    #?(:clj [cljs.analyzer :as ana])\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [ghostwheel.core :refer [>defn =>]]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [taoensso.encore :as enc]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [clojure.string :as str])\n  #?(:clj\n     (:import (clojure.lang IFn))))\n\n(s/def ::env (s/keys :req-un [::state :com.fulcrologic.fulcro.application/app]))\n(s/def ::returning comp/component-class?)\n\n#?(:clj\n   (deftype Mutation [sym]\n     IFn\n     (invoke [this]\n       (this {}))\n     (invoke [this args]\n       (list sym args)))\n   :cljs\n   (deftype Mutation [sym]\n     IFn\n     (-invoke [this]\n       (this {}))\n     (-invoke [this args]\n       (list sym args))))\n\n(>defn update-errors-on-ui-component!\n  \"A handler for mutation network results that will place an error, if detected in env, on the data at `ref`.\n  Errors are placed at `k` (defaults to `::m/mutation-error`).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Swaps against app state and returns `env`.\"\n  ([env]\n   [::env => ::env]\n   (update-errors-on-ui-component! env ::mutation-error))\n  ([env k]\n   [::env keyword? => ::env]\n   (let [{:keys [app state result ref]} env\n         remote-error? (ah/app-algorithm app :remote-error?)]\n     (when ref\n       (swap! state (fn [s]\n                      (if (remote-error? (:result env))\n                        (assoc-in s (conj ref k) result)\n                        (update-in s ref dissoc k)))))\n     env)))\n\n(>defn trigger-global-error-action!\n  \"When there is a `global-error-action` defined on the application, this function will checks for errors in the given\n  mutation `env`. If any are found then it will call the global error action function with `env`.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Always returns `env`.\"\n  [env]\n  [::env => ::env]\n  (let [{:keys [app result]} env]\n    (enc/when-let [global-error-action (ah/app-algorithm app :global-error-action)\n                   remote-error? (ah/app-algorithm app :remote-error?)\n                   _ (remote-error? result)]\n      (global-error-action env))\n    env))\n\n(>defn dispatch-ok-error-actions!\n  \"Looks for network mutation result in `env`, checks it against the global definition of remote errors.  If there\n  is an error and the mutation has defined an `error-action` section, then it calls it; otherwise, if the mutation\n  has an `ok-action` it calls that.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env.\"\n  [env]\n  [::env => ::env]\n  (let [{:keys [app dispatch result]} env\n        {:keys [ok-action error-action]} dispatch\n        remote-error? (ah/app-algorithm app :remote-error?)]\n    (if (remote-error? result)\n      (when error-action\n        (error-action env))\n      (when ok-action\n        (ok-action env)))\n    env))\n\n(>defn integrate-mutation-return-value!\n  \"If there is a successful result from the remote mutation in `env` this function will merge it with app state\n  (if there was a mutation join query), and will also rewrite any tempid remaps that were returned\n  in all of the possible locations they might be in both app database and runtime application state (e.g. network queues).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env.\"\n  [env]\n  [::env => ::env]\n  (let [{:keys [app state result]} env\n        {:keys [body transaction]} result\n        remote-error? (ah/app-algorithm app :remote-error?)]\n    (when-not (remote-error? result)\n      (swap! state merge/merge-mutation-joins transaction body)\n      (tempid/resolve-tempids! app body))\n    env))\n\n(>defn default-result-action!\n  \"The default Fulcro result action for `defmutation`, which can be overridden when you create your `app/fulcro-app`.\n\n  This function is the following composition of operations from this same namespace:\n\n  (-> env\n    (update-errors-on-ui-component! ::mutation-error)\n    (trigger-global-error-action!)\n    (dispatch-ok-error-actions!)\n    (integrate-mutation-return-value!))\n\n  This function returns `env`, so it can be used as part of the chain in your own definition of a \\\"default\\\"\n  mutation result action.\n  \"\n  [env]\n  [::env => ::env]\n  (-> env\n    (update-errors-on-ui-component! ::mutation-error)\n    (trigger-global-error-action!)\n    (dispatch-ok-error-actions!)\n    (integrate-mutation-return-value!)))\n\n(defn mutation-declaration? [expr] (= Mutation (type expr)))\n\n(defn mutation-symbol\n  \"Return the real symbol (for mutation dispatch) of `mutation`, which can be a symbol (this function is then identity)\n   or a mutation-declaration.\"\n  [mutation]\n  (if (mutation-declaration? mutation)\n    (first (mutation))\n    mutation))\n\n(defmulti mutate (fn [env] (-> env :ast :dispatch-key)))\n\n#?(:clj\n   (defmacro declare-mutation\n     \"Define a quote-free interface for using the given `target-symbol` in mutations.\n     The declared mutation can be used in lieu of the true mutation symbol\n     as a way to prevent circular references while also allowing the shorthand of ns aliasing.\n\n     In IntelliJ, use Resolve-as `def` to get proper IDE integration.\"\n     ([name target-symbol]\n      `(def ~name (->Mutation '~target-symbol)))))\n\n#?(:cljs\n   (com.fulcrologic.fulcro.mutations/defmutation set-props\n     \"\n     mutation: A convenience helper, generally used 'bit twiddle' the data on a particular database table (using the component's ident).\n     Specifically, merge the given `params` into the state of the database object at the component's ident.\n     In general, it is recommended this be used for ui-only properties that have no real use outside of the component.\n     \"\n     [params]\n     (action [{:keys [state ref]}]\n       (when (nil? ref) (log/error \"ui/set-props requires component to have an ident.\"))\n       (swap! state update-in ref (fn [st] (merge st params))))))\n\n#?(:cljs\n   (com.fulcrologic.fulcro.mutations/defmutation toggle\n     \"mutation: A helper method that toggles the true/false nature of a component's state by ident.\n      Use for local UI data only. Use your own mutations for things that have a good abstract meaning. \"\n     [{:keys [field]}]\n     (action [{:keys [state ref]}]\n       (when (nil? ref) (log/error \"ui/toggle requires component to have an ident.\"))\n       (swap! state update-in (conj ref field) not))))\n\n(defmethod mutate :default [{:keys [ast]}]\n  (log/error \"Unknown app state mutation. Have you required the file with your mutations?\" (:key ast)))\n\n(defn toggle!\n  \"Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated.\"\n  [comp field]\n  (comp/transact! comp `[(toggle {:field ~field})] {:compressible? true}))\n\n(defn set-value!\n  \"Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data). Changes made via these\n  helpers are compressed in the history.\"\n  [component field value]\n  (comp/transact! component `[(set-props ~{field value})] {:compressible? true}))\n\n#?(:cljs\n   (defn- ensure-integer\n     \"Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n     data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\"\n     [v]\n     (let [rv (js/parseInt v)]\n       (if (js/isNaN rv) 0 rv)))\n   :clj\n   (defn- ensure-integer [v] (Integer/parseInt v)))\n\n(defn set-integer!\n  \"Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history.\"\n  [component field & {:keys [event value]}]\n  (assert (and (or event value) (not (and event value))) \"Supply either :event or :value\")\n  (let [value (ensure-integer (if event (evt/target-value event) value))]\n    (set-value! component field value)))\n\n#?(:cljs\n   (defn- ensure-double [v]\n     (let [rv (js/parseFloat v)]\n       (if (js/isNaN rv) 0 rv)))\n   :clj\n   (defn- ensure-double [v] (Double/parseDouble v)))\n\n(defn set-double!\n  \"Set the given double on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history.\"\n  [component field & {:keys [event value]}]\n  (assert (and (or event value) (not (and event value))) \"Supply either :event or :value\")\n  (let [value (ensure-double (if event (evt/target-value event) value))]\n    (set-value! component field value)))\n\n(defn set-string!\n  \"Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \\\"Hello\\\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n  Calls to this are compressed in history.\"\n  [component field & {:keys [event value]}]\n  (assert (and (or event value) (not (and event value))) \"Supply either :event or :value\")\n  (let [value (if event (evt/target-value event) value)]\n    (set-value! component field value)))\n\n(defn returning\n  \"Indicate the the remote operation will return a value of the given component type.\n\n  `env` - The env of the mutation\n  `class` - A component class that represents the return type.  You may supply a fully-qualified symbol instead of the\n  actual class, and this method will look up the class for you (useful to avoid circular references).\n\n  Returns an update `env`, and is a valid return value from mutation remote sections.\"\n  [env class]\n  (let [class (if (or (keyword? class) (symbol? class))\n                (comp/registry-key->class class)\n                class)]\n    (let [{:keys [state ast]} env\n          {:keys [key params query]} ast]\n      (let [updated-query (cond-> (comp/get-query class @state)\n                            query (vary-meta #(merge (meta query) %)))]\n        (assoc env :ast (eql/query->ast1 [{(list key params) updated-query}]))))))\n\n(defn with-target\n  \"Set's a target for the return value from the mutation to be merged into. This can be combined with returning to define\n  a path to insert the new entry.\n\n  `env` - The mutation env (you can thread together `returning` and `with-target`)\n  `target` - A vector path, or any special target defined in `data-targeting` such as `append-to`.\n\n  Returns an updated env (which is a valid return value from remote sections of mutations).\n  \"\n  [{:keys [ast] :as env} target]\n  (let [{:keys [key params query]} ast\n        targeted-query (if query\n                         (vary-meta query assoc ::targeting/target target)\n                         (with-meta '[*] {::targeting/target target}))]\n    (assoc env :ast (eql/query->ast1 [{(list key params) targeted-query}]))))\n\n(defn with-params\n  \"Modify an AST containing a single mutation, changing it's parameters to those given as an argument. Overwrites\n   any existing params of the mutation.\n\n   `env` - the mutation environment\n   `params` - A new map to use as the mutations parameters\n\n   Returns an updated `env`, which can be used as the return value from a remote section of a mutation.\"\n  [env params]\n  (assoc-in env [:ast :params] params))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; DEFMUTATION MACRO: This code could live in another ns, but then hot code reload won't work right on the macro itself.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (s/def ::handler (s/cat\n                      :handler-name symbol?\n                      :handler-args (fn [a] (and (vector? a) (= 1 (count a))))\n                      :handler-body (s/+ (constantly true)))))\n\n#?(:clj\n   (s/def ::mutation-args (s/cat\n                            :sym symbol?\n                            :doc (s/? string?)\n                            :arglist (fn [a] (and (vector? a) (= 1 (count a))))\n                            :sections (s/* (s/or :handler ::handler)))))\n\n#?(:clj\n   (defn defmutation* [macro-env args]\n     (let [conform!       (fn [element spec value]\n                            (when-not (s/valid? spec value)\n                              (throw (ana/error macro-env (str \"Syntax error in \" element \": \" (s/explain-str spec value)))))\n                            (s/conform spec value))\n           {:keys [sym doc arglist sections]} (conform! \"defmutation\" ::mutation-args args)\n           fqsym          (if (namespace sym)\n                            sym\n                            (symbol (name (ns-name *ns*)) (name sym)))\n           handlers       (reduce (fn [acc [_ {:keys [handler-name handler-args handler-body]}]]\n                                    (let [action? (str/ends-with? (str handler-name) \"action\")]\n                                      (into acc\n                                        (if action?\n                                          [(keyword (name handler-name)) `(fn ~handler-name ~handler-args\n                                                                            ~@handler-body\n                                                                            nil)]\n                                          [(keyword (name handler-name)) `(fn ~handler-name ~handler-args ~@handler-body)]))))\n                            []\n                            sections)\n           ks             (into #{} (filter keyword?) handlers)\n           result-action? (contains? ks :result-action)\n           env-symbol     'fulcro-mutation-env-symbol\n           method-map     (if result-action?\n                            `{~(first handlers) ~@(rest handlers)}\n                            `{~(first handlers) ~@(rest handlers)\n                              :result-action    (fn [~'env]\n                                                  (when-let [~'default-action (ah/app-algorithm (:app ~'env) :default-result-action!)]\n                                                    (~'default-action ~'env)))})\n           doc            (or doc \"\")\n           multimethod    `(defmethod com.fulcrologic.fulcro.mutations/mutate '~fqsym [~env-symbol]\n                             (let [~(first arglist) (-> ~env-symbol :ast :params)]\n                               ~method-map))]\n       (if (= fqsym sym)\n         multimethod\n         `(do\n            (def ~(with-meta sym {:doc doc}) (com.fulcrologic.fulcro.mutations/->Mutation '~fqsym))\n            ~multimethod)))))\n\n#?(:clj\n   (defmacro\n     ^{:doc\n       \"Define a Fulcro mutation.\n\n     The given symbol will be prefixed with the namespace of the current namespace, and if you use a simple symbol it\n     will also be def'd into a name that when used as a function will simply resolve to that function call as data:\n\n     ```\n     (defmutation f [p]\n       ...)\n\n     (f {:x 1}) => `(f {:x 1})\n     ```\n\n     This allows mutations to behave as data in transactions without needing quoting.\n\n     Mutations can have any number of handlers. By convention things that contain logic use names that end\n     in `action`.  The remote behavior of a mutation is defined by naming a handler after the remote.\n\n     ```\n     (defmutation boo\n       \\\"docstring\\\" [params-map]\n       (action [env] ...)\n       (my-remote [env] ...)\n       (other-remote [env] ...)\n       (remote [env] ...))\n     ```\n\n     NOTE: Every handler in the defmutation is turned into a lambda, and that lambda will be available in `env` under\n     the key `:handlers`. Thus actions and remotes can cross-call (TODO: Make the macro rewrite cross calls so they\n     can look like fn calls?):\n\n     ```\n     (defmutation boo\n       \\\"docstring\\\" [params-map]\n       (action [env] ...)\n       (ok-action [env] ...)\n       (result-action [env] ((-> env :handlers :ok-action) env)))\n     ```\n\n     This macro normally adds a `:result-action` handler that does normal Fulcro mutation remote result logic unless\n     you supply your own.\n\n     Remotes in Fulcro 3 are also lambdas, and are called with an `env` that contains the state as it exists *after*\n     the `:action` has run in `state`, but also include the 'before action state' as a map in `:state-before-action`.\n\n     IMPORTANT: You can fully-qualify a mutation's symbol when declaring it to force it into a custom namespace,\n     but this is highly discouraged and will require quoting when used in a mutation.\n     \"\n       :arglists\n       '([sym docstring? arglist handlers])} defmutation\n     [& args]\n     (defmutation* &env args)))\n","~:reader-features",["^P",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__64817","cljs.core/map?","cljs.core/contains?","com.fulcrologic.fulcro.components/component-class?","self__","args64824","cljs.core/aclone","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","com.fulcrologic.fulcro.mutations/Mutation","com.fulcrologic.fulcro.mutations/->Mutation","sym","this","G__64828","G__64829","args","cljs.core/List","var_args","G__64836","com.fulcrologic.fulcro.mutations/update-errors-on-ui-component!","js/Error","env","com.fulcrologic.fulcro.mutations.update_errors_on_ui_component_BANG_.cljs$core$IFn$_invoke$arity$2","k","map__64838","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app","state","result","ref","remote-error?","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","G__64843","cljs.core/assoc-in","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","com.fulcrologic.fulcro.mutations/trigger-global-error-action!","map__64844","b2__45871__auto__","global-error-action","_","com.fulcrologic.fulcro.mutations/dispatch-ok-error-actions!","map__64849","map__64850","dispatch","ok-action","error-action","com.fulcrologic.fulcro.mutations/integrate-mutation-return-value!","map__64858","map__64859","body","transaction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.algorithms.merge/merge-mutation-joins","com.fulcrologic.fulcro.algorithms.tempid/resolve-tempids!","com.fulcrologic.fulcro.mutations/default-result-action!","com.fulcrologic.fulcro.mutations/mutation-declaration?","expr","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","com.fulcrologic.fulcro.mutations/mutation-symbol","mutation","cljs.core/first","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.mutations","js/com.fulcrologic.fulcro.mutations.mutate","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__64869","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.mutations/mutate","com.fulcrologic.fulcro.mutations/set-props","fulcro-mutation-env-symbol","p__64873","map__64874","temp__5753__auto__","default-action","params","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/update-in","st","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.mutations/toggle","map__64879","p__64884","map__64885","field","cljs.core/not","p__64890","map__64891","ast","com.fulcrologic.fulcro.mutations/toggle!","comp","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.mutations/set-value!","component","value","com.fulcrologic.fulcro.mutations/ensure-integer","v","rv","js/parseInt","js/isNaN","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.mutations/set-integer!","p__64902","map__64903","seq64899","G__64900","cljs.core/next","G__64901","self__4717__auto__","event","and__4120__auto__","or__4131__auto__","com.fulcrologic.fulcro.dom.events/target-value","com.fulcrologic.fulcro.mutations/ensure-double","js/parseFloat","com.fulcrologic.fulcro.mutations/set-double!","p__64917","map__64918","seq64913","G__64914","G__64915","com.fulcrologic.fulcro.mutations/set-string!","p__64929","map__64930","seq64925","G__64926","G__64927","com.fulcrologic.fulcro.mutations/returning","class","cljs.core/Keyword","cljs.core/Symbol","com.fulcrologic.fulcro.components/registry-key->class","map__64939","map__64940","key","query","updated-query","G__64943","cljs.core/deref","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","p1__64935#","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","edn-query-language.core/query->ast1","p__64947","map__64948","com.fulcrologic.fulcro.mutations/with-target","target","map__64950","targeted-query","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/with-meta","com.fulcrologic.fulcro.mutations/with-params"]]],"~:cache-keys",["~#cmap",[["^1Y","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^P",[]],"~:deps-syms",["^1B","^A","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^1Y","com/fulcrologic/fulcro/algorithms/normalize.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$com.fulcrologic.fulcro.algorithms.do-not-use","^19","^1;","^1@"]]],["^1Y","goog/dom/tagname.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.dom.HtmlElement"]]],["^1Y","goog/async/freelist.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/labs/useragent/platform.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.labs.userAgent.util","~$goog.string"]]],["^1Y","expound/util.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","ghostwheel/reporting.cljc"],[1630228119207,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^?","^E","^C","~$expound.alpha","^1J","~$ghostwheel.logging"]]],["^1Y","goog/timer/timer.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.Promise","~$goog.events.EventTarget"]]],["^1Y","orchestra_cljs/spec/test.cljs"],[1630228119080,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$goog.object","~$goog.userAgent.product","^1J","~$cljs.stacktrace","^I","^?","^G"]]],["^1Y","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1;"]]],["^1Y","cljs/spec/gen/alpha.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$goog.Uri"]]],["^1Y","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^2D"]]],["^1Y","goog/math/math.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.array","~$goog.asserts"]]],["^1Y","goog/string/stringformat.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2D"]]],["^1Y","cljs/env.cljc"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/events/eventtype.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1Y","goog/labs/useragent/browser.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2C","^2I","~$goog.string.internal"]]],["^1Y","goog/array/array.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1Y","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1;","^19","^2I","^?"]]],["^1Y","expound/problems.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$expound.paths","^?","^2>","^1J","~$expound.printer","~$expound.ansi"]]],["^1Y","goog/useragent/useragent.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2C","~$goog.reflect","^2D"]]],["^1Y","goog/structs/prioritypool.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1Y","clojure/test/check/properties.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^1Y","goog/async/run.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1Y","clojure/test/check/generators.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^2D"]]],["^1Y","taoensso/encore.cljs"],[1630228119299,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^2I","^2D","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^1Y","goog/debug/error.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/async/workqueue.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","~$goog.async.FreeList"]]],["^1Y","com/fulcrologic/fulcro/dom/events.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/events/events.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2O","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1Y","goog/promise/resolver.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/events/browserfeature.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2P"]]],["^1Y","cljs/tools/reader/edn.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2D","^3="]]],["^1Y","clojure/test/check/random/doubles.cljs"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$clojure.test.check.random.longs"]]],["^1Y","goog/structs/priorityqueue.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.structs.Heap"]]],["^1Y","goog/net/xhrio.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.Timer","^2M","^2N","^3G","^2H","~$goog.json.hybrid","~$goog.log","^3D","^3C","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^2I","^2D","^3B","~$goog.structs.Map","~$goog.uri.utils","^2P"]]],["^1Y","goog/promise/thenable.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/dom/nodetype.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","cljs/pprint.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^2D","^3="]]],["^1Y","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^?","^39","^N","^1;","^19"]]],["^1Y","cljs/tools/reader.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^3L","^3M","^3N","^3K","^2M","^2D","^3="]]],["^1Y","expound/alpha.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$expound.problems","^?","^1J","^39","^2>","^3<","^2D","^2V","~$expound.util","^2W","^G"]]],["^1Y","clojure/test/check/rose_tree.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","clojure/test/check/impl.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1Y","goog/events/eventtarget.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.Disposable","^2N","^3>","~$goog.events.Event","^3I","^3J","^2I"]]],["^1Y","clojure/test/check/random.cljs"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$clojure.test.check.random.doubles","^3P"]]],["^1Y","goog/disposable/disposable.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.disposable.IDisposable"]]],["^1Y","expound/ansi.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J"]]],["^2R","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^2S","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1Y","cljs/spec/test/alpha.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2I","^2J","^1J","^2K","^I","^?","^G"]]],["^1Y","shadow/js.js"],[1630228360071,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/object/object.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/structs/set.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^3B","~$goog.structs.Collection","^3W"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^2R","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^2S","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1Y","cljs/stacktrace.cljc"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2D","^1J"]]],["^1Y","goog/math/long.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","^2["]]],["^1Y","goog/events/listener.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.events.ListenableKey"]]],["^1Y","goog/events/listenermap.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","~$goog.events.Listener","^2I"]]],["^1Y","goog/events/eventid.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","taoensso/truss.cljs"],[1630228118689,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$taoensso.truss.impl"]]],["^1Y","goog/string/internal.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","com/fulcrologic/fulcro/algorithms/merge.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1=","^1@","^18","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^2A","^19","^1;"]]],["^1Y","clojure/test/check.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^32","^37","^33","^38","~$clojure.test.check.impl"]]],["^1Y","edn_query_language/core.cljc"],[1630228119293,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^?","~$clojure.test.check","^32","~$clojure.test.check.properties"]]],["^1Y","goog/functions/functions.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","expound/paths.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^?","^3Z"]]],["^1Y","taoensso/truss/impl.cljs"],[1630228118689,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^39"]]],["^1Y","clojure/walk.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/useragent/product.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2X","^2Z","^2P"]]],["^1Y","goog/net/eventtype.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/structs/map.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1Y","goog/net/xhriopool.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^3?","~$goog.structs.PriorityPool"]]],["^1Y","goog/structs/queue.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M"]]],["^1Y","goog/labs/useragent/engine.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2C","^2D"]]],["^1Y","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^1E"]]],["^1Y","cljs/reader.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2I","^3O","^3;","^3="]]],["^1Y","com/fulcrologic/fulcro/mutations.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1@","^1>","^N","^19","^1;","^1E","^?","^1=","^1H","^18","^1C","^1J"]]],["^1Y","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2I","~$cljsjs.react","^19","^?","^1;","^2>","^1J","^2A","^4?","^18","^39"]]],["^1Y","goog/asserts/asserts.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1Y","goog/debug/logbuffer.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","~$goog.debug.LogRecord"]]],["^1Y","cljs/tagged_literals.cljc"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^3:"]]],["^1Y","goog/uri/uri.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2N","^2D","^3B","^3W","^3X","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Y","ghostwheel/threading_macros.cljc"],[1630228119207,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2F","~$ghostwheel.utils"]]],["^1Y","goog/net/errorcode.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^2R","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^2S"]]],["^1Y","ghostwheel/logging.cljc"],[1630228119285,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^I"]]],["^1Y","goog/disposable/idisposable.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/promise/promise.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","~$goog.Thenable","^2N","^3F","~$goog.async.run","^36","^4G","~$goog.promise.Resolver"]]],["^1Y","cljs/spec/alpha.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2I","^2>","^G","^1J"]]],["^1Y","goog/debug/logrecord.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/base.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",[]]],["^1Y","goog/json/hybrid.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","~$goog.json"]]],["^1Y","goog/structs/structs.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2I"]]],["^1Y","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^3L","^1J","~$cljs.tools.reader.impl.inspect"]]],["^1Y","cljsjs/react.cljs"],[1630228358937,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$module$node_modules$react$index"]]],["^1Y","clojure/string.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2D","^3="]]],["^1Y","com/fulcrologic/fulcro/algorithms/tempid.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1;","^2>"]]],["^1Y","goog/structs/pool.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^41","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1Y","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^2R","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^2S","^49"]]],["^1Y","goog/net/httpstatus.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/structs/heap.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2I","~$goog.structs.Node"]]],["^1Y","goog/debug/entrypointregistry.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N"]]],["^1Y","goog/string/string.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2Q"]]],["^1Y","goog/reflect/reflect.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/labs/useragent/util.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2Q"]]],["^1Y","expound/printer.cljc"],[1630228118972,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^?","^I","^2>","^39","^3Z","^2W"]]],["^1Y","goog/debug/debug.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","~$goog.debug.errorcontext","^2P"]]],["^1Y","goog/string/stringbuffer.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/debug/errorcontext.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^3M","^2D","^3="]]],["^1Y","goog/iter/iter.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2N","~$goog.functions","~$goog.math"]]],["^1Y","goog/async/nexttick.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^3G","~$goog.dom.TagName","^4W","^2X","^2Y"]]],["^1Y","goog/debug/logger.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2N","~$goog.debug","~$goog.debug.LogBuffer","^4I"]]],["^1Y","ghostwheel/core.cljc"],[1630228119207,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^39","^2>","^C","^4A","^32","^4B","^?","^E","^G","~$ghostwheel.reporting","~$ghostwheel.unghost","^4L","^2F","~$ghostwheel.threading-macros","^2E","~$cljs.analyzer.api","^2@"]]],["^2R","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^2S"]]],["^1Y","goog/events/event.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^41","~$goog.events.EventId"]]],["^1Y","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^3K","^3L","^3M"]]],["^1Y","goog/dom/htmlelement.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","cljs/core.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["~$goog.math.Long","~$goog.math.Integer","^2D","^2I","^2M","^2L","^3="]]],["^1Y","clojure/test/check/random/longs.cljs"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","~$clojure.test.check.random.longs.bit-count-impl","^55","^A"]]],["^1Y","goog/log/log.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^4Z","~$goog.debug.LogManager","^4I","~$goog.debug.Logger"]]],["^1Y","goog/structs/collection.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/events/browserevent.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^4Z","^2O","^42","~$goog.events.EventType","^2[","^2P"]]],["^1Y","cljs/analyzer/api.cljc"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2?","~$cljs.analyzer"]]],["^1Y","goog/math/integer.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/structs/node.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","clojure/set.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/uri/utils.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2M","^2N","^2D"]]],["^1Y","taoensso/timbre.cljs"],[1630228119105,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^1E","~$taoensso.timbre.appenders.core"]]],["^1Y","cljs/analyzer.cljc"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^2D","^1J","^39","^2?","~$cljs.tagged-literals","^3O","^3L","^3:"]]],["^1Y","goog/json/json.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]],["^1Y","goog/events/listenable.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^54"]]],["^1Y","goog/net/xmlhttpfactory.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^3["]]],["^1Y","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^19"]]],["^1Y","ghostwheel/unghost.cljc"],[1630228119555,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/net/xmlhttp.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^2N","~$goog.net.WrapperXmlHttpFactory","^40"]]],["^1Y","cljs/test.cljs"],[1630228118934,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A","^1J","^I"]]],["^1Y","clojure/test/check/results.cljc"],[1630228119162,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B","^A"]]],["^1Y","goog/net/xhrlike.js"],[1630228359392,"^2:",["^ ","^2;",null,"^2<",["^P",[]],"^2=",["^1B"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/test/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/reporting.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/printer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/test.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/paths.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/ansi.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/template.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar!/expound/problems.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env/macros.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/test.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/test/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom/events.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/mutations.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",1,"^8",5,"^9",1,"^:",37],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",["^ ","^M","^N"],"^O",["^P",[]],"^Q",["^ ","^R",["^ ","^S",["^T",[["^U","^V"]]],"^W","Define a quote-free interface for using the given `target-symbol` in mutations.\n     The declared mutation can be used in lieu of the true mutation symbol\n     as a way to prevent circular references while also allowing the shorthand of ns aliasing.\n\n     In IntelliJ, use Resolve-as `def` to get proper IDE integration.","^7",148,"^8",4,"^6","com/fulcrologic/fulcro/mutations.cljc","^X","^Y","^Z","^[","^10",true],"^11",["^ ","^W","Define a Fulcro mutation.\n\n     The given symbol will be prefixed with the namespace of the current namespace, and if you use a simple symbol it\n     will also be def'd into a name that when used as a function will simply resolve to that function call as data:\n\n     ```\n     (defmutation f [p]\n       ...)\n\n     (f {:x 1}) => `(f {:x 1})\n     ```\n\n     This allows mutations to behave as data in transactions without needing quoting.\n\n     Mutations can have any number of handlers. By convention things that contain logic use names that end\n     in `action`.  The remote behavior of a mutation is defined by naming a handler after the remote.\n\n     ```\n     (defmutation boo\n       \"docstring\" [params-map]\n       (action [env] ...)\n       (my-remote [env] ...)\n       (other-remote [env] ...)\n       (remote [env] ...))\n     ```\n\n     NOTE: Every handler in the defmutation is turned into a lambda, and that lambda will be available in `env` under\n     the key `:handlers`. Thus actions and remotes can cross-call (TODO: Make the macro rewrite cross calls so they\n     can look like fn calls?):\n\n     ```\n     (defmutation boo\n       \"docstring\" [params-map]\n       (action [env] ...)\n       (ok-action [env] ...)\n       (result-action [env] ((-> env :handlers :ok-action) env)))\n     ```\n\n     This macro normally adds a `:result-action` handler that does normal Fulcro mutation remote result logic unless\n     you supply your own.\n\n     Remotes in Fulcro 3 are also lambdas, and are called with an `env` that contains the state as it exists *after*\n     the `:action` has run in `state`, but also include the 'before action state' as a map in `:state-before-action`.\n\n     IMPORTANT: You can fully-qualify a mutation's symbol when declaring it to force it into a custom namespace,\n     but this is highly discouraged and will require quoting when used in a mutation.\n     ","^S",["^T",[["~$&","^12"]]],"^7",352,"^8",4,"^6","com/fulcrologic/fulcro/mutations.cljc","^X","^13","^Z","^[","^10",true]],"^X","^[","^15",null,"^16",["^ ","^17","^18","^19","^19","^>","^?","^1:","^1;","^1<","^1=","^1>","^1>","^1?","^1@","^1A","^19","^A","^A","^1B","^1B","^1=","^1=","^1C","^1C","^1D","^1E","^1F","^1>","~$s","^?","^N","^N","^18","^18","^1G","^1H","^1@","^1@","^1;","^1;","^1I","^1J","^1H","^1H","^1J","^1J","^1E","^1E","^?","^?","^1K","^1C"],"^1L",["^P",["^1M","^1N"]],"~:shadow/js-access-global",["^P",["parseFloat","isNaN","Error","parseInt"]],"^1O",["^ ","^M","^N","^1P","^N"],"~:defs",["^ ","~$default-result-action!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",113,"^8",8,"^9",113,"^:",30,"^S",["^T",["~$quote",["^T",[["~$env"]]]]],"^W","The default Fulcro result action for `defmutation`, which can be overridden when you create your `app/fulcro-app`.\n\n  This function is the following composition of operations from this same namespace:\n\n  (-> env\n    (update-errors-on-ui-component! ::mutation-error)\n    (trigger-global-error-action!)\n    (dispatch-ok-error-actions!)\n    (integrate-mutation-return-value!))\n\n  This function returns `env`, so it can be used as part of the chain in your own definition of a \"default\"\n  mutation result action.\n  "],"^X","~$com.fulcrologic.fulcro.mutations/default-result-action!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",30,"~:method-params",["^T",[["^7@"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^8",1,"~:variadic?",false,"^7",113,"~:ret-tag","~$any","^9",113,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","The default Fulcro result action for `defmutation`, which can be overridden when you create your `app/fulcro-app`.\n\n  This function is the following composition of operations from this same namespace:\n\n  (-> env\n    (update-errors-on-ui-component! ::mutation-error)\n    (trigger-global-error-action!)\n    (dispatch-ok-error-actions!)\n    (integrate-mutation-return-value!))\n\n  This function returns `env`, so it can be used as part of the chain in your own definition of a \"default\"\n  mutation result action.\n  "],"~$ensure-integer",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",195,"^8",11,"^9",195,"^:",25,"~:private",true,"^S",["^T",["^7?",["^T",[["~$v"]]]]],"^W","Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n     data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else."],"^7K",true,"^X","~$com.fulcrologic.fulcro.mutations/ensure-integer","^6","com/fulcrologic/fulcro/mutations.cljc","^:",25,"^7B",["^T",[["~$v"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",4,"^7E",false,"^7",195,"^7F",["^P",["~$js","~$number"]],"^9",195,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["~$v"]]]]],"^W","Helper for set-integer!, use that instead. It is recommended you use this function only on UI-related\n     data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else."],"~$set-integer!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",204,"^8",7,"^9",204,"^:",19,"^S",["^T",["^7?",["^T",[["~$component","~$field","~$&",["^ ","~:keys",["~$event","~$value"]]]]]]],"^W","Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history.","~:top-fn",["^ ","^7E",true,"~:fixed-arity",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]]],"^X","~$com.fulcrologic.fulcro.mutations/set-integer!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",19,"^7U",["^ ","^7E",true,"^7V",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]],"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^7C",null,"^7V",2,"^7D",["^T",[null]],"^8",1,"^7E",true,"~:methods",[["^ ","^7V",2,"^7E",true,"~:tag",["^P",["^7G","~$clj-nil"]]]],"^7",204,"^7F","^7G","^9",204,"^7H",2,"^7I",true,"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^W","Set the given integer on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history."],"~$ensure-double",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",215,"^8",11,"^9",215,"^:",24,"^7K",true,"^S",["^T",["^7?",["^T",[["~$v"]]]]]],"^7K",true,"^X","~$com.fulcrologic.fulcro.mutations/ensure-double","^6","com/fulcrologic/fulcro/mutations.cljc","^:",24,"^7B",["^T",[["~$v"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",4,"^7E",false,"^7",215,"^7F",["^P",["^7M","^7N"]],"^9",215,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["~$v"]]]]]],"~$mutation-symbol",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",137,"^8",7,"^9",137,"^:",22,"^S",["^T",["^7?",["^T",[["~$mutation"]]]]],"^W","Return the real symbol (for mutation dispatch) of `mutation`, which can be a symbol (this function is then identity)\n   or a mutation-declaration."],"^X","~$com.fulcrologic.fulcro.mutations/mutation-symbol","^6","com/fulcrologic/fulcro/mutations.cljc","^:",22,"^7B",["^T",[["^82"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",137,"^7F",["^P",[null,"^7G","^7Z"]],"^9",137,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^82"]]]]],"^W","Return the real symbol (for mutation dispatch) of `mutation`, which can be a symbol (this function is then identity)\n   or a mutation-declaration."],"~$dispatch-ok-error-actions!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",75,"^8",8,"^9",75,"^:",34,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","Looks for network mutation result in `env`, checks it against the global definition of remote errors.  If there\n  is an error and the mutation has defined an `error-action` section, then it calls it; otherwise, if the mutation\n  has an `ok-action` it calls that.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env."],"^X","~$com.fulcrologic.fulcro.mutations/dispatch-ok-error-actions!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",34,"^7B",["^T",[["^7@"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",75,"^9",75,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","Looks for network mutation result in `env`, checks it against the global definition of remote errors.  If there\n  is an error and the mutation has defined an `error-action` section, then it calls it; otherwise, if the mutation\n  has an `ok-action` it calls that.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env."],"~$set-value!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",187,"^8",7,"^9",187,"^:",17,"^S",["^T",["^7?",["^T",[["^7P","^7Q","^7T"]]]]],"^W","Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data). Changes made via these\n  helpers are compressed in the history."],"^X","~$com.fulcrologic.fulcro.mutations/set-value!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",17,"^7B",["^T",[["^7P","^7Q","^7T"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",187,"^7F",["^P",["^7G","^7Z"]],"^9",187,"^7H",3,"^7I",true,"^S",["^T",["^7?",["^T",[["^7P","^7Q","^7T"]]]]],"^W","Set a raw value on the given `field` of a `component`. It is recommended you use this function only on\n  UI-related data (e.g. form inputs that are used by the UI, and not persisted data). Changes made via these\n  helpers are compressed in the history."],"~$mutate",["^ ","^X","~$com.fulcrologic.fulcro.mutations/mutate","^6","com/fulcrologic/fulcro/mutations.cljc","^7",145,"^8",1,"^9",145,"^:",17,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",145,"^8",11,"^9",145,"^:",17],"^7Y","~$cljs.core/MultiFn"],"~$with-params",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",284,"^8",7,"^9",284,"^:",18,"^S",["^T",["^7?",["^T",[["^7@","~$params"]]]]],"^W","Modify an AST containing a single mutation, changing it's parameters to those given as an argument. Overwrites\n   any existing params of the mutation.\n\n   `env` - the mutation environment\n   `params` - A new map to use as the mutations parameters\n\n   Returns an updated `env`, which can be used as the return value from a remote section of a mutation."],"^X","~$com.fulcrologic.fulcro.mutations/with-params","^6","com/fulcrologic/fulcro/mutations.cljc","^:",18,"^7B",["^T",[["^7@","^8<"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",284,"^7F",["^P",["~$clj","^7G"]],"^9",284,"^7H",2,"^7I",true,"^S",["^T",["^7?",["^T",[["^7@","^8<"]]]]],"^W","Modify an AST containing a single mutation, changing it's parameters to those given as an argument. Overwrites\n   any existing params of the mutation.\n\n   `env` - the mutation environment\n   `params` - A new map to use as the mutations parameters\n\n   Returns an updated `env`, which can be used as the return value from a remote section of a mutation."],"~$Mutation",["^ ","~:num-fields",1,"~:protocols",["^P",["~$cljs.core/IFn"]],"^X","~$com.fulcrologic.fulcro.mutations/Mutation","^6","com/fulcrologic/fulcro/mutations.cljc","^:",21,"~:type",true,"^8",13,"^7",31,"~:record",false,"^9",31,"^7Y","~$function","~:skip-protocol-flag",["^P",["^8B"]]],"~$update-errors-on-ui-component!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",38,"^8",8,"^9",38,"^:",38,"^S",["^T",["^7?",["^T",[["^7@"],["^7@","~$k"]]]]],"^W","A handler for mutation network results that will place an error, if detected in env, on the data at `ref`.\n  Errors are placed at `k` (defaults to `::m/mutation-error`).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Swaps against app state and returns `env`.","^7U",["^ ","^7E",false,"^7V",2,"^7H",2,"^7B",["^T",[["^7@"],["^7@","~$k"]]],"^S",["^T",[["^7@"],["^7@","~$k"]]],"^7D",["^T",[null,null]]]],"^X","~$com.fulcrologic.fulcro.mutations/update-errors-on-ui-component!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",38,"^7U",["^ ","^7E",false,"^7V",2,"^7H",2,"^7B",["^T",[["^7@"],["^7@","~$k"]]],"^S",["^T",[["^7@"],["^7@","~$k"]]],"^7D",["^T",[null,null]]],"^7B",["^T",[["^7@"],["^7@","~$k"]]],"^7C",null,"^7V",2,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7X",[["^ ","^7V",1,"^7E",false,"^7Y","^7G"],["^ ","^7V",2,"^7E",false]],"^7",38,"^9",38,"^7H",2,"^7I",true,"^S",["^T",[["^7@"],["^7@","~$k"]]],"^W","A handler for mutation network results that will place an error, if detected in env, on the data at `ref`.\n  Errors are placed at `k` (defaults to `::m/mutation-error`).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Swaps against app state and returns `env`."],"~$set-double!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",221,"^8",7,"^9",221,"^:",18,"^S",["^T",["^7?",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]]]],"^W","Set the given double on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history.","^7U",["^ ","^7E",true,"^7V",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]]],"^X","~$com.fulcrologic.fulcro.mutations/set-double!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",18,"^7U",["^ ","^7E",true,"^7V",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]],"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^7C",null,"^7V",2,"^7D",["^T",[null]],"^8",1,"^7E",true,"^7X",[["^ ","^7V",2,"^7E",true,"^7Y",["^P",["^7G","^7Z"]]]],"^7",221,"^7F","^7G","^9",221,"^7H",2,"^7I",true,"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^W","Set the given double on the given `field` of a `component`. Allows same parameters as `set-string!`.\n\n   It is recommended you use this function only on UI-related data (e.g. data that is used for display purposes)\n   and write clear top-level transactions for anything else. Calls to this are compressed in history."],"~$set-props",["^ ","^X","~$com.fulcrologic.fulcro.mutations/set-props","^W","\n     mutation: A convenience helper, generally used 'bit twiddle' the data on a particular database table (using the component's ident).\n     Specifically, merge the given `params` into the state of the database object at the component's ident.\n     In general, it is recommended this be used for ui-only properties that have no real use outside of the component.\n     ","^5",["^ ","^W","\n     mutation: A convenience helper, generally used 'bit twiddle' the data on a particular database table (using the component's ident).\n     Specifically, merge the given `params` into the state of the database object at the component's ident.\n     In general, it is recommended this be used for ui-only properties that have no real use outside of the component.\n     ","^6",null],"^6","com/fulcrologic/fulcro/mutations.cljc","^7",158,"^8",4,"^7Y","^8C"],"~$set-string!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",231,"^8",7,"^9",231,"^:",18,"^S",["^T",["^7?",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]]]],"^W","Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n  Calls to this are compressed in history.","^7U",["^ ","^7E",true,"^7V",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]]],"^X","~$com.fulcrologic.fulcro.mutations/set-string!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",18,"^7U",["^ ","^7E",true,"^7V",2,"^7H",2,"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^7D",["^T",[null]]],"^7B",[["^T",["^7P","^7Q",["^ ","^7R",["^7S","^7T"]]]]],"^7C",null,"^7V",2,"^7D",["^T",[null]],"^8",1,"^7E",true,"^7X",[["^ ","^7V",2,"^7E",true,"^7Y",["^P",["^7G","^7Z"]]]],"^7",231,"^7F","^7G","^9",231,"^7H",2,"^7I",true,"^S",["^T",[["^7P","^7Q","~$&",["^ ","^7R",["^7S","^7T"]]]]],"^W","Set a string on the given `field` of a `component`. The string can be literal via named parameter `:value` or\n  can be auto-extracted from a UI event using the named parameter `:event`\n\n  Examples\n\n  ```\n  (set-string! this :ui/name :value \"Hello\") ; set from literal (or var)\n  (set-string! this :ui/name :event evt) ; extract from UI event target value\n  ```\n\n  It is recommended you use this function only on UI-related\n  data (e.g. data that is used for display purposes) and write clear top-level transactions for anything else.\n  Calls to this are compressed in history."],"~$toggle",["^ ","^X","~$com.fulcrologic.fulcro.mutations/toggle","^W","mutation: A helper method that toggles the true/false nature of a component's state by ident.\n      Use for local UI data only. Use your own mutations for things that have a good abstract meaning. ","^5",["^ ","^W","mutation: A helper method that toggles the true/false nature of a component's state by ident.\n      Use for local UI data only. Use your own mutations for things that have a good abstract meaning. ","^6",null],"^6","com/fulcrologic/fulcro/mutations.cljc","^7",170,"^8",4,"^7Y","^8C"],"~$with-target",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",268,"^8",7,"^9",268,"^:",18,"^S",["^T",["^7?",["^T",[[["^ ","^7R",["~$ast"],"^1S","^7@"],"~$target"]]]]],"^W","Set's a target for the return value from the mutation to be merged into. This can be combined with returning to define\n  a path to insert the new entry.\n\n  `env` - The mutation env (you can thread together `returning` and `with-target`)\n  `target` - A vector path, or any special target defined in `data-targeting` such as `append-to`.\n\n  Returns an updated env (which is a valid return value from remote sections of mutations).\n  "],"^X","~$com.fulcrologic.fulcro.mutations/with-target","^6","com/fulcrologic/fulcro/mutations.cljc","^:",18,"^7B",["^T",[["~$p__64947","^8T"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",268,"^7F",["^P",["^8>","^7G"]],"^9",268,"^7H",2,"^7I",true,"^S",["^T",["^7?",["^T",[[["^ ","^7R",["^8S"],"^1S","^7@"],"^8T"]]]]],"^W","Set's a target for the return value from the mutation to be merged into. This can be combined with returning to define\n  a path to insert the new entry.\n\n  `env` - The mutation env (you can thread together `returning` and `with-target`)\n  `target` - A vector path, or any special target defined in `data-targeting` such as `append-to`.\n\n  Returns an updated env (which is a valid return value from remote sections of mutations).\n  "],"~$trigger-global-error-action!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",59,"^8",8,"^9",59,"^:",36,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","When there is a `global-error-action` defined on the application, this function will checks for errors in the given\n  mutation `env`. If any are found then it will call the global error action function with `env`.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Always returns `env`."],"^X","~$com.fulcrologic.fulcro.mutations/trigger-global-error-action!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",36,"^7B",["^T",[["^7@"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",59,"^9",59,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","When there is a `global-error-action` defined on the application, this function will checks for errors in the given\n  mutation `env`. If any are found then it will call the global error action function with `env`.\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Always returns `env`."],"~$integrate-mutation-return-value!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",95,"^8",8,"^9",95,"^:",40,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","If there is a successful result from the remote mutation in `env` this function will merge it with app state\n  (if there was a mutation join query), and will also rewrite any tempid remaps that were returned\n  in all of the possible locations they might be in both app database and runtime application state (e.g. network queues).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env."],"^X","~$com.fulcrologic.fulcro.mutations/integrate-mutation-return-value!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",40,"^7B",["^T",[["^7@"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",95,"^9",95,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^7@"]]]]],"^W","If there is a successful result from the remote mutation in `env` this function will merge it with app state\n  (if there was a mutation join query), and will also rewrite any tempid remaps that were returned\n  in all of the possible locations they might be in both app database and runtime application state (e.g. network queues).\n\n  Typically used as part of the construction of a global default result handler for mutations.\n\n  Returns env."],"~$->Mutation",["^ ","^7>",null,"^5",["^ ","^8A",["^P",["^8B"]],"^6","com/fulcrologic/fulcro/mutations.cljc","^:",21,"^8",13,"~:factory","~:positional","^7",31,"^9",31,"^S",["^T",["^7?",["^T",[["~$sym"]]]]],"^8G",["^P",["^8B"]],"^W","Positional factory function for com.fulcrologic.fulcro.mutations/Mutation."],"^8A",["^P",["^8B"]],"^X","~$com.fulcrologic.fulcro.mutations/->Mutation","^6","com/fulcrologic/fulcro/mutations.cljc","^:",21,"^7B",["^T",[["^92"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",4,"^7E",false,"^90","^91","^7",31,"^7F","^8C","^9",31,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^92"]]]]],"^8G",["^P",["^8B"]],"^W","Positional factory function for com.fulcrologic.fulcro.mutations/Mutation."],"~$mutation-declaration?",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",135,"^8",7,"^9",135,"^:",28,"^S",["^T",["^7?",["^T",[["~$expr"]]]]]],"^X","~$com.fulcrologic.fulcro.mutations/mutation-declaration?","^6","com/fulcrologic/fulcro/mutations.cljc","^:",28,"^7B",["^T",[["^95"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",135,"^7F","~$boolean","^9",135,"^7H",1,"^7I",true,"^S",["^T",["^7?",["^T",[["^95"]]]]]],"~$returning",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",250,"^8",7,"^9",250,"^:",16,"^S",["^T",["^7?",["^T",[["^7@","~$class"]]]]],"^W","Indicate the the remote operation will return a value of the given component type.\n\n  `env` - The env of the mutation\n  `class` - A component class that represents the return type.  You may supply a fully-qualified symbol instead of the\n  actual class, and this method will look up the class for you (useful to avoid circular references).\n\n  Returns an update `env`, and is a valid return value from mutation remote sections."],"^X","~$com.fulcrologic.fulcro.mutations/returning","^6","com/fulcrologic/fulcro/mutations.cljc","^:",16,"^7B",["^T",[["^7@","^99"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",250,"^7F",["^P",["^8>","^7G"]],"^9",250,"^7H",2,"^7I",true,"^S",["^T",["^7?",["^T",[["^7@","^99"]]]]],"^W","Indicate the the remote operation will return a value of the given component type.\n\n  `env` - The env of the mutation\n  `class` - A component class that represents the return type.  You may supply a fully-qualified symbol instead of the\n  actual class, and this method will look up the class for you (useful to avoid circular references).\n\n  Returns an update `env`, and is a valid return value from mutation remote sections."],"~$toggle!",["^ ","^7>",null,"^5",["^ ","^6","com/fulcrologic/fulcro/mutations.cljc","^7",181,"^8",7,"^9",181,"^:",14,"^S",["^T",["^7?",["^T",[["^1?","^7Q"]]]]],"^W","Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated."],"^X","~$com.fulcrologic.fulcro.mutations/toggle!","^6","com/fulcrologic/fulcro/mutations.cljc","^:",14,"^7B",["^T",[["^1?","^7Q"]]],"^7C",null,"^7D",["^T",[null,null]],"^8",1,"^7E",false,"^7",181,"^7F",["^P",["^7G","^7Z"]],"^9",181,"^7H",2,"^7I",true,"^S",["^T",["^7?",["^T",[["^1?","^7Q"]]]]],"^W","Toggle the given boolean `field` on the specified component. It is recommended you use this function only on\n  UI-related data (e.g. form checkbox checked status) and write clear top-level transactions for anything more complicated."]],"^1N",["^ ","^>","^?","^1:","^1;","^1?","^1@","^A","^A","^1D","^1E","^[","^[","~$s","^?","^N","^N","^1@","^1@","^1;","^1;","^1E","^1E","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1L",["^P",["~:req-un","~:opt-un","~:gfn","~:pred-exprs","~:keys-pred","~:opt-keys","~$com.fulcrologic.fulcro.components/component-class?","~:key","~:ref","~:default","~$*","~:req-specs","~:value","~:params","~:ast","~:field","~:com.fulcrologic.fulcro.algorithms.data-targeting/target","~:transaction","~:state","~$cljs.core/contains?","~$cljs.core/map?","~:error-action","~:com.fulcrologic.fulcro.mutations/state","~:com.fulcrologic.fulcro.mutations/env","~:compressible?","~$%","~$cljs.spec.alpha/keys","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:req","~:com.fulcrologic.fulcro.mutations/returning","~:event","~:com.fulcrologic.fulcro.mutations/mutation-error","~:result","^8Q","~:ok-action","~:app","~:req-keys","^92","~$cljs.core/fn","~:dispatch-key","^8M","~:opt-specs","~:remote-error?","~:pred-forms","~:action","~:error","~:default-result-action!","~:result-action","~:query","~:hierarchy","~:body","~:global-error-action","~:auto","~:p","~:opt"]],"~:order",["^9T","^9V","^9>","^9S","^9W","^9?","^9@","^9A","^9B","^9C","^9H","^9Y","^:4","^:7","^:9","^:C","^9O","^:3","^:5","~$%","^9Q","^9P","^9Z","^9D","^92","^:0","^:1","^9F","^:8","^:A","^9X","^:2","^9R","^:@","^9N","^:?","^:6","^9K","^9G","^8M","^9J","^::","^:=","^:;","~:p","^:B","^:<","^8Q","^9L","^9E","^9U","^9[","^9I","^:>","^9M","~$*"]],"^1U",["^ ","^1N",["^P",[]],"^1M",["^P",[]]],"^1V",["^ "],"^1W",["^1B","^A","^1@","^1>","^N","^19","^1;","^1E","^?","^1=","^1H","^18","^1C","^1J"]],"^Z","^[","~:ns-specs",["^ ","^9T",["^T",["^9V","^9>",["^9S","^9W"]]],"^9Z","^9D"],"~:ns-speced-vars",[],"~:compiler-options",["^29",[["^:G","~:static-fns"],true,["^:G","~:elide-asserts"],false,["^:G","~:optimize-constants"],null,["^:G","^20"],null,["^:G","~:external-config"],null,["^:G","~:tooling-config"],null,["^:G","~:emit-constants"],null,["^:G","~:load-tests"],null,["^:G","~:form-size-threshold"],null,["^:G","~:infer-externs"],true,["^:G","^22"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:G","~:fn-invoke-direct"],null,["^:G","~:source-map"],"/dev/null"]]]