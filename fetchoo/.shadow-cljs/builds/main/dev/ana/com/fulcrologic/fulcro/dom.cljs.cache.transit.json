["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.dom');\ngoog.require('cljs.core');\ngoog.require('cljs.spec.alpha');\ngoog.require('clojure.string');\ngoog.require('com.fulcrologic.fulcro.components');\ngoog.require('cljsjs.react');\ngoog.require('cljsjs.react.dom');\ngoog.require('goog.object');\ngoog.require('goog.dom');\ngoog.require('com.fulcrologic.fulcro.dom_common');\ngoog.require('taoensso.timbre');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncom.fulcrologic.fulcro.dom.element_marker = (function (){var G__60937 = React.createElement(\"div\",null);\nvar G__60938 = \"$$typeof\";\nreturn goog.object.get(G__60937,G__60938);\n})();\n/**\n * Returns true if the given arg is a react element.\n */\ncom.fulcrologic.fulcro.dom.element_QMARK_ = (function com$fulcrologic$fulcro$dom$element_QMARK_(x){\nreturn ((cljs.core.object_QMARK_(x)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.dom.element_marker,goog.object.get(x,\"$$typeof\"))));\n});\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"css\",\"css\",1135045163),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null))))))),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"css\",\"css\",1135045163),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.maybe_impl(cljs.core.keyword_QMARK_,new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.spec.alpha.maybe_impl(cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nil_QMARK_,(function (p1__60939_SHARP_){\nreturn ((cljs.core.map_QMARK_(p1__60939_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__60939_SHARP_)))));\n}),(function (p1__60940_SHARP_){\nreturn ((cljs.core.object_QMARK_(p1__60940_SHARP_)) && ((!(com.fulcrologic.fulcro.dom.element_QMARK_(p1__60940_SHARP_)))));\n})], null),null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null))))))),cljs.spec.alpha.rep_impl(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"element\",\"element\",1974019749)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.string_QMARK_,cljs.core.number_QMARK_,(function (p1__60941_SHARP_){\nreturn ((cljs.core.vector_QMARK_(p1__60941_SHARP_)) || (cljs.core.seq_QMARK_(p1__60941_SHARP_)) || (cljs.core.array_QMARK_(p1__60941_SHARP_)));\n}),cljs.core.nil_QMARK_,com.fulcrologic.fulcro.dom.element_QMARK_], null),null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60939#\",\"p1__60939#\",103628853,null))))),new cljs.core.Keyword(null,\"js-object\",\"js-object\",1830199158),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"and\",\"cljs.core/and\",-6692549,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"object?\",\"cljs.core/object?\",2051371283,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"not\",\"cljs.core/not\",100665144,null),cljs.core.list(new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null),new cljs.core.Symbol(null,\"p1__60940#\",\"p1__60940#\",1476695496,null))))))),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Symbol(\"cljs.core\",\"number?\",\"cljs.core/number?\",-811857295,null),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"or\",\"cljs.core/or\",1201033885,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"array?\",\"cljs.core/array?\",-1655912448,null),new cljs.core.Symbol(null,\"p1__60941#\",\"p1__60941#\",1045120967,null)))),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"element\",\"element\",1974019749),new cljs.core.Symbol(\"com.fulcrologic.fulcro.dom\",\"element?\",\"com.fulcrologic.fulcro.dom/element?\",1982816902,null)))], null)));\n/**\n * Equivalent to React.render\n */\ncom.fulcrologic.fulcro.dom.render = (function com$fulcrologic$fulcro$dom$render(component,el){\nreturn ReactDOM.render(component,el);\n});\n/**\n * Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\n */\ncom.fulcrologic.fulcro.dom.render_to_str = (function com$fulcrologic$fulcro$dom$render_to_str(c){\nreturn ReactDOMServer.renderToString(c);\n});\n/**\n * Returns the dom node associated with a component's React ref.\n */\ncom.fulcrologic.fulcro.dom.node = (function com$fulcrologic$fulcro$dom$node(var_args){\nvar G__60963 = arguments.length;\nswitch (G__60963) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$1 = (function (component){\nreturn ReactDOM.findDOMNode(component);\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$core$IFn$_invoke$arity$2 = (function (component,name){\nvar G__60965 = component.refs;\nvar G__60965__$1 = (((G__60965 == null))?null:goog.object.get(G__60965,name));\nif((G__60965__$1 == null)){\nreturn null;\n} else {\nreturn ReactDOM.findDOMNode(G__60965__$1);\n}\n});\n\ncom.fulcrologic.fulcro.dom.node.cljs$lang$maxFixedArity = 2;\n\n/**\n * Create a DOM element for which there exists no corresponding function.\n * Useful to create DOM elements not included in React.DOM. Equivalent\n * to calling `js/React.createElement`\n */\ncom.fulcrologic.fulcro.dom.create_element = (function com$fulcrologic$fulcro$dom$create_element(var_args){\nvar G__60975 = arguments.length;\nswitch (G__60975) {\ncase 1:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___63456 = arguments.length;\nvar i__4731__auto___63457 = (0);\nwhile(true){\nif((i__4731__auto___63457 < len__4730__auto___63456)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___63457]));\n\nvar G__63458 = (i__4731__auto___63457 + (1));\ni__4731__auto___63457 = G__63458;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$1 = (function (tag){\nreturn com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2(tag,null);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2 = (function (tag,opts){\nreturn React.createElement(tag,opts);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$variadic = (function (tag,opts,children){\nreturn React.createElement(tag,opts,children);\n});\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$applyTo = (function (seq60970){\nvar G__60971 = cljs.core.first(seq60970);\nvar seq60970__$1 = cljs.core.next(seq60970);\nvar G__60972 = cljs.core.first(seq60970__$1);\nvar seq60970__$2 = cljs.core.next(seq60970__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60971,G__60972,seq60970__$2);\n});\n\ncom.fulcrologic.fulcro.dom.create_element.cljs$lang$maxFixedArity = (2);\n\n/**\n * Given props, which can be nil, a js-obj or a clj map: returns a js object.\n */\ncom.fulcrologic.fulcro.dom.convert_props = (function com$fulcrologic$fulcro$dom$convert_props(props){\nif((props == null)){\nreturn ({});\n} else {\nif(cljs.core.map_QMARK_(props)){\nreturn cljs.core.clj__GT_js(props);\n} else {\nreturn props;\n\n}\n}\n});\n/**\n * Used internally by the DOM element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_element_STAR_ = (function com$fulcrologic$fulcro$dom$macro_create_element_STAR_(arr){\nif(cljs.core.array_QMARK_(arr)){\n} else {\nthrow (new Error(\"Assert failed: (array? arr)\"));\n}\n\nreturn React.createElement.apply(null,arr);\n});\n/**\n * Updates the state of the wrapped input element.\n */\ncom.fulcrologic.fulcro.dom.update_state = (function com$fulcrologic$fulcro$dom$update_state(component,next_props,value){\nvar on_change = goog.object.getValueByKeys(component,\"state\",\"onChange\");\nvar next_state = ({});\nvar inputRef = goog.object.get(next_props,\"inputRef\");\nvar G__60980_63460 = next_state;\nvar G__60981_63461 = next_props;\nvar G__60982_63462 = ({\"onChange\": on_change});\ngoog.object.extend(G__60980_63460,G__60981_63461,G__60982_63462);\n\ngoog.object.set(next_state,\"value\",value);\n\nif(cljs.core.truth_(inputRef)){\ngoog.object.remove(next_state,\"inputRef\");\n\ngoog.object.set(next_state,\"ref\",inputRef);\n} else {\n}\n\nreturn component.setState(next_state);\n});\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.dom !== 'undefined') && (typeof com.fulcrologic.fulcro.dom.form_elements_QMARK_ !== 'undefined')){\n} else {\ncom.fulcrologic.fulcro.dom.form_elements_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [\"option\",null,\"select\",null,\"input\",null,\"textarea\",null], null), null);\n}\ncom.fulcrologic.fulcro.dom.is_form_element_QMARK_ = (function com$fulcrologic$fulcro$dom$is_form_element_QMARK_(element){\nvar tag = element.tagName;\nvar and__4120__auto__ = tag;\nif(cljs.core.truth_(and__4120__auto__)){\nvar G__60984 = clojure.string.lower_case(tag);\nreturn (com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(G__60984) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,G__60984));\n} else {\nreturn and__4120__auto__;\n}\n});\ncom.fulcrologic.fulcro.dom.wrap_form_element = (function com$fulcrologic$fulcro$dom$wrap_form_element(element){\nvar ctor = (function (props){\nvar this$ = this;\nthis$.state = (function (){var state = ({\"ref\": goog.object.get(props,\"inputRef\")});\nvar G__60990_63463 = state;\nvar G__60991_63464 = props;\nvar G__60992_63465 = ({\"onChange\": (function (){var G__60993 = goog.object.get(this$,\"onChange\");\nvar G__60994 = this$;\nreturn goog.bind(G__60993,G__60994);\n})()});\ngoog.object.extend(G__60990_63463,G__60991_63464,G__60992_63465);\n\ngoog.object.remove(state,\"inputRef\");\n\nreturn state;\n})();\n\nreturn React.Component.apply(this$,arguments);\n});\nctor.displayName = [\"wrapped-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(element)].join('');\n\ngoog.inherits(ctor,React.Component);\n\nvar x60995_63470 = ctor.prototype;\nx60995_63470.onChange = ((function (x60995_63470,ctor){\nreturn (function (event){\nvar this$ = this;\nvar temp__5753__auto__ = this$.props.onChange;\nif(cljs.core.truth_(temp__5753__auto__)){\nvar handler = temp__5753__auto__;\n(handler.cljs$core$IFn$_invoke$arity$1 ? handler.cljs$core$IFn$_invoke$arity$1(event) : handler.call(null,event));\n\nreturn com.fulcrologic.fulcro.dom.update_state(this$,this$.props,goog.object.getValueByKeys(event,\"target\",\"value\"));\n} else {\nreturn null;\n}\n});})(x60995_63470,ctor))\n;\n\nx60995_63470.componentWillReceiveProps = ((function (x60995_63470,ctor){\nreturn (function (new_props){\nvar this$ = this;\nvar state_value = goog.object.getValueByKeys(this$,\"state\",\"value\");\nvar this_node = ReactDOM.findDOMNode(this$);\nvar value_node = (cljs.core.truth_(com.fulcrologic.fulcro.dom.is_form_element_QMARK_(this_node))?this_node:(function (){var G__60996 = this_node;\nvar G__60997 = ((function (G__60996,state_value,this_node,this$,x60995_63470,ctor){\nreturn (function (p1__60987_SHARP_){\nreturn com.fulcrologic.fulcro.dom.is_form_element_QMARK_(p1__60987_SHARP_);\n});})(G__60996,state_value,this_node,this$,x60995_63470,ctor))\n;\nreturn goog.dom.findNode(G__60996,G__60997);\n})());\nvar element_value = goog.object.get(value_node,\"value\");\nif(cljs.core.truth_(goog.DEBUG)){\nif(cljs.core.truth_((function (){var and__4120__auto__ = state_value;\nif(cljs.core.truth_(and__4120__auto__)){\nvar and__4120__auto____$1 = element_value;\nif(cljs.core.truth_(and__4120__auto____$1)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.type(state_value),cljs.core.type(element_value));\n} else {\nreturn and__4120__auto____$1;\n}\n} else {\nreturn and__4120__auto__;\n}\n})())){\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.dom\",null,149,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (state_value,this_node,value_node,element_value,this$,x60995_63470,ctor){\nreturn (function (){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"There is a mismatch for the data type of the value on an input with value \",element_value,\". This will cause the input to miss refreshes. In general you should force the :value of an input to\\n                be a string since that is how values are stored on most real DOM elements.\"], null);\n});})(state_value,this_node,value_node,element_value,this$,x60995_63470,ctor))\n,null)),null,476042224);\n} else {\n}\n} else {\n}\n\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(state_value,element_value)){\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,element_value);\n} else {\nreturn com.fulcrologic.fulcro.dom.update_state(this$,new_props,goog.object.get(new_props,\"value\"));\n}\n});})(x60995_63470,ctor))\n;\n\nx60995_63470.render = ((function (x60995_63470,ctor){\nreturn (function (){\nvar this$ = this;\nreturn React.createElement(element,this$.state);\n});})(x60995_63470,ctor))\n;\n\n\nvar real_factory = React.createFactory(ctor);\nreturn ((function (real_factory,ctor){\nreturn (function() { \nvar G__63475__delegate = function (props,children){\nvar temp__5751__auto__ = goog.object.get(props,\"ref\");\nif(cljs.core.truth_(temp__5751__auto__)){\nvar r = temp__5751__auto__;\nif(typeof r === 'string'){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n} else {\nvar p = ({});\ngoog.object.extend(p,props);\n\ngoog.object.set(p,\"inputRef\",r);\n\ngoog.object.remove(p,\"ref\");\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,p,children);\n}\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,props,children);\n}\n};\nvar G__63475 = function (props,var_args){\nvar children = null;\nif (arguments.length > 1) {\nvar G__63479__i = 0, G__63479__a = new Array(arguments.length -  1);\nwhile (G__63479__i < G__63479__a.length) {G__63479__a[G__63479__i] = arguments[G__63479__i + 1]; ++G__63479__i;}\n  children = new cljs.core.IndexedSeq(G__63479__a,0,null);\n} \nreturn G__63475__delegate.call(this,props,children);};\nG__63475.cljs$lang$maxFixedArity = 1;\nG__63475.cljs$lang$applyTo = (function (arglist__63480){\nvar props = cljs.core.first(arglist__63480);\nvar children = cljs.core.rest(arglist__63480);\nreturn G__63475__delegate(props,children);\n});\nG__63475.cljs$core$IFn$_invoke$arity$variadic = G__63475__delegate;\nreturn G__63475;\n})()\n;\n;})(real_factory,ctor))\n});\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_input = com.fulcrologic.fulcro.dom.wrap_form_element(\"input\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_textarea = com.fulcrologic.fulcro.dom.wrap_form_element(\"textarea\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_option = com.fulcrologic.fulcro.dom.wrap_form_element(\"option\");\n/**\n * Low-level form input, with no syntactic sugar. Used internally by DOM macros\n */\ncom.fulcrologic.fulcro.dom.wrapped_select = com.fulcrologic.fulcro.dom.wrap_form_element(\"select\");\ncom.fulcrologic.fulcro.dom.arr_append_STAR_ = (function com$fulcrologic$fulcro$dom$arr_append_STAR_(arr,x){\narr.push(x);\n\nreturn arr;\n});\ncom.fulcrologic.fulcro.dom.arr_append = (function com$fulcrologic$fulcro$dom$arr_append(arr,tail){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.arr_append_STAR_,arr,com.fulcrologic.fulcro.components.force_children(tail));\n});\n/**\n * Used internally by element generation.\n */\ncom.fulcrologic.fulcro.dom.macro_create_wrapped_form_element = (function com$fulcrologic$fulcro$dom$macro_create_wrapped_form_element(opts){\nvar tag = (opts[(0)]);\nvar props = (opts[(1)]);\nvar children = opts.splice((2));\nvar G__61011 = tag;\nswitch (G__61011) {\ncase \"input\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_input,props,children);\n\nbreak;\ncase \"textarea\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_textarea,props,children);\n\nbreak;\ncase \"select\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_select,props,children);\n\nbreak;\ncase \"option\":\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.dom.wrapped_option,props,children);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__61011)].join('')));\n\n}\n});\n/**\n * Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\n */\ncom.fulcrologic.fulcro.dom.macro_create_element = (function com$fulcrologic$fulcro$dom$macro_create_element(var_args){\nvar G__61021 = arguments.length;\nswitch (G__61021) {\ncase 2:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$2 = (function (type,args){\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(type,args,null);\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3 = (function (type,args,csskw){\nvar vec__61022 = args;\nvar seq__61023 = cljs.core.seq(vec__61022);\nvar first__61024 = cljs.core.first(seq__61023);\nvar seq__61023__$1 = cljs.core.next(seq__61023);\nvar head = first__61024;\nvar tail = seq__61023__$1;\nvar f = (cljs.core.truth_((com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.dom.form_elements_QMARK_.cljs$core$IFn$_invoke$arity$1(type) : com.fulcrologic.fulcro.dom.form_elements_QMARK_.call(null,type)))?com.fulcrologic.fulcro.dom.macro_create_wrapped_form_element:com.fulcrologic.fulcro.dom.macro_create_element_STAR_);\nif((head == null)){\nvar G__61025 = (function (){var G__61026 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__61026,tail);\n\nreturn G__61026;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__61025) : f.call(null,G__61025));\n} else {\nif(com.fulcrologic.fulcro.dom.element_QMARK_(head)){\nvar G__61028 = (function (){var G__61030 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__61030,args);\n\nreturn G__61030;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__61028) : f.call(null,G__61028));\n} else {\nif(cljs.core.object_QMARK_(head)){\nvar G__61031 = (function (){var G__61033 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(head,csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__61033,tail);\n\nreturn G__61033;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__61031) : f.call(null,G__61031));\n} else {\nif(cljs.core.map_QMARK_(head)){\nvar G__61035 = (function (){var G__61037 = [type,cljs.core.clj__GT_js(com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(com.fulcrologic.fulcro.dom_common.interpret_classes(head),csskw))];\ncom.fulcrologic.fulcro.dom.arr_append(G__61037,tail);\n\nreturn G__61037;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__61035) : f.call(null,G__61035));\n} else {\nvar G__61040 = (function (){var G__61041 = [type,com.fulcrologic.fulcro.dom_common.add_kwprops_to_props(({}),csskw)];\ncom.fulcrologic.fulcro.dom.arr_append(G__61041,args);\n\nreturn G__61041;\n})();\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__61040) : f.call(null,G__61040));\n\n}\n}\n}\n}\n});\n\ncom.fulcrologic.fulcro.dom.macro_create_element.cljs$lang$maxFixedArity = 3;\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (form \"hello\")\n * (form nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (form {:onClick f} \"hello\")\n * (form #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (form :#the-id.klass.other-klass \"hello\")\n * (form :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.form = (function com$fulcrologic$fulcro$dom$form(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63500 = arguments.length;\nvar i__4731__auto___63502 = (0);\nwhile(true){\nif((i__4731__auto___63502 < len__4730__auto___63500)){\nargs__4736__auto__.push((arguments[i__4731__auto___63502]));\n\nvar G__63503 = (i__4731__auto___63502 + (1));\ni__4731__auto___63502 = G__63503;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61074 = conformed_args__59513__auto__;\nvar map__61074__$1 = (((((!((map__61074 == null))))?(((((map__61074.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61074.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61074):map__61074);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61074__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61074__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61074__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"form\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.form.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.form.cljs$lang$applyTo = (function (seq61062){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61062));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (audio \"hello\")\n * (audio nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (audio {:onClick f} \"hello\")\n * (audio #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (audio :#the-id.klass.other-klass \"hello\")\n * (audio :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.audio = (function com$fulcrologic$fulcro$dom$audio(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63505 = arguments.length;\nvar i__4731__auto___63506 = (0);\nwhile(true){\nif((i__4731__auto___63506 < len__4730__auto___63505)){\nargs__4736__auto__.push((arguments[i__4731__auto___63506]));\n\nvar G__63507 = (i__4731__auto___63506 + (1));\ni__4731__auto___63506 = G__63507;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61102 = conformed_args__59513__auto__;\nvar map__61102__$1 = (((((!((map__61102 == null))))?(((((map__61102.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61102.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61102):map__61102);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61102__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61102__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61102__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"audio\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.audio.cljs$lang$applyTo = (function (seq61096){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61096));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (input \"hello\")\n * (input nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (input {:onClick f} \"hello\")\n * (input #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (input :#the-id.klass.other-klass \"hello\")\n * (input :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.input = (function com$fulcrologic$fulcro$dom$input(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63508 = arguments.length;\nvar i__4731__auto___63509 = (0);\nwhile(true){\nif((i__4731__auto___63509 < len__4730__auto___63508)){\nargs__4736__auto__.push((arguments[i__4731__auto___63509]));\n\nvar G__63510 = (i__4731__auto___63509 + (1));\ni__4731__auto___63509 = G__63510;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61116 = conformed_args__59513__auto__;\nvar map__61116__$1 = (((((!((map__61116 == null))))?(((((map__61116.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61116.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61116):map__61116);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61116__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61116__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61116__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"input\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.input.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.input.cljs$lang$applyTo = (function (seq61111){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61111));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menuitem \"hello\")\n * (menuitem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menuitem {:onClick f} \"hello\")\n * (menuitem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menuitem :#the-id.klass.other-klass \"hello\")\n * (menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.menuitem = (function com$fulcrologic$fulcro$dom$menuitem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63511 = arguments.length;\nvar i__4731__auto___63513 = (0);\nwhile(true){\nif((i__4731__auto___63513 < len__4730__auto___63511)){\nargs__4736__auto__.push((arguments[i__4731__auto___63513]));\n\nvar G__63517 = (i__4731__auto___63513 + (1));\ni__4731__auto___63513 = G__63517;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61127 = conformed_args__59513__auto__;\nvar map__61127__$1 = (((((!((map__61127 == null))))?(((((map__61127.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61127.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61127):map__61127);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61127__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61127__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61127__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menuitem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menuitem.cljs$lang$applyTo = (function (seq61124){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61124));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (radialGradient \"hello\")\n * (radialGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (radialGradient {:onClick f} \"hello\")\n * (radialGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (radialGradient :#the-id.klass.other-klass \"hello\")\n * (radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.radialGradient = (function com$fulcrologic$fulcro$dom$radialGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63520 = arguments.length;\nvar i__4731__auto___63521 = (0);\nwhile(true){\nif((i__4731__auto___63521 < len__4730__auto___63520)){\nargs__4736__auto__.push((arguments[i__4731__auto___63521]));\n\nvar G__63522 = (i__4731__auto___63521 + (1));\ni__4731__auto___63521 = G__63522;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61144 = conformed_args__59513__auto__;\nvar map__61144__$1 = (((((!((map__61144 == null))))?(((((map__61144.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61144.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61144):map__61144);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61144__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61144__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61144__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"radialGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.radialGradient.cljs$lang$applyTo = (function (seq61134){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61134));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMerge \"hello\")\n * (feMerge nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMerge {:onClick f} \"hello\")\n * (feMerge #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMerge :#the-id.klass.other-klass \"hello\")\n * (feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMerge = (function com$fulcrologic$fulcro$dom$feMerge(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63526 = arguments.length;\nvar i__4731__auto___63527 = (0);\nwhile(true){\nif((i__4731__auto___63527 < len__4730__auto___63526)){\nargs__4736__auto__.push((arguments[i__4731__auto___63527]));\n\nvar G__63529 = (i__4731__auto___63527 + (1));\ni__4731__auto___63527 = G__63529;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61166 = conformed_args__59513__auto__;\nvar map__61166__$1 = (((((!((map__61166 == null))))?(((((map__61166.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61166.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61166):map__61166);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61166__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61166__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61166__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMerge\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMerge.cljs$lang$applyTo = (function (seq61162){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61162));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (set \"hello\")\n * (set nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (set {:onClick f} \"hello\")\n * (set #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (set :#the-id.klass.other-klass \"hello\")\n * (set :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.set = (function com$fulcrologic$fulcro$dom$set(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63531 = arguments.length;\nvar i__4731__auto___63532 = (0);\nwhile(true){\nif((i__4731__auto___63532 < len__4730__auto___63531)){\nargs__4736__auto__.push((arguments[i__4731__auto___63532]));\n\nvar G__63533 = (i__4731__auto___63532 + (1));\ni__4731__auto___63532 = G__63533;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61192 = conformed_args__59513__auto__;\nvar map__61192__$1 = (((((!((map__61192 == null))))?(((((map__61192.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61192.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61192):map__61192);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61192__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61192__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61192__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"set\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.set.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.set.cljs$lang$applyTo = (function (seq61182){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61182));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting \"hello\")\n * (feSpecularLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpecularLighting {:onClick f} \"hello\")\n * (feSpecularLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpecularLighting :#the-id.klass.other-klass \"hello\")\n * (feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feSpecularLighting = (function com$fulcrologic$fulcro$dom$feSpecularLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63538 = arguments.length;\nvar i__4731__auto___63539 = (0);\nwhile(true){\nif((i__4731__auto___63539 < len__4730__auto___63538)){\nargs__4736__auto__.push((arguments[i__4731__auto___63539]));\n\nvar G__63540 = (i__4731__auto___63539 + (1));\ni__4731__auto___63539 = G__63540;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61210 = conformed_args__59513__auto__;\nvar map__61210__$1 = (((((!((map__61210 == null))))?(((((map__61210.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61210.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61210):map__61210);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61210__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61210__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61210__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpecularLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpecularLighting.cljs$lang$applyTo = (function (seq61203){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61203));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (base \"hello\")\n * (base nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (base {:onClick f} \"hello\")\n * (base #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (base :#the-id.klass.other-klass \"hello\")\n * (base :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.base = (function com$fulcrologic$fulcro$dom$base(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63547 = arguments.length;\nvar i__4731__auto___63548 = (0);\nwhile(true){\nif((i__4731__auto___63548 < len__4730__auto___63547)){\nargs__4736__auto__.push((arguments[i__4731__auto___63548]));\n\nvar G__63549 = (i__4731__auto___63548 + (1));\ni__4731__auto___63548 = G__63549;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61247 = conformed_args__59513__auto__;\nvar map__61247__$1 = (((((!((map__61247 == null))))?(((((map__61247.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61247.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61247):map__61247);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61247__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61247__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61247__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"base\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.base.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.base.cljs$lang$applyTo = (function (seq61242){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61242));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h1 \"hello\")\n * (h1 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h1 {:onClick f} \"hello\")\n * (h1 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h1 :#the-id.klass.other-klass \"hello\")\n * (h1 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h1 = (function com$fulcrologic$fulcro$dom$h1(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63553 = arguments.length;\nvar i__4731__auto___63554 = (0);\nwhile(true){\nif((i__4731__auto___63554 < len__4730__auto___63553)){\nargs__4736__auto__.push((arguments[i__4731__auto___63554]));\n\nvar G__63555 = (i__4731__auto___63554 + (1));\ni__4731__auto___63554 = G__63555;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61286 = conformed_args__59513__auto__;\nvar map__61286__$1 = (((((!((map__61286 == null))))?(((((map__61286.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61286.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61286):map__61286);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61286__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61286__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61286__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h1\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h1.cljs$lang$applyTo = (function (seq61281){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61281));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feOffset \"hello\")\n * (feOffset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feOffset {:onClick f} \"hello\")\n * (feOffset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feOffset :#the-id.klass.other-klass \"hello\")\n * (feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feOffset = (function com$fulcrologic$fulcro$dom$feOffset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63558 = arguments.length;\nvar i__4731__auto___63559 = (0);\nwhile(true){\nif((i__4731__auto___63559 < len__4730__auto___63558)){\nargs__4736__auto__.push((arguments[i__4731__auto___63559]));\n\nvar G__63560 = (i__4731__auto___63559 + (1));\ni__4731__auto___63559 = G__63560;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61300 = conformed_args__59513__auto__;\nvar map__61300__$1 = (((((!((map__61300 == null))))?(((((map__61300.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61300.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61300):map__61300);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61300__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61300__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61300__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feOffset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feOffset.cljs$lang$applyTo = (function (seq61298){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61298));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (embed \"hello\")\n * (embed nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (embed {:onClick f} \"hello\")\n * (embed #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (embed :#the-id.klass.other-klass \"hello\")\n * (embed :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.embed = (function com$fulcrologic$fulcro$dom$embed(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63561 = arguments.length;\nvar i__4731__auto___63562 = (0);\nwhile(true){\nif((i__4731__auto___63562 < len__4730__auto___63561)){\nargs__4736__auto__.push((arguments[i__4731__auto___63562]));\n\nvar G__63563 = (i__4731__auto___63562 + (1));\ni__4731__auto___63562 = G__63563;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61320 = conformed_args__59513__auto__;\nvar map__61320__$1 = (((((!((map__61320 == null))))?(((((map__61320.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61320.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61320):map__61320);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61320__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61320__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61320__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"embed\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.embed.cljs$lang$applyTo = (function (seq61318){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61318));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateMotion \"hello\")\n * (animateMotion nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateMotion {:onClick f} \"hello\")\n * (animateMotion #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateMotion :#the-id.klass.other-klass \"hello\")\n * (animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateMotion = (function com$fulcrologic$fulcro$dom$animateMotion(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63564 = arguments.length;\nvar i__4731__auto___63565 = (0);\nwhile(true){\nif((i__4731__auto___63565 < len__4730__auto___63564)){\nargs__4736__auto__.push((arguments[i__4731__auto___63565]));\n\nvar G__63566 = (i__4731__auto___63565 + (1));\ni__4731__auto___63565 = G__63566;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61337 = conformed_args__59513__auto__;\nvar map__61337__$1 = (((((!((map__61337 == null))))?(((((map__61337.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61337.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61337):map__61337);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61337__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61337__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61337__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateMotion\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateMotion.cljs$lang$applyTo = (function (seq61329){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61329));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h3 \"hello\")\n * (h3 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h3 {:onClick f} \"hello\")\n * (h3 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h3 :#the-id.klass.other-klass \"hello\")\n * (h3 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h3 = (function com$fulcrologic$fulcro$dom$h3(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63569 = arguments.length;\nvar i__4731__auto___63570 = (0);\nwhile(true){\nif((i__4731__auto___63570 < len__4730__auto___63569)){\nargs__4736__auto__.push((arguments[i__4731__auto___63570]));\n\nvar G__63572 = (i__4731__auto___63570 + (1));\ni__4731__auto___63570 = G__63572;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61352 = conformed_args__59513__auto__;\nvar map__61352__$1 = (((((!((map__61352 == null))))?(((((map__61352.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61352.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61352):map__61352);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61352__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61352__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61352__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h3\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h3.cljs$lang$applyTo = (function (seq61343){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61343));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (body \"hello\")\n * (body nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (body {:onClick f} \"hello\")\n * (body #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (body :#the-id.klass.other-klass \"hello\")\n * (body :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.body = (function com$fulcrologic$fulcro$dom$body(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63580 = arguments.length;\nvar i__4731__auto___63581 = (0);\nwhile(true){\nif((i__4731__auto___63581 < len__4730__auto___63580)){\nargs__4736__auto__.push((arguments[i__4731__auto___63581]));\n\nvar G__63582 = (i__4731__auto___63581 + (1));\ni__4731__auto___63581 = G__63582;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61370 = conformed_args__59513__auto__;\nvar map__61370__$1 = (((((!((map__61370 == null))))?(((((map__61370.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61370.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61370):map__61370);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61370__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61370__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61370__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"body\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.body.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.body.cljs$lang$applyTo = (function (seq61362){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61362));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hkern \"hello\")\n * (hkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hkern {:onClick f} \"hello\")\n * (hkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hkern :#the-id.klass.other-klass \"hello\")\n * (hkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hkern = (function com$fulcrologic$fulcro$dom$hkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63591 = arguments.length;\nvar i__4731__auto___63592 = (0);\nwhile(true){\nif((i__4731__auto___63592 < len__4730__auto___63591)){\nargs__4736__auto__.push((arguments[i__4731__auto___63592]));\n\nvar G__63594 = (i__4731__auto___63592 + (1));\ni__4731__auto___63592 = G__63594;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61381 = conformed_args__59513__auto__;\nvar map__61381__$1 = (((((!((map__61381 == null))))?(((((map__61381.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61381.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61381):map__61381);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61381__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61381__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61381__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hkern.cljs$lang$applyTo = (function (seq61378){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61378));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (keygen \"hello\")\n * (keygen nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (keygen {:onClick f} \"hello\")\n * (keygen #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (keygen :#the-id.klass.other-klass \"hello\")\n * (keygen :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.keygen = (function com$fulcrologic$fulcro$dom$keygen(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63598 = arguments.length;\nvar i__4731__auto___63599 = (0);\nwhile(true){\nif((i__4731__auto___63599 < len__4730__auto___63598)){\nargs__4736__auto__.push((arguments[i__4731__auto___63599]));\n\nvar G__63600 = (i__4731__auto___63599 + (1));\ni__4731__auto___63599 = G__63600;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61388 = conformed_args__59513__auto__;\nvar map__61388__$1 = (((((!((map__61388 == null))))?(((((map__61388.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61388.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61388):map__61388);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61388__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61388__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61388__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"keygen\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.keygen.cljs$lang$applyTo = (function (seq61385){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61385));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-format \"hello\")\n * (font-face-format nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-format {:onClick f} \"hello\")\n * (font-face-format #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-format :#the-id.klass.other-klass \"hello\")\n * (font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_format = (function com$fulcrologic$fulcro$dom$font_face_format(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63607 = arguments.length;\nvar i__4731__auto___63608 = (0);\nwhile(true){\nif((i__4731__auto___63608 < len__4730__auto___63607)){\nargs__4736__auto__.push((arguments[i__4731__auto___63608]));\n\nvar G__63609 = (i__4731__auto___63608 + (1));\ni__4731__auto___63608 = G__63609;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61405 = conformed_args__59513__auto__;\nvar map__61405__$1 = (((((!((map__61405 == null))))?(((((map__61405.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61405.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61405):map__61405);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61405__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61405__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61405__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-format\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_format.cljs$lang$applyTo = (function (seq61399){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61399));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncA \"hello\")\n * (feFuncA nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncA {:onClick f} \"hello\")\n * (feFuncA #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncA :#the-id.klass.other-klass \"hello\")\n * (feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncA = (function com$fulcrologic$fulcro$dom$feFuncA(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63612 = arguments.length;\nvar i__4731__auto___63613 = (0);\nwhile(true){\nif((i__4731__auto___63613 < len__4730__auto___63612)){\nargs__4736__auto__.push((arguments[i__4731__auto___63613]));\n\nvar G__63614 = (i__4731__auto___63613 + (1));\ni__4731__auto___63613 = G__63614;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61419 = conformed_args__59513__auto__;\nvar map__61419__$1 = (((((!((map__61419 == null))))?(((((map__61419.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61419.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61419):map__61419);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61419__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61419__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61419__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncA\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncA.cljs$lang$applyTo = (function (seq61417){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61417));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (progress \"hello\")\n * (progress nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (progress {:onClick f} \"hello\")\n * (progress #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (progress :#the-id.klass.other-klass \"hello\")\n * (progress :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.progress = (function com$fulcrologic$fulcro$dom$progress(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63619 = arguments.length;\nvar i__4731__auto___63620 = (0);\nwhile(true){\nif((i__4731__auto___63620 < len__4730__auto___63619)){\nargs__4736__auto__.push((arguments[i__4731__auto___63620]));\n\nvar G__63624 = (i__4731__auto___63620 + (1));\ni__4731__auto___63620 = G__63624;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61432 = conformed_args__59513__auto__;\nvar map__61432__$1 = (((((!((map__61432 == null))))?(((((map__61432.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61432.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61432):map__61432);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61432__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61432__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61432__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"progress\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.progress.cljs$lang$applyTo = (function (seq61426){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61426));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (main \"hello\")\n * (main nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (main {:onClick f} \"hello\")\n * (main #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (main :#the-id.klass.other-klass \"hello\")\n * (main :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.main = (function com$fulcrologic$fulcro$dom$main(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63626 = arguments.length;\nvar i__4731__auto___63627 = (0);\nwhile(true){\nif((i__4731__auto___63627 < len__4730__auto___63626)){\nargs__4736__auto__.push((arguments[i__4731__auto___63627]));\n\nvar G__63631 = (i__4731__auto___63627 + (1));\ni__4731__auto___63627 = G__63631;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61444 = conformed_args__59513__auto__;\nvar map__61444__$1 = (((((!((map__61444 == null))))?(((((map__61444.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61444.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61444):map__61444);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61444__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61444__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61444__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"main\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.main.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.main.cljs$lang$applyTo = (function (seq61437){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61437));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cite \"hello\")\n * (cite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cite {:onClick f} \"hello\")\n * (cite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cite :#the-id.klass.other-klass \"hello\")\n * (cite :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.cite = (function com$fulcrologic$fulcro$dom$cite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63637 = arguments.length;\nvar i__4731__auto___63638 = (0);\nwhile(true){\nif((i__4731__auto___63638 < len__4730__auto___63637)){\nargs__4736__auto__.push((arguments[i__4731__auto___63638]));\n\nvar G__63639 = (i__4731__auto___63638 + (1));\ni__4731__auto___63638 = G__63639;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61475 = conformed_args__59513__auto__;\nvar map__61475__$1 = (((((!((map__61475 == null))))?(((((map__61475.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61475.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61475):map__61475);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61475__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61475__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61475__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cite.cljs$lang$applyTo = (function (seq61459){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61459));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rect \"hello\")\n * (rect nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rect {:onClick f} \"hello\")\n * (rect #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rect :#the-id.klass.other-klass \"hello\")\n * (rect :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rect = (function com$fulcrologic$fulcro$dom$rect(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63646 = arguments.length;\nvar i__4731__auto___63647 = (0);\nwhile(true){\nif((i__4731__auto___63647 < len__4730__auto___63646)){\nargs__4736__auto__.push((arguments[i__4731__auto___63647]));\n\nvar G__63648 = (i__4731__auto___63647 + (1));\ni__4731__auto___63647 = G__63648;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61495 = conformed_args__59513__auto__;\nvar map__61495__$1 = (((((!((map__61495 == null))))?(((((map__61495.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61495.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61495):map__61495);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61495__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61495__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61495__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rect\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rect.cljs$lang$applyTo = (function (seq61488){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61488));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tref \"hello\")\n * (tref nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tref {:onClick f} \"hello\")\n * (tref #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tref :#the-id.klass.other-klass \"hello\")\n * (tref :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tref = (function com$fulcrologic$fulcro$dom$tref(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63651 = arguments.length;\nvar i__4731__auto___63652 = (0);\nwhile(true){\nif((i__4731__auto___63652 < len__4730__auto___63651)){\nargs__4736__auto__.push((arguments[i__4731__auto___63652]));\n\nvar G__63653 = (i__4731__auto___63652 + (1));\ni__4731__auto___63652 = G__63653;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61504 = conformed_args__59513__auto__;\nvar map__61504__$1 = (((((!((map__61504 == null))))?(((((map__61504.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61504.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61504):map__61504);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61504__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61504__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61504__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tref\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tref.cljs$lang$applyTo = (function (seq61502){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61502));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshpatch \"hello\")\n * (meshpatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshpatch {:onClick f} \"hello\")\n * (meshpatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshpatch :#the-id.klass.other-klass \"hello\")\n * (meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshpatch = (function com$fulcrologic$fulcro$dom$meshpatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63654 = arguments.length;\nvar i__4731__auto___63655 = (0);\nwhile(true){\nif((i__4731__auto___63655 < len__4730__auto___63654)){\nargs__4736__auto__.push((arguments[i__4731__auto___63655]));\n\nvar G__63656 = (i__4731__auto___63655 + (1));\ni__4731__auto___63655 = G__63656;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61516 = conformed_args__59513__auto__;\nvar map__61516__$1 = (((((!((map__61516 == null))))?(((((map__61516.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61516.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61516):map__61516);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61516__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61516__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61516__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshpatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshpatch.cljs$lang$applyTo = (function (seq61512){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61512));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polyline \"hello\")\n * (polyline nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polyline {:onClick f} \"hello\")\n * (polyline #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polyline :#the-id.klass.other-klass \"hello\")\n * (polyline :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.polyline = (function com$fulcrologic$fulcro$dom$polyline(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63658 = arguments.length;\nvar i__4731__auto___63659 = (0);\nwhile(true){\nif((i__4731__auto___63659 < len__4730__auto___63658)){\nargs__4736__auto__.push((arguments[i__4731__auto___63659]));\n\nvar G__63660 = (i__4731__auto___63659 + (1));\ni__4731__auto___63659 = G__63660;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61538 = conformed_args__59513__auto__;\nvar map__61538__$1 = (((((!((map__61538 == null))))?(((((map__61538.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61538.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61538):map__61538);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61538__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61538__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61538__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polyline\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polyline.cljs$lang$applyTo = (function (seq61531){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61531));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (metadata \"hello\")\n * (metadata nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (metadata {:onClick f} \"hello\")\n * (metadata #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (metadata :#the-id.klass.other-klass \"hello\")\n * (metadata :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.metadata = (function com$fulcrologic$fulcro$dom$metadata(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63661 = arguments.length;\nvar i__4731__auto___63662 = (0);\nwhile(true){\nif((i__4731__auto___63662 < len__4730__auto___63661)){\nargs__4736__auto__.push((arguments[i__4731__auto___63662]));\n\nvar G__63663 = (i__4731__auto___63662 + (1));\ni__4731__auto___63662 = G__63663;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61551 = conformed_args__59513__auto__;\nvar map__61551__$1 = (((((!((map__61551 == null))))?(((((map__61551.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61551.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61551):map__61551);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61551__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61551__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61551__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"metadata\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.metadata.cljs$lang$applyTo = (function (seq61544){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61544));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (map \"hello\")\n * (map nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (map {:onClick f} \"hello\")\n * (map #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (map :#the-id.klass.other-klass \"hello\")\n * (map :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.map = (function com$fulcrologic$fulcro$dom$map(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63666 = arguments.length;\nvar i__4731__auto___63667 = (0);\nwhile(true){\nif((i__4731__auto___63667 < len__4730__auto___63666)){\nargs__4736__auto__.push((arguments[i__4731__auto___63667]));\n\nvar G__63668 = (i__4731__auto___63667 + (1));\ni__4731__auto___63667 = G__63668;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61559 = conformed_args__59513__auto__;\nvar map__61559__$1 = (((((!((map__61559 == null))))?(((((map__61559.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61559.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61559):map__61559);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61559__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61559__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61559__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"map\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.map.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.map.cljs$lang$applyTo = (function (seq61555){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61555));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (object \"hello\")\n * (object nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (object {:onClick f} \"hello\")\n * (object #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (object :#the-id.klass.other-klass \"hello\")\n * (object :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.object = (function com$fulcrologic$fulcro$dom$object(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63669 = arguments.length;\nvar i__4731__auto___63670 = (0);\nwhile(true){\nif((i__4731__auto___63670 < len__4730__auto___63669)){\nargs__4736__auto__.push((arguments[i__4731__auto___63670]));\n\nvar G__63671 = (i__4731__auto___63670 + (1));\ni__4731__auto___63670 = G__63671;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61573 = conformed_args__59513__auto__;\nvar map__61573__$1 = (((((!((map__61573 == null))))?(((((map__61573.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61573.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61573):map__61573);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61573__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61573__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61573__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"object\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.object.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.object.cljs$lang$applyTo = (function (seq61566){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61566));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (i \"hello\")\n * (i nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (i {:onClick f} \"hello\")\n * (i #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (i :#the-id.klass.other-klass \"hello\")\n * (i :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.i = (function com$fulcrologic$fulcro$dom$i(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63672 = arguments.length;\nvar i__4731__auto___63673 = (0);\nwhile(true){\nif((i__4731__auto___63673 < len__4730__auto___63672)){\nargs__4736__auto__.push((arguments[i__4731__auto___63673]));\n\nvar G__63674 = (i__4731__auto___63673 + (1));\ni__4731__auto___63673 = G__63674;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61584 = conformed_args__59513__auto__;\nvar map__61584__$1 = (((((!((map__61584 == null))))?(((((map__61584.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61584.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61584):map__61584);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61584__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61584__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61584__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"i\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.i.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.i.cljs$lang$applyTo = (function (seq61581){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61581));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-name \"hello\")\n * (font-face-name nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-name {:onClick f} \"hello\")\n * (font-face-name #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-name :#the-id.klass.other-klass \"hello\")\n * (font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_name = (function com$fulcrologic$fulcro$dom$font_face_name(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63675 = arguments.length;\nvar i__4731__auto___63676 = (0);\nwhile(true){\nif((i__4731__auto___63676 < len__4730__auto___63675)){\nargs__4736__auto__.push((arguments[i__4731__auto___63676]));\n\nvar G__63677 = (i__4731__auto___63676 + (1));\ni__4731__auto___63676 = G__63677;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61591 = conformed_args__59513__auto__;\nvar map__61591__$1 = (((((!((map__61591 == null))))?(((((map__61591.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61591.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61591):map__61591);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61591__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61591__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61591__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-name\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_name.cljs$lang$applyTo = (function (seq61589){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61589));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (p \"hello\")\n * (p nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (p {:onClick f} \"hello\")\n * (p #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (p :#the-id.klass.other-klass \"hello\")\n * (p :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.p = (function com$fulcrologic$fulcro$dom$p(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63678 = arguments.length;\nvar i__4731__auto___63679 = (0);\nwhile(true){\nif((i__4731__auto___63679 < len__4730__auto___63678)){\nargs__4736__auto__.push((arguments[i__4731__auto___63679]));\n\nvar G__63680 = (i__4731__auto___63679 + (1));\ni__4731__auto___63679 = G__63680;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61600 = conformed_args__59513__auto__;\nvar map__61600__$1 = (((((!((map__61600 == null))))?(((((map__61600.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61600.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61600):map__61600);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61600__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61600__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61600__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"p\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.p.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.p.cljs$lang$applyTo = (function (seq61596){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61596));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncR \"hello\")\n * (feFuncR nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncR {:onClick f} \"hello\")\n * (feFuncR #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncR :#the-id.klass.other-klass \"hello\")\n * (feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncR = (function com$fulcrologic$fulcro$dom$feFuncR(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63681 = arguments.length;\nvar i__4731__auto___63682 = (0);\nwhile(true){\nif((i__4731__auto___63682 < len__4730__auto___63681)){\nargs__4736__auto__.push((arguments[i__4731__auto___63682]));\n\nvar G__63683 = (i__4731__auto___63682 + (1));\ni__4731__auto___63682 = G__63683;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61616 = conformed_args__59513__auto__;\nvar map__61616__$1 = (((((!((map__61616 == null))))?(((((map__61616.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61616.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61616):map__61616);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61616__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61616__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61616__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncR\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncR.cljs$lang$applyTo = (function (seq61608){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61608));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatchpath \"hello\")\n * (hatchpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatchpath {:onClick f} \"hello\")\n * (hatchpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatchpath :#the-id.klass.other-klass \"hello\")\n * (hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hatchpath = (function com$fulcrologic$fulcro$dom$hatchpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63684 = arguments.length;\nvar i__4731__auto___63685 = (0);\nwhile(true){\nif((i__4731__auto___63685 < len__4730__auto___63684)){\nargs__4736__auto__.push((arguments[i__4731__auto___63685]));\n\nvar G__63686 = (i__4731__auto___63685 + (1));\ni__4731__auto___63685 = G__63686;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61626 = conformed_args__59513__auto__;\nvar map__61626__$1 = (((((!((map__61626 == null))))?(((((map__61626.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61626.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61626):map__61626);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61626__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61626__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61626__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatchpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatchpath.cljs$lang$applyTo = (function (seq61623){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61623));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphItem \"hello\")\n * (altGlyphItem nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphItem {:onClick f} \"hello\")\n * (altGlyphItem #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphItem :#the-id.klass.other-klass \"hello\")\n * (altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyphItem = (function com$fulcrologic$fulcro$dom$altGlyphItem(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63687 = arguments.length;\nvar i__4731__auto___63688 = (0);\nwhile(true){\nif((i__4731__auto___63688 < len__4730__auto___63687)){\nargs__4736__auto__.push((arguments[i__4731__auto___63688]));\n\nvar G__63689 = (i__4731__auto___63688 + (1));\ni__4731__auto___63688 = G__63689;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61638 = conformed_args__59513__auto__;\nvar map__61638__$1 = (((((!((map__61638 == null))))?(((((map__61638.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61638.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61638):map__61638);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61638__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61638__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61638__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphItem\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphItem.cljs$lang$applyTo = (function (seq61630){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61630));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (nav \"hello\")\n * (nav nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (nav {:onClick f} \"hello\")\n * (nav #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (nav :#the-id.klass.other-klass \"hello\")\n * (nav :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.nav = (function com$fulcrologic$fulcro$dom$nav(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63692 = arguments.length;\nvar i__4731__auto___63693 = (0);\nwhile(true){\nif((i__4731__auto___63693 < len__4730__auto___63692)){\nargs__4736__auto__.push((arguments[i__4731__auto___63693]));\n\nvar G__63694 = (i__4731__auto___63693 + (1));\ni__4731__auto___63693 = G__63694;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61651 = conformed_args__59513__auto__;\nvar map__61651__$1 = (((((!((map__61651 == null))))?(((((map__61651.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61651.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61651):map__61651);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61651__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61651__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61651__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"nav\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.nav.cljs$lang$applyTo = (function (seq61644){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61644));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ruby \"hello\")\n * (ruby nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ruby {:onClick f} \"hello\")\n * (ruby #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ruby :#the-id.klass.other-klass \"hello\")\n * (ruby :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ruby = (function com$fulcrologic$fulcro$dom$ruby(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63696 = arguments.length;\nvar i__4731__auto___63697 = (0);\nwhile(true){\nif((i__4731__auto___63697 < len__4730__auto___63696)){\nargs__4736__auto__.push((arguments[i__4731__auto___63697]));\n\nvar G__63698 = (i__4731__auto___63697 + (1));\ni__4731__auto___63697 = G__63698;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61671 = conformed_args__59513__auto__;\nvar map__61671__$1 = (((((!((map__61671 == null))))?(((((map__61671.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61671.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61671):map__61671);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61671__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61671__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61671__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ruby\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ruby.cljs$lang$applyTo = (function (seq61660){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61660));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (switch \"hello\")\n * (switch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (switch {:onClick f} \"hello\")\n * (switch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (switch :#the-id.klass.other-klass \"hello\")\n * (switch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.switch$ = (function com$fulcrologic$fulcro$dom$switch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63708 = arguments.length;\nvar i__4731__auto___63709 = (0);\nwhile(true){\nif((i__4731__auto___63709 < len__4730__auto___63708)){\nargs__4736__auto__.push((arguments[i__4731__auto___63709]));\n\nvar G__63711 = (i__4731__auto___63709 + (1));\ni__4731__auto___63709 = G__63711;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61689 = conformed_args__59513__auto__;\nvar map__61689__$1 = (((((!((map__61689 == null))))?(((((map__61689.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61689.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61689):map__61689);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61689__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61689__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61689__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"switch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.switch$.cljs$lang$applyTo = (function (seq61684){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61684));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (a \"hello\")\n * (a nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (a {:onClick f} \"hello\")\n * (a #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (a :#the-id.klass.other-klass \"hello\")\n * (a :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.a = (function com$fulcrologic$fulcro$dom$a(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63715 = arguments.length;\nvar i__4731__auto___63716 = (0);\nwhile(true){\nif((i__4731__auto___63716 < len__4730__auto___63715)){\nargs__4736__auto__.push((arguments[i__4731__auto___63716]));\n\nvar G__63717 = (i__4731__auto___63716 + (1));\ni__4731__auto___63716 = G__63717;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61713 = conformed_args__59513__auto__;\nvar map__61713__$1 = (((((!((map__61713 == null))))?(((((map__61713.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61713.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61713):map__61713);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61713__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61713__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61713__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"a\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.a.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.a.cljs$lang$applyTo = (function (seq61705){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61705));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (view \"hello\")\n * (view nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (view {:onClick f} \"hello\")\n * (view #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (view :#the-id.klass.other-klass \"hello\")\n * (view :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.view = (function com$fulcrologic$fulcro$dom$view(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63722 = arguments.length;\nvar i__4731__auto___63723 = (0);\nwhile(true){\nif((i__4731__auto___63723 < len__4730__auto___63722)){\nargs__4736__auto__.push((arguments[i__4731__auto___63723]));\n\nvar G__63726 = (i__4731__auto___63723 + (1));\ni__4731__auto___63723 = G__63726;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61728 = conformed_args__59513__auto__;\nvar map__61728__$1 = (((((!((map__61728 == null))))?(((((map__61728.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61728.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61728):map__61728);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61728__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61728__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61728__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"view\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.view.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.view.cljs$lang$applyTo = (function (seq61726){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61726));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (menu \"hello\")\n * (menu nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (menu {:onClick f} \"hello\")\n * (menu #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (menu :#the-id.klass.other-klass \"hello\")\n * (menu :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.menu = (function com$fulcrologic$fulcro$dom$menu(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63728 = arguments.length;\nvar i__4731__auto___63729 = (0);\nwhile(true){\nif((i__4731__auto___63729 < len__4730__auto___63728)){\nargs__4736__auto__.push((arguments[i__4731__auto___63729]));\n\nvar G__63730 = (i__4731__auto___63729 + (1));\ni__4731__auto___63729 = G__63730;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61738 = conformed_args__59513__auto__;\nvar map__61738__$1 = (((((!((map__61738 == null))))?(((((map__61738.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61738.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61738):map__61738);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61738__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61738__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61738__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"menu\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.menu.cljs$lang$applyTo = (function (seq61735){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61735));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (blockquote \"hello\")\n * (blockquote nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (blockquote {:onClick f} \"hello\")\n * (blockquote #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (blockquote :#the-id.klass.other-klass \"hello\")\n * (blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.blockquote = (function com$fulcrologic$fulcro$dom$blockquote(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63735 = arguments.length;\nvar i__4731__auto___63736 = (0);\nwhile(true){\nif((i__4731__auto___63736 < len__4730__auto___63735)){\nargs__4736__auto__.push((arguments[i__4731__auto___63736]));\n\nvar G__63737 = (i__4731__auto___63736 + (1));\ni__4731__auto___63736 = G__63737;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61750 = conformed_args__59513__auto__;\nvar map__61750__$1 = (((((!((map__61750 == null))))?(((((map__61750.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61750.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61750):map__61750);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61750__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61750__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61750__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"blockquote\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.blockquote.cljs$lang$applyTo = (function (seq61745){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61745));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (img \"hello\")\n * (img nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (img {:onClick f} \"hello\")\n * (img #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (img :#the-id.klass.other-klass \"hello\")\n * (img :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.img = (function com$fulcrologic$fulcro$dom$img(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63739 = arguments.length;\nvar i__4731__auto___63740 = (0);\nwhile(true){\nif((i__4731__auto___63740 < len__4730__auto___63739)){\nargs__4736__auto__.push((arguments[i__4731__auto___63740]));\n\nvar G__63742 = (i__4731__auto___63740 + (1));\ni__4731__auto___63740 = G__63742;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61767 = conformed_args__59513__auto__;\nvar map__61767__$1 = (((((!((map__61767 == null))))?(((((map__61767.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61767.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61767):map__61767);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61767__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61767__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61767__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"img\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.img.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.img.cljs$lang$applyTo = (function (seq61759){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61759));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncG \"hello\")\n * (feFuncG nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncG {:onClick f} \"hello\")\n * (feFuncG #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncG :#the-id.klass.other-klass \"hello\")\n * (feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncG = (function com$fulcrologic$fulcro$dom$feFuncG(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63748 = arguments.length;\nvar i__4731__auto___63749 = (0);\nwhile(true){\nif((i__4731__auto___63749 < len__4730__auto___63748)){\nargs__4736__auto__.push((arguments[i__4731__auto___63749]));\n\nvar G__63753 = (i__4731__auto___63749 + (1));\ni__4731__auto___63749 = G__63753;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61777 = conformed_args__59513__auto__;\nvar map__61777__$1 = (((((!((map__61777 == null))))?(((((map__61777.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61777.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61777):map__61777);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61777__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61777__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61777__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncG\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncG.cljs$lang$applyTo = (function (seq61774){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61774));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (text \"hello\")\n * (text nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (text {:onClick f} \"hello\")\n * (text #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (text :#the-id.klass.other-klass \"hello\")\n * (text :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.text = (function com$fulcrologic$fulcro$dom$text(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63759 = arguments.length;\nvar i__4731__auto___63760 = (0);\nwhile(true){\nif((i__4731__auto___63760 < len__4730__auto___63759)){\nargs__4736__auto__.push((arguments[i__4731__auto___63760]));\n\nvar G__63761 = (i__4731__auto___63760 + (1));\ni__4731__auto___63760 = G__63761;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61793 = conformed_args__59513__auto__;\nvar map__61793__$1 = (((((!((map__61793 == null))))?(((((map__61793.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61793.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61793):map__61793);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61793__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61793__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61793__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"text\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.text.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.text.cljs$lang$applyTo = (function (seq61790){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61790));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (span \"hello\")\n * (span nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (span {:onClick f} \"hello\")\n * (span #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (span :#the-id.klass.other-klass \"hello\")\n * (span :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.span = (function com$fulcrologic$fulcro$dom$span(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63767 = arguments.length;\nvar i__4731__auto___63768 = (0);\nwhile(true){\nif((i__4731__auto___63768 < len__4730__auto___63767)){\nargs__4736__auto__.push((arguments[i__4731__auto___63768]));\n\nvar G__63769 = (i__4731__auto___63768 + (1));\ni__4731__auto___63768 = G__63769;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61811 = conformed_args__59513__auto__;\nvar map__61811__$1 = (((((!((map__61811 == null))))?(((((map__61811.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61811.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61811):map__61811);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61811__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61811__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61811__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"span\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.span.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.span.cljs$lang$applyTo = (function (seq61802){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61802));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (track \"hello\")\n * (track nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (track {:onClick f} \"hello\")\n * (track #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (track :#the-id.klass.other-klass \"hello\")\n * (track :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.track = (function com$fulcrologic$fulcro$dom$track(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63770 = arguments.length;\nvar i__4731__auto___63771 = (0);\nwhile(true){\nif((i__4731__auto___63771 < len__4730__auto___63770)){\nargs__4736__auto__.push((arguments[i__4731__auto___63771]));\n\nvar G__63772 = (i__4731__auto___63771 + (1));\ni__4731__auto___63771 = G__63772;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61822 = conformed_args__59513__auto__;\nvar map__61822__$1 = (((((!((map__61822 == null))))?(((((map__61822.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61822.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61822):map__61822);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61822__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61822__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61822__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"track\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.track.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.track.cljs$lang$applyTo = (function (seq61819){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61819));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (data \"hello\")\n * (data nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (data {:onClick f} \"hello\")\n * (data #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (data :#the-id.klass.other-klass \"hello\")\n * (data :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.data = (function com$fulcrologic$fulcro$dom$data(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63775 = arguments.length;\nvar i__4731__auto___63776 = (0);\nwhile(true){\nif((i__4731__auto___63776 < len__4730__auto___63775)){\nargs__4736__auto__.push((arguments[i__4731__auto___63776]));\n\nvar G__63777 = (i__4731__auto___63776 + (1));\ni__4731__auto___63776 = G__63777;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61833 = conformed_args__59513__auto__;\nvar map__61833__$1 = (((((!((map__61833 == null))))?(((((map__61833.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61833.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61833):map__61833);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61833__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61833__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61833__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"data\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.data.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.data.cljs$lang$applyTo = (function (seq61828){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61828));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (u \"hello\")\n * (u nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (u {:onClick f} \"hello\")\n * (u #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (u :#the-id.klass.other-klass \"hello\")\n * (u :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.u = (function com$fulcrologic$fulcro$dom$u(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63780 = arguments.length;\nvar i__4731__auto___63781 = (0);\nwhile(true){\nif((i__4731__auto___63781 < len__4730__auto___63780)){\nargs__4736__auto__.push((arguments[i__4731__auto___63781]));\n\nvar G__63782 = (i__4731__auto___63781 + (1));\ni__4731__auto___63781 = G__63782;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61850 = conformed_args__59513__auto__;\nvar map__61850__$1 = (((((!((map__61850 == null))))?(((((map__61850.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61850.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61850):map__61850);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61850__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61850__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61850__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"u\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.u.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.u.cljs$lang$applyTo = (function (seq61841){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61841));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dl \"hello\")\n * (dl nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dl {:onClick f} \"hello\")\n * (dl #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dl :#the-id.klass.other-klass \"hello\")\n * (dl :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dl = (function com$fulcrologic$fulcro$dom$dl(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63784 = arguments.length;\nvar i__4731__auto___63785 = (0);\nwhile(true){\nif((i__4731__auto___63785 < len__4730__auto___63784)){\nargs__4736__auto__.push((arguments[i__4731__auto___63785]));\n\nvar G__63786 = (i__4731__auto___63785 + (1));\ni__4731__auto___63785 = G__63786;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61863 = conformed_args__59513__auto__;\nvar map__61863__$1 = (((((!((map__61863 == null))))?(((((map__61863.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61863.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61863):map__61863);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61863__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61863__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61863__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dl\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dl.cljs$lang$applyTo = (function (seq61857){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61857));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (select \"hello\")\n * (select nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (select {:onClick f} \"hello\")\n * (select #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (select :#the-id.klass.other-klass \"hello\")\n * (select :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.select = (function com$fulcrologic$fulcro$dom$select(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63790 = arguments.length;\nvar i__4731__auto___63791 = (0);\nwhile(true){\nif((i__4731__auto___63791 < len__4730__auto___63790)){\nargs__4736__auto__.push((arguments[i__4731__auto___63791]));\n\nvar G__63792 = (i__4731__auto___63791 + (1));\ni__4731__auto___63791 = G__63792;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61884 = conformed_args__59513__auto__;\nvar map__61884__$1 = (((((!((map__61884 == null))))?(((((map__61884.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61884.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61884):map__61884);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61884__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61884__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61884__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"select\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.select.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.select.cljs$lang$applyTo = (function (seq61874){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61874));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (polygon \"hello\")\n * (polygon nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (polygon {:onClick f} \"hello\")\n * (polygon #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (polygon :#the-id.klass.other-klass \"hello\")\n * (polygon :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.polygon = (function com$fulcrologic$fulcro$dom$polygon(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63796 = arguments.length;\nvar i__4731__auto___63797 = (0);\nwhile(true){\nif((i__4731__auto___63797 < len__4730__auto___63796)){\nargs__4736__auto__.push((arguments[i__4731__auto___63797]));\n\nvar G__63798 = (i__4731__auto___63797 + (1));\ni__4731__auto___63797 = G__63798;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61897 = conformed_args__59513__auto__;\nvar map__61897__$1 = (((((!((map__61897 == null))))?(((((map__61897.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61897.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61897):map__61897);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61897__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61897__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61897__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"polygon\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.polygon.cljs$lang$applyTo = (function (seq61892){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61892));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pattern \"hello\")\n * (pattern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pattern {:onClick f} \"hello\")\n * (pattern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pattern :#the-id.klass.other-klass \"hello\")\n * (pattern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.pattern = (function com$fulcrologic$fulcro$dom$pattern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63802 = arguments.length;\nvar i__4731__auto___63803 = (0);\nwhile(true){\nif((i__4731__auto___63803 < len__4730__auto___63802)){\nargs__4736__auto__.push((arguments[i__4731__auto___63803]));\n\nvar G__63804 = (i__4731__auto___63803 + (1));\ni__4731__auto___63803 = G__63804;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61914 = conformed_args__59513__auto__;\nvar map__61914__$1 = (((((!((map__61914 == null))))?(((((map__61914.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61914.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61914):map__61914);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61914__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61914__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61914__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pattern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pattern.cljs$lang$applyTo = (function (seq61908){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61908));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (html \"hello\")\n * (html nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (html {:onClick f} \"hello\")\n * (html #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (html :#the-id.klass.other-klass \"hello\")\n * (html :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.html = (function com$fulcrologic$fulcro$dom$html(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63806 = arguments.length;\nvar i__4731__auto___63807 = (0);\nwhile(true){\nif((i__4731__auto___63807 < len__4730__auto___63806)){\nargs__4736__auto__.push((arguments[i__4731__auto___63807]));\n\nvar G__63808 = (i__4731__auto___63807 + (1));\ni__4731__auto___63807 = G__63808;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61932 = conformed_args__59513__auto__;\nvar map__61932__$1 = (((((!((map__61932 == null))))?(((((map__61932.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61932.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61932):map__61932);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61932__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61932__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61932__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"html\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.html.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.html.cljs$lang$applyTo = (function (seq61926){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61926));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (foreignObject \"hello\")\n * (foreignObject nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (foreignObject {:onClick f} \"hello\")\n * (foreignObject #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (foreignObject :#the-id.klass.other-klass \"hello\")\n * (foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.foreignObject = (function com$fulcrologic$fulcro$dom$foreignObject(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63810 = arguments.length;\nvar i__4731__auto___63811 = (0);\nwhile(true){\nif((i__4731__auto___63811 < len__4730__auto___63810)){\nargs__4736__auto__.push((arguments[i__4731__auto___63811]));\n\nvar G__63812 = (i__4731__auto___63811 + (1));\ni__4731__auto___63811 = G__63812;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61951 = conformed_args__59513__auto__;\nvar map__61951__$1 = (((((!((map__61951 == null))))?(((((map__61951.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61951.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61951):map__61951);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61951__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61951__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61951__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"foreignObject\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.foreignObject.cljs$lang$applyTo = (function (seq61945){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61945));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (thead \"hello\")\n * (thead nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (thead {:onClick f} \"hello\")\n * (thead #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (thead :#the-id.klass.other-klass \"hello\")\n * (thead :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.thead = (function com$fulcrologic$fulcro$dom$thead(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63813 = arguments.length;\nvar i__4731__auto___63814 = (0);\nwhile(true){\nif((i__4731__auto___63814 < len__4730__auto___63813)){\nargs__4736__auto__.push((arguments[i__4731__auto___63814]));\n\nvar G__63815 = (i__4731__auto___63814 + (1));\ni__4731__auto___63814 = G__63815;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61967 = conformed_args__59513__auto__;\nvar map__61967__$1 = (((((!((map__61967 == null))))?(((((map__61967.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61967.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61967):map__61967);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61967__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61967__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61967__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"thead\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.thead.cljs$lang$applyTo = (function (seq61963){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61963));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (path \"hello\")\n * (path nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (path {:onClick f} \"hello\")\n * (path #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (path :#the-id.klass.other-klass \"hello\")\n * (path :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.path = (function com$fulcrologic$fulcro$dom$path(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63816 = arguments.length;\nvar i__4731__auto___63817 = (0);\nwhile(true){\nif((i__4731__auto___63817 < len__4730__auto___63816)){\nargs__4736__auto__.push((arguments[i__4731__auto___63817]));\n\nvar G__63818 = (i__4731__auto___63817 + (1));\ni__4731__auto___63817 = G__63818;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__61987 = conformed_args__59513__auto__;\nvar map__61987__$1 = (((((!((map__61987 == null))))?(((((map__61987.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__61987.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__61987):map__61987);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61987__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61987__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__61987__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"path\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.path.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.path.cljs$lang$applyTo = (function (seq61977){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq61977));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (del \"hello\")\n * (del nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (del {:onClick f} \"hello\")\n * (del #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (del :#the-id.klass.other-klass \"hello\")\n * (del :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.del = (function com$fulcrologic$fulcro$dom$del(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63819 = arguments.length;\nvar i__4731__auto___63820 = (0);\nwhile(true){\nif((i__4731__auto___63820 < len__4730__auto___63819)){\nargs__4736__auto__.push((arguments[i__4731__auto___63820]));\n\nvar G__63821 = (i__4731__auto___63820 + (1));\ni__4731__auto___63820 = G__63821;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62011 = conformed_args__59513__auto__;\nvar map__62011__$1 = (((((!((map__62011 == null))))?(((((map__62011.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62011.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62011):map__62011);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62011__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62011__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62011__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"del\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.del.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.del.cljs$lang$applyTo = (function (seq62002){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62002));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyph \"hello\")\n * (altGlyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyph {:onClick f} \"hello\")\n * (altGlyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyph :#the-id.klass.other-klass \"hello\")\n * (altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyph = (function com$fulcrologic$fulcro$dom$altGlyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63822 = arguments.length;\nvar i__4731__auto___63823 = (0);\nwhile(true){\nif((i__4731__auto___63823 < len__4730__auto___63822)){\nargs__4736__auto__.push((arguments[i__4731__auto___63823]));\n\nvar G__63826 = (i__4731__auto___63823 + (1));\ni__4731__auto___63823 = G__63826;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62028 = conformed_args__59513__auto__;\nvar map__62028__$1 = (((((!((map__62028 == null))))?(((((map__62028.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62028.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62028):map__62028);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62028__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62028__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62028__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyph.cljs$lang$applyTo = (function (seq62022){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62022));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fieldset \"hello\")\n * (fieldset nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fieldset {:onClick f} \"hello\")\n * (fieldset #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fieldset :#the-id.klass.other-klass \"hello\")\n * (fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.fieldset = (function com$fulcrologic$fulcro$dom$fieldset(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63831 = arguments.length;\nvar i__4731__auto___63832 = (0);\nwhile(true){\nif((i__4731__auto___63832 < len__4730__auto___63831)){\nargs__4736__auto__.push((arguments[i__4731__auto___63832]));\n\nvar G__63833 = (i__4731__auto___63832 + (1));\ni__4731__auto___63832 = G__63833;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62046 = conformed_args__59513__auto__;\nvar map__62046__$1 = (((((!((map__62046 == null))))?(((((map__62046.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62046.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62046):map__62046);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62046__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62046__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62046__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fieldset\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fieldset.cljs$lang$applyTo = (function (seq62037){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62037));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (aside \"hello\")\n * (aside nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (aside {:onClick f} \"hello\")\n * (aside #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (aside :#the-id.klass.other-klass \"hello\")\n * (aside :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.aside = (function com$fulcrologic$fulcro$dom$aside(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63837 = arguments.length;\nvar i__4731__auto___63838 = (0);\nwhile(true){\nif((i__4731__auto___63838 < len__4730__auto___63837)){\nargs__4736__auto__.push((arguments[i__4731__auto___63838]));\n\nvar G__63842 = (i__4731__auto___63838 + (1));\ni__4731__auto___63838 = G__63842;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62066 = conformed_args__59513__auto__;\nvar map__62066__$1 = (((((!((map__62066 == null))))?(((((map__62066.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62066.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62066):map__62066);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62066__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62066__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62066__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"aside\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.aside.cljs$lang$applyTo = (function (seq62055){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62055));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feBlend \"hello\")\n * (feBlend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feBlend {:onClick f} \"hello\")\n * (feBlend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feBlend :#the-id.klass.other-klass \"hello\")\n * (feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feBlend = (function com$fulcrologic$fulcro$dom$feBlend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63847 = arguments.length;\nvar i__4731__auto___63848 = (0);\nwhile(true){\nif((i__4731__auto___63848 < len__4730__auto___63847)){\nargs__4736__auto__.push((arguments[i__4731__auto___63848]));\n\nvar G__63849 = (i__4731__auto___63848 + (1));\ni__4731__auto___63848 = G__63849;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62081 = conformed_args__59513__auto__;\nvar map__62081__$1 = (((((!((map__62081 == null))))?(((((map__62081.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62081.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62081):map__62081);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62081__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62081__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62081__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feBlend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feBlend.cljs$lang$applyTo = (function (seq62076){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62076));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figure \"hello\")\n * (figure nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figure {:onClick f} \"hello\")\n * (figure #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figure :#the-id.klass.other-klass \"hello\")\n * (figure :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.figure = (function com$fulcrologic$fulcro$dom$figure(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63854 = arguments.length;\nvar i__4731__auto___63855 = (0);\nwhile(true){\nif((i__4731__auto___63855 < len__4730__auto___63854)){\nargs__4736__auto__.push((arguments[i__4731__auto___63855]));\n\nvar G__63856 = (i__4731__auto___63855 + (1));\ni__4731__auto___63855 = G__63856;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62092 = conformed_args__59513__auto__;\nvar map__62092__$1 = (((((!((map__62092 == null))))?(((((map__62092.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62092.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62092):map__62092);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62092__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62092__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62092__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figure\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figure.cljs$lang$applyTo = (function (seq62089){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62089));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textPath \"hello\")\n * (textPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textPath {:onClick f} \"hello\")\n * (textPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textPath :#the-id.klass.other-klass \"hello\")\n * (textPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.textPath = (function com$fulcrologic$fulcro$dom$textPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63859 = arguments.length;\nvar i__4731__auto___63860 = (0);\nwhile(true){\nif((i__4731__auto___63860 < len__4730__auto___63859)){\nargs__4736__auto__.push((arguments[i__4731__auto___63860]));\n\nvar G__63862 = (i__4731__auto___63860 + (1));\ni__4731__auto___63860 = G__63862;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62104 = conformed_args__59513__auto__;\nvar map__62104__$1 = (((((!((map__62104 == null))))?(((((map__62104.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62104.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62104):map__62104);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62104__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62104__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62104__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textPath.cljs$lang$applyTo = (function (seq62099){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62099));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (figcaption \"hello\")\n * (figcaption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (figcaption {:onClick f} \"hello\")\n * (figcaption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (figcaption :#the-id.klass.other-klass \"hello\")\n * (figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.figcaption = (function com$fulcrologic$fulcro$dom$figcaption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63866 = arguments.length;\nvar i__4731__auto___63867 = (0);\nwhile(true){\nif((i__4731__auto___63867 < len__4730__auto___63866)){\nargs__4736__auto__.push((arguments[i__4731__auto___63867]));\n\nvar G__63868 = (i__4731__auto___63867 + (1));\ni__4731__auto___63867 = G__63868;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62118 = conformed_args__59513__auto__;\nvar map__62118__$1 = (((((!((map__62118 == null))))?(((((map__62118.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62118.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62118):map__62118);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62118__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62118__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62118__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"figcaption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.figcaption.cljs$lang$applyTo = (function (seq62113){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62113));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mask \"hello\")\n * (mask nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mask {:onClick f} \"hello\")\n * (mask #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mask :#the-id.klass.other-klass \"hello\")\n * (mask :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mask = (function com$fulcrologic$fulcro$dom$mask(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63869 = arguments.length;\nvar i__4731__auto___63870 = (0);\nwhile(true){\nif((i__4731__auto___63870 < len__4730__auto___63869)){\nargs__4736__auto__.push((arguments[i__4731__auto___63870]));\n\nvar G__63872 = (i__4731__auto___63870 + (1));\ni__4731__auto___63870 = G__63872;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62130 = conformed_args__59513__auto__;\nvar map__62130__$1 = (((((!((map__62130 == null))))?(((((map__62130.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62130.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62130):map__62130);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62130__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62130__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62130__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mask\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mask.cljs$lang$applyTo = (function (seq62127){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62127));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (q \"hello\")\n * (q nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (q {:onClick f} \"hello\")\n * (q #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (q :#the-id.klass.other-klass \"hello\")\n * (q :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.q = (function com$fulcrologic$fulcro$dom$q(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63877 = arguments.length;\nvar i__4731__auto___63878 = (0);\nwhile(true){\nif((i__4731__auto___63878 < len__4730__auto___63877)){\nargs__4736__auto__.push((arguments[i__4731__auto___63878]));\n\nvar G__63879 = (i__4731__auto___63878 + (1));\ni__4731__auto___63878 = G__63879;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62143 = conformed_args__59513__auto__;\nvar map__62143__$1 = (((((!((map__62143 == null))))?(((((map__62143.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62143.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62143):map__62143);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62143__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62143__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62143__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"q\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.q.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.q.cljs$lang$applyTo = (function (seq62138){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62138));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdi \"hello\")\n * (bdi nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdi {:onClick f} \"hello\")\n * (bdi #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdi :#the-id.klass.other-klass \"hello\")\n * (bdi :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.bdi = (function com$fulcrologic$fulcro$dom$bdi(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63881 = arguments.length;\nvar i__4731__auto___63882 = (0);\nwhile(true){\nif((i__4731__auto___63882 < len__4730__auto___63881)){\nargs__4736__auto__.push((arguments[i__4731__auto___63882]));\n\nvar G__63883 = (i__4731__auto___63882 + (1));\ni__4731__auto___63882 = G__63883;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62159 = conformed_args__59513__auto__;\nvar map__62159__$1 = (((((!((map__62159 == null))))?(((((map__62159.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62159.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62159):map__62159);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62159__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62159__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62159__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdi\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdi.cljs$lang$applyTo = (function (seq62153){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62153));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDistantLight \"hello\")\n * (feDistantLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDistantLight {:onClick f} \"hello\")\n * (feDistantLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDistantLight :#the-id.klass.other-klass \"hello\")\n * (feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDistantLight = (function com$fulcrologic$fulcro$dom$feDistantLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63887 = arguments.length;\nvar i__4731__auto___63888 = (0);\nwhile(true){\nif((i__4731__auto___63888 < len__4730__auto___63887)){\nargs__4736__auto__.push((arguments[i__4731__auto___63888]));\n\nvar G__63889 = (i__4731__auto___63888 + (1));\ni__4731__auto___63888 = G__63889;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62176 = conformed_args__59513__auto__;\nvar map__62176__$1 = (((((!((map__62176 == null))))?(((((map__62176.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62176.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62176):map__62176);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62176__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62176__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62176__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDistantLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDistantLight.cljs$lang$applyTo = (function (seq62163){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62163));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (video \"hello\")\n * (video nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (video {:onClick f} \"hello\")\n * (video #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (video :#the-id.klass.other-klass \"hello\")\n * (video :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.video = (function com$fulcrologic$fulcro$dom$video(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63899 = arguments.length;\nvar i__4731__auto___63900 = (0);\nwhile(true){\nif((i__4731__auto___63900 < len__4730__auto___63899)){\nargs__4736__auto__.push((arguments[i__4731__auto___63900]));\n\nvar G__63901 = (i__4731__auto___63900 + (1));\ni__4731__auto___63900 = G__63901;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62194 = conformed_args__59513__auto__;\nvar map__62194__$1 = (((((!((map__62194 == null))))?(((((map__62194.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62194.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62194):map__62194);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62194__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62194__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62194__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"video\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.video.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.video.cljs$lang$applyTo = (function (seq62188){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62188));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (address \"hello\")\n * (address nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (address {:onClick f} \"hello\")\n * (address #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (address :#the-id.klass.other-klass \"hello\")\n * (address :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.address = (function com$fulcrologic$fulcro$dom$address(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63907 = arguments.length;\nvar i__4731__auto___63908 = (0);\nwhile(true){\nif((i__4731__auto___63908 < len__4730__auto___63907)){\nargs__4736__auto__.push((arguments[i__4731__auto___63908]));\n\nvar G__63910 = (i__4731__auto___63908 + (1));\ni__4731__auto___63908 = G__63910;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62210 = conformed_args__59513__auto__;\nvar map__62210__$1 = (((((!((map__62210 == null))))?(((((map__62210.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62210.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62210):map__62210);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62210__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62210__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62210__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"address\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.address.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.address.cljs$lang$applyTo = (function (seq62205){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62205));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (caption \"hello\")\n * (caption nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (caption {:onClick f} \"hello\")\n * (caption #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (caption :#the-id.klass.other-klass \"hello\")\n * (caption :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.caption = (function com$fulcrologic$fulcro$dom$caption(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63916 = arguments.length;\nvar i__4731__auto___63917 = (0);\nwhile(true){\nif((i__4731__auto___63917 < len__4730__auto___63916)){\nargs__4736__auto__.push((arguments[i__4731__auto___63917]));\n\nvar G__63918 = (i__4731__auto___63917 + (1));\ni__4731__auto___63917 = G__63918;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62219 = conformed_args__59513__auto__;\nvar map__62219__$1 = (((((!((map__62219 == null))))?(((((map__62219.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62219.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62219):map__62219);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62219__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62219__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62219__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"caption\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.caption.cljs$lang$applyTo = (function (seq62215){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62215));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dd \"hello\")\n * (dd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dd {:onClick f} \"hello\")\n * (dd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dd :#the-id.klass.other-klass \"hello\")\n * (dd :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dd = (function com$fulcrologic$fulcro$dom$dd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63926 = arguments.length;\nvar i__4731__auto___63927 = (0);\nwhile(true){\nif((i__4731__auto___63927 < len__4730__auto___63926)){\nargs__4736__auto__.push((arguments[i__4731__auto___63927]));\n\nvar G__63928 = (i__4731__auto___63927 + (1));\ni__4731__auto___63927 = G__63928;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62228 = conformed_args__59513__auto__;\nvar map__62228__$1 = (((((!((map__62228 == null))))?(((((map__62228.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62228.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62228):map__62228);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62228__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62228__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62228__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dd.cljs$lang$applyTo = (function (seq62225){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62225));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rp \"hello\")\n * (rp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rp {:onClick f} \"hello\")\n * (rp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rp :#the-id.klass.other-klass \"hello\")\n * (rp :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rp = (function com$fulcrologic$fulcro$dom$rp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63932 = arguments.length;\nvar i__4731__auto___63933 = (0);\nwhile(true){\nif((i__4731__auto___63933 < len__4730__auto___63932)){\nargs__4736__auto__.push((arguments[i__4731__auto___63933]));\n\nvar G__63934 = (i__4731__auto___63933 + (1));\ni__4731__auto___63933 = G__63934;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62237 = conformed_args__59513__auto__;\nvar map__62237__$1 = (((((!((map__62237 == null))))?(((((map__62237.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62237.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62237):map__62237);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62237__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62237__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62237__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rp.cljs$lang$applyTo = (function (seq62231){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62231));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hr \"hello\")\n * (hr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hr {:onClick f} \"hello\")\n * (hr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hr :#the-id.klass.other-klass \"hello\")\n * (hr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hr = (function com$fulcrologic$fulcro$dom$hr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63939 = arguments.length;\nvar i__4731__auto___63940 = (0);\nwhile(true){\nif((i__4731__auto___63940 < len__4730__auto___63939)){\nargs__4736__auto__.push((arguments[i__4731__auto___63940]));\n\nvar G__63941 = (i__4731__auto___63940 + (1));\ni__4731__auto___63940 = G__63941;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62250 = conformed_args__59513__auto__;\nvar map__62250__$1 = (((((!((map__62250 == null))))?(((((map__62250.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62250.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62250):map__62250);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62250__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62250__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62250__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hr.cljs$lang$applyTo = (function (seq62242){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62242));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meta \"hello\")\n * (meta nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meta {:onClick f} \"hello\")\n * (meta #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meta :#the-id.klass.other-klass \"hello\")\n * (meta :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meta = (function com$fulcrologic$fulcro$dom$meta(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63942 = arguments.length;\nvar i__4731__auto___63943 = (0);\nwhile(true){\nif((i__4731__auto___63943 < len__4730__auto___63942)){\nargs__4736__auto__.push((arguments[i__4731__auto___63943]));\n\nvar G__63944 = (i__4731__auto___63943 + (1));\ni__4731__auto___63943 = G__63944;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62265 = conformed_args__59513__auto__;\nvar map__62265__$1 = (((((!((map__62265 == null))))?(((((map__62265.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62265.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62265):map__62265);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62265__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62265__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62265__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meta\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meta.cljs$lang$applyTo = (function (seq62258){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62258));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tbody \"hello\")\n * (tbody nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tbody {:onClick f} \"hello\")\n * (tbody #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tbody :#the-id.klass.other-klass \"hello\")\n * (tbody :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tbody = (function com$fulcrologic$fulcro$dom$tbody(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63948 = arguments.length;\nvar i__4731__auto___63949 = (0);\nwhile(true){\nif((i__4731__auto___63949 < len__4730__auto___63948)){\nargs__4736__auto__.push((arguments[i__4731__auto___63949]));\n\nvar G__63950 = (i__4731__auto___63949 + (1));\ni__4731__auto___63949 = G__63950;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62280 = conformed_args__59513__auto__;\nvar map__62280__$1 = (((((!((map__62280 == null))))?(((((map__62280.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62280.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62280):map__62280);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62280__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62280__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62280__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tbody\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tbody.cljs$lang$applyTo = (function (seq62274){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62274));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (desc \"hello\")\n * (desc nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (desc {:onClick f} \"hello\")\n * (desc #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (desc :#the-id.klass.other-klass \"hello\")\n * (desc :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.desc = (function com$fulcrologic$fulcro$dom$desc(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63955 = arguments.length;\nvar i__4731__auto___63956 = (0);\nwhile(true){\nif((i__4731__auto___63956 < len__4730__auto___63955)){\nargs__4736__auto__.push((arguments[i__4731__auto___63956]));\n\nvar G__63957 = (i__4731__auto___63956 + (1));\ni__4731__auto___63956 = G__63957;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62293 = conformed_args__59513__auto__;\nvar map__62293__$1 = (((((!((map__62293 == null))))?(((((map__62293.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62293.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62293):map__62293);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62293__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62293__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62293__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"desc\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.desc.cljs$lang$applyTo = (function (seq62288){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62288));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (table \"hello\")\n * (table nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (table {:onClick f} \"hello\")\n * (table #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (table :#the-id.klass.other-klass \"hello\")\n * (table :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.table = (function com$fulcrologic$fulcro$dom$table(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63958 = arguments.length;\nvar i__4731__auto___63959 = (0);\nwhile(true){\nif((i__4731__auto___63959 < len__4730__auto___63958)){\nargs__4736__auto__.push((arguments[i__4731__auto___63959]));\n\nvar G__63960 = (i__4731__auto___63959 + (1));\ni__4731__auto___63959 = G__63960;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62301 = conformed_args__59513__auto__;\nvar map__62301__$1 = (((((!((map__62301 == null))))?(((((map__62301.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62301.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62301):map__62301);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62301__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62301__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62301__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"table\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.table.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.table.cljs$lang$applyTo = (function (seq62297){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62297));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (pre \"hello\")\n * (pre nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (pre {:onClick f} \"hello\")\n * (pre #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (pre :#the-id.klass.other-klass \"hello\")\n * (pre :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.pre = (function com$fulcrologic$fulcro$dom$pre(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63962 = arguments.length;\nvar i__4731__auto___63963 = (0);\nwhile(true){\nif((i__4731__auto___63963 < len__4730__auto___63962)){\nargs__4736__auto__.push((arguments[i__4731__auto___63963]));\n\nvar G__63965 = (i__4731__auto___63963 + (1));\ni__4731__auto___63963 = G__63965;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62313 = conformed_args__59513__auto__;\nvar map__62313__$1 = (((((!((map__62313 == null))))?(((((map__62313.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62313.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62313):map__62313);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62313__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62313__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62313__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"pre\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.pre.cljs$lang$applyTo = (function (seq62311){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62311));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ul \"hello\")\n * (ul nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ul {:onClick f} \"hello\")\n * (ul #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ul :#the-id.klass.other-klass \"hello\")\n * (ul :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ul = (function com$fulcrologic$fulcro$dom$ul(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63968 = arguments.length;\nvar i__4731__auto___63969 = (0);\nwhile(true){\nif((i__4731__auto___63969 < len__4730__auto___63968)){\nargs__4736__auto__.push((arguments[i__4731__auto___63969]));\n\nvar G__63970 = (i__4731__auto___63969 + (1));\ni__4731__auto___63969 = G__63970;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62329 = conformed_args__59513__auto__;\nvar map__62329__$1 = (((((!((map__62329 == null))))?(((((map__62329.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62329.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62329):map__62329);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62329__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62329__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62329__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ul\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ul.cljs$lang$applyTo = (function (seq62325){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62325));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix \"hello\")\n * (feConvolveMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feConvolveMatrix {:onClick f} \"hello\")\n * (feConvolveMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n * (feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix = (function com$fulcrologic$fulcro$dom$feConvolveMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63977 = arguments.length;\nvar i__4731__auto___63978 = (0);\nwhile(true){\nif((i__4731__auto___63978 < len__4730__auto___63977)){\nargs__4736__auto__.push((arguments[i__4731__auto___63978]));\n\nvar G__63979 = (i__4731__auto___63978 + (1));\ni__4731__auto___63978 = G__63979;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62346 = conformed_args__59513__auto__;\nvar map__62346__$1 = (((((!((map__62346 == null))))?(((((map__62346.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62346.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62346):map__62346);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62346__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62346__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62346__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feConvolveMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feConvolveMatrix.cljs$lang$applyTo = (function (seq62340){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62340));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sup \"hello\")\n * (sup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sup {:onClick f} \"hello\")\n * (sup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sup :#the-id.klass.other-klass \"hello\")\n * (sup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.sup = (function com$fulcrologic$fulcro$dom$sup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63985 = arguments.length;\nvar i__4731__auto___63986 = (0);\nwhile(true){\nif((i__4731__auto___63986 < len__4730__auto___63985)){\nargs__4736__auto__.push((arguments[i__4731__auto___63986]));\n\nvar G__63987 = (i__4731__auto___63986 + (1));\ni__4731__auto___63986 = G__63987;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62367 = conformed_args__59513__auto__;\nvar map__62367__$1 = (((((!((map__62367 == null))))?(((((map__62367.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62367.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62367):map__62367);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62367__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62367__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62367__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sup.cljs$lang$applyTo = (function (seq62357){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62357));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dfn \"hello\")\n * (dfn nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dfn {:onClick f} \"hello\")\n * (dfn #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dfn :#the-id.klass.other-klass \"hello\")\n * (dfn :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dfn = (function com$fulcrologic$fulcro$dom$dfn(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63992 = arguments.length;\nvar i__4731__auto___63993 = (0);\nwhile(true){\nif((i__4731__auto___63993 < len__4730__auto___63992)){\nargs__4736__auto__.push((arguments[i__4731__auto___63993]));\n\nvar G__63994 = (i__4731__auto___63993 + (1));\ni__4731__auto___63993 = G__63994;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62380 = conformed_args__59513__auto__;\nvar map__62380__$1 = (((((!((map__62380 == null))))?(((((map__62380.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62380.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62380):map__62380);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62380__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62380__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62380__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dfn\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dfn.cljs$lang$applyTo = (function (seq62375){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62375));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (sub \"hello\")\n * (sub nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (sub {:onClick f} \"hello\")\n * (sub #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (sub :#the-id.klass.other-klass \"hello\")\n * (sub :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.sub = (function com$fulcrologic$fulcro$dom$sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___63999 = arguments.length;\nvar i__4731__auto___64000 = (0);\nwhile(true){\nif((i__4731__auto___64000 < len__4730__auto___63999)){\nargs__4736__auto__.push((arguments[i__4731__auto___64000]));\n\nvar G__64001 = (i__4731__auto___64000 + (1));\ni__4731__auto___64000 = G__64001;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62398 = conformed_args__59513__auto__;\nvar map__62398__$1 = (((((!((map__62398 == null))))?(((((map__62398.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62398.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62398):map__62398);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62398__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62398__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62398__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"sub\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.sub.cljs$lang$applyTo = (function (seq62389){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62389));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mark \"hello\")\n * (mark nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mark {:onClick f} \"hello\")\n * (mark #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mark :#the-id.klass.other-klass \"hello\")\n * (mark :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mark = (function com$fulcrologic$fulcro$dom$mark(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64005 = arguments.length;\nvar i__4731__auto___64006 = (0);\nwhile(true){\nif((i__4731__auto___64006 < len__4730__auto___64005)){\nargs__4736__auto__.push((arguments[i__4731__auto___64006]));\n\nvar G__64007 = (i__4731__auto___64006 + (1));\ni__4731__auto___64006 = G__64007;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62410 = conformed_args__59513__auto__;\nvar map__62410__$1 = (((((!((map__62410 == null))))?(((((map__62410.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62410.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62410):map__62410);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62410__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62410__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62410__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mark\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mark.cljs$lang$applyTo = (function (seq62407){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62407));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap \"hello\")\n * (feDisplacementMap nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDisplacementMap {:onClick f} \"hello\")\n * (feDisplacementMap #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDisplacementMap :#the-id.klass.other-klass \"hello\")\n * (feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDisplacementMap = (function com$fulcrologic$fulcro$dom$feDisplacementMap(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64009 = arguments.length;\nvar i__4731__auto___64010 = (0);\nwhile(true){\nif((i__4731__auto___64010 < len__4730__auto___64009)){\nargs__4736__auto__.push((arguments[i__4731__auto___64010]));\n\nvar G__64011 = (i__4731__auto___64010 + (1));\ni__4731__auto___64010 = G__64011;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62418 = conformed_args__59513__auto__;\nvar map__62418__$1 = (((((!((map__62418 == null))))?(((((map__62418.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62418.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62418):map__62418);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62418__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62418__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62418__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDisplacementMap\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDisplacementMap.cljs$lang$applyTo = (function (seq62415){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62415));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (unknown \"hello\")\n * (unknown nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (unknown {:onClick f} \"hello\")\n * (unknown #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (unknown :#the-id.klass.other-klass \"hello\")\n * (unknown :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.unknown = (function com$fulcrologic$fulcro$dom$unknown(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64012 = arguments.length;\nvar i__4731__auto___64013 = (0);\nwhile(true){\nif((i__4731__auto___64013 < len__4730__auto___64012)){\nargs__4736__auto__.push((arguments[i__4731__auto___64013]));\n\nvar G__64014 = (i__4731__auto___64013 + (1));\ni__4731__auto___64013 = G__64014;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62434 = conformed_args__59513__auto__;\nvar map__62434__$1 = (((((!((map__62434 == null))))?(((((map__62434.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62434.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62434):map__62434);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62434__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62434__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62434__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"unknown\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.unknown.cljs$lang$applyTo = (function (seq62427){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62427));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (script \"hello\")\n * (script nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (script {:onClick f} \"hello\")\n * (script #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (script :#the-id.klass.other-klass \"hello\")\n * (script :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.script = (function com$fulcrologic$fulcro$dom$script(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64018 = arguments.length;\nvar i__4731__auto___64019 = (0);\nwhile(true){\nif((i__4731__auto___64019 < len__4730__auto___64018)){\nargs__4736__auto__.push((arguments[i__4731__auto___64019]));\n\nvar G__64021 = (i__4731__auto___64019 + (1));\ni__4731__auto___64019 = G__64021;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62452 = conformed_args__59513__auto__;\nvar map__62452__$1 = (((((!((map__62452 == null))))?(((((map__62452.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62452.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62452):map__62452);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62452__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62452__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62452__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"script\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.script.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.script.cljs$lang$applyTo = (function (seq62443){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62443));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTurbulence \"hello\")\n * (feTurbulence nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTurbulence {:onClick f} \"hello\")\n * (feTurbulence #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTurbulence :#the-id.klass.other-klass \"hello\")\n * (feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feTurbulence = (function com$fulcrologic$fulcro$dom$feTurbulence(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64025 = arguments.length;\nvar i__4731__auto___64026 = (0);\nwhile(true){\nif((i__4731__auto___64026 < len__4730__auto___64025)){\nargs__4736__auto__.push((arguments[i__4731__auto___64026]));\n\nvar G__64027 = (i__4731__auto___64026 + (1));\ni__4731__auto___64026 = G__64027;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62487 = conformed_args__59513__auto__;\nvar map__62487__$1 = (((((!((map__62487 == null))))?(((((map__62487.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62487.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62487):map__62487);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62487__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62487__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62487__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTurbulence\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTurbulence.cljs$lang$applyTo = (function (seq62475){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62475));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (big \"hello\")\n * (big nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (big {:onClick f} \"hello\")\n * (big #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (big :#the-id.klass.other-klass \"hello\")\n * (big :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.big = (function com$fulcrologic$fulcro$dom$big(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64030 = arguments.length;\nvar i__4731__auto___64031 = (0);\nwhile(true){\nif((i__4731__auto___64031 < len__4730__auto___64030)){\nargs__4736__auto__.push((arguments[i__4731__auto___64031]));\n\nvar G__64032 = (i__4731__auto___64031 + (1));\ni__4731__auto___64031 = G__64032;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62510 = conformed_args__59513__auto__;\nvar map__62510__$1 = (((((!((map__62510 == null))))?(((((map__62510.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62510.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62510):map__62510);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62510__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62510__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62510__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"big\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.big.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.big.cljs$lang$applyTo = (function (seq62504){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62504));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (button \"hello\")\n * (button nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (button {:onClick f} \"hello\")\n * (button #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (button :#the-id.klass.other-klass \"hello\")\n * (button :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.button = (function com$fulcrologic$fulcro$dom$button(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64039 = arguments.length;\nvar i__4731__auto___64041 = (0);\nwhile(true){\nif((i__4731__auto___64041 < len__4730__auto___64039)){\nargs__4736__auto__.push((arguments[i__4731__auto___64041]));\n\nvar G__64042 = (i__4731__auto___64041 + (1));\ni__4731__auto___64041 = G__64042;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62533 = conformed_args__59513__auto__;\nvar map__62533__$1 = (((((!((map__62533 == null))))?(((((map__62533.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62533.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62533):map__62533);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62533__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62533__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62533__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"button\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.button.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.button.cljs$lang$applyTo = (function (seq62523){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62523));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-uri \"hello\")\n * (font-face-uri nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-uri {:onClick f} \"hello\")\n * (font-face-uri #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-uri :#the-id.klass.other-klass \"hello\")\n * (font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_uri = (function com$fulcrologic$fulcro$dom$font_face_uri(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64049 = arguments.length;\nvar i__4731__auto___64050 = (0);\nwhile(true){\nif((i__4731__auto___64050 < len__4730__auto___64049)){\nargs__4736__auto__.push((arguments[i__4731__auto___64050]));\n\nvar G__64051 = (i__4731__auto___64050 + (1));\ni__4731__auto___64050 = G__64051;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62547 = conformed_args__59513__auto__;\nvar map__62547__$1 = (((((!((map__62547 == null))))?(((((map__62547.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62547.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62547):map__62547);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62547__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62547__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62547__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-uri\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_uri.cljs$lang$applyTo = (function (seq62543){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62543));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (wbr \"hello\")\n * (wbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (wbr {:onClick f} \"hello\")\n * (wbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (wbr :#the-id.klass.other-klass \"hello\")\n * (wbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.wbr = (function com$fulcrologic$fulcro$dom$wbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64057 = arguments.length;\nvar i__4731__auto___64058 = (0);\nwhile(true){\nif((i__4731__auto___64058 < len__4730__auto___64057)){\nargs__4736__auto__.push((arguments[i__4731__auto___64058]));\n\nvar G__64059 = (i__4731__auto___64058 + (1));\ni__4731__auto___64058 = G__64059;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62562 = conformed_args__59513__auto__;\nvar map__62562__$1 = (((((!((map__62562 == null))))?(((((map__62562.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62562.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62562):map__62562);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62562__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62562__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62562__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"wbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.wbr.cljs$lang$applyTo = (function (seq62556){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62556));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (symbol \"hello\")\n * (symbol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (symbol {:onClick f} \"hello\")\n * (symbol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (symbol :#the-id.klass.other-klass \"hello\")\n * (symbol :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.symbol = (function com$fulcrologic$fulcro$dom$symbol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64065 = arguments.length;\nvar i__4731__auto___64066 = (0);\nwhile(true){\nif((i__4731__auto___64066 < len__4730__auto___64065)){\nargs__4736__auto__.push((arguments[i__4731__auto___64066]));\n\nvar G__64068 = (i__4731__auto___64066 + (1));\ni__4731__auto___64066 = G__64068;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62572 = conformed_args__59513__auto__;\nvar map__62572__$1 = (((((!((map__62572 == null))))?(((((map__62572.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62572.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62572):map__62572);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62572__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62572__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62572__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"symbol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.symbol.cljs$lang$applyTo = (function (seq62566){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62566));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (strong \"hello\")\n * (strong nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (strong {:onClick f} \"hello\")\n * (strong #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (strong :#the-id.klass.other-klass \"hello\")\n * (strong :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.strong = (function com$fulcrologic$fulcro$dom$strong(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64073 = arguments.length;\nvar i__4731__auto___64074 = (0);\nwhile(true){\nif((i__4731__auto___64074 < len__4730__auto___64073)){\nargs__4736__auto__.push((arguments[i__4731__auto___64074]));\n\nvar G__64075 = (i__4731__auto___64074 + (1));\ni__4731__auto___64074 = G__64075;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62581 = conformed_args__59513__auto__;\nvar map__62581__$1 = (((((!((map__62581 == null))))?(((((map__62581.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62581.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62581):map__62581);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62581__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62581__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62581__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"strong\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.strong.cljs$lang$applyTo = (function (seq62577){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62577));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (use \"hello\")\n * (use nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (use {:onClick f} \"hello\")\n * (use #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (use :#the-id.klass.other-klass \"hello\")\n * (use :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.use = (function com$fulcrologic$fulcro$dom$use(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64080 = arguments.length;\nvar i__4731__auto___64081 = (0);\nwhile(true){\nif((i__4731__auto___64081 < len__4730__auto___64080)){\nargs__4736__auto__.push((arguments[i__4731__auto___64081]));\n\nvar G__64082 = (i__4731__auto___64081 + (1));\ni__4731__auto___64081 = G__64082;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62604 = conformed_args__59513__auto__;\nvar map__62604__$1 = (((((!((map__62604 == null))))?(((((map__62604.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62604.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62604):map__62604);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62604__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62604__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62604__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"use\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.use.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.use.cljs$lang$applyTo = (function (seq62590){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62590));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (solidcolor \"hello\")\n * (solidcolor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (solidcolor {:onClick f} \"hello\")\n * (solidcolor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (solidcolor :#the-id.klass.other-klass \"hello\")\n * (solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.solidcolor = (function com$fulcrologic$fulcro$dom$solidcolor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64087 = arguments.length;\nvar i__4731__auto___64089 = (0);\nwhile(true){\nif((i__4731__auto___64089 < len__4730__auto___64087)){\nargs__4736__auto__.push((arguments[i__4731__auto___64089]));\n\nvar G__64090 = (i__4731__auto___64089 + (1));\ni__4731__auto___64089 = G__64090;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62630 = conformed_args__59513__auto__;\nvar map__62630__$1 = (((((!((map__62630 == null))))?(((((map__62630.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62630.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62630):map__62630);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62630__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62630__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62630__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"solidcolor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.solidcolor.cljs$lang$applyTo = (function (seq62615){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62615));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (fePointLight \"hello\")\n * (fePointLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (fePointLight {:onClick f} \"hello\")\n * (fePointLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (fePointLight :#the-id.klass.other-klass \"hello\")\n * (fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.fePointLight = (function com$fulcrologic$fulcro$dom$fePointLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64095 = arguments.length;\nvar i__4731__auto___64096 = (0);\nwhile(true){\nif((i__4731__auto___64096 < len__4730__auto___64095)){\nargs__4736__auto__.push((arguments[i__4731__auto___64096]));\n\nvar G__64097 = (i__4731__auto___64096 + (1));\ni__4731__auto___64096 = G__64097;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62648 = conformed_args__59513__auto__;\nvar map__62648__$1 = (((((!((map__62648 == null))))?(((((map__62648.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62648.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62648):map__62648);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62648__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62648__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62648__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"fePointLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.fePointLight.cljs$lang$applyTo = (function (seq62642){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62642));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (li \"hello\")\n * (li nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (li {:onClick f} \"hello\")\n * (li #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (li :#the-id.klass.other-klass \"hello\")\n * (li :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.li = (function com$fulcrologic$fulcro$dom$li(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64104 = arguments.length;\nvar i__4731__auto___64105 = (0);\nwhile(true){\nif((i__4731__auto___64105 < len__4730__auto___64104)){\nargs__4736__auto__.push((arguments[i__4731__auto___64105]));\n\nvar G__64106 = (i__4731__auto___64105 + (1));\ni__4731__auto___64105 = G__64106;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62655 = conformed_args__59513__auto__;\nvar map__62655__$1 = (((((!((map__62655 == null))))?(((((map__62655.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62655.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62655):map__62655);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62655__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62655__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62655__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"li\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.li.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.li.cljs$lang$applyTo = (function (seq62653){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62653));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dt \"hello\")\n * (dt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dt {:onClick f} \"hello\")\n * (dt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dt :#the-id.klass.other-klass \"hello\")\n * (dt :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dt = (function com$fulcrologic$fulcro$dom$dt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64122 = arguments.length;\nvar i__4731__auto___64123 = (0);\nwhile(true){\nif((i__4731__auto___64123 < len__4730__auto___64122)){\nargs__4736__auto__.push((arguments[i__4731__auto___64123]));\n\nvar G__64124 = (i__4731__auto___64123 + (1));\ni__4731__auto___64123 = G__64124;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62666 = conformed_args__59513__auto__;\nvar map__62666__$1 = (((((!((map__62666 == null))))?(((((map__62666.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62666.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62666):map__62666);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62666__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62666__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62666__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dt.cljs$lang$applyTo = (function (seq62664){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62664));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFuncB \"hello\")\n * (feFuncB nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFuncB {:onClick f} \"hello\")\n * (feFuncB #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFuncB :#the-id.klass.other-klass \"hello\")\n * (feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFuncB = (function com$fulcrologic$fulcro$dom$feFuncB(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64134 = arguments.length;\nvar i__4731__auto___64135 = (0);\nwhile(true){\nif((i__4731__auto___64135 < len__4730__auto___64134)){\nargs__4736__auto__.push((arguments[i__4731__auto___64135]));\n\nvar G__64136 = (i__4731__auto___64135 + (1));\ni__4731__auto___64135 = G__64136;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62675 = conformed_args__59513__auto__;\nvar map__62675__$1 = (((((!((map__62675 == null))))?(((((map__62675.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62675.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62675):map__62675);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62675__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62675__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62675__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFuncB\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFuncB.cljs$lang$applyTo = (function (seq62672){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62672));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (marker \"hello\")\n * (marker nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (marker {:onClick f} \"hello\")\n * (marker #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (marker :#the-id.klass.other-klass \"hello\")\n * (marker :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.marker = (function com$fulcrologic$fulcro$dom$marker(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64144 = arguments.length;\nvar i__4731__auto___64145 = (0);\nwhile(true){\nif((i__4731__auto___64145 < len__4730__auto___64144)){\nargs__4736__auto__.push((arguments[i__4731__auto___64145]));\n\nvar G__64146 = (i__4731__auto___64145 + (1));\ni__4731__auto___64145 = G__64146;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62695 = conformed_args__59513__auto__;\nvar map__62695__$1 = (((((!((map__62695 == null))))?(((((map__62695.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62695.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62695):map__62695);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62695__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62695__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62695__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"marker\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.marker.cljs$lang$applyTo = (function (seq62685){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62685));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer \"hello\")\n * (feComponentTransfer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComponentTransfer {:onClick f} \"hello\")\n * (feComponentTransfer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComponentTransfer :#the-id.klass.other-klass \"hello\")\n * (feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feComponentTransfer = (function com$fulcrologic$fulcro$dom$feComponentTransfer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64149 = arguments.length;\nvar i__4731__auto___64150 = (0);\nwhile(true){\nif((i__4731__auto___64150 < len__4730__auto___64149)){\nargs__4736__auto__.push((arguments[i__4731__auto___64150]));\n\nvar G__64152 = (i__4731__auto___64150 + (1));\ni__4731__auto___64150 = G__64152;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62718 = conformed_args__59513__auto__;\nvar map__62718__$1 = (((((!((map__62718 == null))))?(((((map__62718.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62718.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62718):map__62718);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62718__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62718__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62718__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComponentTransfer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComponentTransfer.cljs$lang$applyTo = (function (seq62712){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62712));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (td \"hello\")\n * (td nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (td {:onClick f} \"hello\")\n * (td #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (td :#the-id.klass.other-klass \"hello\")\n * (td :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.td = (function com$fulcrologic$fulcro$dom$td(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64156 = arguments.length;\nvar i__4731__auto___64158 = (0);\nwhile(true){\nif((i__4731__auto___64158 < len__4730__auto___64156)){\nargs__4736__auto__.push((arguments[i__4731__auto___64158]));\n\nvar G__64159 = (i__4731__auto___64158 + (1));\ni__4731__auto___64158 = G__64159;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62732 = conformed_args__59513__auto__;\nvar map__62732__$1 = (((((!((map__62732 == null))))?(((((map__62732.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62732.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62732):map__62732);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62732__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62732__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62732__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"td\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.td.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.td.cljs$lang$applyTo = (function (seq62729){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62729));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tr \"hello\")\n * (tr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tr {:onClick f} \"hello\")\n * (tr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tr :#the-id.klass.other-klass \"hello\")\n * (tr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tr = (function com$fulcrologic$fulcro$dom$tr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64164 = arguments.length;\nvar i__4731__auto___64165 = (0);\nwhile(true){\nif((i__4731__auto___64165 < len__4730__auto___64164)){\nargs__4736__auto__.push((arguments[i__4731__auto___64165]));\n\nvar G__64166 = (i__4731__auto___64165 + (1));\ni__4731__auto___64165 = G__64166;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62754 = conformed_args__59513__auto__;\nvar map__62754__$1 = (((((!((map__62754 == null))))?(((((map__62754.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62754.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62754):map__62754);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62754__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62754__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62754__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tr.cljs$lang$applyTo = (function (seq62744){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62744));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (circle \"hello\")\n * (circle nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (circle {:onClick f} \"hello\")\n * (circle #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (circle :#the-id.klass.other-klass \"hello\")\n * (circle :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.circle = (function com$fulcrologic$fulcro$dom$circle(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64171 = arguments.length;\nvar i__4731__auto___64172 = (0);\nwhile(true){\nif((i__4731__auto___64172 < len__4730__auto___64171)){\nargs__4736__auto__.push((arguments[i__4731__auto___64172]));\n\nvar G__64173 = (i__4731__auto___64172 + (1));\ni__4731__auto___64172 = G__64173;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62771 = conformed_args__59513__auto__;\nvar map__62771__$1 = (((((!((map__62771 == null))))?(((((map__62771.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62771.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62771):map__62771);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62771__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62771__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62771__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"circle\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.circle.cljs$lang$applyTo = (function (seq62769){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62769));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (section \"hello\")\n * (section nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (section {:onClick f} \"hello\")\n * (section #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (section :#the-id.klass.other-klass \"hello\")\n * (section :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.section = (function com$fulcrologic$fulcro$dom$section(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64189 = arguments.length;\nvar i__4731__auto___64190 = (0);\nwhile(true){\nif((i__4731__auto___64190 < len__4730__auto___64189)){\nargs__4736__auto__.push((arguments[i__4731__auto___64190]));\n\nvar G__64193 = (i__4731__auto___64190 + (1));\ni__4731__auto___64190 = G__64193;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62777 = conformed_args__59513__auto__;\nvar map__62777__$1 = (((((!((map__62777 == null))))?(((((map__62777.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62777.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62777):map__62777);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62777__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62777__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62777__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"section\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.section.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.section.cljs$lang$applyTo = (function (seq62775){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62775));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDropShadow \"hello\")\n * (feDropShadow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDropShadow {:onClick f} \"hello\")\n * (feDropShadow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDropShadow :#the-id.klass.other-klass \"hello\")\n * (feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDropShadow = (function com$fulcrologic$fulcro$dom$feDropShadow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64201 = arguments.length;\nvar i__4731__auto___64202 = (0);\nwhile(true){\nif((i__4731__auto___64202 < len__4730__auto___64201)){\nargs__4736__auto__.push((arguments[i__4731__auto___64202]));\n\nvar G__64203 = (i__4731__auto___64202 + (1));\ni__4731__auto___64202 = G__64203;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62787 = conformed_args__59513__auto__;\nvar map__62787__$1 = (((((!((map__62787 == null))))?(((((map__62787.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62787.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62787):map__62787);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62787__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62787__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62787__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDropShadow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDropShadow.cljs$lang$applyTo = (function (seq62784){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62784));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (th \"hello\")\n * (th nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (th {:onClick f} \"hello\")\n * (th #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (th :#the-id.klass.other-klass \"hello\")\n * (th :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.th = (function com$fulcrologic$fulcro$dom$th(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64211 = arguments.length;\nvar i__4731__auto___64212 = (0);\nwhile(true){\nif((i__4731__auto___64212 < len__4730__auto___64211)){\nargs__4736__auto__.push((arguments[i__4731__auto___64212]));\n\nvar G__64213 = (i__4731__auto___64212 + (1));\ni__4731__auto___64212 = G__64213;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62796 = conformed_args__59513__auto__;\nvar map__62796__$1 = (((((!((map__62796 == null))))?(((((map__62796.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62796.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62796):map__62796);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62796__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62796__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62796__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"th\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.th.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.th.cljs$lang$applyTo = (function (seq62792){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62792));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (time \"hello\")\n * (time nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (time {:onClick f} \"hello\")\n * (time #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (time :#the-id.klass.other-klass \"hello\")\n * (time :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.time = (function com$fulcrologic$fulcro$dom$time(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64222 = arguments.length;\nvar i__4731__auto___64223 = (0);\nwhile(true){\nif((i__4731__auto___64223 < len__4730__auto___64222)){\nargs__4736__auto__.push((arguments[i__4731__auto___64223]));\n\nvar G__64224 = (i__4731__auto___64223 + (1));\ni__4731__auto___64223 = G__64224;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62801 = conformed_args__59513__auto__;\nvar map__62801__$1 = (((((!((map__62801 == null))))?(((((map__62801.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62801.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62801):map__62801);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62801__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62801__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62801__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"time\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.time.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.time.cljs$lang$applyTo = (function (seq62798){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62798));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (optgroup \"hello\")\n * (optgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (optgroup {:onClick f} \"hello\")\n * (optgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (optgroup :#the-id.klass.other-klass \"hello\")\n * (optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.optgroup = (function com$fulcrologic$fulcro$dom$optgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64231 = arguments.length;\nvar i__4731__auto___64232 = (0);\nwhile(true){\nif((i__4731__auto___64232 < len__4730__auto___64231)){\nargs__4736__auto__.push((arguments[i__4731__auto___64232]));\n\nvar G__64234 = (i__4731__auto___64232 + (1));\ni__4731__auto___64232 = G__64234;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62812 = conformed_args__59513__auto__;\nvar map__62812__$1 = (((((!((map__62812 == null))))?(((((map__62812.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62812.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62812):map__62812);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62812__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62812__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62812__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"optgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.optgroup.cljs$lang$applyTo = (function (seq62808){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62808));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (iframe \"hello\")\n * (iframe nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (iframe {:onClick f} \"hello\")\n * (iframe #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (iframe :#the-id.klass.other-klass \"hello\")\n * (iframe :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.iframe = (function com$fulcrologic$fulcro$dom$iframe(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64237 = arguments.length;\nvar i__4731__auto___64238 = (0);\nwhile(true){\nif((i__4731__auto___64238 < len__4730__auto___64237)){\nargs__4736__auto__.push((arguments[i__4731__auto___64238]));\n\nvar G__64239 = (i__4731__auto___64238 + (1));\ni__4731__auto___64238 = G__64239;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62827 = conformed_args__59513__auto__;\nvar map__62827__$1 = (((((!((map__62827 == null))))?(((((map__62827.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62827.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62827):map__62827);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62827__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62827__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62827__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"iframe\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.iframe.cljs$lang$applyTo = (function (seq62819){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62819));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (color-profile \"hello\")\n * (color-profile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (color-profile {:onClick f} \"hello\")\n * (color-profile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (color-profile :#the-id.klass.other-klass \"hello\")\n * (color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.color_profile = (function com$fulcrologic$fulcro$dom$color_profile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64248 = arguments.length;\nvar i__4731__auto___64249 = (0);\nwhile(true){\nif((i__4731__auto___64249 < len__4730__auto___64248)){\nargs__4736__auto__.push((arguments[i__4731__auto___64249]));\n\nvar G__64250 = (i__4731__auto___64249 + (1));\ni__4731__auto___64249 = G__64250;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62838 = conformed_args__59513__auto__;\nvar map__62838__$1 = (((((!((map__62838 == null))))?(((((map__62838.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62838.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62838):map__62838);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62838__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62838__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62838__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"color-profile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.color_profile.cljs$lang$applyTo = (function (seq62830){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62830));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (legend \"hello\")\n * (legend nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (legend {:onClick f} \"hello\")\n * (legend #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (legend :#the-id.klass.other-klass \"hello\")\n * (legend :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.legend = (function com$fulcrologic$fulcro$dom$legend(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64258 = arguments.length;\nvar i__4731__auto___64259 = (0);\nwhile(true){\nif((i__4731__auto___64259 < len__4730__auto___64258)){\nargs__4736__auto__.push((arguments[i__4731__auto___64259]));\n\nvar G__64260 = (i__4731__auto___64259 + (1));\ni__4731__auto___64259 = G__64260;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62856 = conformed_args__59513__auto__;\nvar map__62856__$1 = (((((!((map__62856 == null))))?(((((map__62856.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62856.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62856):map__62856);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62856__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62856__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62856__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"legend\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.legend.cljs$lang$applyTo = (function (seq62843){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62843));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (em \"hello\")\n * (em nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (em {:onClick f} \"hello\")\n * (em #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (em :#the-id.klass.other-klass \"hello\")\n * (em :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.em = (function com$fulcrologic$fulcro$dom$em(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64265 = arguments.length;\nvar i__4731__auto___64268 = (0);\nwhile(true){\nif((i__4731__auto___64268 < len__4730__auto___64265)){\nargs__4736__auto__.push((arguments[i__4731__auto___64268]));\n\nvar G__64269 = (i__4731__auto___64268 + (1));\ni__4731__auto___64268 = G__64269;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62876 = conformed_args__59513__auto__;\nvar map__62876__$1 = (((((!((map__62876 == null))))?(((((map__62876.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62876.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62876):map__62876);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62876__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62876__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62876__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"em\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.em.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.em.cljs$lang$applyTo = (function (seq62865){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62865));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (kbd \"hello\")\n * (kbd nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (kbd {:onClick f} \"hello\")\n * (kbd #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (kbd :#the-id.klass.other-klass \"hello\")\n * (kbd :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.kbd = (function com$fulcrologic$fulcro$dom$kbd(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64289 = arguments.length;\nvar i__4731__auto___64290 = (0);\nwhile(true){\nif((i__4731__auto___64290 < len__4730__auto___64289)){\nargs__4736__auto__.push((arguments[i__4731__auto___64290]));\n\nvar G__64291 = (i__4731__auto___64290 + (1));\ni__4731__auto___64290 = G__64291;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62881 = conformed_args__59513__auto__;\nvar map__62881__$1 = (((((!((map__62881 == null))))?(((((map__62881.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62881.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62881):map__62881);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62881__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62881__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62881__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"kbd\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.kbd.cljs$lang$applyTo = (function (seq62880){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62880));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (article \"hello\")\n * (article nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (article {:onClick f} \"hello\")\n * (article #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (article :#the-id.klass.other-klass \"hello\")\n * (article :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.article = (function com$fulcrologic$fulcro$dom$article(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64299 = arguments.length;\nvar i__4731__auto___64300 = (0);\nwhile(true){\nif((i__4731__auto___64300 < len__4730__auto___64299)){\nargs__4736__auto__.push((arguments[i__4731__auto___64300]));\n\nvar G__64301 = (i__4731__auto___64300 + (1));\ni__4731__auto___64300 = G__64301;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62897 = conformed_args__59513__auto__;\nvar map__62897__$1 = (((((!((map__62897 == null))))?(((((map__62897.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62897.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62897):map__62897);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62897__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62897__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62897__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"article\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.article.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.article.cljs$lang$applyTo = (function (seq62888){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62888));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateColor \"hello\")\n * (animateColor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateColor {:onClick f} \"hello\")\n * (animateColor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateColor :#the-id.klass.other-klass \"hello\")\n * (animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateColor = (function com$fulcrologic$fulcro$dom$animateColor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64306 = arguments.length;\nvar i__4731__auto___64307 = (0);\nwhile(true){\nif((i__4731__auto___64307 < len__4730__auto___64306)){\nargs__4736__auto__.push((arguments[i__4731__auto___64307]));\n\nvar G__64309 = (i__4731__auto___64307 + (1));\ni__4731__auto___64307 = G__64309;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62901 = conformed_args__59513__auto__;\nvar map__62901__$1 = (((((!((map__62901 == null))))?(((((map__62901.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62901.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62901):map__62901);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62901__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62901__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62901__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateColor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateColor.cljs$lang$applyTo = (function (seq62899){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62899));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (clipPath \"hello\")\n * (clipPath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (clipPath {:onClick f} \"hello\")\n * (clipPath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (clipPath :#the-id.klass.other-klass \"hello\")\n * (clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.clipPath = (function com$fulcrologic$fulcro$dom$clipPath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64317 = arguments.length;\nvar i__4731__auto___64318 = (0);\nwhile(true){\nif((i__4731__auto___64318 < len__4730__auto___64317)){\nargs__4736__auto__.push((arguments[i__4731__auto___64318]));\n\nvar G__64319 = (i__4731__auto___64318 + (1));\ni__4731__auto___64318 = G__64319;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62905 = conformed_args__59513__auto__;\nvar map__62905__$1 = (((((!((map__62905 == null))))?(((((map__62905.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62905.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62905):map__62905);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62905__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62905__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62905__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"clipPath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.clipPath.cljs$lang$applyTo = (function (seq62903){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62903));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (abbr \"hello\")\n * (abbr nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (abbr {:onClick f} \"hello\")\n * (abbr #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (abbr :#the-id.klass.other-klass \"hello\")\n * (abbr :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.abbr = (function com$fulcrologic$fulcro$dom$abbr(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64322 = arguments.length;\nvar i__4731__auto___64323 = (0);\nwhile(true){\nif((i__4731__auto___64323 < len__4730__auto___64322)){\nargs__4736__auto__.push((arguments[i__4731__auto___64323]));\n\nvar G__64324 = (i__4731__auto___64323 + (1));\ni__4731__auto___64323 = G__64324;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62908 = conformed_args__59513__auto__;\nvar map__62908__$1 = (((((!((map__62908 == null))))?(((((map__62908.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62908.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62908):map__62908);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62908__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62908__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62908__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"abbr\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.abbr.cljs$lang$applyTo = (function (seq62907){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62907));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (altGlyphDef \"hello\")\n * (altGlyphDef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (altGlyphDef {:onClick f} \"hello\")\n * (altGlyphDef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (altGlyphDef :#the-id.klass.other-klass \"hello\")\n * (altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.altGlyphDef = (function com$fulcrologic$fulcro$dom$altGlyphDef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64327 = arguments.length;\nvar i__4731__auto___64328 = (0);\nwhile(true){\nif((i__4731__auto___64328 < len__4730__auto___64327)){\nargs__4736__auto__.push((arguments[i__4731__auto___64328]));\n\nvar G__64330 = (i__4731__auto___64328 + (1));\ni__4731__auto___64328 = G__64330;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62915 = conformed_args__59513__auto__;\nvar map__62915__$1 = (((((!((map__62915 == null))))?(((((map__62915.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62915.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62915):map__62915);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62915__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62915__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62915__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"altGlyphDef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.altGlyphDef.cljs$lang$applyTo = (function (seq62910){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62910));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshrow \"hello\")\n * (meshrow nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshrow {:onClick f} \"hello\")\n * (meshrow #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshrow :#the-id.klass.other-klass \"hello\")\n * (meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshrow = (function com$fulcrologic$fulcro$dom$meshrow(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64337 = arguments.length;\nvar i__4731__auto___64338 = (0);\nwhile(true){\nif((i__4731__auto___64338 < len__4730__auto___64337)){\nargs__4736__auto__.push((arguments[i__4731__auto___64338]));\n\nvar G__64339 = (i__4731__auto___64338 + (1));\ni__4731__auto___64338 = G__64339;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62935 = conformed_args__59513__auto__;\nvar map__62935__$1 = (((((!((map__62935 == null))))?(((((map__62935.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62935.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62935):map__62935);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62935__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62935__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62935__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshrow\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshrow.cljs$lang$applyTo = (function (seq62926){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62926));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (cursor \"hello\")\n * (cursor nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (cursor {:onClick f} \"hello\")\n * (cursor #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (cursor :#the-id.klass.other-klass \"hello\")\n * (cursor :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.cursor = (function com$fulcrologic$fulcro$dom$cursor(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64344 = arguments.length;\nvar i__4731__auto___64345 = (0);\nwhile(true){\nif((i__4731__auto___64345 < len__4730__auto___64344)){\nargs__4736__auto__.push((arguments[i__4731__auto___64345]));\n\nvar G__64346 = (i__4731__auto___64345 + (1));\ni__4731__auto___64345 = G__64346;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62947 = conformed_args__59513__auto__;\nvar map__62947__$1 = (((((!((map__62947 == null))))?(((((map__62947.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62947.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62947):map__62947);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62947__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62947__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62947__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"cursor\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.cursor.cljs$lang$applyTo = (function (seq62946){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62946));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animate \"hello\")\n * (animate nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animate {:onClick f} \"hello\")\n * (animate #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animate :#the-id.klass.other-klass \"hello\")\n * (animate :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animate = (function com$fulcrologic$fulcro$dom$animate(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64355 = arguments.length;\nvar i__4731__auto___64356 = (0);\nwhile(true){\nif((i__4731__auto___64356 < len__4730__auto___64355)){\nargs__4736__auto__.push((arguments[i__4731__auto___64356]));\n\nvar G__64358 = (i__4731__auto___64356 + (1));\ni__4731__auto___64356 = G__64358;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62964 = conformed_args__59513__auto__;\nvar map__62964__$1 = (((((!((map__62964 == null))))?(((((map__62964.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62964.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62964):map__62964);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62964__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62964__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62964__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animate\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animate.cljs$lang$applyTo = (function (seq62955){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62955));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (source \"hello\")\n * (source nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (source {:onClick f} \"hello\")\n * (source #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (source :#the-id.klass.other-klass \"hello\")\n * (source :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.source = (function com$fulcrologic$fulcro$dom$source(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64392 = arguments.length;\nvar i__4731__auto___64393 = (0);\nwhile(true){\nif((i__4731__auto___64393 < len__4730__auto___64392)){\nargs__4736__auto__.push((arguments[i__4731__auto___64393]));\n\nvar G__64394 = (i__4731__auto___64393 + (1));\ni__4731__auto___64393 = G__64394;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__62987 = conformed_args__59513__auto__;\nvar map__62987__$1 = (((((!((map__62987 == null))))?(((((map__62987.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__62987.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__62987):map__62987);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62987__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62987__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62987__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"source\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.source.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.source.cljs$lang$applyTo = (function (seq62980){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62980));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (output \"hello\")\n * (output nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (output {:onClick f} \"hello\")\n * (output #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (output :#the-id.klass.other-klass \"hello\")\n * (output :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.output = (function com$fulcrologic$fulcro$dom$output(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64404 = arguments.length;\nvar i__4731__auto___64405 = (0);\nwhile(true){\nif((i__4731__auto___64405 < len__4730__auto___64404)){\nargs__4736__auto__.push((arguments[i__4731__auto___64405]));\n\nvar G__64406 = (i__4731__auto___64405 + (1));\ni__4731__auto___64405 = G__64406;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63006 = conformed_args__59513__auto__;\nvar map__63006__$1 = (((((!((map__63006 == null))))?(((((map__63006.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63006.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63006):map__63006);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63006__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63006__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63006__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"output\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.output.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.output.cljs$lang$applyTo = (function (seq62996){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq62996));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face \"hello\")\n * (font-face nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face {:onClick f} \"hello\")\n * (font-face #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face :#the-id.klass.other-klass \"hello\")\n * (font-face :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face = (function com$fulcrologic$fulcro$dom$font_face(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64417 = arguments.length;\nvar i__4731__auto___64418 = (0);\nwhile(true){\nif((i__4731__auto___64418 < len__4730__auto___64417)){\nargs__4736__auto__.push((arguments[i__4731__auto___64418]));\n\nvar G__64424 = (i__4731__auto___64418 + (1));\ni__4731__auto___64418 = G__64424;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63026 = conformed_args__59513__auto__;\nvar map__63026__$1 = (((((!((map__63026 == null))))?(((((map__63026.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63026.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63026):map__63026);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63026__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63026__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63026__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face.cljs$lang$applyTo = (function (seq63016){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63016));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMergeNode \"hello\")\n * (feMergeNode nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMergeNode {:onClick f} \"hello\")\n * (feMergeNode #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMergeNode :#the-id.klass.other-klass \"hello\")\n * (feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMergeNode = (function com$fulcrologic$fulcro$dom$feMergeNode(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64432 = arguments.length;\nvar i__4731__auto___64433 = (0);\nwhile(true){\nif((i__4731__auto___64433 < len__4730__auto___64432)){\nargs__4736__auto__.push((arguments[i__4731__auto___64433]));\n\nvar G__64435 = (i__4731__auto___64433 + (1));\ni__4731__auto___64433 = G__64435;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63052 = conformed_args__59513__auto__;\nvar map__63052__$1 = (((((!((map__63052 == null))))?(((((map__63052.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63052.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63052):map__63052);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63052__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63052__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63052__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMergeNode\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMergeNode.cljs$lang$applyTo = (function (seq63042){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63042));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feSpotLight \"hello\")\n * (feSpotLight nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feSpotLight {:onClick f} \"hello\")\n * (feSpotLight #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feSpotLight :#the-id.klass.other-klass \"hello\")\n * (feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feSpotLight = (function com$fulcrologic$fulcro$dom$feSpotLight(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64441 = arguments.length;\nvar i__4731__auto___64442 = (0);\nwhile(true){\nif((i__4731__auto___64442 < len__4730__auto___64441)){\nargs__4736__auto__.push((arguments[i__4731__auto___64442]));\n\nvar G__64443 = (i__4731__auto___64442 + (1));\ni__4731__auto___64442 = G__64443;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63062 = conformed_args__59513__auto__;\nvar map__63062__$1 = (((((!((map__63062 == null))))?(((((map__63062.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63062.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63062):map__63062);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63062__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63062__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63062__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feSpotLight\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feSpotLight.cljs$lang$applyTo = (function (seq63057){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63057));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (header \"hello\")\n * (header nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (header {:onClick f} \"hello\")\n * (header #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (header :#the-id.klass.other-klass \"hello\")\n * (header :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.header = (function com$fulcrologic$fulcro$dom$header(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64452 = arguments.length;\nvar i__4731__auto___64453 = (0);\nwhile(true){\nif((i__4731__auto___64453 < len__4730__auto___64452)){\nargs__4736__auto__.push((arguments[i__4731__auto___64453]));\n\nvar G__64454 = (i__4731__auto___64453 + (1));\ni__4731__auto___64453 = G__64454;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63073 = conformed_args__59513__auto__;\nvar map__63073__$1 = (((((!((map__63073 == null))))?(((((map__63073.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63073.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63073):map__63073);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63073__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63073__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63073__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"header\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.header.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.header.cljs$lang$applyTo = (function (seq63068){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63068));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (datalist \"hello\")\n * (datalist nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (datalist {:onClick f} \"hello\")\n * (datalist #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (datalist :#the-id.klass.other-klass \"hello\")\n * (datalist :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.datalist = (function com$fulcrologic$fulcro$dom$datalist(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64463 = arguments.length;\nvar i__4731__auto___64464 = (0);\nwhile(true){\nif((i__4731__auto___64464 < len__4730__auto___64463)){\nargs__4736__auto__.push((arguments[i__4731__auto___64464]));\n\nvar G__64466 = (i__4731__auto___64464 + (1));\ni__4731__auto___64464 = G__64466;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63093 = conformed_args__59513__auto__;\nvar map__63093__$1 = (((((!((map__63093 == null))))?(((((map__63093.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63093.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63093):map__63093);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63093__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63093__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63093__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"datalist\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.datalist.cljs$lang$applyTo = (function (seq63083){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63083));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tfoot \"hello\")\n * (tfoot nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tfoot {:onClick f} \"hello\")\n * (tfoot #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tfoot :#the-id.klass.other-klass \"hello\")\n * (tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tfoot = (function com$fulcrologic$fulcro$dom$tfoot(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64483 = arguments.length;\nvar i__4731__auto___64484 = (0);\nwhile(true){\nif((i__4731__auto___64484 < len__4730__auto___64483)){\nargs__4736__auto__.push((arguments[i__4731__auto___64484]));\n\nvar G__64487 = (i__4731__auto___64484 + (1));\ni__4731__auto___64484 = G__64487;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63102 = conformed_args__59513__auto__;\nvar map__63102__$1 = (((((!((map__63102 == null))))?(((((map__63102.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63102.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63102):map__63102);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63102__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63102__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63102__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tfoot\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tfoot.cljs$lang$applyTo = (function (seq63097){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63097));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (s \"hello\")\n * (s nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (s {:onClick f} \"hello\")\n * (s #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (s :#the-id.klass.other-klass \"hello\")\n * (s :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.s = (function com$fulcrologic$fulcro$dom$s(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64496 = arguments.length;\nvar i__4731__auto___64498 = (0);\nwhile(true){\nif((i__4731__auto___64498 < len__4730__auto___64496)){\nargs__4736__auto__.push((arguments[i__4731__auto___64498]));\n\nvar G__64499 = (i__4731__auto___64498 + (1));\ni__4731__auto___64498 = G__64499;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63117 = conformed_args__59513__auto__;\nvar map__63117__$1 = (((((!((map__63117 == null))))?(((((map__63117.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63117.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63117):map__63117);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63117__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63117__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63117__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"s\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.s.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.s.cljs$lang$applyTo = (function (seq63110){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63110));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (hatch \"hello\")\n * (hatch nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (hatch {:onClick f} \"hello\")\n * (hatch #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (hatch :#the-id.klass.other-klass \"hello\")\n * (hatch :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.hatch = (function com$fulcrologic$fulcro$dom$hatch(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64507 = arguments.length;\nvar i__4731__auto___64508 = (0);\nwhile(true){\nif((i__4731__auto___64508 < len__4730__auto___64507)){\nargs__4736__auto__.push((arguments[i__4731__auto___64508]));\n\nvar G__64509 = (i__4731__auto___64508 + (1));\ni__4731__auto___64508 = G__64509;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63125 = conformed_args__59513__auto__;\nvar map__63125__$1 = (((((!((map__63125 == null))))?(((((map__63125.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63125.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63125):map__63125);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63125__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63125__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63125__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"hatch\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.hatch.cljs$lang$applyTo = (function (seq63124){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63124));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ins \"hello\")\n * (ins nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ins {:onClick f} \"hello\")\n * (ins #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ins :#the-id.klass.other-klass \"hello\")\n * (ins :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ins = (function com$fulcrologic$fulcro$dom$ins(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64522 = arguments.length;\nvar i__4731__auto___64523 = (0);\nwhile(true){\nif((i__4731__auto___64523 < len__4730__auto___64522)){\nargs__4736__auto__.push((arguments[i__4731__auto___64523]));\n\nvar G__64524 = (i__4731__auto___64523 + (1));\ni__4731__auto___64523 = G__64524;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63128 = conformed_args__59513__auto__;\nvar map__63128__$1 = (((((!((map__63128 == null))))?(((((map__63128.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63128.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63128):map__63128);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63128__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63128__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63128__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ins\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ins.cljs$lang$applyTo = (function (seq63127){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63127));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (footer \"hello\")\n * (footer nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (footer {:onClick f} \"hello\")\n * (footer #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (footer :#the-id.klass.other-klass \"hello\")\n * (footer :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.footer = (function com$fulcrologic$fulcro$dom$footer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64536 = arguments.length;\nvar i__4731__auto___64537 = (0);\nwhile(true){\nif((i__4731__auto___64537 < len__4730__auto___64536)){\nargs__4736__auto__.push((arguments[i__4731__auto___64537]));\n\nvar G__64538 = (i__4731__auto___64537 + (1));\ni__4731__auto___64537 = G__64538;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63135 = conformed_args__59513__auto__;\nvar map__63135__$1 = (((((!((map__63135 == null))))?(((((map__63135.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63135.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63135):map__63135);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63135__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63135__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63135__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"footer\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.footer.cljs$lang$applyTo = (function (seq63133){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63133));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mpath \"hello\")\n * (mpath nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mpath {:onClick f} \"hello\")\n * (mpath #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mpath :#the-id.klass.other-klass \"hello\")\n * (mpath :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mpath = (function com$fulcrologic$fulcro$dom$mpath(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64545 = arguments.length;\nvar i__4731__auto___64546 = (0);\nwhile(true){\nif((i__4731__auto___64546 < len__4730__auto___64545)){\nargs__4736__auto__.push((arguments[i__4731__auto___64546]));\n\nvar G__64551 = (i__4731__auto___64546 + (1));\ni__4731__auto___64546 = G__64551;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63140 = conformed_args__59513__auto__;\nvar map__63140__$1 = (((((!((map__63140 == null))))?(((((map__63140.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63140.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63140):map__63140);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63140__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63140__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63140__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mpath\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mpath.cljs$lang$applyTo = (function (seq63139){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63139));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (title \"hello\")\n * (title nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (title {:onClick f} \"hello\")\n * (title #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (title :#the-id.klass.other-klass \"hello\")\n * (title :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.title = (function com$fulcrologic$fulcro$dom$title(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64558 = arguments.length;\nvar i__4731__auto___64559 = (0);\nwhile(true){\nif((i__4731__auto___64559 < len__4730__auto___64558)){\nargs__4736__auto__.push((arguments[i__4731__auto___64559]));\n\nvar G__64563 = (i__4731__auto___64559 + (1));\ni__4731__auto___64559 = G__64563;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63143 = conformed_args__59513__auto__;\nvar map__63143__$1 = (((((!((map__63143 == null))))?(((((map__63143.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63143.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63143):map__63143);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63143__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63143__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63143__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"title\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.title.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.title.cljs$lang$applyTo = (function (seq63142){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63142));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h5 \"hello\")\n * (h5 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h5 {:onClick f} \"hello\")\n * (h5 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h5 :#the-id.klass.other-klass \"hello\")\n * (h5 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h5 = (function com$fulcrologic$fulcro$dom$h5(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64571 = arguments.length;\nvar i__4731__auto___64572 = (0);\nwhile(true){\nif((i__4731__auto___64572 < len__4730__auto___64571)){\nargs__4736__auto__.push((arguments[i__4731__auto___64572]));\n\nvar G__64573 = (i__4731__auto___64572 + (1));\ni__4731__auto___64572 = G__64573;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63148 = conformed_args__59513__auto__;\nvar map__63148__$1 = (((((!((map__63148 == null))))?(((((map__63148.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63148.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63148):map__63148);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63148__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63148__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63148__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h5\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h5.cljs$lang$applyTo = (function (seq63147){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63147));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meshgradient \"hello\")\n * (meshgradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meshgradient {:onClick f} \"hello\")\n * (meshgradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meshgradient :#the-id.klass.other-klass \"hello\")\n * (meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meshgradient = (function com$fulcrologic$fulcro$dom$meshgradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64579 = arguments.length;\nvar i__4731__auto___64580 = (0);\nwhile(true){\nif((i__4731__auto___64580 < len__4730__auto___64579)){\nargs__4736__auto__.push((arguments[i__4731__auto___64580]));\n\nvar G__64581 = (i__4731__auto___64580 + (1));\ni__4731__auto___64580 = G__64581;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63152 = conformed_args__59513__auto__;\nvar map__63152__$1 = (((((!((map__63152 == null))))?(((((map__63152.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63152.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63152):map__63152);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63152__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63152__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63152__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meshgradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meshgradient.cljs$lang$applyTo = (function (seq63151){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63151));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (canvas \"hello\")\n * (canvas nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (canvas {:onClick f} \"hello\")\n * (canvas #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (canvas :#the-id.klass.other-klass \"hello\")\n * (canvas :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.canvas = (function com$fulcrologic$fulcro$dom$canvas(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64589 = arguments.length;\nvar i__4731__auto___64590 = (0);\nwhile(true){\nif((i__4731__auto___64590 < len__4730__auto___64589)){\nargs__4736__auto__.push((arguments[i__4731__auto___64590]));\n\nvar G__64591 = (i__4731__auto___64590 + (1));\ni__4731__auto___64590 = G__64591;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63155 = conformed_args__59513__auto__;\nvar map__63155__$1 = (((((!((map__63155 == null))))?(((((map__63155.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63155.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63155):map__63155);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63155__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63155__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63155__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"canvas\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.canvas.cljs$lang$applyTo = (function (seq63154){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63154));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (param \"hello\")\n * (param nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (param {:onClick f} \"hello\")\n * (param #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (param :#the-id.klass.other-klass \"hello\")\n * (param :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.param = (function com$fulcrologic$fulcro$dom$param(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64598 = arguments.length;\nvar i__4731__auto___64599 = (0);\nwhile(true){\nif((i__4731__auto___64599 < len__4730__auto___64598)){\nargs__4736__auto__.push((arguments[i__4731__auto___64599]));\n\nvar G__64600 = (i__4731__auto___64599 + (1));\ni__4731__auto___64599 = G__64600;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63158 = conformed_args__59513__auto__;\nvar map__63158__$1 = (((((!((map__63158 == null))))?(((((map__63158.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63158.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63158):map__63158);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63158__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63158__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63158__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"param\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.param.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.param.cljs$lang$applyTo = (function (seq63157){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63157));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font \"hello\")\n * (font nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font {:onClick f} \"hello\")\n * (font #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font :#the-id.klass.other-klass \"hello\")\n * (font :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font = (function com$fulcrologic$fulcro$dom$font(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64605 = arguments.length;\nvar i__4731__auto___64607 = (0);\nwhile(true){\nif((i__4731__auto___64607 < len__4730__auto___64605)){\nargs__4736__auto__.push((arguments[i__4731__auto___64607]));\n\nvar G__64609 = (i__4731__auto___64607 + (1));\ni__4731__auto___64607 = G__64609;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63161 = conformed_args__59513__auto__;\nvar map__63161__$1 = (((((!((map__63161 == null))))?(((((map__63161.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63161.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63161):map__63161);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63161__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63161__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63161__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font.cljs$lang$applyTo = (function (seq63160){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63160));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (div \"hello\")\n * (div nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (div {:onClick f} \"hello\")\n * (div #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (div :#the-id.klass.other-klass \"hello\")\n * (div :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.div = (function com$fulcrologic$fulcro$dom$div(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64618 = arguments.length;\nvar i__4731__auto___64620 = (0);\nwhile(true){\nif((i__4731__auto___64620 < len__4730__auto___64618)){\nargs__4736__auto__.push((arguments[i__4731__auto___64620]));\n\nvar G__64621 = (i__4731__auto___64620 + (1));\ni__4731__auto___64620 = G__64621;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63164 = conformed_args__59513__auto__;\nvar map__63164__$1 = (((((!((map__63164 == null))))?(((((map__63164.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63164.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63164):map__63164);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63164__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63164__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63164__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"div\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.div.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.div.cljs$lang$applyTo = (function (seq63163){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63163));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (option \"hello\")\n * (option nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (option {:onClick f} \"hello\")\n * (option #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (option :#the-id.klass.other-klass \"hello\")\n * (option :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.option = (function com$fulcrologic$fulcro$dom$option(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64629 = arguments.length;\nvar i__4731__auto___64630 = (0);\nwhile(true){\nif((i__4731__auto___64630 < len__4730__auto___64629)){\nargs__4736__auto__.push((arguments[i__4731__auto___64630]));\n\nvar G__64632 = (i__4731__auto___64630 + (1));\ni__4731__auto___64630 = G__64632;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63167 = conformed_args__59513__auto__;\nvar map__63167__$1 = (((((!((map__63167 == null))))?(((((map__63167.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63167.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63167):map__63167);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63167__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63167__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63167__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"option\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.option.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.option.cljs$lang$applyTo = (function (seq63166){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63166));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feFlood \"hello\")\n * (feFlood nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feFlood {:onClick f} \"hello\")\n * (feFlood #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feFlood :#the-id.klass.other-klass \"hello\")\n * (feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feFlood = (function com$fulcrologic$fulcro$dom$feFlood(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64638 = arguments.length;\nvar i__4731__auto___64639 = (0);\nwhile(true){\nif((i__4731__auto___64639 < len__4730__auto___64638)){\nargs__4736__auto__.push((arguments[i__4731__auto___64639]));\n\nvar G__64641 = (i__4731__auto___64639 + (1));\ni__4731__auto___64639 = G__64641;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63170 = conformed_args__59513__auto__;\nvar map__63170__$1 = (((((!((map__63170 == null))))?(((((map__63170.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63170.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63170):map__63170);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63170__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63170__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63170__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feFlood\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feFlood.cljs$lang$applyTo = (function (seq63169){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63169));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (summary \"hello\")\n * (summary nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (summary {:onClick f} \"hello\")\n * (summary #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (summary :#the-id.klass.other-klass \"hello\")\n * (summary :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.summary = (function com$fulcrologic$fulcro$dom$summary(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64647 = arguments.length;\nvar i__4731__auto___64648 = (0);\nwhile(true){\nif((i__4731__auto___64648 < len__4730__auto___64647)){\nargs__4736__auto__.push((arguments[i__4731__auto___64648]));\n\nvar G__64649 = (i__4731__auto___64648 + (1));\ni__4731__auto___64648 = G__64649;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63173 = conformed_args__59513__auto__;\nvar map__63173__$1 = (((((!((map__63173 == null))))?(((((map__63173.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63173.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63173):map__63173);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63173__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63173__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63173__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"summary\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.summary.cljs$lang$applyTo = (function (seq63172){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63172));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feMorphology \"hello\")\n * (feMorphology nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feMorphology {:onClick f} \"hello\")\n * (feMorphology #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feMorphology :#the-id.klass.other-klass \"hello\")\n * (feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feMorphology = (function com$fulcrologic$fulcro$dom$feMorphology(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64663 = arguments.length;\nvar i__4731__auto___64664 = (0);\nwhile(true){\nif((i__4731__auto___64664 < len__4730__auto___64663)){\nargs__4736__auto__.push((arguments[i__4731__auto___64664]));\n\nvar G__64668 = (i__4731__auto___64664 + (1));\ni__4731__auto___64664 = G__64668;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63177 = conformed_args__59513__auto__;\nvar map__63177__$1 = (((((!((map__63177 == null))))?(((((map__63177.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63177.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63177):map__63177);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63177__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63177__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63177__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feMorphology\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feMorphology.cljs$lang$applyTo = (function (seq63176){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63176));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (samp \"hello\")\n * (samp nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (samp {:onClick f} \"hello\")\n * (samp #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (samp :#the-id.klass.other-klass \"hello\")\n * (samp :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.samp = (function com$fulcrologic$fulcro$dom$samp(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64674 = arguments.length;\nvar i__4731__auto___64675 = (0);\nwhile(true){\nif((i__4731__auto___64675 < len__4730__auto___64674)){\nargs__4736__auto__.push((arguments[i__4731__auto___64675]));\n\nvar G__64676 = (i__4731__auto___64675 + (1));\ni__4731__auto___64675 = G__64676;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63180 = conformed_args__59513__auto__;\nvar map__63180__$1 = (((((!((map__63180 == null))))?(((((map__63180.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63180.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63180):map__63180);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63180__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63180__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63180__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"samp\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.samp.cljs$lang$applyTo = (function (seq63179){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63179));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyphRef \"hello\")\n * (glyphRef nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyphRef {:onClick f} \"hello\")\n * (glyphRef #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyphRef :#the-id.klass.other-klass \"hello\")\n * (glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.glyphRef = (function com$fulcrologic$fulcro$dom$glyphRef(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64681 = arguments.length;\nvar i__4731__auto___64682 = (0);\nwhile(true){\nif((i__4731__auto___64682 < len__4730__auto___64681)){\nargs__4736__auto__.push((arguments[i__4731__auto___64682]));\n\nvar G__64683 = (i__4731__auto___64682 + (1));\ni__4731__auto___64682 = G__64683;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63187 = conformed_args__59513__auto__;\nvar map__63187__$1 = (((((!((map__63187 == null))))?(((((map__63187.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63187.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63187):map__63187);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63187__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63187__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63187__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyphRef\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyphRef.cljs$lang$applyTo = (function (seq63184){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63184));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (small \"hello\")\n * (small nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (small {:onClick f} \"hello\")\n * (small #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (small :#the-id.klass.other-klass \"hello\")\n * (small :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.small = (function com$fulcrologic$fulcro$dom$small(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64689 = arguments.length;\nvar i__4731__auto___64690 = (0);\nwhile(true){\nif((i__4731__auto___64690 < len__4730__auto___64689)){\nargs__4736__auto__.push((arguments[i__4731__auto___64690]));\n\nvar G__64693 = (i__4731__auto___64690 + (1));\ni__4731__auto___64690 = G__64693;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63192 = conformed_args__59513__auto__;\nvar map__63192__$1 = (((((!((map__63192 == null))))?(((((map__63192.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63192.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63192):map__63192);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63192__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63192__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63192__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"small\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.small.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.small.cljs$lang$applyTo = (function (seq63190){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63190));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (style \"hello\")\n * (style nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (style {:onClick f} \"hello\")\n * (style #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (style :#the-id.klass.other-klass \"hello\")\n * (style :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.style = (function com$fulcrologic$fulcro$dom$style(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64697 = arguments.length;\nvar i__4731__auto___64698 = (0);\nwhile(true){\nif((i__4731__auto___64698 < len__4730__auto___64697)){\nargs__4736__auto__.push((arguments[i__4731__auto___64698]));\n\nvar G__64700 = (i__4731__auto___64698 + (1));\ni__4731__auto___64698 = G__64700;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63198 = conformed_args__59513__auto__;\nvar map__63198__$1 = (((((!((map__63198 == null))))?(((((map__63198.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63198.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63198):map__63198);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63198__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63198__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63198__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"style\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.style.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.style.cljs$lang$applyTo = (function (seq63194){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63194));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (textarea \"hello\")\n * (textarea nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (textarea {:onClick f} \"hello\")\n * (textarea #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (textarea :#the-id.klass.other-klass \"hello\")\n * (textarea :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.textarea = (function com$fulcrologic$fulcro$dom$textarea(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64703 = arguments.length;\nvar i__4731__auto___64704 = (0);\nwhile(true){\nif((i__4731__auto___64704 < len__4730__auto___64703)){\nargs__4736__auto__.push((arguments[i__4731__auto___64704]));\n\nvar G__64705 = (i__4731__auto___64704 + (1));\ni__4731__auto___64704 = G__64705;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63202 = conformed_args__59513__auto__;\nvar map__63202__$1 = (((((!((map__63202 == null))))?(((((map__63202.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63202.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63202):map__63202);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63202__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63202__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63202__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"textarea\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.textarea.cljs$lang$applyTo = (function (seq63201){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63201));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur \"hello\")\n * (feGaussianBlur nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feGaussianBlur {:onClick f} \"hello\")\n * (feGaussianBlur #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feGaussianBlur :#the-id.klass.other-klass \"hello\")\n * (feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feGaussianBlur = (function com$fulcrologic$fulcro$dom$feGaussianBlur(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64713 = arguments.length;\nvar i__4731__auto___64714 = (0);\nwhile(true){\nif((i__4731__auto___64714 < len__4730__auto___64713)){\nargs__4736__auto__.push((arguments[i__4731__auto___64714]));\n\nvar G__64716 = (i__4731__auto___64714 + (1));\ni__4731__auto___64714 = G__64716;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63205 = conformed_args__59513__auto__;\nvar map__63205__$1 = (((((!((map__63205 == null))))?(((((map__63205.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63205.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63205):map__63205);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63205__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63205__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63205__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feGaussianBlur\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feGaussianBlur.cljs$lang$applyTo = (function (seq63204){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63204));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h4 \"hello\")\n * (h4 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h4 {:onClick f} \"hello\")\n * (h4 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h4 :#the-id.klass.other-klass \"hello\")\n * (h4 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h4 = (function com$fulcrologic$fulcro$dom$h4(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64728 = arguments.length;\nvar i__4731__auto___64729 = (0);\nwhile(true){\nif((i__4731__auto___64729 < len__4730__auto___64728)){\nargs__4736__auto__.push((arguments[i__4731__auto___64729]));\n\nvar G__64731 = (i__4731__auto___64729 + (1));\ni__4731__auto___64729 = G__64731;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63208 = conformed_args__59513__auto__;\nvar map__63208__$1 = (((((!((map__63208 == null))))?(((((map__63208.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63208.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63208):map__63208);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63208__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63208__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63208__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h4\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h4.cljs$lang$applyTo = (function (seq63207){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63207));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (head \"hello\")\n * (head nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (head {:onClick f} \"hello\")\n * (head #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (head :#the-id.klass.other-klass \"hello\")\n * (head :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.head = (function com$fulcrologic$fulcro$dom$head(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64734 = arguments.length;\nvar i__4731__auto___64735 = (0);\nwhile(true){\nif((i__4731__auto___64735 < len__4730__auto___64734)){\nargs__4736__auto__.push((arguments[i__4731__auto___64735]));\n\nvar G__64736 = (i__4731__auto___64735 + (1));\ni__4731__auto___64735 = G__64736;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63211 = conformed_args__59513__auto__;\nvar map__63211__$1 = (((((!((map__63211 == null))))?(((((map__63211.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63211.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63211):map__63211);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63211__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63211__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63211__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"head\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.head.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.head.cljs$lang$applyTo = (function (seq63210){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63210));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (g \"hello\")\n * (g nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (g {:onClick f} \"hello\")\n * (g #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (g :#the-id.klass.other-klass \"hello\")\n * (g :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.g = (function com$fulcrologic$fulcro$dom$g(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64744 = arguments.length;\nvar i__4731__auto___64745 = (0);\nwhile(true){\nif((i__4731__auto___64745 < len__4730__auto___64744)){\nargs__4736__auto__.push((arguments[i__4731__auto___64745]));\n\nvar G__64746 = (i__4731__auto___64745 + (1));\ni__4731__auto___64745 = G__64746;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63215 = conformed_args__59513__auto__;\nvar map__63215__$1 = (((((!((map__63215 == null))))?(((((map__63215.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63215.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63215):map__63215);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63215__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63215__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63215__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"g\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.g.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.g.cljs$lang$applyTo = (function (seq63213){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63213));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (missing-glyph \"hello\")\n * (missing-glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (missing-glyph {:onClick f} \"hello\")\n * (missing-glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (missing-glyph :#the-id.klass.other-klass \"hello\")\n * (missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.missing_glyph = (function com$fulcrologic$fulcro$dom$missing_glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64754 = arguments.length;\nvar i__4731__auto___64755 = (0);\nwhile(true){\nif((i__4731__auto___64755 < len__4730__auto___64754)){\nargs__4736__auto__.push((arguments[i__4731__auto___64755]));\n\nvar G__64756 = (i__4731__auto___64755 + (1));\ni__4731__auto___64755 = G__64756;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63218 = conformed_args__59513__auto__;\nvar map__63218__$1 = (((((!((map__63218 == null))))?(((((map__63218.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63218.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63218):map__63218);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63218__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63218__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63218__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"missing-glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.missing_glyph.cljs$lang$applyTo = (function (seq63217){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63217));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (stop \"hello\")\n * (stop nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (stop {:onClick f} \"hello\")\n * (stop #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (stop :#the-id.klass.other-klass \"hello\")\n * (stop :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.stop = (function com$fulcrologic$fulcro$dom$stop(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64764 = arguments.length;\nvar i__4731__auto___64765 = (0);\nwhile(true){\nif((i__4731__auto___64765 < len__4730__auto___64764)){\nargs__4736__auto__.push((arguments[i__4731__auto___64765]));\n\nvar G__64766 = (i__4731__auto___64765 + (1));\ni__4731__auto___64765 = G__64766;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63221 = conformed_args__59513__auto__;\nvar map__63221__$1 = (((((!((map__63221 == null))))?(((((map__63221.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63221.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63221):map__63221);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63221__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63221__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63221__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"stop\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.stop.cljs$lang$applyTo = (function (seq63220){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63220));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting \"hello\")\n * (feDiffuseLighting nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feDiffuseLighting {:onClick f} \"hello\")\n * (feDiffuseLighting #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n * (feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting = (function com$fulcrologic$fulcro$dom$feDiffuseLighting(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64776 = arguments.length;\nvar i__4731__auto___64777 = (0);\nwhile(true){\nif((i__4731__auto___64777 < len__4730__auto___64776)){\nargs__4736__auto__.push((arguments[i__4731__auto___64777]));\n\nvar G__64779 = (i__4731__auto___64777 + (1));\ni__4731__auto___64777 = G__64779;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63224 = conformed_args__59513__auto__;\nvar map__63224__$1 = (((((!((map__63224 == null))))?(((((map__63224.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63224.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63224):map__63224);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63224__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63224__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63224__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feDiffuseLighting\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feDiffuseLighting.cljs$lang$applyTo = (function (seq63223){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63223));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (filter \"hello\")\n * (filter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (filter {:onClick f} \"hello\")\n * (filter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (filter :#the-id.klass.other-klass \"hello\")\n * (filter :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.filter = (function com$fulcrologic$fulcro$dom$filter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64785 = arguments.length;\nvar i__4731__auto___64786 = (0);\nwhile(true){\nif((i__4731__auto___64786 < len__4730__auto___64785)){\nargs__4736__auto__.push((arguments[i__4731__auto___64786]));\n\nvar G__64787 = (i__4731__auto___64786 + (1));\ni__4731__auto___64786 = G__64787;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63227 = conformed_args__59513__auto__;\nvar map__63227__$1 = (((((!((map__63227 == null))))?(((((map__63227.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63227.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63227):map__63227);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63227__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63227__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63227__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"filter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.filter.cljs$lang$applyTo = (function (seq63226){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63226));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feComposite \"hello\")\n * (feComposite nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feComposite {:onClick f} \"hello\")\n * (feComposite #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feComposite :#the-id.klass.other-klass \"hello\")\n * (feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feComposite = (function com$fulcrologic$fulcro$dom$feComposite(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64794 = arguments.length;\nvar i__4731__auto___64795 = (0);\nwhile(true){\nif((i__4731__auto___64795 < len__4730__auto___64794)){\nargs__4736__auto__.push((arguments[i__4731__auto___64795]));\n\nvar G__64796 = (i__4731__auto___64795 + (1));\ni__4731__auto___64795 = G__64796;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63231 = conformed_args__59513__auto__;\nvar map__63231__$1 = (((((!((map__63231 == null))))?(((((map__63231.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63231.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63231):map__63231);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63231__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63231__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63231__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feComposite\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feComposite.cljs$lang$applyTo = (function (seq63229){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63229));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (mesh \"hello\")\n * (mesh nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (mesh {:onClick f} \"hello\")\n * (mesh #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (mesh :#the-id.klass.other-klass \"hello\")\n * (mesh :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.mesh = (function com$fulcrologic$fulcro$dom$mesh(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64806 = arguments.length;\nvar i__4731__auto___64807 = (0);\nwhile(true){\nif((i__4731__auto___64807 < len__4730__auto___64806)){\nargs__4736__auto__.push((arguments[i__4731__auto___64807]));\n\nvar G__64808 = (i__4731__auto___64807 + (1));\ni__4731__auto___64807 = G__64808;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63235 = conformed_args__59513__auto__;\nvar map__63235__$1 = (((((!((map__63235 == null))))?(((((map__63235.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63235.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63235):map__63235);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63235__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63235__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63235__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"mesh\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.mesh.cljs$lang$applyTo = (function (seq63234){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63234));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (var \"hello\")\n * (var nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (var {:onClick f} \"hello\")\n * (var #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (var :#the-id.klass.other-klass \"hello\")\n * (var :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.var$ = (function com$fulcrologic$fulcro$dom$var(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64814 = arguments.length;\nvar i__4731__auto___64815 = (0);\nwhile(true){\nif((i__4731__auto___64815 < len__4730__auto___64814)){\nargs__4736__auto__.push((arguments[i__4731__auto___64815]));\n\nvar G__64816 = (i__4731__auto___64815 + (1));\ni__4731__auto___64815 = G__64816;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63238 = conformed_args__59513__auto__;\nvar map__63238__$1 = (((((!((map__63238 == null))))?(((((map__63238.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63238.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63238):map__63238);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63238__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63238__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63238__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"var\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.var$.cljs$lang$applyTo = (function (seq63237){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63237));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (tspan \"hello\")\n * (tspan nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (tspan {:onClick f} \"hello\")\n * (tspan #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (tspan :#the-id.klass.other-klass \"hello\")\n * (tspan :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.tspan = (function com$fulcrologic$fulcro$dom$tspan(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64818 = arguments.length;\nvar i__4731__auto___64819 = (0);\nwhile(true){\nif((i__4731__auto___64819 < len__4730__auto___64818)){\nargs__4736__auto__.push((arguments[i__4731__auto___64819]));\n\nvar G__64820 = (i__4731__auto___64819 + (1));\ni__4731__auto___64819 = G__64820;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63241 = conformed_args__59513__auto__;\nvar map__63241__$1 = (((((!((map__63241 == null))))?(((((map__63241.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63241.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63241):map__63241);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63241__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63241__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63241__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"tspan\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.tspan.cljs$lang$applyTo = (function (seq63240){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63240));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ol \"hello\")\n * (ol nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ol {:onClick f} \"hello\")\n * (ol #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ol :#the-id.klass.other-klass \"hello\")\n * (ol :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ol = (function com$fulcrologic$fulcro$dom$ol(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64821 = arguments.length;\nvar i__4731__auto___64822 = (0);\nwhile(true){\nif((i__4731__auto___64822 < len__4730__auto___64821)){\nargs__4736__auto__.push((arguments[i__4731__auto___64822]));\n\nvar G__64823 = (i__4731__auto___64822 + (1));\ni__4731__auto___64822 = G__64823;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63245 = conformed_args__59513__auto__;\nvar map__63245__$1 = (((((!((map__63245 == null))))?(((((map__63245.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63245.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63245):map__63245);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63245__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63245__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63245__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ol\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ol.cljs$lang$applyTo = (function (seq63243){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63243));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (details \"hello\")\n * (details nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (details {:onClick f} \"hello\")\n * (details #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (details :#the-id.klass.other-klass \"hello\")\n * (details :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.details = (function com$fulcrologic$fulcro$dom$details(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64825 = arguments.length;\nvar i__4731__auto___64826 = (0);\nwhile(true){\nif((i__4731__auto___64826 < len__4730__auto___64825)){\nargs__4736__auto__.push((arguments[i__4731__auto___64826]));\n\nvar G__64827 = (i__4731__auto___64826 + (1));\ni__4731__auto___64826 = G__64827;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63250 = conformed_args__59513__auto__;\nvar map__63250__$1 = (((((!((map__63250 == null))))?(((((map__63250.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63250.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63250):map__63250);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63250__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63250__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63250__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"details\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.details.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.details.cljs$lang$applyTo = (function (seq63249){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63249));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (line \"hello\")\n * (line nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (line {:onClick f} \"hello\")\n * (line #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (line :#the-id.klass.other-klass \"hello\")\n * (line :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.line = (function com$fulcrologic$fulcro$dom$line(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64830 = arguments.length;\nvar i__4731__auto___64831 = (0);\nwhile(true){\nif((i__4731__auto___64831 < len__4730__auto___64830)){\nargs__4736__auto__.push((arguments[i__4731__auto___64831]));\n\nvar G__64832 = (i__4731__auto___64831 + (1));\ni__4731__auto___64831 = G__64832;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63253 = conformed_args__59513__auto__;\nvar map__63253__$1 = (((((!((map__63253 == null))))?(((((map__63253.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63253.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63253):map__63253);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63253__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63253__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63253__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"line\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.line.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.line.cljs$lang$applyTo = (function (seq63252){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63252));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (col \"hello\")\n * (col nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (col {:onClick f} \"hello\")\n * (col #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (col :#the-id.klass.other-klass \"hello\")\n * (col :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.col = (function com$fulcrologic$fulcro$dom$col(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64834 = arguments.length;\nvar i__4731__auto___64835 = (0);\nwhile(true){\nif((i__4731__auto___64835 < len__4730__auto___64834)){\nargs__4736__auto__.push((arguments[i__4731__auto___64835]));\n\nvar G__64837 = (i__4731__auto___64835 + (1));\ni__4731__auto___64835 = G__64837;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63256 = conformed_args__59513__auto__;\nvar map__63256__$1 = (((((!((map__63256 == null))))?(((((map__63256.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63256.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63256):map__63256);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63256__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63256__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63256__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"col\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.col.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.col.cljs$lang$applyTo = (function (seq63255){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63255));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (label \"hello\")\n * (label nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (label {:onClick f} \"hello\")\n * (label #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (label :#the-id.klass.other-klass \"hello\")\n * (label :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.label = (function com$fulcrologic$fulcro$dom$label(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64840 = arguments.length;\nvar i__4731__auto___64841 = (0);\nwhile(true){\nif((i__4731__auto___64841 < len__4730__auto___64840)){\nargs__4736__auto__.push((arguments[i__4731__auto___64841]));\n\nvar G__64842 = (i__4731__auto___64841 + (1));\ni__4731__auto___64841 = G__64842;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63259 = conformed_args__59513__auto__;\nvar map__63259__$1 = (((((!((map__63259 == null))))?(((((map__63259.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63259.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63259):map__63259);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63259__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63259__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63259__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"label\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.label.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.label.cljs$lang$applyTo = (function (seq63258){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63258));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (picture \"hello\")\n * (picture nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (picture {:onClick f} \"hello\")\n * (picture #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (picture :#the-id.klass.other-klass \"hello\")\n * (picture :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.picture = (function com$fulcrologic$fulcro$dom$picture(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64846 = arguments.length;\nvar i__4731__auto___64847 = (0);\nwhile(true){\nif((i__4731__auto___64847 < len__4730__auto___64846)){\nargs__4736__auto__.push((arguments[i__4731__auto___64847]));\n\nvar G__64848 = (i__4731__auto___64847 + (1));\ni__4731__auto___64847 = G__64848;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63264 = conformed_args__59513__auto__;\nvar map__63264__$1 = (((((!((map__63264 == null))))?(((((map__63264.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63264.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63264):map__63264);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63264__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63264__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63264__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"picture\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.picture.cljs$lang$applyTo = (function (seq63261){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63261));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (rt \"hello\")\n * (rt nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (rt {:onClick f} \"hello\")\n * (rt #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (rt :#the-id.klass.other-klass \"hello\")\n * (rt :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.rt = (function com$fulcrologic$fulcro$dom$rt(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64852 = arguments.length;\nvar i__4731__auto___64853 = (0);\nwhile(true){\nif((i__4731__auto___64853 < len__4730__auto___64852)){\nargs__4736__auto__.push((arguments[i__4731__auto___64853]));\n\nvar G__64854 = (i__4731__auto___64853 + (1));\ni__4731__auto___64853 = G__64854;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63267 = conformed_args__59513__auto__;\nvar map__63267__$1 = (((((!((map__63267 == null))))?(((((map__63267.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63267.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63267):map__63267);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63267__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63267__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63267__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"rt\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.rt.cljs$lang$applyTo = (function (seq63266){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63266));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h6 \"hello\")\n * (h6 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h6 {:onClick f} \"hello\")\n * (h6 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h6 :#the-id.klass.other-klass \"hello\")\n * (h6 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h6 = (function com$fulcrologic$fulcro$dom$h6(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64856 = arguments.length;\nvar i__4731__auto___64857 = (0);\nwhile(true){\nif((i__4731__auto___64857 < len__4730__auto___64856)){\nargs__4736__auto__.push((arguments[i__4731__auto___64857]));\n\nvar G__64861 = (i__4731__auto___64857 + (1));\ni__4731__auto___64857 = G__64861;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63270 = conformed_args__59513__auto__;\nvar map__63270__$1 = (((((!((map__63270 == null))))?(((((map__63270.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63270.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63270):map__63270);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63270__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63270__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63270__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h6\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h6.cljs$lang$applyTo = (function (seq63269){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63269));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (vkern \"hello\")\n * (vkern nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (vkern {:onClick f} \"hello\")\n * (vkern #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (vkern :#the-id.klass.other-klass \"hello\")\n * (vkern :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.vkern = (function com$fulcrologic$fulcro$dom$vkern(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64863 = arguments.length;\nvar i__4731__auto___64864 = (0);\nwhile(true){\nif((i__4731__auto___64864 < len__4730__auto___64863)){\nargs__4736__auto__.push((arguments[i__4731__auto___64864]));\n\nvar G__64865 = (i__4731__auto___64864 + (1));\ni__4731__auto___64864 = G__64865;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63273 = conformed_args__59513__auto__;\nvar map__63273__$1 = (((((!((map__63273 == null))))?(((((map__63273.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63273.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63273):map__63273);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63273__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63273__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63273__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"vkern\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.vkern.cljs$lang$applyTo = (function (seq63272){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63272));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (link \"hello\")\n * (link nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (link {:onClick f} \"hello\")\n * (link #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (link :#the-id.klass.other-klass \"hello\")\n * (link :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.link = (function com$fulcrologic$fulcro$dom$link(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64866 = arguments.length;\nvar i__4731__auto___64867 = (0);\nwhile(true){\nif((i__4731__auto___64867 < len__4730__auto___64866)){\nargs__4736__auto__.push((arguments[i__4731__auto___64867]));\n\nvar G__64868 = (i__4731__auto___64867 + (1));\ni__4731__auto___64867 = G__64868;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63276 = conformed_args__59513__auto__;\nvar map__63276__$1 = (((((!((map__63276 == null))))?(((((map__63276.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63276.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63276):map__63276);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63276__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63276__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63276__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"link\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.link.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.link.cljs$lang$applyTo = (function (seq63275){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63275));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (defs \"hello\")\n * (defs nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (defs {:onClick f} \"hello\")\n * (defs #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (defs :#the-id.klass.other-klass \"hello\")\n * (defs :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.defs = (function com$fulcrologic$fulcro$dom$defs(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64870 = arguments.length;\nvar i__4731__auto___64871 = (0);\nwhile(true){\nif((i__4731__auto___64871 < len__4730__auto___64870)){\nargs__4736__auto__.push((arguments[i__4731__auto___64871]));\n\nvar G__64872 = (i__4731__auto___64871 + (1));\ni__4731__auto___64871 = G__64872;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63280 = conformed_args__59513__auto__;\nvar map__63280__$1 = (((((!((map__63280 == null))))?(((((map__63280.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63280.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63280):map__63280);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63280__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63280__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63280__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"defs\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.defs.cljs$lang$applyTo = (function (seq63278){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63278));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (glyph \"hello\")\n * (glyph nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (glyph {:onClick f} \"hello\")\n * (glyph #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (glyph :#the-id.klass.other-klass \"hello\")\n * (glyph :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.glyph = (function com$fulcrologic$fulcro$dom$glyph(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64876 = arguments.length;\nvar i__4731__auto___64877 = (0);\nwhile(true){\nif((i__4731__auto___64877 < len__4730__auto___64876)){\nargs__4736__auto__.push((arguments[i__4731__auto___64877]));\n\nvar G__64878 = (i__4731__auto___64877 + (1));\ni__4731__auto___64877 = G__64878;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63283 = conformed_args__59513__auto__;\nvar map__63283__$1 = (((((!((map__63283 == null))))?(((((map__63283.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63283.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63283):map__63283);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63283__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63283__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63283__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"glyph\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.glyph.cljs$lang$applyTo = (function (seq63282){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63282));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (colgroup \"hello\")\n * (colgroup nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (colgroup {:onClick f} \"hello\")\n * (colgroup #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (colgroup :#the-id.klass.other-klass \"hello\")\n * (colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.colgroup = (function com$fulcrologic$fulcro$dom$colgroup(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64881 = arguments.length;\nvar i__4731__auto___64882 = (0);\nwhile(true){\nif((i__4731__auto___64882 < len__4730__auto___64881)){\nargs__4736__auto__.push((arguments[i__4731__auto___64882]));\n\nvar G__64883 = (i__4731__auto___64882 + (1));\ni__4731__auto___64882 = G__64883;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63286 = conformed_args__59513__auto__;\nvar map__63286__$1 = (((((!((map__63286 == null))))?(((((map__63286.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63286.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63286):map__63286);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63286__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63286__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63286__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"colgroup\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.colgroup.cljs$lang$applyTo = (function (seq63285){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63285));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (meter \"hello\")\n * (meter nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (meter {:onClick f} \"hello\")\n * (meter #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (meter :#the-id.klass.other-klass \"hello\")\n * (meter :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.meter = (function com$fulcrologic$fulcro$dom$meter(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64887 = arguments.length;\nvar i__4731__auto___64888 = (0);\nwhile(true){\nif((i__4731__auto___64888 < len__4730__auto___64887)){\nargs__4736__auto__.push((arguments[i__4731__auto___64888]));\n\nvar G__64889 = (i__4731__auto___64888 + (1));\ni__4731__auto___64888 = G__64889;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63289 = conformed_args__59513__auto__;\nvar map__63289__$1 = (((((!((map__63289 == null))))?(((((map__63289.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63289.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63289):map__63289);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63289__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63289__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63289__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"meter\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.meter.cljs$lang$applyTo = (function (seq63288){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63288));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (bdo \"hello\")\n * (bdo nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (bdo {:onClick f} \"hello\")\n * (bdo #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (bdo :#the-id.klass.other-klass \"hello\")\n * (bdo :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.bdo = (function com$fulcrologic$fulcro$dom$bdo(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64893 = arguments.length;\nvar i__4731__auto___64894 = (0);\nwhile(true){\nif((i__4731__auto___64894 < len__4730__auto___64893)){\nargs__4736__auto__.push((arguments[i__4731__auto___64894]));\n\nvar G__64895 = (i__4731__auto___64894 + (1));\ni__4731__auto___64894 = G__64895;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63292 = conformed_args__59513__auto__;\nvar map__63292__$1 = (((((!((map__63292 == null))))?(((((map__63292.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63292.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63292):map__63292);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63292__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63292__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63292__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"bdo\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.bdo.cljs$lang$applyTo = (function (seq63291){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63291));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feImage \"hello\")\n * (feImage nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feImage {:onClick f} \"hello\")\n * (feImage #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feImage :#the-id.klass.other-klass \"hello\")\n * (feImage :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feImage = (function com$fulcrologic$fulcro$dom$feImage(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64896 = arguments.length;\nvar i__4731__auto___64897 = (0);\nwhile(true){\nif((i__4731__auto___64897 < len__4730__auto___64896)){\nargs__4736__auto__.push((arguments[i__4731__auto___64897]));\n\nvar G__64898 = (i__4731__auto___64897 + (1));\ni__4731__auto___64897 = G__64898;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63298 = conformed_args__59513__auto__;\nvar map__63298__$1 = (((((!((map__63298 == null))))?(((((map__63298.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63298.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63298):map__63298);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63298__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63298__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63298__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feImage\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feImage.cljs$lang$applyTo = (function (seq63294){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63294));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (b \"hello\")\n * (b nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (b {:onClick f} \"hello\")\n * (b #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (b :#the-id.klass.other-klass \"hello\")\n * (b :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.b = (function com$fulcrologic$fulcro$dom$b(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64905 = arguments.length;\nvar i__4731__auto___64906 = (0);\nwhile(true){\nif((i__4731__auto___64906 < len__4730__auto___64905)){\nargs__4736__auto__.push((arguments[i__4731__auto___64906]));\n\nvar G__64907 = (i__4731__auto___64906 + (1));\ni__4731__auto___64906 = G__64907;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63312 = conformed_args__59513__auto__;\nvar map__63312__$1 = (((((!((map__63312 == null))))?(((((map__63312.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63312.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63312):map__63312);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63312__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63312__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63312__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"b\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.b.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.b.cljs$lang$applyTo = (function (seq63307){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63307));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (svg \"hello\")\n * (svg nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (svg {:onClick f} \"hello\")\n * (svg #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (svg :#the-id.klass.other-klass \"hello\")\n * (svg :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.svg = (function com$fulcrologic$fulcro$dom$svg(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64908 = arguments.length;\nvar i__4731__auto___64909 = (0);\nwhile(true){\nif((i__4731__auto___64909 < len__4730__auto___64908)){\nargs__4736__auto__.push((arguments[i__4731__auto___64909]));\n\nvar G__64910 = (i__4731__auto___64909 + (1));\ni__4731__auto___64909 = G__64910;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63326 = conformed_args__59513__auto__;\nvar map__63326__$1 = (((((!((map__63326 == null))))?(((((map__63326.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63326.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63326):map__63326);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63326__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63326__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63326__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"svg\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.svg.cljs$lang$applyTo = (function (seq63320){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63320));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feTile \"hello\")\n * (feTile nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feTile {:onClick f} \"hello\")\n * (feTile #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feTile :#the-id.klass.other-klass \"hello\")\n * (feTile :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feTile = (function com$fulcrologic$fulcro$dom$feTile(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64911 = arguments.length;\nvar i__4731__auto___64912 = (0);\nwhile(true){\nif((i__4731__auto___64912 < len__4730__auto___64911)){\nargs__4736__auto__.push((arguments[i__4731__auto___64912]));\n\nvar G__64916 = (i__4731__auto___64912 + (1));\ni__4731__auto___64912 = G__64916;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63329 = conformed_args__59513__auto__;\nvar map__63329__$1 = (((((!((map__63329 == null))))?(((((map__63329.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63329.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63329):map__63329);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63329__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63329__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63329__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feTile\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feTile.cljs$lang$applyTo = (function (seq63328){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63328));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (ellipse \"hello\")\n * (ellipse nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (ellipse {:onClick f} \"hello\")\n * (ellipse #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (ellipse :#the-id.klass.other-klass \"hello\")\n * (ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.ellipse = (function com$fulcrologic$fulcro$dom$ellipse(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64920 = arguments.length;\nvar i__4731__auto___64921 = (0);\nwhile(true){\nif((i__4731__auto___64921 < len__4730__auto___64920)){\nargs__4736__auto__.push((arguments[i__4731__auto___64921]));\n\nvar G__64922 = (i__4731__auto___64921 + (1));\ni__4731__auto___64921 = G__64922;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63335 = conformed_args__59513__auto__;\nvar map__63335__$1 = (((((!((map__63335 == null))))?(((((map__63335.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63335.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63335):map__63335);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63335__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63335__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63335__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"ellipse\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.ellipse.cljs$lang$applyTo = (function (seq63333){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63333));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (code \"hello\")\n * (code nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (code {:onClick f} \"hello\")\n * (code #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (code :#the-id.klass.other-klass \"hello\")\n * (code :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.code = (function com$fulcrologic$fulcro$dom$code(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64923 = arguments.length;\nvar i__4731__auto___64924 = (0);\nwhile(true){\nif((i__4731__auto___64924 < len__4730__auto___64923)){\nargs__4736__auto__.push((arguments[i__4731__auto___64924]));\n\nvar G__64928 = (i__4731__auto___64924 + (1));\ni__4731__auto___64924 = G__64928;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63338 = conformed_args__59513__auto__;\nvar map__63338__$1 = (((((!((map__63338 == null))))?(((((map__63338.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63338.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63338):map__63338);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63338__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63338__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63338__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"code\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.code.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.code.cljs$lang$applyTo = (function (seq63337){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63337));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (dialog \"hello\")\n * (dialog nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (dialog {:onClick f} \"hello\")\n * (dialog #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (dialog :#the-id.klass.other-klass \"hello\")\n * (dialog :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.dialog = (function com$fulcrologic$fulcro$dom$dialog(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64932 = arguments.length;\nvar i__4731__auto___64933 = (0);\nwhile(true){\nif((i__4731__auto___64933 < len__4730__auto___64932)){\nargs__4736__auto__.push((arguments[i__4731__auto___64933]));\n\nvar G__64934 = (i__4731__auto___64933 + (1));\ni__4731__auto___64933 = G__64934;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63344 = conformed_args__59513__auto__;\nvar map__63344__$1 = (((((!((map__63344 == null))))?(((((map__63344.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63344.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63344):map__63344);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63344__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63344__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63344__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"dialog\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.dialog.cljs$lang$applyTo = (function (seq63340){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63340));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (linearGradient \"hello\")\n * (linearGradient nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (linearGradient {:onClick f} \"hello\")\n * (linearGradient #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (linearGradient :#the-id.klass.other-klass \"hello\")\n * (linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.linearGradient = (function com$fulcrologic$fulcro$dom$linearGradient(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64936 = arguments.length;\nvar i__4731__auto___64937 = (0);\nwhile(true){\nif((i__4731__auto___64937 < len__4730__auto___64936)){\nargs__4736__auto__.push((arguments[i__4731__auto___64937]));\n\nvar G__64938 = (i__4731__auto___64937 + (1));\ni__4731__auto___64937 = G__64938;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63352 = conformed_args__59513__auto__;\nvar map__63352__$1 = (((((!((map__63352 == null))))?(((((map__63352.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63352.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63352):map__63352);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63352__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63352__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63352__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"linearGradient\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.linearGradient.cljs$lang$applyTo = (function (seq63348){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63348));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (discard \"hello\")\n * (discard nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (discard {:onClick f} \"hello\")\n * (discard #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (discard :#the-id.klass.other-klass \"hello\")\n * (discard :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.discard = (function com$fulcrologic$fulcro$dom$discard(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64944 = arguments.length;\nvar i__4731__auto___64945 = (0);\nwhile(true){\nif((i__4731__auto___64945 < len__4730__auto___64944)){\nargs__4736__auto__.push((arguments[i__4731__auto___64945]));\n\nvar G__64946 = (i__4731__auto___64945 + (1));\ni__4731__auto___64945 = G__64946;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63370 = conformed_args__59513__auto__;\nvar map__63370__$1 = (((((!((map__63370 == null))))?(((((map__63370.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63370.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63370):map__63370);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63370__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63370__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63370__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"discard\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.discard.cljs$lang$applyTo = (function (seq63355){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63355));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (font-face-src \"hello\")\n * (font-face-src nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (font-face-src {:onClick f} \"hello\")\n * (font-face-src #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (font-face-src :#the-id.klass.other-klass \"hello\")\n * (font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.font_face_src = (function com$fulcrologic$fulcro$dom$font_face_src(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64952 = arguments.length;\nvar i__4731__auto___64953 = (0);\nwhile(true){\nif((i__4731__auto___64953 < len__4730__auto___64952)){\nargs__4736__auto__.push((arguments[i__4731__auto___64953]));\n\nvar G__64954 = (i__4731__auto___64953 + (1));\ni__4731__auto___64953 = G__64954;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63378 = conformed_args__59513__auto__;\nvar map__63378__$1 = (((((!((map__63378 == null))))?(((((map__63378.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63378.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63378):map__63378);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63378__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63378__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63378__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"font-face-src\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.font_face_src.cljs$lang$applyTo = (function (seq63377){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63377));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (noscript \"hello\")\n * (noscript nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (noscript {:onClick f} \"hello\")\n * (noscript #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (noscript :#the-id.klass.other-klass \"hello\")\n * (noscript :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.noscript = (function com$fulcrologic$fulcro$dom$noscript(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64955 = arguments.length;\nvar i__4731__auto___64956 = (0);\nwhile(true){\nif((i__4731__auto___64956 < len__4730__auto___64955)){\nargs__4736__auto__.push((arguments[i__4731__auto___64956]));\n\nvar G__64957 = (i__4731__auto___64956 + (1));\ni__4731__auto___64956 = G__64957;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63389 = conformed_args__59513__auto__;\nvar map__63389__$1 = (((((!((map__63389 == null))))?(((((map__63389.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63389.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63389):map__63389);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63389__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63389__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63389__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"noscript\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.noscript.cljs$lang$applyTo = (function (seq63387){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63387));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (animateTransform \"hello\")\n * (animateTransform nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (animateTransform {:onClick f} \"hello\")\n * (animateTransform #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (animateTransform :#the-id.klass.other-klass \"hello\")\n * (animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.animateTransform = (function com$fulcrologic$fulcro$dom$animateTransform(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64958 = arguments.length;\nvar i__4731__auto___64959 = (0);\nwhile(true){\nif((i__4731__auto___64959 < len__4730__auto___64958)){\nargs__4736__auto__.push((arguments[i__4731__auto___64959]));\n\nvar G__64960 = (i__4731__auto___64959 + (1));\ni__4731__auto___64959 = G__64960;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63396 = conformed_args__59513__auto__;\nvar map__63396__$1 = (((((!((map__63396 == null))))?(((((map__63396.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63396.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63396):map__63396);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63396__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63396__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63396__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"animateTransform\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.animateTransform.cljs$lang$applyTo = (function (seq63393){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63393));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (feColorMatrix \"hello\")\n * (feColorMatrix nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (feColorMatrix {:onClick f} \"hello\")\n * (feColorMatrix #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (feColorMatrix :#the-id.klass.other-klass \"hello\")\n * (feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.feColorMatrix = (function com$fulcrologic$fulcro$dom$feColorMatrix(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64962 = arguments.length;\nvar i__4731__auto___64963 = (0);\nwhile(true){\nif((i__4731__auto___64963 < len__4730__auto___64962)){\nargs__4736__auto__.push((arguments[i__4731__auto___64963]));\n\nvar G__64964 = (i__4731__auto___64963 + (1));\ni__4731__auto___64963 = G__64964;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63400 = conformed_args__59513__auto__;\nvar map__63400__$1 = (((((!((map__63400 == null))))?(((((map__63400.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63400.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63400):map__63400);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63400__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63400__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63400__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"feColorMatrix\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.feColorMatrix.cljs$lang$applyTo = (function (seq63398){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63398));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (h2 \"hello\")\n * (h2 nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (h2 {:onClick f} \"hello\")\n * (h2 #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (h2 :#the-id.klass.other-klass \"hello\")\n * (h2 :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.h2 = (function com$fulcrologic$fulcro$dom$h2(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64966 = arguments.length;\nvar i__4731__auto___64967 = (0);\nwhile(true){\nif((i__4731__auto___64967 < len__4730__auto___64966)){\nargs__4736__auto__.push((arguments[i__4731__auto___64967]));\n\nvar G__64968 = (i__4731__auto___64967 + (1));\ni__4731__auto___64967 = G__64968;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63407 = conformed_args__59513__auto__;\nvar map__63407__$1 = (((((!((map__63407 == null))))?(((((map__63407.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63407.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63407):map__63407);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63407__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63407__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63407__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"h2\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.h2.cljs$lang$applyTo = (function (seq63405){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63405));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (area \"hello\")\n * (area nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (area {:onClick f} \"hello\")\n * (area #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (area :#the-id.klass.other-klass \"hello\")\n * (area :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.area = (function com$fulcrologic$fulcro$dom$area(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64981 = arguments.length;\nvar i__4731__auto___64982 = (0);\nwhile(true){\nif((i__4731__auto___64982 < len__4730__auto___64981)){\nargs__4736__auto__.push((arguments[i__4731__auto___64982]));\n\nvar G__64984 = (i__4731__auto___64982 + (1));\ni__4731__auto___64982 = G__64984;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63422 = conformed_args__59513__auto__;\nvar map__63422__$1 = (((((!((map__63422 == null))))?(((((map__63422.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63422.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63422):map__63422);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63422__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63422__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63422__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"area\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.area.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.area.cljs$lang$applyTo = (function (seq63417){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63417));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (br \"hello\")\n * (br nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (br {:onClick f} \"hello\")\n * (br #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (br :#the-id.klass.other-klass \"hello\")\n * (br :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.br = (function com$fulcrologic$fulcro$dom$br(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64988 = arguments.length;\nvar i__4731__auto___64989 = (0);\nwhile(true){\nif((i__4731__auto___64989 < len__4730__auto___64988)){\nargs__4736__auto__.push((arguments[i__4731__auto___64989]));\n\nvar G__64991 = (i__4731__auto___64989 + (1));\ni__4731__auto___64989 = G__64991;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63425 = conformed_args__59513__auto__;\nvar map__63425__$1 = (((((!((map__63425 == null))))?(((((map__63425.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63425.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63425):map__63425);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63425__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63425__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63425__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"br\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.br.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.br.cljs$lang$applyTo = (function (seq63424){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63424));\n});\n\n\n/**\n * Returns a React DOM element. Can be invoked in several ways\n * \n * These two are made equivalent at compile time\n * (image \"hello\")\n * (image nil \"hello\")\n * \n * These two are made equivalent at compile time\n * (image {:onClick f} \"hello\")\n * (image #js {:onClick f} \"hello\")\n * \n * There is also a shorthand for CSS id and class names\n * (image :#the-id.klass.other-klass \"hello\")\n * (image :#the-id.klass.other-klass {:onClick f} \"hello\")\n */\ncom.fulcrologic.fulcro.dom.image = (function com$fulcrologic$fulcro$dom$image(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___64993 = arguments.length;\nvar i__4731__auto___64994 = (0);\nwhile(true){\nif((i__4731__auto___64994 < len__4730__auto___64993)){\nargs__4736__auto__.push((arguments[i__4731__auto___64994]));\n\nvar G__64995 = (i__4731__auto___64994 + (1));\ni__4731__auto___64994 = G__64995;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn com.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar conformed_args__59513__auto__ = com.fulcrologic.fulcro.algorithms.do_not_use.conform_BANG_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.dom\",\"dom-element-args\",\"com.fulcrologic.fulcro.dom/dom-element-args\",-927171079),args);\nvar map__63432 = conformed_args__59513__auto__;\nvar map__63432__$1 = (((((!((map__63432 == null))))?(((((map__63432.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__63432.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__63432):map__63432);\nvar children__59515__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63432__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar attrs__59514__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63432__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\nvar css__59516__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63432__$1,new cljs.core.Keyword(null,\"css\",\"css\",1135045163));\nvar children__59515__auto____$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.second,children__59515__auto__);\nvar attrs_value__59517__auto__ = (function (){var or__4131__auto__ = cljs.core.second(attrs__59514__auto__);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})();\nreturn com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3(\"image\",cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [attrs_value__59517__auto__], null),children__59515__auto____$1),css__59516__auto__);\n});\n\ncom.fulcrologic.fulcro.dom.image.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncom.fulcrologic.fulcro.dom.image.cljs$lang$applyTo = (function (seq63427){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq63427));\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","~:file","com/fulcrologic/fulcro/dom.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",31],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$set","~$map","~$select","~$mask","~$meta","~$symbol","~$use","~$time","~$filter"]],"~:macros",["^ ","~$form",["^ ","~:arglists",["~#list",[["~$&","~$args"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","~:name","~$com.fulcrologic.fulcro.dom/form","~:ns","~$com.fulcrologic.fulcro.dom","~:macro",true],"~$audio",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/audio","^14","^15","^16",true],"~$input",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/input","^14","^15","^16",true],"~$menuitem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menuitem","^14","^15","^16",true],"~$radialGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/radialGradient","^14","^15","^16",true],"~$feMerge",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMerge","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/set","^14","^15","^16",true],"~$feSpecularLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpecularLighting","^14","^15","^16",true],"~$base",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/base","^14","^15","^16",true],"~$h1",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h1","^14","^15","^16",true],"~$feOffset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feOffset","^14","^15","^16",true],"~$embed",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/embed","^14","^15","^16",true],"~$animateMotion",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateMotion","^14","^15","^16",true],"~$h3",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h3","^14","^15","^16",true],"~$body",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/body","^14","^15","^16",true],"~$hkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hkern","^14","^15","^16",true],"~$keygen",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/keygen","^14","^15","^16",true],"~$font-face-format",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-format","^14","^15","^16",true],"~$feFuncA",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncA","^14","^15","^16",true],"~$progress",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/progress","^14","^15","^16",true],"~$main",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/main","^14","^15","^16",true],"~$cite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cite","^14","^15","^16",true],"~$rect",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rect","^14","^15","^16",true],"~$tref",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tref","^14","^15","^16",true],"~$meshpatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshpatch","^14","^15","^16",true],"~$polyline",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polyline","^14","^15","^16",true],"~$metadata",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/metadata","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/map","^14","^15","^16",true],"~$object",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/object","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/i","^14","^15","^16",true],"~$font-face-name",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-name","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/p","^14","^15","^16",true],"~$feFuncR",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncR","^14","^15","^16",true],"~$hatchpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatchpath","^14","^15","^16",true],"~$altGlyphItem",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphItem","^14","^15","^16",true],"~$nav",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/nav","^14","^15","^16",true],"~$ruby",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ruby","^14","^15","^16",true],"~$switch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/switch","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/a","^14","^15","^16",true],"~$gen-dom-macros",["^ ","^[",["^10",[["~$emitter"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-dom-macros","^14","^15","^16",true],"~$view",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/view","^14","^15","^16",true],"~$menu",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/menu","^14","^15","^16",true],"~$blockquote",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/blockquote","^14","^15","^16",true],"~$img",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/img","^14","^15","^16",true],"~$feFuncG",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncG","^14","^15","^16",true],"~$text",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/text","^14","^15","^16",true],"~$span",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/span","^14","^15","^16",true],"~$track",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/track","^14","^15","^16",true],"~$data",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/data","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/u","^14","^15","^16",true],"~$dl",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dl","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/select","^14","^15","^16",true],"~$polygon",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/polygon","^14","^15","^16",true],"~$pattern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pattern","^14","^15","^16",true],"~$html",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/html","^14","^15","^16",true],"~$foreignObject",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/foreignObject","^14","^15","^16",true],"~$thead",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/thead","^14","^15","^16",true],"~$path",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/path","^14","^15","^16",true],"~$del",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/del","^14","^15","^16",true],"~$altGlyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyph","^14","^15","^16",true],"~$fieldset",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fieldset","^14","^15","^16",true],"~$aside",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/aside","^14","^15","^16",true],"~$feBlend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feBlend","^14","^15","^16",true],"~$figure",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figure","^14","^15","^16",true],"~$textPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textPath","^14","^15","^16",true],"~$figcaption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/figcaption","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mask","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/q","^14","^15","^16",true],"~$bdi",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdi","^14","^15","^16",true],"~$feDistantLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDistantLight","^14","^15","^16",true],"~$video",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/video","^14","^15","^16",true],"~$address",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/address","^14","^15","^16",true],"~$caption",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/caption","^14","^15","^16",true],"~$dd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dd","^14","^15","^16",true],"~$rp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rp","^14","^15","^16",true],"~$hr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hr","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meta","^14","^15","^16",true],"~$tbody",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tbody","^14","^15","^16",true],"~$desc",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/desc","^14","^15","^16",true],"~$table",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/table","^14","^15","^16",true],"~$pre",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/pre","^14","^15","^16",true],"~$ul",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ul","^14","^15","^16",true],"~$feConvolveMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feConvolveMatrix","^14","^15","^16",true],"~$sup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sup","^14","^15","^16",true],"~$dfn",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dfn","^14","^15","^16",true],"~$sub",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/sub","^14","^15","^16",true],"~$mark",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mark","^14","^15","^16",true],"~$feDisplacementMap",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDisplacementMap","^14","^15","^16",true],"~$unknown",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/unknown","^14","^15","^16",true],"~$script",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/script","^14","^15","^16",true],"~$feTurbulence",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTurbulence","^14","^15","^16",true],"~$big",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/big","^14","^15","^16",true],"~$button",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/button","^14","^15","^16",true],"~$font-face-uri",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-uri","^14","^15","^16",true],"~$wbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/wbr","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/symbol","^14","^15","^16",true],"~$strong",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/strong","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/use","^14","^15","^16",true],"~$solidcolor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/solidcolor","^14","^15","^16",true],"~$fePointLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/fePointLight","^14","^15","^16",true],"~$li",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/li","^14","^15","^16",true],"~$dt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dt","^14","^15","^16",true],"~$feFuncB",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFuncB","^14","^15","^16",true],"~$marker",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/marker","^14","^15","^16",true],"~$feComponentTransfer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComponentTransfer","^14","^15","^16",true],"~$td",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/td","^14","^15","^16",true],"~$tr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tr","^14","^15","^16",true],"~$circle",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/circle","^14","^15","^16",true],"~$section",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/section","^14","^15","^16",true],"~$feDropShadow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDropShadow","^14","^15","^16",true],"~$th",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/th","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/time","^14","^15","^16",true],"~$optgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/optgroup","^14","^15","^16",true],"~$iframe",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/iframe","^14","^15","^16",true],"~$color-profile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/color-profile","^14","^15","^16",true],"~$legend",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/legend","^14","^15","^16",true],"~$em",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/em","^14","^15","^16",true],"~$kbd",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/kbd","^14","^15","^16",true],"~$article",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/article","^14","^15","^16",true],"~$animateColor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateColor","^14","^15","^16",true],"~$clipPath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/clipPath","^14","^15","^16",true],"~$abbr",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/abbr","^14","^15","^16",true],"~$altGlyphDef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/altGlyphDef","^14","^15","^16",true],"~$meshrow",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshrow","^14","^15","^16",true],"~$cursor",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/cursor","^14","^15","^16",true],"~$animate",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animate","^14","^15","^16",true],"~$source",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/source","^14","^15","^16",true],"~$output",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/output","^14","^15","^16",true],"~$font-face",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face","^14","^15","^16",true],"~$feMergeNode",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMergeNode","^14","^15","^16",true],"~$feSpotLight",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feSpotLight","^14","^15","^16",true],"~$header",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/header","^14","^15","^16",true],"~$gen-client-dom-fns",["^ ","^[",["^10",[["~$create-element-sym"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/gen-client-dom-fns","^14","^15","^16",true],"~$datalist",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/datalist","^14","^15","^16",true],"~$tfoot",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tfoot","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/s","^14","^15","^16",true],"~$hatch",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/hatch","^14","^15","^16",true],"~$ins",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ins","^14","^15","^16",true],"~$footer",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/footer","^14","^15","^16",true],"~$mpath",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mpath","^14","^15","^16",true],"~$title",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/title","^14","^15","^16",true],"~$h5",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h5","^14","^15","^16",true],"~$meshgradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meshgradient","^14","^15","^16",true],"~$canvas",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/canvas","^14","^15","^16",true],"~$param",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/param","^14","^15","^16",true],"~$font",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font","^14","^15","^16",true],"~$div",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/div","^14","^15","^16",true],"~$option",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/option","^14","^15","^16",true],"~$feFlood",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feFlood","^14","^15","^16",true],"~$summary",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/summary","^14","^15","^16",true],"~$feMorphology",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feMorphology","^14","^15","^16",true],"~$samp",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/samp","^14","^15","^16",true],"~$glyphRef",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyphRef","^14","^15","^16",true],"~$small",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/small","^14","^15","^16",true],"~$style",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/style","^14","^15","^16",true],"~$textarea",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/textarea","^14","^15","^16",true],"~$feGaussianBlur",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feGaussianBlur","^14","^15","^16",true],"~$h4",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h4","^14","^15","^16",true],"~$head",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/head","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/g","^14","^15","^16",true],"~$missing-glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/missing-glyph","^14","^15","^16",true],"~$stop",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/stop","^14","^15","^16",true],"~$feDiffuseLighting",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feDiffuseLighting","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/filter","^14","^15","^16",true],"~$feComposite",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feComposite","^14","^15","^16",true],"~$mesh",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/mesh","^14","^15","^16",true],"~$var",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/var","^14","^15","^16",true],"~$tspan",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/tspan","^14","^15","^16",true],"~$ol",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ol","^14","^15","^16",true],"~$details",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/details","^14","^15","^16",true],"~$line",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/line","^14","^15","^16",true],"~$col",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/col","^14","^15","^16",true],"~$label",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/label","^14","^15","^16",true],"~$picture",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/picture","^14","^15","^16",true],"~$rt",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/rt","^14","^15","^16",true],"~$h6",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h6","^14","^15","^16",true],"~$vkern",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/vkern","^14","^15","^16",true],"~$link",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/link","^14","^15","^16",true],"~$defs",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/defs","^14","^15","^16",true],"~$glyph",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/glyph","^14","^15","^16",true],"~$colgroup",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/colgroup","^14","^15","^16",true],"~$meter",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/meter","^14","^15","^16",true],"~$bdo",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/bdo","^14","^15","^16",true],"~$feImage",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feImage","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/b","^14","^15","^16",true],"~$svg",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/svg","^14","^15","^16",true],"~$feTile",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feTile","^14","^15","^16",true],"~$ellipse",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/ellipse","^14","^15","^16",true],"~$code",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/code","^14","^15","^16",true],"~$dialog",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/dialog","^14","^15","^16",true],"~$linearGradient",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/linearGradient","^14","^15","^16",true],"~$discard",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/discard","^14","^15","^16",true],"~$font-face-src",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/font-face-src","^14","^15","^16",true],"~$noscript",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/noscript","^14","^15","^16",true],"~$animateTransform",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/animateTransform","^14","^15","^16",true],"~$feColorMatrix",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/feColorMatrix","^14","^15","^16",true],"~$h2",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/h2","^14","^15","^16",true],"~$area",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/area","^14","^15","^16",true],"~$br",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/br","^14","^15","^16",true],"~$image",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","~$com.fulcrologic.fulcro.dom/image","^14","^15","^16",true]],"^12","^15","~:op","^14","~:imports",null,"~:requires",["^ ","^?","^@","~$goog.dom","^9Y","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","^B","^B","~$gobj","~$goog.object","~$goog","^:4","^:3","^:3","~$com.fulcrologic.fulcro.dom-common","^:5","~$cljsjs.react","^:6","~$cljsjs.react.dom","^:7","~$cdom","^:5","~$gdom","^9Y","~$s","^@","^:1","^:1","^9[","^9[","~$str","~$clojure.string","^:;","^:;","^@","^@"],"~:seen",["^O",["~:require","~:require-macros"]],"~:uses",null,"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^B","^B","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:form",["^10",["~$ns","^15","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server",["^10",["~:refer-clojure","~:exclude",["^Q","^T","^W","^S","^R","^V","^P","^U","^X"]]],["^10",["^:>",["^15"]]],["^10",["^:=",["^?","~:as","~$s"],["^:;","^:D","^::"],["^:1","^:D","^:0"],["^:6"],["^:7"],["^:3","^:D","^:2"],["^9Y","^:D","^:9"],["^:5","^:D","^:8"],["^9[","^:D","^9Z"]]]]],"~:flags",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/dom.cljs"],"~:compiled-at",1630228425059,"~:resource-name","com/fulcrologic/fulcro/dom.cljs","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.dom\n  \"Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server\"\n  (:refer-clojure :exclude [map meta time mask select use set symbol filter])\n  (:require-macros [com.fulcrologic.fulcro.dom])\n  (:require\n    [clojure.spec.alpha :as s]\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.components :as comp]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.object :as gobj]\n    [goog.dom :as gdom]\n    [com.fulcrologic.fulcro.dom-common :as cdom]\n    [taoensso.timbre :as log]))\n\n(declare a abbr address altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform area\n  article aside audio b base bdi bdo big blockquote body br button canvas caption circle cite clipPath code\n  col colgroup color-profile cursor data datalist dd defs del desc details dfn dialog discard div dl dt\n  ellipse em embed feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting\n  feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur\n  feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence\n  fieldset figcaption figure filter font font-face font-face-format font-face-name font-face-src font-face-uri\n  footer foreignObject form g glyph glyphRef h1 h2 h3 h4 h5 h6 hatch hatchpath head header hkern hr html\n  i iframe image img input ins kbd keygen label legend li line linearGradient link main map mark marker mask\n  menu menuitem mesh meshgradient meshpatch meshrow meta metadata meter missing-glyph\n  mpath nav noscript object ol optgroup option output p param path pattern picture polygon polyline pre progress q radialGradient\n  rect rp rt ruby s samp script section select set small solidcolor source span stop strong style sub summary\n  sup svg switch symbol table tbody td text textPath textarea tfoot th thead time title tr track tref tspan\n  u ul unknown use var video view vkern wbr)\n\n(def ^{:private true} element-marker\n  (-> (js/React.createElement \"div\" nil)\n    (gobj/get \"$$typeof\")))\n\n(defn element? \"Returns true if the given arg is a react element.\"\n  [x]\n  (and (object? x) (= element-marker (gobj/get x \"$$typeof\"))))\n\n(s/def ::dom-element-args\n  (s/cat\n    :css (s/? keyword?)\n    :attrs (s/? (s/or\n                  :nil nil?\n                  :map #(and (map? %) (not (element? %)))\n                  :js-object #(and (object? %) (not (element? %)))))\n    :children (s/* (s/or\n                     :string string?\n                     :number number?\n                     :collection #(or (vector? %) (seq? %) (array? %))\n                     :nil nil?\n                     :element element?))))\n\n(defn render\n  \"Equivalent to React.render\"\n  [component el]\n  (js/ReactDOM.render component el))\n\n(defn render-to-str\n  \"Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function.\"\n  [c]\n  (js/ReactDOMServer.renderToString c))\n\n(defn node\n  \"Returns the dom node associated with a component's React ref.\"\n  ([component]\n   (js/ReactDOM.findDOMNode component))\n  ([component name]\n   (some-> (.-refs component) (gobj/get name) (js/ReactDOM.findDOMNode))))\n\n(defn create-element\n  \"Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`\"\n  ([tag]\n   (create-element tag nil))\n  ([tag opts]\n   (js/React.createElement tag opts))\n  ([tag opts & children]\n   (js/React.createElement tag opts children)))\n\n(defn convert-props\n  \"Given props, which can be nil, a js-obj or a clj map: returns a js object.\"\n  [props]\n  (cond\n    (nil? props)\n    #js {}\n    (map? props)\n    (clj->js props)\n    :else\n    props))\n\n;; called from macro\n;; react v16 is really picky, the old direct .children prop trick no longer works\n(defn macro-create-element*\n  \"Used internally by the DOM element generation.\"\n  [arr]\n  {:pre [(array? arr)]}\n  (.apply js/React.createElement nil arr))\n\n(defn- update-state\n  \"Updates the state of the wrapped input element.\"\n  [component next-props value]\n  (let [on-change  (gobj/getValueByKeys component \"state\" \"onChange\")\n        next-state #js {}\n        inputRef   (gobj/get next-props \"inputRef\")]\n    (gobj/extend next-state next-props #js {:onChange on-change})\n    (gobj/set next-state \"value\" value)\n    (when inputRef\n      (gobj/remove next-state \"inputRef\")\n      (gobj/set next-state \"ref\" inputRef))\n    (.setState component next-state)))\n\n(defonce form-elements? #{\"input\" \"select\" \"option\" \"textarea\"})\n\n(defn is-form-element? [element]\n  (let [tag (.-tagName element)]\n    (and tag (form-elements? (str/lower-case tag)))))\n\n(defn wrap-form-element [element]\n  (let [ctor (fn [props]\n               (this-as this\n                 (set! (.-state this)\n                   (let [state #js {:ref (gobj/get props \"inputRef\")}]\n                     (->> #js {:onChange (goog/bind (gobj/get this \"onChange\") this)}\n                       (gobj/extend state props))\n                     (gobj/remove state \"inputRef\")\n                     state))\n                 (.apply js/React.Component this (js-arguments))))]\n    (set! (.-displayName ctor) (str \"wrapped-\" element))\n    (goog.inherits ctor js/React.Component)\n    (specify! (.-prototype ctor)\n      Object\n      (onChange [this event]\n        (when-let [handler (.-onChange (.-props this))]\n          (handler event)\n          (update-state\n            this (.-props this)\n            (gobj/getValueByKeys event \"target\" \"value\"))))\n\n      (componentWillReceiveProps [this new-props]\n        (let [state-value   (gobj/getValueByKeys this \"state\" \"value\")\n              this-node     (js/ReactDOM.findDOMNode this)\n              value-node    (if (is-form-element? this-node)\n                              this-node\n                              (gdom/findNode this-node #(is-form-element? %)))\n              element-value (gobj/get value-node \"value\")]\n          (when goog.DEBUG\n            (when (and state-value element-value (not= (type state-value) (type element-value)))\n              (log/warn \"There is a mismatch for the data type of the value on an input with value \" element-value\n                \". This will cause the input to miss refreshes. In general you should force the :value of an input to\n                be a string since that is how values are stored on most real DOM elements.\")))\n          (if (not= state-value element-value)\n            (update-state this new-props element-value)\n            (update-state this new-props (gobj/get new-props \"value\")))))\n\n      (render [this]\n        (js/React.createElement element (.-state this))))\n    (let [real-factory (js/React.createFactory ctor)]\n      (fn [props & children]\n        (if-let [r (gobj/get props \"ref\")]\n          (if (string? r)\n            (apply real-factory props children)\n            (let [p #js{}]\n              (gobj/extend p props)\n              (gobj/set p \"inputRef\" r)\n              (gobj/remove p \"ref\")\n              (apply real-factory p children)))\n          (apply real-factory props children))))))\n\n\n(def wrapped-input \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"input\"))\n(def wrapped-textarea \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"textarea\"))\n(def wrapped-option \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"option\"))\n(def wrapped-select \"Low-level form input, with no syntactic sugar. Used internally by DOM macros\" (wrap-form-element \"select\"))\n\n(defn- arr-append* [arr x]\n  (.push arr x)\n  arr)\n\n(defn- arr-append [arr tail]\n  (reduce arr-append* arr (comp/force-children tail)))\n\n(defn macro-create-wrapped-form-element\n  \"Used internally by element generation.\"\n  [opts]\n  (let [tag      (aget opts 0)\n        props    (aget opts 1)\n        children (.splice opts 2)]\n    (case tag\n      \"input\" (apply wrapped-input props children)\n      \"textarea\" (apply wrapped-textarea props children)\n      \"select\" (apply wrapped-select props children)\n      \"option\" (apply wrapped-option props children))))\n\n\n;; fallback if the macro didn't do this\n(defn macro-create-element\n  \"Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.\"\n  ([type args] (macro-create-element type args nil))\n  ([type args csskw]\n   (let [[head & tail] args\n         f (if (form-elements? type)\n             macro-create-wrapped-form-element\n             macro-create-element*)]\n     (cond\n       (nil? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append tail)))\n\n       (element? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))\n\n       (object? head)\n       (f (doto #js [type (cdom/add-kwprops-to-props head csskw)]\n            (arr-append tail)))\n\n       (map? head)\n       (f (doto #js [type (clj->js (cdom/add-kwprops-to-props (cdom/interpret-classes head) csskw))]\n            (arr-append tail)))\n\n       :else\n       (f (doto #js [type (cdom/add-kwprops-to-props #js {} csskw)]\n            (arr-append args)))))))\n\n(com.fulcrologic.fulcro.dom/gen-client-dom-fns com.fulcrologic.fulcro.dom/macro-create-element)\n","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;;;;;;;AAeeA,AAAsBA,AAChB,AAAA,AAAA,AAACC,AACH,AAAAC;AAAAC,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAACC;;AAEL;;;AAAA,AAAMC,AACHC;AADH,AAEE,AAAK,AAACC,AAAQD,AAAG,AAACE,AAAER,AAAe,AAAA,AAACI,AAASE;;AAE/C,AAAAG,AAAA,AAAA,AAAA,AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACO,AAAAC,AAAA,AAAA,AAAKC,AACH,AAAAD,AAAK,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AACOE;AADP,AAEQ,AAAK,AAAAF,AAACG,AAAQ,AAAK,AAAAH,AAACT;AAF5B,AAAAU;AAAA,AAGc,AAAK,AAAAA,AAACR,AAAW,AAAK,AAAAQ,AAACV;AAH1C,AAAA,AAAK,AAIF,AAAAa,AAAA,AAAA,AAAK,AAAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AACUC,AACAC;AAFV,AAGe,AAAI,AAAAF,AAACG,AAAW,AAAAH,AAACI,AAAQ,AAAAJ,AAACK;AAT1D,AAAA,AAMiB,AAIOR,AACIX;AAE9B;;;AAAA,AAAMoB,AAEHC,AAAUC;AAFb,AAGE,AAACC,AAAmBF,AAAUC;;AAEhC;;;AAAA,AAAME,AAEHC;AAFH,AAGE,AAACC,AAAiCD;;AAEpC,AAAA;;;AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFR;AAFJ,AAGG,AAACU,AAAwBV;;;AAH5B,AAAA,AAAA,AAAMQ,AAIFR,AAAUW;AAJd,AAKG,AAAAC,AAAQ,AAAQZ;AAAhBY,AAAA,AAAA,AAAAA,AAAA,AAAA,AAA2B,AAAAA,AAAClC,AAASiC;AAArC,AAAA,AAAA,AAAAC,AAAA;AAAA;;AAA2C,AAAAA,AAACF;;;;AAL/C,AAAA,AAAA,AAAMF;;AAAN,AAOA,AAAA;;;;;AAAA,AAAAF,AAAMQ;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ,AAIFY;AAJJ,AAKG,AAAA,AAACC,AAAeD;;;AALnB,AAAA,AAAA,AAAMZ,AAMFY,AAAIE;AANR,AAOG,AAACrD,AAAuBmD,AAAIE;;;AAP/B,AAAA,AAAA,AAAA,AAAMd,AAQFY,AAAIE,AAAOC;AARf,AASG,AAACtD,AAAuBmD,AAAIE,AAAKC;;;AATpC;AAAA,AAAA,AAAA,AAAAT,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAWA;;;AAAA,AAAMgB,AAEHC;AAFH,AAGE,AACE,AAAA,AAAMA;AADR;;AAAA,AAGE,AAACxC,AAAKwC;AACN,AAACC,AAAQD;;AAJX,AAMEA;;;;;AAIJ;;;AAAA,AAAME,AAEHC;AAFH,AAAA,AAGS,AAACpC,AAAOoC;AAHjB;AAAA,AAAA,AAAA,AAAAzB,AAAA;;;AAIE,AAAA,AAAQlC,AAA2B2D;;AAErC;;;AAAA,AAAOC,AAEJnC,AAAUoC,AAAWC;AAFxB,AAGE,AAAMC,AAAW,AAAA,AAAA,AAACC,AAAoBvC;AAAtC,AACMwC;AACAC,AAAW,AAAA,AAAC/D,AAAS0D;AAF3B,AAGE,AAAAM,AAAaF;AAAbG,AAAwBP;AAAxBQ,AAAA,AAAkDN;AAAlD,AAAA,AAAAI,AAAAC,AAAAC,AAACC;;AACD,AAAA,AAACC,AAASN,AAAmBH;;AAC7B,AAAMI;AAAN,AACE,AAAA,AAACM,AAAYP;;AACb,AAAA,AAACM,AAASN,AAAiBC;;AAF7B;;AAGA,AAAWzC,AAAUwC;;AAEzB,AAAA,AAAAQ,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAASC;;AAET,AAAA,AAAMC,AAAkBC;AAAxB,AACE,AAAM7B,AAAI,AAAW6B;AAArB,AACE,AAAAC,AAAK9B;AAAL,AAAA,AAAA8B;AAAS,AAAAC,AAAgB,AAACC,AAAehC;AAAhC,AAAA,AAAA+B,AAAAA,AAACJ,AAAAA,AAAAA;;AAAVG;;;AAEJ,AAAA,AAAMG,AAAmBJ;AAAzB,AACE,AAAMK,AAAK,AAAK7B;AAAL,AACE,AAAA,AAAS8B;AAAT,AACE,AAAM,AAASA,AACb,AAAA,AAAMC,AAAgB,AAAA,AAACpF,AAASqD;AAAhC,AAEI,AAAAmC,AAAaJ;AAAbK,AAAmBpC;AADD,AAAAgC,AAAW,AAAA,AAACrF,AAASmF,AACvCO,AAAA;AADkBJ,AAAsCH;AAAtC,AAAA,AAAAE,AAAAC,AAACC;;AACnB,AAAA,AAAAC,AAAAC,AAAAC,AAACvB;;AACH,AAAA,AAACE,AAAYe;;AACbA;;;AACJ,AAAQO,AAAmBR,AAAK;;AAR/C,AASE,AAAM,AAAeD,AAAM,AAAA,AAAgBL;;AAC3C,AAACe,AAAcV,AAAKS;;AACpB,AAAAE,AAAU,AAAaX;AAAvB,AAAA,AAAA,AAAA,AAAAW,AAEE;AAAgBC;AAAhB,AAAA,AAAA,AAAWX;AAAX,AACE,AAAAY,AAAmB,AAAY,AAASZ;AAAxC,AAAA,AAAAY;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAAQF,AAAAA;;AACT,AAACrC,AACC0B,AAAK,AAASA,AACd,AAAA,AAAA,AAACtB,AAAoBiC;;AAJzB;;;;;AAHJ,AAAA,AAAAD,AASE;AAAiCI;AAAjC,AAAA,AAAA,AAA4Bd;AAA5B,AACE,AAAMe,AAAc,AAAA,AAAA,AAACrC,AAAoBsB;AACnCgB,AAAc,AAACnE,AAAwBmD;AACvCiB,AAAc,AAAI,AAACxB,AAAiBuB,AACpBA,AACA,AAAAE,AAAeF;AAAfG,AAAA;AAAAC;AAAA,AAA0B,AAAAA,AAAC3B;;;AAA3B,AAAA,AAAAyB,AAAAC,AAACE;;AACjBC,AAAc,AAAA,AAACzG,AAASoG;AAL9B,AAME,AAAMM;AAAN,AACE,AAAM,AAAA5B,AAAKoB;AAAL,AAAA,AAAApB;AAAA,AAAAA,AAAiB2B;AAAjB,AAAA,AAAA3B;AAA+B,AAAC6B,AAAK,AAACC,AAAKV,AAAa,AAACU,AAAKH;;AAA9D3B;;;AAAAA;;;AAAN,AACE,AAAA+B,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAuFN;;AAAvF,AAAA,AAAA;;AADF;;AADF;;AAKA,AAAI,AAACE,AAAKT,AAAYO;AACpB,AAAChD,AAAa0B,AAAKc,AAAUQ;;AAC7B,AAAChD,AAAa0B,AAAKc,AAAU,AAAA,AAACjG,AAASiG;;;;;AAvB/C,AAAA,AAAAJ,AAyBE;;AAAA,AAAA,AAAA,AAASV;AAAT,AACE,AAACtF,AAAuBgF,AAAQ,AAASM;;;;AA1B7CU;AA2BA,AAAMmB,AAAa,AAACC,AAAuB/B;AAA3C,AACE;;AAAK7B,AAAQF;AAAb,AACE,AAAA+D,AAAW,AAAA,AAAClH,AAASqD;AAArB,AAAA,AAAA6D;AAAA,AAAAA,AAASC;AAAT,AACE,AAAI,AAASA;AACX,AAACC,AAAMJ,AAAa3D,AAAMF;;AAC1B,AAAA,AAAMkE;AAAN,AACE,AAAClD,AAAYkD,AAAEhE;;AACf,AAAA,AAACe,AAASiD,AAAaF;;AACvB,AAAA,AAAC9C,AAAYgD;;AACb,AAACD,AAAMJ,AAAaK,AAAElE;;;AAC1B,AAACiE,AAAMJ,AAAa3D,AAAMF;;;AATzBE;AAAQF;;;;AAAAA;;AAARE,AAAQF;;;AAARE;AAAQF;AAARE,AAAQF;;;;;;;;AAYnB;;;AAAKmE,AAA6F,AAAA,AAACrC;AACnG;;;AAAKsC,AAAgG,AAAA,AAACtC;AACtG;;;AAAKuC,AAA8F,AAAA,AAACvC;AACpG;;;AAAKwC,AAA8F,AAAA,AAACxC;AAEpG,AAAA,AAAOyC,AAAalE,AAAItD;AAAxB,AACE,AAAOsD,AAAItD;;AACXsD;;AAEF,AAAA,AAAOmE,AAAYnE,AAAIoE;AAAvB,AACE,AAACC,AAAOH,AAAYlE,AAAI,AAACsE,AAAoBF;;AAE/C;;;AAAA,AAAMG,AAEH7E;AAFH,AAGE,AAAMF,AAAS,AAAA,AAAME;AACfG,AAAS,AAAA,AAAMH;AACfC,AAAS,AAAA,AAASD;AAFxB,AAGE,AAAA8E,AAAMhF;AAAN,AAAA,AAAAgF;AAAA;AACU,AAACZ,AAAME,AAAcjE,AAAMF;;;AADrC;AAEa,AAACiE,AAAMG,AAAiBlE,AAAMF;;;AAF3C;AAGW,AAACiE,AAAMK,AAAepE,AAAMF;;;AAHvC;AAIW,AAACiE,AAAMI,AAAenE,AAAMF;;;;AAJvC,AAAA,AAAApB,AAAA,AAAA,AAAAiG;;;;AAQJ,AAAA;;;AAAA,AAAApG,AAAMsG;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAnG,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMmG,AAEFC,AAAKC;AAFT,AAEe,AAAA,AAACC,AAAqBF,AAAKC;;;AAF1C,AAAA,AAAA,AAAMF,AAGFC,AAAKC,AAAKE;AAHd,AAIG,AAAAC,AAAoBH;AAApBI,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA9F,AAAA4F;AAAAA,AAAA,AAAA3F,AAAA2F;AAAAE,AAAOC;AAAPH,AAAcZ;AACRgB,AAAE,AAAI,AAACjE,AAAAA,AAAAA,AAAewD,AAAAA,AAClBJ,AACAxE;AAHV,AAIE,AACE,AAAA,AAAMoF;AACN,AAAAE,AAAG,AAAAC,AAAA,AAAWX,AAAK,AAAA,AAACY,AAAiCT;AAAlD,AAAA,AAAAQ,AACGnB,AAAWC;;AADdkB;;AAAH,AAAA,AAAAD,AAAAA,AAACD,AAAAA,AAAAA;;AAFH,AAKE,AAAC3I,AAAS0I;AACV,AAAAK,AAAG,AAAAC,AAAA,AAAWd,AAAK,AAAA,AAACY,AAAiCT;AAAlD,AAAA,AAAAW,AACGtB,AAAWS;;AADda;;AAAH,AAAA,AAAAD,AAAAA,AAACJ,AAAAA,AAAAA;;AANH,AASE,AAACzI,AAAQwI;AACT,AAAAO,AAAG,AAAAC,AAAA,AAAWhB,AAAK,AAACY,AAA0BJ,AAAKL;AAAhD,AAAA,AAAAa,AACGxB,AAAWC;;AADduB;;AAAH,AAAA,AAAAD,AAAAA,AAACN,AAAAA,AAAAA;;AAVH,AAaE,AAAC/H,AAAK8H;AACN,AAAAS,AAAG,AAAAC,AAAA,AAAWlB,AAAK,AAAC7E,AAAQ,AAACyF,AAA0B,AAACO,AAAuBX,AAAML;AAAlF,AAAA,AAAAe,AACG1B,AAAWC;;AADdyB;;AAAH,AAAA,AAAAD,AAAAA,AAACR,AAAAA,AAAAA;;AAdH,AAkBE,AAAAW,AAAG,AAAAC,AAAA,AAAWrB,AAAK,AAAA,AAACY,AAAiCT;AAAlD,AAAA,AAAAkB,AACG7B,AAAWS;;AADdoB;;AAAH,AAAA,AAAAD,AAAAA,AAACX,AAAAA,AAAAA;;;;;;;;AA1BR,AAAA,AAAA,AAAMV;;AAAN,AA6BA,AAAA,AAAA;;;;;;;;;;;;;;;AAAAuB,AAAA,AAAA7H;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAE;;;AAAA,AAAA,AAAA,AAAAF,AAAA,AAAArB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0B,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAAL,AAAA;AAAAO,AAAA,AAAAF,AAAAL,AAAA;AAAAI,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAkB;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkC;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAE,AAAA,AAAAjJ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmB,AAAAlB;;;AAAA,AAAA,AAAA,AAAAkB,AAAA,AAAAzC;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0C,AAAAlB;AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAAZ,AAAA,AAAAC,AAAAW,AAAA;AAAAV,AAAA,AAAAD,AAAAW,AAAA;AAAAT,AAAA,AAAAF,AAAAW,AAAA;AAAAZ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwC,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsC;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApJ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsB,AAAArB;;;AAAA,AAAA,AAAA,AAAAqB,AAAA,AAAA5C;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6C,AAAArB;AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAAf,AAAA,AAAAC,AAAAc,AAAA;AAAAb,AAAA,AAAAD,AAAAc,AAAA;AAAAZ,AAAA,AAAAF,AAAAc,AAAA;AAAAf,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2C,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyC;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvJ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyB,AAAAxB;;;AAAA,AAAA,AAAA,AAAAwB,AAAA,AAAA/C;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgD,AAAAxB;AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAAlB,AAAA,AAAAC,AAAAiB,AAAA;AAAAhB,AAAA,AAAAD,AAAAiB,AAAA;AAAAf,AAAA,AAAAF,AAAAiB,AAAA;AAAAlB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8C,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4C;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1J;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4B,AAAA3B;;;AAAA,AAAA,AAAA,AAAA2B,AAAA,AAAAlD;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmD,AAAA3B;AAAA2B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxB,AAAA,AAAAwB,AAAA,AAAA,AAAA,AAAA,AAAAvB,AAAAC,AAAAsB,AAAAA;AAAArB,AAAA,AAAAC,AAAAoB,AAAA;AAAAnB,AAAA,AAAAD,AAAAoB,AAAA;AAAAlB,AAAA,AAAAF,AAAAoB,AAAA;AAAArB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiD,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+C;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7J;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+B,AAAA9B;;;AAAA,AAAA,AAAA,AAAA8B,AAAA,AAAArD;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsD,AAAA9B;AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3B,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAAC,AAAAyB,AAAAA;AAAAxB,AAAA,AAAAC,AAAAuB,AAAA;AAAAtB,AAAA,AAAAD,AAAAuB,AAAA;AAAArB,AAAA,AAAAF,AAAAuB,AAAA;AAAAxB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoD,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkD;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhK;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkC,AAAAjC;;;AAAA,AAAA,AAAA,AAAAiC,AAAA,AAAAxD;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyD,AAAAjC;AAAAiC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9B,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAC,AAAA4B,AAAAA;AAAA3B,AAAA,AAAAC,AAAA0B,AAAA;AAAAzB,AAAA,AAAAD,AAAA0B,AAAA;AAAAxB,AAAA,AAAAF,AAAA0B,AAAA;AAAA3B,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuD,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqD;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnK;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqC,AAAApC;;;AAAA,AAAA,AAAA,AAAAoC,AAAA,AAAA3D;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4D,AAAApC;AAAAoC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjC,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAA,AAAAhC,AAAAC,AAAA+B,AAAAA;AAAA9B,AAAA,AAAAC,AAAA6B,AAAA;AAAA5B,AAAA,AAAAD,AAAA6B,AAAA;AAAA3B,AAAA,AAAAF,AAAA6B,AAAA;AAAA9B,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0D,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwD;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtK;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwC,AAAAvC;;;AAAA,AAAA,AAAA,AAAAuC,AAAA,AAAA9D;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+D,AAAAvC;AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApC,AAAA,AAAAoC,AAAA,AAAA,AAAA,AAAA,AAAAnC,AAAAC,AAAAkC,AAAAA;AAAAjC,AAAA,AAAAC,AAAAgC,AAAA;AAAA/B,AAAA,AAAAD,AAAAgC,AAAA;AAAA9B,AAAA,AAAAF,AAAAgC,AAAA;AAAAjC,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6D,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2D;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzK;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2C,AAAA1C;;;AAAA,AAAA,AAAA,AAAA0C,AAAA,AAAAjE;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkE,AAAA1C;AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAApC,AAAA,AAAAC,AAAAmC,AAAA;AAAAlC,AAAA,AAAAD,AAAAmC,AAAA;AAAAjC,AAAA,AAAAF,AAAAmC,AAAA;AAAApC,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgE,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8D;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5K;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8C,AAAA7C;;;AAAA,AAAA,AAAA,AAAA6C,AAAA,AAAApE;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqE,AAAA7C;AAAA6C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1C,AAAA,AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAC,AAAAwC,AAAAA;AAAAvC,AAAA,AAAAC,AAAAsC,AAAA;AAAArC,AAAA,AAAAD,AAAAsC,AAAA;AAAApC,AAAA,AAAAF,AAAAsC,AAAA;AAAAvC,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmE,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiE;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/K;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiD,AAAAhD;;;AAAA,AAAA,AAAA,AAAAgD,AAAA,AAAAvE;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwE,AAAAhD;AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7C,AAAA,AAAA6C,AAAA,AAAA,AAAA,AAAA,AAAA5C,AAAAC,AAAA2C,AAAAA;AAAA1C,AAAA,AAAAC,AAAAyC,AAAA;AAAAxC,AAAA,AAAAD,AAAAyC,AAAA;AAAAvC,AAAA,AAAAF,AAAAyC,AAAA;AAAA1C,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsE,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoE;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlL;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoD,AAAAnD;;;AAAA,AAAA,AAAA,AAAAmD,AAAA,AAAA1E;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2E,AAAAnD;AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhD,AAAA,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA/C,AAAAC,AAAA8C,AAAAA;AAAA7C,AAAA,AAAAC,AAAA4C,AAAA;AAAA3C,AAAA,AAAAD,AAAA4C,AAAA;AAAA1C,AAAA,AAAAF,AAAA4C,AAAA;AAAA7C,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyE,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApC,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuE;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArL;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuD,AAAAtD;;;AAAA,AAAA,AAAA,AAAAsD,AAAA,AAAA7E;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8E,AAAAtD;AAAAsD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnD,AAAA,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAAlD,AAAAC,AAAAiD,AAAAA;AAAAhD,AAAA,AAAAC,AAAA+C,AAAA;AAAA9C,AAAA,AAAAD,AAAA+C,AAAA;AAAA7C,AAAA,AAAAF,AAAA+C,AAAA;AAAAhD,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4E,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0E;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxL;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0D,AAAAzD;;;AAAA,AAAA,AAAA,AAAAyD,AAAA,AAAAhF;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiF,AAAAzD;AAAAyD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtD,AAAA,AAAAsD,AAAA,AAAA,AAAA,AAAA,AAAArD,AAAAC,AAAAoD,AAAAA;AAAAnD,AAAA,AAAAC,AAAAkD,AAAA;AAAAjD,AAAA,AAAAD,AAAAkD,AAAA;AAAAhD,AAAA,AAAAF,AAAAkD,AAAA;AAAAnD,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+E,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1C,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6E;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3L;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6D,AAAA5D;;;AAAA,AAAA,AAAA,AAAA4D,AAAA,AAAAnF;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoF,AAAA5D;AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzD,AAAA,AAAAyD,AAAA,AAAA,AAAA,AAAA,AAAAxD,AAAAC,AAAAuD,AAAAA;AAAAtD,AAAA,AAAAC,AAAAqD,AAAA;AAAApD,AAAA,AAAAD,AAAAqD,AAAA;AAAAnD,AAAA,AAAAF,AAAAqD,AAAA;AAAAtD,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkF,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7C,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgF;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9L;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgE,AAAA/D;;;AAAA,AAAA,AAAA,AAAA+D,AAAA,AAAAtF;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuF,AAAA/D;AAAA+D,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5D,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAA3D,AAAAC,AAAA0D,AAAAA;AAAAzD,AAAA,AAAAC,AAAAwD,AAAA;AAAAvD,AAAA,AAAAD,AAAAwD,AAAA;AAAAtD,AAAA,AAAAF,AAAAwD,AAAA;AAAAzD,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqF,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmF;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjM;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmE,AAAAlE;;;AAAA,AAAA,AAAA,AAAAkE,AAAA,AAAAzF;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0F,AAAAlE;AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/D,AAAA,AAAA+D,AAAA,AAAA,AAAA,AAAA,AAAA9D,AAAAC,AAAA6D,AAAAA;AAAA5D,AAAA,AAAAC,AAAA2D,AAAA;AAAA1D,AAAA,AAAAD,AAAA2D,AAAA;AAAAzD,AAAA,AAAAF,AAAA2D,AAAA;AAAA5D,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwF,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsF;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApM;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsE,AAAArE;;;AAAA,AAAA,AAAA,AAAAqE,AAAA,AAAA5F;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6F,AAAArE;AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlE,AAAA,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAAjE,AAAAC,AAAAgE,AAAAA;AAAA/D,AAAA,AAAAC,AAAA8D,AAAA;AAAA7D,AAAA,AAAAD,AAAA8D,AAAA;AAAA5D,AAAA,AAAAF,AAAA8D,AAAA;AAAA/D,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2F,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyF;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvM;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyE,AAAAxE;;;AAAA,AAAA,AAAA,AAAAwE,AAAA,AAAA/F;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgG,AAAAxE;AAAAwE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArE,AAAA,AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAAmE,AAAAA;AAAAlE,AAAA,AAAAC,AAAAiE,AAAA;AAAAhE,AAAA,AAAAD,AAAAiE,AAAA;AAAA/D,AAAA,AAAAF,AAAAiE,AAAA;AAAAlE,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8F,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4F;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1M;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4E,AAAA3E;;;AAAA,AAAA,AAAA,AAAA2E,AAAA,AAAAlG;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmG,AAAA3E;AAAA2E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxE,AAAA,AAAAwE,AAAA,AAAA,AAAA,AAAA,AAAAvE,AAAAC,AAAAsE,AAAAA;AAAArE,AAAA,AAAAC,AAAAoE,AAAA;AAAAnE,AAAA,AAAAD,AAAAoE,AAAA;AAAAlE,AAAA,AAAAF,AAAAoE,AAAA;AAAArE,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiG,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5D,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+F;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7M;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+E,AAAA9E;;;AAAA,AAAA,AAAA,AAAA8E,AAAA,AAAArG;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsG,AAAA9E;AAAA8E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3E,AAAA,AAAA2E,AAAA,AAAA,AAAA,AAAA,AAAA1E,AAAAC,AAAAyE,AAAAA;AAAAxE,AAAA,AAAAC,AAAAuE,AAAA;AAAAtE,AAAA,AAAAD,AAAAuE,AAAA;AAAArE,AAAA,AAAAF,AAAAuE,AAAA;AAAAxE,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoG,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/D,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkG;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhN;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkF,AAAAjF;;;AAAA,AAAA,AAAA,AAAAiF,AAAA,AAAAxG;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyG,AAAAjF;AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9E,AAAA,AAAA8E,AAAA,AAAA,AAAA,AAAA,AAAA7E,AAAAC,AAAA4E,AAAAA;AAAA3E,AAAA,AAAAC,AAAA0E,AAAA;AAAAzE,AAAA,AAAAD,AAAA0E,AAAA;AAAAxE,AAAA,AAAAF,AAAA0E,AAAA;AAAA3E,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuG,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqG;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnN;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqF,AAAApF;;;AAAA,AAAA,AAAA,AAAAoF,AAAA,AAAA3G;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4G,AAAApF;AAAAoF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjF,AAAA,AAAAiF,AAAA,AAAA,AAAA,AAAA,AAAAhF,AAAAC,AAAA+E,AAAAA;AAAA9E,AAAA,AAAAC,AAAA6E,AAAA;AAAA5E,AAAA,AAAAD,AAAA6E,AAAA;AAAA3E,AAAA,AAAAF,AAAA6E,AAAA;AAAA9E,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0G,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwG;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtN;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwF,AAAAvF;;;AAAA,AAAA,AAAA,AAAAuF,AAAA,AAAA9G;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+G,AAAAvF;AAAAuF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApF,AAAA,AAAAoF,AAAA,AAAA,AAAA,AAAA,AAAAnF,AAAAC,AAAAkF,AAAAA;AAAAjF,AAAA,AAAAC,AAAAgF,AAAA;AAAA/E,AAAA,AAAAD,AAAAgF,AAAA;AAAA9E,AAAA,AAAAF,AAAAgF,AAAA;AAAAjF,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6G,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2G;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzN;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2F,AAAA1F;;;AAAA,AAAA,AAAA,AAAA0F,AAAA,AAAAjH;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkH,AAAA1F;AAAA0F,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvF,AAAA,AAAAuF,AAAA,AAAA,AAAA,AAAA,AAAAtF,AAAAC,AAAAqF,AAAAA;AAAApF,AAAA,AAAAC,AAAAmF,AAAA;AAAAlF,AAAA,AAAAD,AAAAmF,AAAA;AAAAjF,AAAA,AAAAF,AAAAmF,AAAA;AAAApF,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgH,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3E,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8G;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5N;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8F,AAAA7F;;;AAAA,AAAA,AAAA,AAAA6F,AAAA,AAAApH;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqH,AAAA7F;AAAA6F,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1F,AAAA,AAAA0F,AAAA,AAAA,AAAA,AAAA,AAAAzF,AAAAC,AAAAwF,AAAAA;AAAAvF,AAAA,AAAAC,AAAAsF,AAAA;AAAArF,AAAA,AAAAD,AAAAsF,AAAA;AAAApF,AAAA,AAAAF,AAAAsF,AAAA;AAAAvF,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmH,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9E,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiH;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/N;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiG,AAAAhG;;;AAAA,AAAA,AAAA,AAAAgG,AAAA,AAAAvH;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwH,AAAAhG;AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7F,AAAA,AAAA6F,AAAA,AAAA,AAAA,AAAA,AAAA5F,AAAAC,AAAA2F,AAAAA;AAAA1F,AAAA,AAAAC,AAAAyF,AAAA;AAAAxF,AAAA,AAAAD,AAAAyF,AAAA;AAAAvF,AAAA,AAAAF,AAAAyF,AAAA;AAAA1F,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsH,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjF,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoH;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlO;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoG,AAAAnG;;;AAAA,AAAA,AAAA,AAAAmG,AAAA,AAAA1H;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2H,AAAAnG;AAAAmG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhG,AAAA,AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAA/F,AAAAC,AAAA8F,AAAAA;AAAA7F,AAAA,AAAAC,AAAA4F,AAAA;AAAA3F,AAAA,AAAAD,AAAA4F,AAAA;AAAA1F,AAAA,AAAAF,AAAA4F,AAAA;AAAA7F,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyH,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApF,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuH;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArO;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuG,AAAAtG;;;AAAA,AAAA,AAAA,AAAAsG,AAAA,AAAA7H;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8H,AAAAtG;AAAAsG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnG,AAAA,AAAAmG,AAAA,AAAA,AAAA,AAAA,AAAAlG,AAAAC,AAAAiG,AAAAA;AAAAhG,AAAA,AAAAC,AAAA+F,AAAA;AAAA9F,AAAA,AAAAD,AAAA+F,AAAA;AAAA7F,AAAA,AAAAF,AAAA+F,AAAA;AAAAhG,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4H,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvF,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0H;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxO;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0G,AAAAzG;;;AAAA,AAAA,AAAA,AAAAyG,AAAA,AAAAhI;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiI,AAAAzG;AAAAyG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtG,AAAA,AAAAsG,AAAA,AAAA,AAAA,AAAA,AAAArG,AAAAC,AAAAoG,AAAAA;AAAAnG,AAAA,AAAAC,AAAAkG,AAAA;AAAAjG,AAAA,AAAAD,AAAAkG,AAAA;AAAAhG,AAAA,AAAAF,AAAAkG,AAAA;AAAAnG,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+H,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1F,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6H;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3O;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6G,AAAA5G;;;AAAA,AAAA,AAAA,AAAA4G,AAAA,AAAAnI;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoI,AAAA5G;AAAA4G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzG,AAAA,AAAAyG,AAAA,AAAA,AAAA,AAAA,AAAAxG,AAAAC,AAAAuG,AAAAA;AAAAtG,AAAA,AAAAC,AAAAqG,AAAA;AAAApG,AAAA,AAAAD,AAAAqG,AAAA;AAAAnG,AAAA,AAAAF,AAAAqG,AAAA;AAAAtG,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkI,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7F,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgI;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9O;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgH,AAAA/G;;;AAAA,AAAA,AAAA,AAAA+G,AAAA,AAAAtI;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuI,AAAA/G;AAAA+G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5G,AAAA,AAAA4G,AAAA,AAAA,AAAA,AAAA,AAAA3G,AAAAC,AAAA0G,AAAAA;AAAAzG,AAAA,AAAAC,AAAAwG,AAAA;AAAAvG,AAAA,AAAAD,AAAAwG,AAAA;AAAAtG,AAAA,AAAAF,AAAAwG,AAAA;AAAAzG,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqI,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmI;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjP;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmH,AAAAlH;;;AAAA,AAAA,AAAA,AAAAkH,AAAA,AAAAzI;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0I,AAAAlH;AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/G,AAAA,AAAA+G,AAAA,AAAA,AAAA,AAAA,AAAA9G,AAAAC,AAAA6G,AAAAA;AAAA5G,AAAA,AAAAC,AAAA2G,AAAA;AAAA1G,AAAA,AAAAD,AAAA2G,AAAA;AAAAzG,AAAA,AAAAF,AAAA2G,AAAA;AAAA5G,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwI,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsI;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApP;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsH,AAAArH;;;AAAA,AAAA,AAAA,AAAAqH,AAAA,AAAA5I;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6I,AAAArH;AAAAqH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlH,AAAA,AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAAjH,AAAAC,AAAAgH,AAAAA;AAAA/G,AAAA,AAAAC,AAAA8G,AAAA;AAAA7G,AAAA,AAAAD,AAAA8G,AAAA;AAAA5G,AAAA,AAAAF,AAAA8G,AAAA;AAAA/G,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2I,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyI;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvP;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyH,AAAAxH;;;AAAA,AAAA,AAAA,AAAAwH,AAAA,AAAA/I;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgJ,AAAAxH;AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArH,AAAA,AAAAqH,AAAA,AAAA,AAAA,AAAA,AAAApH,AAAAC,AAAAmH,AAAAA;AAAAlH,AAAA,AAAAC,AAAAiH,AAAA;AAAAhH,AAAA,AAAAD,AAAAiH,AAAA;AAAA/G,AAAA,AAAAF,AAAAiH,AAAA;AAAAlH,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8I,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzG,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4I;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1P;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4H,AAAA3H;;;AAAA,AAAA,AAAA,AAAA2H,AAAA,AAAAlJ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmJ,AAAA3H;AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAC,AAAAsH,AAAAA;AAAArH,AAAA,AAAAC,AAAAoH,AAAA;AAAAnH,AAAA,AAAAD,AAAAoH,AAAA;AAAAlH,AAAA,AAAAF,AAAAoH,AAAA;AAAArH,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiJ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5G,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+I;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7P;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+H,AAAA9H;;;AAAA,AAAA,AAAA,AAAA8H,AAAA,AAAArJ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsJ,AAAA9H;AAAA8H,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3H,AAAA,AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAA1H,AAAAC,AAAAyH,AAAAA;AAAAxH,AAAA,AAAAC,AAAAuH,AAAA;AAAAtH,AAAA,AAAAD,AAAAuH,AAAA;AAAArH,AAAA,AAAAF,AAAAuH,AAAA;AAAAxH,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoJ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/G,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkJ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhQ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkI,AAAAjI;;;AAAA,AAAA,AAAA,AAAAiI,AAAA,AAAAxJ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyJ,AAAAjI;AAAAiI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9H,AAAA,AAAA8H,AAAA,AAAA,AAAA,AAAA,AAAA7H,AAAAC,AAAA4H,AAAAA;AAAA3H,AAAA,AAAAC,AAAA0H,AAAA;AAAAzH,AAAA,AAAAD,AAAA0H,AAAA;AAAAxH,AAAA,AAAAF,AAAA0H,AAAA;AAAA3H,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuJ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqJ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnQ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqI,AAAApI;;;AAAA,AAAA,AAAA,AAAAoI,AAAA,AAAA3J;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4J,AAAApI;AAAAoI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjI,AAAA,AAAAiI,AAAA,AAAA,AAAA,AAAA,AAAAhI,AAAAC,AAAA+H,AAAAA;AAAA9H,AAAA,AAAAC,AAAA6H,AAAA;AAAA5H,AAAA,AAAAD,AAAA6H,AAAA;AAAA3H,AAAA,AAAAF,AAAA6H,AAAA;AAAA9H,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0J,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwJ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtQ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwI,AAAAvI;;;AAAA,AAAA,AAAA,AAAAuI,AAAA,AAAA9J;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+J,AAAAvI;AAAAuI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApI,AAAA,AAAAoI,AAAA,AAAA,AAAA,AAAA,AAAAnI,AAAAC,AAAAkI,AAAAA;AAAAjI,AAAA,AAAAC,AAAAgI,AAAA;AAAA/H,AAAA,AAAAD,AAAAgI,AAAA;AAAA9H,AAAA,AAAAF,AAAAgI,AAAA;AAAAjI,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6J,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxH,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2J;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzQ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2I,AAAA1I;;;AAAA,AAAA,AAAA,AAAA0I,AAAA,AAAAjK;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkK,AAAA1I;AAAA0I,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvI,AAAA,AAAAuI,AAAA,AAAA,AAAA,AAAA,AAAAtI,AAAAC,AAAAqI,AAAAA;AAAApI,AAAA,AAAAC,AAAAmI,AAAA;AAAAlI,AAAA,AAAAD,AAAAmI,AAAA;AAAAjI,AAAA,AAAAF,AAAAmI,AAAA;AAAApI,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgK,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3H,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8J;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5Q;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8I,AAAA7I;;;AAAA,AAAA,AAAA,AAAA6I,AAAA,AAAApK;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqK,AAAA7I;AAAA6I,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1I,AAAA,AAAA0I,AAAA,AAAA,AAAA,AAAA,AAAAzI,AAAAC,AAAAwI,AAAAA;AAAAvI,AAAA,AAAAC,AAAAsI,AAAA;AAAArI,AAAA,AAAAD,AAAAsI,AAAA;AAAApI,AAAA,AAAAF,AAAAsI,AAAA;AAAAvI,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmK,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9H,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiK;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/Q;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiJ,AAAAhJ;;;AAAA,AAAA,AAAA,AAAAgJ,AAAA,AAAAvK;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwK,AAAAhJ;AAAAgJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7I,AAAA,AAAA6I,AAAA,AAAA,AAAA,AAAA,AAAA5I,AAAAC,AAAA2I,AAAAA;AAAA1I,AAAA,AAAAC,AAAAyI,AAAA;AAAAxI,AAAA,AAAAD,AAAAyI,AAAA;AAAAvI,AAAA,AAAAF,AAAAyI,AAAA;AAAA1I,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsK,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoK;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlR;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoJ,AAAAnJ;;;AAAA,AAAA,AAAA,AAAAmJ,AAAA,AAAA1K;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2K,AAAAnJ;AAAAmJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhJ,AAAA,AAAAgJ,AAAA,AAAA,AAAA,AAAA,AAAA/I,AAAAC,AAAA8I,AAAAA;AAAA7I,AAAA,AAAAC,AAAA4I,AAAA;AAAA3I,AAAA,AAAAD,AAAA4I,AAAA;AAAA1I,AAAA,AAAAF,AAAA4I,AAAA;AAAA7I,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyK,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuK;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArR;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuJ,AAAAtJ;;;AAAA,AAAA,AAAA,AAAAsJ,AAAA,AAAA7K;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8K,AAAAtJ;AAAAsJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnJ,AAAA,AAAAmJ,AAAA,AAAA,AAAA,AAAA,AAAAlJ,AAAAC,AAAAiJ,AAAAA;AAAAhJ,AAAA,AAAAC,AAAA+I,AAAA;AAAA9I,AAAA,AAAAD,AAAA+I,AAAA;AAAA7I,AAAA,AAAAF,AAAA+I,AAAA;AAAAhJ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4K,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0K;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxR;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0J,AAAAzJ;;;AAAA,AAAA,AAAA,AAAAyJ,AAAA,AAAAhL;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiL,AAAAzJ;AAAAyJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtJ,AAAA,AAAAsJ,AAAA,AAAA,AAAA,AAAA,AAAArJ,AAAAC,AAAAoJ,AAAAA;AAAAnJ,AAAA,AAAAC,AAAAkJ,AAAA;AAAAjJ,AAAA,AAAAD,AAAAkJ,AAAA;AAAAhJ,AAAA,AAAAF,AAAAkJ,AAAA;AAAAnJ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+K,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1I,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6K;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3R;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6J,AAAA5J;;;AAAA,AAAA,AAAA,AAAA4J,AAAA,AAAAnL;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoL,AAAA5J;AAAA4J,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzJ,AAAA,AAAAyJ,AAAA,AAAA,AAAA,AAAA,AAAAxJ,AAAAC,AAAAuJ,AAAAA;AAAAtJ,AAAA,AAAAC,AAAAqJ,AAAA;AAAApJ,AAAA,AAAAD,AAAAqJ,AAAA;AAAAnJ,AAAA,AAAAF,AAAAqJ,AAAA;AAAAtJ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkL,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7I,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgL;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9R;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgK,AAAA/J;;;AAAA,AAAA,AAAA,AAAA+J,AAAA,AAAAtL;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuL,AAAA/J;AAAA+J,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5J,AAAA,AAAA4J,AAAA,AAAA,AAAA,AAAA,AAAA3J,AAAAC,AAAA0J,AAAAA;AAAAzJ,AAAA,AAAAC,AAAAwJ,AAAA;AAAAvJ,AAAA,AAAAD,AAAAwJ,AAAA;AAAAtJ,AAAA,AAAAF,AAAAwJ,AAAA;AAAAzJ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqL,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmL;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjS;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmK,AAAAlK;;;AAAA,AAAA,AAAA,AAAAkK,AAAA,AAAAzL;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0L,AAAAlK;AAAAkK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/J,AAAA,AAAA+J,AAAA,AAAA,AAAA,AAAA,AAAA9J,AAAAC,AAAA6J,AAAAA;AAAA5J,AAAA,AAAAC,AAAA2J,AAAA;AAAA1J,AAAA,AAAAD,AAAA2J,AAAA;AAAAzJ,AAAA,AAAAF,AAAA2J,AAAA;AAAA5J,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwL,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsL;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApS;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsK,AAAArK;;;AAAA,AAAA,AAAA,AAAAqK,AAAA,AAAA5L;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6L,AAAArK;AAAAqK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlK,AAAA,AAAAkK,AAAA,AAAA,AAAA,AAAA,AAAAjK,AAAAC,AAAAgK,AAAAA;AAAA/J,AAAA,AAAAC,AAAA8J,AAAA;AAAA7J,AAAA,AAAAD,AAAA8J,AAAA;AAAA5J,AAAA,AAAAF,AAAA8J,AAAA;AAAA/J,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2L,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyL;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvS;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyK,AAAAxK;;;AAAA,AAAA,AAAA,AAAAwK,AAAA,AAAA/L;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgM,AAAAxK;AAAAwK,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArK,AAAA,AAAAqK,AAAA,AAAA,AAAA,AAAA,AAAApK,AAAAC,AAAAmK,AAAAA;AAAAlK,AAAA,AAAAC,AAAAiK,AAAA;AAAAhK,AAAA,AAAAD,AAAAiK,AAAA;AAAA/J,AAAA,AAAAF,AAAAiK,AAAA;AAAAlK,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8L,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzJ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4L;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1S;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4K,AAAA3K;;;AAAA,AAAA,AAAA,AAAA2K,AAAA,AAAAlM;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmM,AAAA3K;AAAA2K,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxK,AAAA,AAAAwK,AAAA,AAAA,AAAA,AAAA,AAAAvK,AAAAC,AAAAsK,AAAAA;AAAArK,AAAA,AAAAC,AAAAoK,AAAA;AAAAnK,AAAA,AAAAD,AAAAoK,AAAA;AAAAlK,AAAA,AAAAF,AAAAoK,AAAA;AAAArK,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiM,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5J,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+L;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7S;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+K,AAAA9K;;;AAAA,AAAA,AAAA,AAAA8K,AAAA,AAAArM;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsM,AAAA9K;AAAA8K,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3K,AAAA,AAAA2K,AAAA,AAAA,AAAA,AAAA,AAAA1K,AAAAC,AAAAyK,AAAAA;AAAAxK,AAAA,AAAAC,AAAAuK,AAAA;AAAAtK,AAAA,AAAAD,AAAAuK,AAAA;AAAArK,AAAA,AAAAF,AAAAuK,AAAA;AAAAxK,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoM,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/J,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkM;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhT;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkL,AAAAjL;;;AAAA,AAAA,AAAA,AAAAiL,AAAA,AAAAxM;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyM,AAAAjL;AAAAiL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9K,AAAA,AAAA8K,AAAA,AAAA,AAAA,AAAA,AAAA7K,AAAAC,AAAA4K,AAAAA;AAAA3K,AAAA,AAAAC,AAAA0K,AAAA;AAAAzK,AAAA,AAAAD,AAAA0K,AAAA;AAAAxK,AAAA,AAAAF,AAAA0K,AAAA;AAAA3K,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuM,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlK,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqM;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnT;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqL,AAAApL;;;AAAA,AAAA,AAAA,AAAAoL,AAAA,AAAA3M;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4M,AAAApL;AAAAoL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjL,AAAA,AAAAiL,AAAA,AAAA,AAAA,AAAA,AAAAhL,AAAAC,AAAA+K,AAAAA;AAAA9K,AAAA,AAAAC,AAAA6K,AAAA;AAAA5K,AAAA,AAAAD,AAAA6K,AAAA;AAAA3K,AAAA,AAAAF,AAAA6K,AAAA;AAAA9K,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0M,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArK,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwM;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtT;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwL,AAAAvL;;;AAAA,AAAA,AAAA,AAAAuL,AAAA,AAAA9M;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+M,AAAAvL;AAAAuL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApL,AAAA,AAAAoL,AAAA,AAAA,AAAA,AAAA,AAAAnL,AAAAC,AAAAkL,AAAAA;AAAAjL,AAAA,AAAAC,AAAAgL,AAAA;AAAA/K,AAAA,AAAAD,AAAAgL,AAAA;AAAA9K,AAAA,AAAAF,AAAAgL,AAAA;AAAAjL,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6M,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxK,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2M;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzT;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2L,AAAA1L;;;AAAA,AAAA,AAAA,AAAA0L,AAAA,AAAAjN;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkN,AAAA1L;AAAA0L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvL,AAAA,AAAAuL,AAAA,AAAA,AAAA,AAAA,AAAAtL,AAAAC,AAAAqL,AAAAA;AAAApL,AAAA,AAAAC,AAAAmL,AAAA;AAAAlL,AAAA,AAAAD,AAAAmL,AAAA;AAAAjL,AAAA,AAAAF,AAAAmL,AAAA;AAAApL,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgN,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3K,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8M;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5T;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8L,AAAA7L;;;AAAA,AAAA,AAAA,AAAA6L,AAAA,AAAApN;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqN,AAAA7L;AAAA6L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1L,AAAA,AAAA0L,AAAA,AAAA,AAAA,AAAA,AAAAzL,AAAAC,AAAAwL,AAAAA;AAAAvL,AAAA,AAAAC,AAAAsL,AAAA;AAAArL,AAAA,AAAAD,AAAAsL,AAAA;AAAApL,AAAA,AAAAF,AAAAsL,AAAA;AAAAvL,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmN,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9K,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiN;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/T;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiM,AAAAhM;;;AAAA,AAAA,AAAA,AAAAgM,AAAA,AAAAvN;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwN,AAAAhM;AAAAgM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7L,AAAA,AAAA6L,AAAA,AAAA,AAAA,AAAA,AAAA5L,AAAAC,AAAA2L,AAAAA;AAAA1L,AAAA,AAAAC,AAAAyL,AAAA;AAAAxL,AAAA,AAAAD,AAAAyL,AAAA;AAAAvL,AAAA,AAAAF,AAAAyL,AAAA;AAAA1L,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsN,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjL,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoN;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlU;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoM,AAAAnM;;;AAAA,AAAA,AAAA,AAAAmM,AAAA,AAAA1N;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2N,AAAAnM;AAAAmM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhM,AAAA,AAAAgM,AAAA,AAAA,AAAA,AAAA,AAAA/L,AAAAC,AAAA8L,AAAAA;AAAA7L,AAAA,AAAAC,AAAA4L,AAAA;AAAA3L,AAAA,AAAAD,AAAA4L,AAAA;AAAA1L,AAAA,AAAAF,AAAA4L,AAAA;AAAA7L,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyN,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApL,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuN;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArU;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuM,AAAAtM;;;AAAA,AAAA,AAAA,AAAAsM,AAAA,AAAA7N;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8N,AAAAtM;AAAAsM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnM,AAAA,AAAAmM,AAAA,AAAA,AAAA,AAAA,AAAAlM,AAAAC,AAAAiM,AAAAA;AAAAhM,AAAA,AAAAC,AAAA+L,AAAA;AAAA9L,AAAA,AAAAD,AAAA+L,AAAA;AAAA7L,AAAA,AAAAF,AAAA+L,AAAA;AAAAhM,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4N,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvL,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0N;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxU;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0M,AAAAzM;;;AAAA,AAAA,AAAA,AAAAyM,AAAA,AAAAhO;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiO,AAAAzM;AAAAyM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtM,AAAA,AAAAsM,AAAA,AAAA,AAAA,AAAA,AAAArM,AAAAC,AAAAoM,AAAAA;AAAAnM,AAAA,AAAAC,AAAAkM,AAAA;AAAAjM,AAAA,AAAAD,AAAAkM,AAAA;AAAAhM,AAAA,AAAAF,AAAAkM,AAAA;AAAAnM,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+N,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1L,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6N;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3U;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6M,AAAA5M;;;AAAA,AAAA,AAAA,AAAA4M,AAAA,AAAAnO;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoO,AAAA5M;AAAA4M,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzM,AAAA,AAAAyM,AAAA,AAAA,AAAA,AAAA,AAAAxM,AAAAC,AAAAuM,AAAAA;AAAAtM,AAAA,AAAAC,AAAAqM,AAAA;AAAApM,AAAA,AAAAD,AAAAqM,AAAA;AAAAnM,AAAA,AAAAF,AAAAqM,AAAA;AAAAtM,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkO,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7L,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgO;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9U;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgN,AAAA/M;;;AAAA,AAAA,AAAA,AAAA+M,AAAA,AAAAtO;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuO,AAAA/M;AAAA+M,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5M,AAAA,AAAA4M,AAAA,AAAA,AAAA,AAAA,AAAA3M,AAAAC,AAAA0M,AAAAA;AAAAzM,AAAA,AAAAC,AAAAwM,AAAA;AAAAvM,AAAA,AAAAD,AAAAwM,AAAA;AAAAtM,AAAA,AAAAF,AAAAwM,AAAA;AAAAzM,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqO,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhM,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmO;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjV;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmN,AAAAlN;;;AAAA,AAAA,AAAA,AAAAkN,AAAA,AAAAzO;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0O,AAAAlN;AAAAkN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/M,AAAA,AAAA+M,AAAA,AAAA,AAAA,AAAA,AAAA9M,AAAAC,AAAA6M,AAAAA;AAAA5M,AAAA,AAAAC,AAAA2M,AAAA;AAAA1M,AAAA,AAAAD,AAAA2M,AAAA;AAAAzM,AAAA,AAAAF,AAAA2M,AAAA;AAAA5M,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwO,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnM,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsO;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApV;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsN,AAAArN;;;AAAA,AAAA,AAAA,AAAAqN,AAAA,AAAA5O;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6O,AAAArN;AAAAqN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlN,AAAA,AAAAkN,AAAA,AAAA,AAAA,AAAA,AAAAjN,AAAAC,AAAAgN,AAAAA;AAAA/M,AAAA,AAAAC,AAAA8M,AAAA;AAAA7M,AAAA,AAAAD,AAAA8M,AAAA;AAAA5M,AAAA,AAAAF,AAAA8M,AAAA;AAAA/M,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2O,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtM,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyO;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvV;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyN,AAAAxN;;;AAAA,AAAA,AAAA,AAAAwN,AAAA,AAAA/O;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgP,AAAAxN;AAAAwN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArN,AAAA,AAAAqN,AAAA,AAAA,AAAA,AAAA,AAAApN,AAAAC,AAAAmN,AAAAA;AAAAlN,AAAA,AAAAC,AAAAiN,AAAA;AAAAhN,AAAA,AAAAD,AAAAiN,AAAA;AAAA/M,AAAA,AAAAF,AAAAiN,AAAA;AAAAlN,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8O,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzM,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4O;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1V;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4N,AAAA3N;;;AAAA,AAAA,AAAA,AAAA2N,AAAA,AAAAlP;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmP,AAAA3N;AAAA2N,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxN,AAAA,AAAAwN,AAAA,AAAA,AAAA,AAAA,AAAAvN,AAAAC,AAAAsN,AAAAA;AAAArN,AAAA,AAAAC,AAAAoN,AAAA;AAAAnN,AAAA,AAAAD,AAAAoN,AAAA;AAAAlN,AAAA,AAAAF,AAAAoN,AAAA;AAAArN,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiP,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5M,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+O;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7V;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+N,AAAA9N;;;AAAA,AAAA,AAAA,AAAA8N,AAAA,AAAArP;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsP,AAAA9N;AAAA8N,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3N,AAAA,AAAA2N,AAAA,AAAA,AAAA,AAAA,AAAA1N,AAAAC,AAAAyN,AAAAA;AAAAxN,AAAA,AAAAC,AAAAuN,AAAA;AAAAtN,AAAA,AAAAD,AAAAuN,AAAA;AAAArN,AAAA,AAAAF,AAAAuN,AAAA;AAAAxN,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoP,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/M,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkP;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhW;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkO,AAAAjO;;;AAAA,AAAA,AAAA,AAAAiO,AAAA,AAAAxP;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyP,AAAAjO;AAAAiO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9N,AAAA,AAAA8N,AAAA,AAAA,AAAA,AAAA,AAAA7N,AAAAC,AAAA4N,AAAAA;AAAA3N,AAAA,AAAAC,AAAA0N,AAAA;AAAAzN,AAAA,AAAAD,AAAA0N,AAAA;AAAAxN,AAAA,AAAAF,AAAA0N,AAAA;AAAA3N,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuP,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqP;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnW;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqO,AAAApO;;;AAAA,AAAA,AAAA,AAAAoO,AAAA,AAAA3P;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4P,AAAApO;AAAAoO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjO,AAAA,AAAAiO,AAAA,AAAA,AAAA,AAAA,AAAAhO,AAAAC,AAAA+N,AAAAA;AAAA9N,AAAA,AAAAC,AAAA6N,AAAA;AAAA5N,AAAA,AAAAD,AAAA6N,AAAA;AAAA3N,AAAA,AAAAF,AAAA6N,AAAA;AAAA9N,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0P,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwP;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtW;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwO,AAAAvO;;;AAAA,AAAA,AAAA,AAAAuO,AAAA,AAAA9P;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+P,AAAAvO;AAAAuO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApO,AAAA,AAAAoO,AAAA,AAAA,AAAA,AAAA,AAAAnO,AAAAC,AAAAkO,AAAAA;AAAAjO,AAAA,AAAAC,AAAAgO,AAAA;AAAA/N,AAAA,AAAAD,AAAAgO,AAAA;AAAA9N,AAAA,AAAAF,AAAAgO,AAAA;AAAAjO,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6P,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxN,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2P;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzW;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2O,AAAA1O;;;AAAA,AAAA,AAAA,AAAA0O,AAAA,AAAAjQ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkQ,AAAA1O;AAAA0O,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvO,AAAA,AAAAuO,AAAA,AAAA,AAAA,AAAA,AAAAtO,AAAAC,AAAAqO,AAAAA;AAAApO,AAAA,AAAAC,AAAAmO,AAAA;AAAAlO,AAAA,AAAAD,AAAAmO,AAAA;AAAAjO,AAAA,AAAAF,AAAAmO,AAAA;AAAApO,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgQ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3N,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8P;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5W;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8O,AAAA7O;;;AAAA,AAAA,AAAA,AAAA6O,AAAA,AAAApQ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqQ,AAAA7O;AAAA6O,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1O,AAAA,AAAA0O,AAAA,AAAA,AAAA,AAAA,AAAAzO,AAAAC,AAAAwO,AAAAA;AAAAvO,AAAA,AAAAC,AAAAsO,AAAA;AAAArO,AAAA,AAAAD,AAAAsO,AAAA;AAAApO,AAAA,AAAAF,AAAAsO,AAAA;AAAAvO,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmQ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9N,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiQ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/W;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiP,AAAAhP;;;AAAA,AAAA,AAAA,AAAAgP,AAAA,AAAAvQ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwQ,AAAAhP;AAAAgP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7O,AAAA,AAAA6O,AAAA,AAAA,AAAA,AAAA,AAAA5O,AAAAC,AAAA2O,AAAAA;AAAA1O,AAAA,AAAAC,AAAAyO,AAAA;AAAAxO,AAAA,AAAAD,AAAAyO,AAAA;AAAAvO,AAAA,AAAAF,AAAAyO,AAAA;AAAA1O,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsQ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjO,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoQ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlX;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoP,AAAAnP;;;AAAA,AAAA,AAAA,AAAAmP,AAAA,AAAA1Q;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2Q,AAAAnP;AAAAmP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhP,AAAA,AAAAgP,AAAA,AAAA,AAAA,AAAA,AAAA/O,AAAAC,AAAA8O,AAAAA;AAAA7O,AAAA,AAAAC,AAAA4O,AAAA;AAAA3O,AAAA,AAAAD,AAAA4O,AAAA;AAAA1O,AAAA,AAAAF,AAAA4O,AAAA;AAAA7O,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyQ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApO,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuQ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArX;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuP,AAAAtP;;;AAAA,AAAA,AAAA,AAAAsP,AAAA,AAAA7Q;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8Q,AAAAtP;AAAAsP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnP,AAAA,AAAAmP,AAAA,AAAA,AAAA,AAAA,AAAAlP,AAAAC,AAAAiP,AAAAA;AAAAhP,AAAA,AAAAC,AAAA+O,AAAA;AAAA9O,AAAA,AAAAD,AAAA+O,AAAA;AAAA7O,AAAA,AAAAF,AAAA+O,AAAA;AAAAhP,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4Q,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvO,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0Q;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxX;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0P,AAAAzP;;;AAAA,AAAA,AAAA,AAAAyP,AAAA,AAAAhR;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiR,AAAAzP;AAAAyP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtP,AAAA,AAAAsP,AAAA,AAAA,AAAA,AAAA,AAAArP,AAAAC,AAAAoP,AAAAA;AAAAnP,AAAA,AAAAC,AAAAkP,AAAA;AAAAjP,AAAA,AAAAD,AAAAkP,AAAA;AAAAhP,AAAA,AAAAF,AAAAkP,AAAA;AAAAnP,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+Q,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1O,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6Q;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3X;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6P,AAAA5P;;;AAAA,AAAA,AAAA,AAAA4P,AAAA,AAAAnR;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoR,AAAA5P;AAAA4P,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzP,AAAA,AAAAyP,AAAA,AAAA,AAAA,AAAA,AAAAxP,AAAAC,AAAAuP,AAAAA;AAAAtP,AAAA,AAAAC,AAAAqP,AAAA;AAAApP,AAAA,AAAAD,AAAAqP,AAAA;AAAAnP,AAAA,AAAAF,AAAAqP,AAAA;AAAAtP,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkR,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7O,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgR;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9X;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgQ,AAAA/P;;;AAAA,AAAA,AAAA,AAAA+P,AAAA,AAAAtR;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuR,AAAA/P;AAAA+P,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5P,AAAA,AAAA4P,AAAA,AAAA,AAAA,AAAA,AAAA3P,AAAAC,AAAA0P,AAAAA;AAAAzP,AAAA,AAAAC,AAAAwP,AAAA;AAAAvP,AAAA,AAAAD,AAAAwP,AAAA;AAAAtP,AAAA,AAAAF,AAAAwP,AAAA;AAAAzP,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqR,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmR;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjY;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmQ,AAAAlQ;;;AAAA,AAAA,AAAA,AAAAkQ,AAAA,AAAAzR;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0R,AAAAlQ;AAAAkQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/P,AAAA,AAAA+P,AAAA,AAAA,AAAA,AAAA,AAAA9P,AAAAC,AAAA6P,AAAAA;AAAA5P,AAAA,AAAAC,AAAA2P,AAAA;AAAA1P,AAAA,AAAAD,AAAA2P,AAAA;AAAAzP,AAAA,AAAAF,AAAA2P,AAAA;AAAA5P,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwR,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsR;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApY;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsQ,AAAArQ;;;AAAA,AAAA,AAAA,AAAAqQ,AAAA,AAAA5R;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6R,AAAArQ;AAAAqQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlQ,AAAA,AAAAkQ,AAAA,AAAA,AAAA,AAAA,AAAAjQ,AAAAC,AAAAgQ,AAAAA;AAAA/P,AAAA,AAAAC,AAAA8P,AAAA;AAAA7P,AAAA,AAAAD,AAAA8P,AAAA;AAAA5P,AAAA,AAAAF,AAAA8P,AAAA;AAAA/P,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2R,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyR;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvY;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyQ,AAAAxQ;;;AAAA,AAAA,AAAA,AAAAwQ,AAAA,AAAA/R;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgS,AAAAxQ;AAAAwQ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArQ,AAAA,AAAAqQ,AAAA,AAAA,AAAA,AAAA,AAAApQ,AAAAC,AAAAmQ,AAAAA;AAAAlQ,AAAA,AAAAC,AAAAiQ,AAAA;AAAAhQ,AAAA,AAAAD,AAAAiQ,AAAA;AAAA/P,AAAA,AAAAF,AAAAiQ,AAAA;AAAAlQ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8R,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4R;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1Y;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4Q,AAAA3Q;;;AAAA,AAAA,AAAA,AAAA2Q,AAAA,AAAAlS;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmS,AAAA3Q;AAAA2Q,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxQ,AAAA,AAAAwQ,AAAA,AAAA,AAAA,AAAA,AAAAvQ,AAAAC,AAAAsQ,AAAAA;AAAArQ,AAAA,AAAAC,AAAAoQ,AAAA;AAAAnQ,AAAA,AAAAD,AAAAoQ,AAAA;AAAAlQ,AAAA,AAAAF,AAAAoQ,AAAA;AAAArQ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiS,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5P,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+R;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7Y;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+Q,AAAA9Q;;;AAAA,AAAA,AAAA,AAAA8Q,AAAA,AAAArS;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsS,AAAA9Q;AAAA8Q,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3Q,AAAA,AAAA2Q,AAAA,AAAA,AAAA,AAAA,AAAA1Q,AAAAC,AAAAyQ,AAAAA;AAAAxQ,AAAA,AAAAC,AAAAuQ,AAAA;AAAAtQ,AAAA,AAAAD,AAAAuQ,AAAA;AAAArQ,AAAA,AAAAF,AAAAuQ,AAAA;AAAAxQ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoS,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/P,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkS;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhZ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkR,AAAAjR;;;AAAA,AAAA,AAAA,AAAAiR,AAAA,AAAAxS;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyS,AAAAjR;AAAAiR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9Q,AAAA,AAAA8Q,AAAA,AAAA,AAAA,AAAA,AAAA7Q,AAAAC,AAAA4Q,AAAAA;AAAA3Q,AAAA,AAAAC,AAAA0Q,AAAA;AAAAzQ,AAAA,AAAAD,AAAA0Q,AAAA;AAAAxQ,AAAA,AAAAF,AAAA0Q,AAAA;AAAA3Q,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuS,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqS;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnZ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqR,AAAApR;;;AAAA,AAAA,AAAA,AAAAoR,AAAA,AAAA3S;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4S,AAAApR;AAAAoR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjR,AAAA,AAAAiR,AAAA,AAAA,AAAA,AAAA,AAAAhR,AAAAC,AAAA+Q,AAAAA;AAAA9Q,AAAA,AAAAC,AAAA6Q,AAAA;AAAA5Q,AAAA,AAAAD,AAAA6Q,AAAA;AAAA3Q,AAAA,AAAAF,AAAA6Q,AAAA;AAAA9Q,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0S,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwS;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtZ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwR,AAAAvR;;;AAAA,AAAA,AAAA,AAAAuR,AAAA,AAAA9S;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+S,AAAAvR;AAAAuR,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApR,AAAA,AAAAoR,AAAA,AAAA,AAAA,AAAA,AAAAnR,AAAAC,AAAAkR,AAAAA;AAAAjR,AAAA,AAAAC,AAAAgR,AAAA;AAAA/Q,AAAA,AAAAD,AAAAgR,AAAA;AAAA9Q,AAAA,AAAAF,AAAAgR,AAAA;AAAAjR,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6S,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxQ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2S;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzZ;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2R,AAAA1R;;;AAAA,AAAA,AAAA,AAAA0R,AAAA,AAAAjT;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkT,AAAA1R;AAAA0R,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvR,AAAA,AAAAuR,AAAA,AAAA,AAAA,AAAA,AAAAtR,AAAAC,AAAAqR,AAAAA;AAAApR,AAAA,AAAAC,AAAAmR,AAAA;AAAAlR,AAAA,AAAAD,AAAAmR,AAAA;AAAAjR,AAAA,AAAAF,AAAAmR,AAAA;AAAApR,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3Q,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8S;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5Z;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8R,AAAA7R;;;AAAA,AAAA,AAAA,AAAA6R,AAAA,AAAApT;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqT,AAAA7R;AAAA6R,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1R,AAAA,AAAA0R,AAAA,AAAA,AAAA,AAAA,AAAAzR,AAAAC,AAAAwR,AAAAA;AAAAvR,AAAA,AAAAC,AAAAsR,AAAA;AAAArR,AAAA,AAAAD,AAAAsR,AAAA;AAAApR,AAAA,AAAAF,AAAAsR,AAAA;AAAAvR,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9Q,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiT;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/Z;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiS,AAAAhS;;;AAAA,AAAA,AAAA,AAAAgS,AAAA,AAAAvT;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwT,AAAAhS;AAAAgS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7R,AAAA,AAAA6R,AAAA,AAAA,AAAA,AAAA,AAAA5R,AAAAC,AAAA2R,AAAAA;AAAA1R,AAAA,AAAAC,AAAAyR,AAAA;AAAAxR,AAAA,AAAAD,AAAAyR,AAAA;AAAAvR,AAAA,AAAAF,AAAAyR,AAAA;AAAA1R,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjR,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoT;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAla;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoS,AAAAnS;;;AAAA,AAAA,AAAA,AAAAmS,AAAA,AAAA1T;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2T,AAAAnS;AAAAmS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhS,AAAA,AAAAgS,AAAA,AAAA,AAAA,AAAA,AAAA/R,AAAAC,AAAA8R,AAAAA;AAAA7R,AAAA,AAAAC,AAAA4R,AAAA;AAAA3R,AAAA,AAAAD,AAAA4R,AAAA;AAAA1R,AAAA,AAAAF,AAAA4R,AAAA;AAAA7R,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApR,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuT;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAra;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuS,AAAAtS;;;AAAA,AAAA,AAAA,AAAAsS,AAAA,AAAA7T;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8T,AAAAtS;AAAAsS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnS,AAAA,AAAAmS,AAAA,AAAA,AAAA,AAAA,AAAAlS,AAAAC,AAAAiS,AAAAA;AAAAhS,AAAA,AAAAC,AAAA+R,AAAA;AAAA9R,AAAA,AAAAD,AAAA+R,AAAA;AAAA7R,AAAA,AAAAF,AAAA+R,AAAA;AAAAhS,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4T,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvR,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0T;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxa;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0S,AAAAzS;;;AAAA,AAAA,AAAA,AAAAyS,AAAA,AAAAhU;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiU,AAAAzS;AAAAyS,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtS,AAAA,AAAAsS,AAAA,AAAA,AAAA,AAAA,AAAArS,AAAAC,AAAAoS,AAAAA;AAAAnS,AAAA,AAAAC,AAAAkS,AAAA;AAAAjS,AAAA,AAAAD,AAAAkS,AAAA;AAAAhS,AAAA,AAAAF,AAAAkS,AAAA;AAAAnS,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+T,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1R,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6T;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3a;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6S,AAAA5S;;;AAAA,AAAA,AAAA,AAAA4S,AAAA,AAAAnU;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoU,AAAA5S;AAAA4S,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzS,AAAA,AAAAyS,AAAA,AAAA,AAAA,AAAA,AAAAxS,AAAAC,AAAAuS,AAAAA;AAAAtS,AAAA,AAAAC,AAAAqS,AAAA;AAAApS,AAAA,AAAAD,AAAAqS,AAAA;AAAAnS,AAAA,AAAAF,AAAAqS,AAAA;AAAAtS,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkU,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7R,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgU;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9a;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgT,AAAA/S;;;AAAA,AAAA,AAAA,AAAA+S,AAAA,AAAAtU;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuU,AAAA/S;AAAA+S,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5S,AAAA,AAAA4S,AAAA,AAAA,AAAA,AAAA,AAAA3S,AAAAC,AAAA0S,AAAAA;AAAAzS,AAAA,AAAAC,AAAAwS,AAAA;AAAAvS,AAAA,AAAAD,AAAAwS,AAAA;AAAAtS,AAAA,AAAAF,AAAAwS,AAAA;AAAAzS,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqU,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhS,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmU;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjb;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmT,AAAAlT;;;AAAA,AAAA,AAAA,AAAAkT,AAAA,AAAAzU;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0U,AAAAlT;AAAAkT,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/S,AAAA,AAAA+S,AAAA,AAAA,AAAA,AAAA,AAAA9S,AAAAC,AAAA6S,AAAAA;AAAA5S,AAAA,AAAAC,AAAA2S,AAAA;AAAA1S,AAAA,AAAAD,AAAA2S,AAAA;AAAAzS,AAAA,AAAAF,AAAA2S,AAAA;AAAA5S,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwU,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnS,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsU;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApb;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsT,AAAArT;;;AAAA,AAAA,AAAA,AAAAqT,AAAA,AAAA5U;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6U,AAAArT;AAAAqT,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlT,AAAA,AAAAkT,AAAA,AAAA,AAAA,AAAA,AAAAjT,AAAAC,AAAAgT,AAAAA;AAAA/S,AAAA,AAAAC,AAAA8S,AAAA;AAAA7S,AAAA,AAAAD,AAAA8S,AAAA;AAAA5S,AAAA,AAAAF,AAAA8S,AAAA;AAAA/S,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2U,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtS,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyU;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvb;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyT,AAAAxT;;;AAAA,AAAA,AAAA,AAAAwT,AAAA,AAAA/U;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgV,AAAAxT;AAAAwT,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArT,AAAA,AAAAqT,AAAA,AAAA,AAAA,AAAA,AAAApT,AAAAC,AAAAmT,AAAAA;AAAAlT,AAAA,AAAAC,AAAAiT,AAAA;AAAAhT,AAAA,AAAAD,AAAAiT,AAAA;AAAA/S,AAAA,AAAAF,AAAAiT,AAAA;AAAAlT,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8U,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzS,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4U;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1b;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4T,AAAA3T;;;AAAA,AAAA,AAAA,AAAA2T,AAAA,AAAAlV;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmV,AAAA3T;AAAA2T,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxT,AAAA,AAAAwT,AAAA,AAAA,AAAA,AAAA,AAAAvT,AAAAC,AAAAsT,AAAAA;AAAArT,AAAA,AAAAC,AAAAoT,AAAA;AAAAnT,AAAA,AAAAD,AAAAoT,AAAA;AAAAlT,AAAA,AAAAF,AAAAoT,AAAA;AAAArT,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiV,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5S,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+U;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7b;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+T,AAAA9T;;;AAAA,AAAA,AAAA,AAAA8T,AAAA,AAAArV;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsV,AAAA9T;AAAA8T,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3T,AAAA,AAAA2T,AAAA,AAAA,AAAA,AAAA,AAAA1T,AAAAC,AAAAyT,AAAAA;AAAAxT,AAAA,AAAAC,AAAAuT,AAAA;AAAAtT,AAAA,AAAAD,AAAAuT,AAAA;AAAArT,AAAA,AAAAF,AAAAuT,AAAA;AAAAxT,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoV,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/S,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkV;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhc;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkU,AAAAjU;;;AAAA,AAAA,AAAA,AAAAiU,AAAA,AAAAxV;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyV,AAAAjU;AAAAiU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9T,AAAA,AAAA8T,AAAA,AAAA,AAAA,AAAA,AAAA7T,AAAAC,AAAA4T,AAAAA;AAAA3T,AAAA,AAAAC,AAAA0T,AAAA;AAAAzT,AAAA,AAAAD,AAAA0T,AAAA;AAAAxT,AAAA,AAAAF,AAAA0T,AAAA;AAAA3T,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuV,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlT,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqV;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnc;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqU,AAAApU;;;AAAA,AAAA,AAAA,AAAAoU,AAAA,AAAA3V;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4V,AAAApU;AAAAoU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjU,AAAA,AAAAiU,AAAA,AAAA,AAAA,AAAA,AAAAhU,AAAAC,AAAA+T,AAAAA;AAAA9T,AAAA,AAAAC,AAAA6T,AAAA;AAAA5T,AAAA,AAAAD,AAAA6T,AAAA;AAAA3T,AAAA,AAAAF,AAAA6T,AAAA;AAAA9T,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0V,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArT,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwV;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtc;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwU,AAAAvU;;;AAAA,AAAA,AAAA,AAAAuU,AAAA,AAAA9V;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+V,AAAAvU;AAAAuU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApU,AAAA,AAAAoU,AAAA,AAAA,AAAA,AAAA,AAAAnU,AAAAC,AAAAkU,AAAAA;AAAAjU,AAAA,AAAAC,AAAAgU,AAAA;AAAA/T,AAAA,AAAAD,AAAAgU,AAAA;AAAA9T,AAAA,AAAAF,AAAAgU,AAAA;AAAAjU,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6V,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxT,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2V;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzc;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2U,AAAA1U;;;AAAA,AAAA,AAAA,AAAA0U,AAAA,AAAAjW;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkW,AAAA1U;AAAA0U,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvU,AAAA,AAAAuU,AAAA,AAAA,AAAA,AAAA,AAAAtU,AAAAC,AAAAqU,AAAAA;AAAApU,AAAA,AAAAC,AAAAmU,AAAA;AAAAlU,AAAA,AAAAD,AAAAmU,AAAA;AAAAjU,AAAA,AAAAF,AAAAmU,AAAA;AAAApU,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgW,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3T,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8V;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5c;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8U,AAAA7U;;;AAAA,AAAA,AAAA,AAAA6U,AAAA,AAAApW;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqW,AAAA7U;AAAA6U,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1U,AAAA,AAAA0U,AAAA,AAAA,AAAA,AAAA,AAAAzU,AAAAC,AAAAwU,AAAAA;AAAAvU,AAAA,AAAAC,AAAAsU,AAAA;AAAArU,AAAA,AAAAD,AAAAsU,AAAA;AAAApU,AAAA,AAAAF,AAAAsU,AAAA;AAAAvU,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmW,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9T,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiW;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/c;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiV,AAAAhV;;;AAAA,AAAA,AAAA,AAAAgV,AAAA,AAAAvW;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwW,AAAAhV;AAAAgV,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7U,AAAA,AAAA6U,AAAA,AAAA,AAAA,AAAA,AAAA5U,AAAAC,AAAA2U,AAAAA;AAAA1U,AAAA,AAAAC,AAAAyU,AAAA;AAAAxU,AAAA,AAAAD,AAAAyU,AAAA;AAAAvU,AAAA,AAAAF,AAAAyU,AAAA;AAAA1U,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsW,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjU,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoW;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAld;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoV,AAAAnV;;;AAAA,AAAA,AAAA,AAAAmV,AAAA,AAAA1W;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2W,AAAAnV;AAAAmV,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhV,AAAA,AAAAgV,AAAA,AAAA,AAAA,AAAA,AAAA/U,AAAAC,AAAA8U,AAAAA;AAAA7U,AAAA,AAAAC,AAAA4U,AAAA;AAAA3U,AAAA,AAAAD,AAAA4U,AAAA;AAAA1U,AAAA,AAAAF,AAAA4U,AAAA;AAAA7U,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyW,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApU,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuW;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArd;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuV,AAAAtV;;;AAAA,AAAA,AAAA,AAAAsV,AAAA,AAAA7W;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8W,AAAAtV;AAAAsV,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnV,AAAA,AAAAmV,AAAA,AAAA,AAAA,AAAA,AAAAlV,AAAAC,AAAAiV,AAAAA;AAAAhV,AAAA,AAAAC,AAAA+U,AAAA;AAAA9U,AAAA,AAAAD,AAAA+U,AAAA;AAAA7U,AAAA,AAAAF,AAAA+U,AAAA;AAAAhV,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4W,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvU,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0W;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxd;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0V,AAAAzV;;;AAAA,AAAA,AAAA,AAAAyV,AAAA,AAAAhX;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAiX,AAAAzV;AAAAyV,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtV,AAAA,AAAAsV,AAAA,AAAA,AAAA,AAAA,AAAArV,AAAAC,AAAAoV,AAAAA;AAAAnV,AAAA,AAAAC,AAAAkV,AAAA;AAAAjV,AAAA,AAAAD,AAAAkV,AAAA;AAAAhV,AAAA,AAAAF,AAAAkV,AAAA;AAAAnV,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+W,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1U,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6W;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3d;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6V,AAAA5V;;;AAAA,AAAA,AAAA,AAAA4V,AAAA,AAAAnX;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoX,AAAA5V;AAAA4V,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzV,AAAA,AAAAyV,AAAA,AAAA,AAAA,AAAA,AAAAxV,AAAAC,AAAAuV,AAAAA;AAAAtV,AAAA,AAAAC,AAAAqV,AAAA;AAAApV,AAAA,AAAAD,AAAAqV,AAAA;AAAAnV,AAAA,AAAAF,AAAAqV,AAAA;AAAAtV,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkX,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7U,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgX;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9d;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgW,AAAA/V;;;AAAA,AAAA,AAAA,AAAA+V,AAAA,AAAAtX;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAuX,AAAA/V;AAAA+V,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5V,AAAA,AAAA4V,AAAA,AAAA,AAAA,AAAA,AAAA3V,AAAAC,AAAA0V,AAAAA;AAAAzV,AAAA,AAAAC,AAAAwV,AAAA;AAAAvV,AAAA,AAAAD,AAAAwV,AAAA;AAAAtV,AAAA,AAAAF,AAAAwV,AAAA;AAAAzV,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqX,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhV,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmX;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAje;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmW,AAAAlW;;;AAAA,AAAA,AAAA,AAAAkW,AAAA,AAAAzX;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0X,AAAAlW;AAAAkW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/V,AAAA,AAAA+V,AAAA,AAAA,AAAA,AAAA,AAAA9V,AAAAC,AAAA6V,AAAAA;AAAA5V,AAAA,AAAAC,AAAA2V,AAAA;AAAA1V,AAAA,AAAAD,AAAA2V,AAAA;AAAAzV,AAAA,AAAAF,AAAA2V,AAAA;AAAA5V,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwX,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnV,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsX;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApe;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsW,AAAArW;;;AAAA,AAAA,AAAA,AAAAqW,AAAA,AAAA5X;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6X,AAAArW;AAAAqW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlW,AAAA,AAAAkW,AAAA,AAAA,AAAA,AAAA,AAAAjW,AAAAC,AAAAgW,AAAAA;AAAA/V,AAAA,AAAAC,AAAA8V,AAAA;AAAA7V,AAAA,AAAAD,AAAA8V,AAAA;AAAA5V,AAAA,AAAAF,AAAA8V,AAAA;AAAA/V,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2X,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtV,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyX;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAve;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyW,AAAAxW;;;AAAA,AAAA,AAAA,AAAAwW,AAAA,AAAA/X;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgY,AAAAxW;AAAAwW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArW,AAAA,AAAAqW,AAAA,AAAA,AAAA,AAAA,AAAApW,AAAAC,AAAAmW,AAAAA;AAAAlW,AAAA,AAAAC,AAAAiW,AAAA;AAAAhW,AAAA,AAAAD,AAAAiW,AAAA;AAAA/V,AAAA,AAAAF,AAAAiW,AAAA;AAAAlW,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8X,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzV,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4X;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1e;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4W,AAAA3W;;;AAAA,AAAA,AAAA,AAAA2W,AAAA,AAAAlY;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmY,AAAA3W;AAAA2W,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxW,AAAA,AAAAwW,AAAA,AAAA,AAAA,AAAA,AAAAvW,AAAAC,AAAAsW,AAAAA;AAAArW,AAAA,AAAAC,AAAAoW,AAAA;AAAAnW,AAAA,AAAAD,AAAAoW,AAAA;AAAAlW,AAAA,AAAAF,AAAAoW,AAAA;AAAArW,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAiY,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5V,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+X;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7e;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+W,AAAA9W;;;AAAA,AAAA,AAAA,AAAA8W,AAAA,AAAArY;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsY,AAAA9W;AAAA8W,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3W,AAAA,AAAA2W,AAAA,AAAA,AAAA,AAAA,AAAA1W,AAAAC,AAAAyW,AAAAA;AAAAxW,AAAA,AAAAC,AAAAuW,AAAA;AAAAtW,AAAA,AAAAD,AAAAuW,AAAA;AAAArW,AAAA,AAAAF,AAAAuW,AAAA;AAAAxW,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoY,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/V,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkY;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhf;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkX,AAAAjX;;;AAAA,AAAA,AAAA,AAAAiX,AAAA,AAAAxY;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyY,AAAAjX;AAAAiX,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9W,AAAA,AAAA8W,AAAA,AAAA,AAAA,AAAA,AAAA7W,AAAAC,AAAA4W,AAAAA;AAAA3W,AAAA,AAAAC,AAAA0W,AAAA;AAAAzW,AAAA,AAAAD,AAAA0W,AAAA;AAAAxW,AAAA,AAAAF,AAAA0W,AAAA;AAAA3W,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuY,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlW,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqY;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnf;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqX,AAAApX;;;AAAA,AAAA,AAAA,AAAAoX,AAAA,AAAA3Y;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4Y,AAAApX;AAAAoX,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjX,AAAA,AAAAiX,AAAA,AAAA,AAAA,AAAA,AAAAhX,AAAAC,AAAA+W,AAAAA;AAAA9W,AAAA,AAAAC,AAAA6W,AAAA;AAAA5W,AAAA,AAAAD,AAAA6W,AAAA;AAAA3W,AAAA,AAAAF,AAAA6W,AAAA;AAAA9W,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0Y,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArW,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwY;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtf;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwX,AAAAvX;;;AAAA,AAAA,AAAA,AAAAuX,AAAA,AAAA9Y;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+Y,AAAAvX;AAAAuX,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApX,AAAA,AAAAoX,AAAA,AAAA,AAAA,AAAA,AAAAnX,AAAAC,AAAAkX,AAAAA;AAAAjX,AAAA,AAAAC,AAAAgX,AAAA;AAAA/W,AAAA,AAAAD,AAAAgX,AAAA;AAAA9W,AAAA,AAAAF,AAAAgX,AAAA;AAAAjX,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6Y,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxW,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2Y;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzf;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2X,AAAA1X;;;AAAA,AAAA,AAAA,AAAA0X,AAAA,AAAAjZ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkZ,AAAA1X;AAAA0X,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvX,AAAA,AAAAuX,AAAA,AAAA,AAAA,AAAA,AAAAtX,AAAAC,AAAAqX,AAAAA;AAAApX,AAAA,AAAAC,AAAAmX,AAAA;AAAAlX,AAAA,AAAAD,AAAAmX,AAAA;AAAAjX,AAAA,AAAAF,AAAAmX,AAAA;AAAApX,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgZ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3W,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8Y;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5f;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8X,AAAA7X;;;AAAA,AAAA,AAAA,AAAA6X,AAAA,AAAApZ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqZ,AAAA7X;AAAA6X,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1X,AAAA,AAAA0X,AAAA,AAAA,AAAA,AAAA,AAAAzX,AAAAC,AAAAwX,AAAAA;AAAAvX,AAAA,AAAAC,AAAAsX,AAAA;AAAArX,AAAA,AAAAD,AAAAsX,AAAA;AAAApX,AAAA,AAAAF,AAAAsX,AAAA;AAAAvX,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmZ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9W,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiZ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/f;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiY,AAAAhY;;;AAAA,AAAA,AAAA,AAAAgY,AAAA,AAAAvZ;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwZ,AAAAhY;AAAAgY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7X,AAAA,AAAA6X,AAAA,AAAA,AAAA,AAAA,AAAA5X,AAAAC,AAAA2X,AAAAA;AAAA1X,AAAA,AAAAC,AAAAyX,AAAA;AAAAxX,AAAA,AAAAD,AAAAyX,AAAA;AAAAvX,AAAA,AAAAF,AAAAyX,AAAA;AAAA1X,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsZ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjX,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoZ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlgB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoY,AAAAnY;;;AAAA,AAAA,AAAA,AAAAmY,AAAA,AAAA1Z;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2Z,AAAAnY;AAAAmY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhY,AAAA,AAAAgY,AAAA,AAAA,AAAA,AAAA,AAAA/X,AAAAC,AAAA8X,AAAAA;AAAA7X,AAAA,AAAAC,AAAA4X,AAAA;AAAA3X,AAAA,AAAAD,AAAA4X,AAAA;AAAA1X,AAAA,AAAAF,AAAA4X,AAAA;AAAA7X,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyZ,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApX,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuZ;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArgB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuY,AAAAtY;;;AAAA,AAAA,AAAA,AAAAsY,AAAA,AAAA7Z;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8Z,AAAAtY;AAAAsY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnY,AAAA,AAAAmY,AAAA,AAAA,AAAA,AAAA,AAAAlY,AAAAC,AAAAiY,AAAAA;AAAAhY,AAAA,AAAAC,AAAA+X,AAAA;AAAA9X,AAAA,AAAAD,AAAA+X,AAAA;AAAA7X,AAAA,AAAAF,AAAA+X,AAAA;AAAAhY,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4Z,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvX,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0Z;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxgB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0Y,AAAAzY;;;AAAA,AAAA,AAAA,AAAAyY,AAAA,AAAAha;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAia,AAAAzY;AAAAyY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtY,AAAA,AAAAsY,AAAA,AAAA,AAAA,AAAA,AAAArY,AAAAC,AAAAoY,AAAAA;AAAAnY,AAAA,AAAAC,AAAAkY,AAAA;AAAAjY,AAAA,AAAAD,AAAAkY,AAAA;AAAAhY,AAAA,AAAAF,AAAAkY,AAAA;AAAAnY,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+Z,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1X,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6Z;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3gB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6Y,AAAA5Y;;;AAAA,AAAA,AAAA,AAAA4Y,AAAA,AAAAna;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAoa,AAAA5Y;AAAA4Y,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzY,AAAA,AAAAyY,AAAA,AAAA,AAAA,AAAA,AAAAxY,AAAAC,AAAAuY,AAAAA;AAAAtY,AAAA,AAAAC,AAAAqY,AAAA;AAAApY,AAAA,AAAAD,AAAAqY,AAAA;AAAAnY,AAAA,AAAAF,AAAAqY,AAAA;AAAAtY,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAka,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7X,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAga;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9gB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgZ,AAAA/Y;;;AAAA,AAAA,AAAA,AAAA+Y,AAAA,AAAAta;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAua,AAAA/Y;AAAA+Y,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5Y,AAAA,AAAA4Y,AAAA,AAAA,AAAA,AAAA,AAAA3Y,AAAAC,AAAA0Y,AAAAA;AAAAzY,AAAA,AAAAC,AAAAwY,AAAA;AAAAvY,AAAA,AAAAD,AAAAwY,AAAA;AAAAtY,AAAA,AAAAF,AAAAwY,AAAA;AAAAzY,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqa,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhY,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAma;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjhB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmZ,AAAAlZ;;;AAAA,AAAA,AAAA,AAAAkZ,AAAA,AAAAza;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0a,AAAAlZ;AAAAkZ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/Y,AAAA,AAAA+Y,AAAA,AAAA,AAAA,AAAA,AAAA9Y,AAAAC,AAAA6Y,AAAAA;AAAA5Y,AAAA,AAAAC,AAAA2Y,AAAA;AAAA1Y,AAAA,AAAAD,AAAA2Y,AAAA;AAAAzY,AAAA,AAAAF,AAAA2Y,AAAA;AAAA5Y,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwa,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnY,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsa;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAphB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsZ,AAAArZ;;;AAAA,AAAA,AAAA,AAAAqZ,AAAA,AAAA5a;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6a,AAAArZ;AAAAqZ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlZ,AAAA,AAAAkZ,AAAA,AAAA,AAAA,AAAA,AAAAjZ,AAAAC,AAAAgZ,AAAAA;AAAA/Y,AAAA,AAAAC,AAAA8Y,AAAA;AAAA7Y,AAAA,AAAAD,AAAA8Y,AAAA;AAAA5Y,AAAA,AAAAF,AAAA8Y,AAAA;AAAA/Y,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2a,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtY,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAya;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvhB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyZ,AAAAxZ;;;AAAA,AAAA,AAAA,AAAAwZ,AAAA,AAAA/a;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgb,AAAAxZ;AAAAwZ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArZ,AAAA,AAAAqZ,AAAA,AAAA,AAAA,AAAA,AAAApZ,AAAAC,AAAAmZ,AAAAA;AAAAlZ,AAAA,AAAAC,AAAAiZ,AAAA;AAAAhZ,AAAA,AAAAD,AAAAiZ,AAAA;AAAA/Y,AAAA,AAAAF,AAAAiZ,AAAA;AAAAlZ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8a,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzY,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4a;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1hB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4Z,AAAA3Z;;;AAAA,AAAA,AAAA,AAAA2Z,AAAA,AAAAlb;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmb,AAAA3Z;AAAA2Z,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxZ,AAAA,AAAAwZ,AAAA,AAAA,AAAA,AAAA,AAAAvZ,AAAAC,AAAAsZ,AAAAA;AAAArZ,AAAA,AAAAC,AAAAoZ,AAAA;AAAAnZ,AAAA,AAAAD,AAAAoZ,AAAA;AAAAlZ,AAAA,AAAAF,AAAAoZ,AAAA;AAAArZ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAib,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5Y,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+a;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7hB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+Z,AAAA9Z;;;AAAA,AAAA,AAAA,AAAA8Z,AAAA,AAAArb;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsb,AAAA9Z;AAAA8Z,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3Z,AAAA,AAAA2Z,AAAA,AAAA,AAAA,AAAA,AAAA1Z,AAAAC,AAAAyZ,AAAAA;AAAAxZ,AAAA,AAAAC,AAAAuZ,AAAA;AAAAtZ,AAAA,AAAAD,AAAAuZ,AAAA;AAAArZ,AAAA,AAAAF,AAAAuZ,AAAA;AAAAxZ,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAob,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/Y,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkb;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhiB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAka,AAAAja;;;AAAA,AAAA,AAAA,AAAAia,AAAA,AAAAxb;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyb,AAAAja;AAAAia,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9Z,AAAA,AAAA8Z,AAAA,AAAA,AAAA,AAAA,AAAA7Z,AAAAC,AAAA4Z,AAAAA;AAAA3Z,AAAA,AAAAC,AAAA0Z,AAAA;AAAAzZ,AAAA,AAAAD,AAAA0Z,AAAA;AAAAxZ,AAAA,AAAAF,AAAA0Z,AAAA;AAAA3Z,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAub,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlZ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqb;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAniB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqa,AAAApa;;;AAAA,AAAA,AAAA,AAAAoa,AAAA,AAAA3b;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4b,AAAApa;AAAAoa,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAja,AAAA,AAAAia,AAAA,AAAA,AAAA,AAAA,AAAAha,AAAAC,AAAA+Z,AAAAA;AAAA9Z,AAAA,AAAAC,AAAA6Z,AAAA;AAAA5Z,AAAA,AAAAD,AAAA6Z,AAAA;AAAA3Z,AAAA,AAAAF,AAAA6Z,AAAA;AAAA9Z,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0b,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArZ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwb;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtiB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwa,AAAAva;;;AAAA,AAAA,AAAA,AAAAua,AAAA,AAAA9b;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+b,AAAAva;AAAAua,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApa,AAAA,AAAAoa,AAAA,AAAA,AAAA,AAAA,AAAAna,AAAAC,AAAAka,AAAAA;AAAAja,AAAA,AAAAC,AAAAga,AAAA;AAAA/Z,AAAA,AAAAD,AAAAga,AAAA;AAAA9Z,AAAA,AAAAF,AAAAga,AAAA;AAAAja,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6b,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxZ,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2b;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAziB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2a,AAAA1a;;;AAAA,AAAA,AAAA,AAAA0a,AAAA,AAAAjc;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkc,AAAA1a;AAAA0a,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAva,AAAA,AAAAua,AAAA,AAAA,AAAA,AAAA,AAAAta,AAAAC,AAAAqa,AAAAA;AAAApa,AAAA,AAAAC,AAAAma,AAAA;AAAAla,AAAA,AAAAD,AAAAma,AAAA;AAAAja,AAAA,AAAAF,AAAAma,AAAA;AAAApa,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgc,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3Z,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8b;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5iB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8a,AAAA7a;;;AAAA,AAAA,AAAA,AAAA6a,AAAA,AAAApc;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqc,AAAA7a;AAAA6a,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1a,AAAA,AAAA0a,AAAA,AAAA,AAAA,AAAA,AAAAza,AAAAC,AAAAwa,AAAAA;AAAAva,AAAA,AAAAC,AAAAsa,AAAA;AAAAra,AAAA,AAAAD,AAAAsa,AAAA;AAAApa,AAAA,AAAAF,AAAAsa,AAAA;AAAAva,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmc,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9Z,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAic;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/iB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAib,AAAAhb;;;AAAA,AAAA,AAAA,AAAAgb,AAAA,AAAAvc;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwc,AAAAhb;AAAAgb,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7a,AAAA,AAAA6a,AAAA,AAAA,AAAA,AAAA,AAAA5a,AAAAC,AAAA2a,AAAAA;AAAA1a,AAAA,AAAAC,AAAAya,AAAA;AAAAxa,AAAA,AAAAD,AAAAya,AAAA;AAAAva,AAAA,AAAAF,AAAAya,AAAA;AAAA1a,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsc,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAja,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoc;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAljB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAob,AAAAnb;;;AAAA,AAAA,AAAA,AAAAmb,AAAA,AAAA1c;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2c,AAAAnb;AAAAmb,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhb,AAAA,AAAAgb,AAAA,AAAA,AAAA,AAAA,AAAA/a,AAAAC,AAAA8a,AAAAA;AAAA7a,AAAA,AAAAC,AAAA4a,AAAA;AAAA3a,AAAA,AAAAD,AAAA4a,AAAA;AAAA1a,AAAA,AAAAF,AAAA4a,AAAA;AAAA7a,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyc,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApa,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuc;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArjB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAub,AAAAtb;;;AAAA,AAAA,AAAA,AAAAsb,AAAA,AAAA7c;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8c,AAAAtb;AAAAsb,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnb,AAAA,AAAAmb,AAAA,AAAA,AAAA,AAAA,AAAAlb,AAAAC,AAAAib,AAAAA;AAAAhb,AAAA,AAAAC,AAAA+a,AAAA;AAAA9a,AAAA,AAAAD,AAAA+a,AAAA;AAAA7a,AAAA,AAAAF,AAAA+a,AAAA;AAAAhb,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4c,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAva,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0c;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxjB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0b,AAAAzb;;;AAAA,AAAA,AAAA,AAAAyb,AAAA,AAAAhd;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAid,AAAAzb;AAAAyb,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtb,AAAA,AAAAsb,AAAA,AAAA,AAAA,AAAA,AAAArb,AAAAC,AAAAob,AAAAA;AAAAnb,AAAA,AAAAC,AAAAkb,AAAA;AAAAjb,AAAA,AAAAD,AAAAkb,AAAA;AAAAhb,AAAA,AAAAF,AAAAkb,AAAA;AAAAnb,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+c,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1a,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6c;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3jB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6b,AAAA5b;;;AAAA,AAAA,AAAA,AAAA4b,AAAA,AAAAnd;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAod,AAAA5b;AAAA4b,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzb,AAAA,AAAAyb,AAAA,AAAA,AAAA,AAAA,AAAAxb,AAAAC,AAAAub,AAAAA;AAAAtb,AAAA,AAAAC,AAAAqb,AAAA;AAAApb,AAAA,AAAAD,AAAAqb,AAAA;AAAAnb,AAAA,AAAAF,AAAAqb,AAAA;AAAAtb,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkd,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7a,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgd;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9jB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgc,AAAA/b;;;AAAA,AAAA,AAAA,AAAA+b,AAAA,AAAAtd;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAud,AAAA/b;AAAA+b,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5b,AAAA,AAAA4b,AAAA,AAAA,AAAA,AAAA,AAAA3b,AAAAC,AAAA0b,AAAAA;AAAAzb,AAAA,AAAAC,AAAAwb,AAAA;AAAAvb,AAAA,AAAAD,AAAAwb,AAAA;AAAAtb,AAAA,AAAAF,AAAAwb,AAAA;AAAAzb,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqd,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhb,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmd;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjkB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmc,AAAAlc;;;AAAA,AAAA,AAAA,AAAAkc,AAAA,AAAAzd;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0d,AAAAlc;AAAAkc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/b,AAAA,AAAA+b,AAAA,AAAA,AAAA,AAAA,AAAA9b,AAAAC,AAAA6b,AAAAA;AAAA5b,AAAA,AAAAC,AAAA2b,AAAA;AAAA1b,AAAA,AAAAD,AAAA2b,AAAA;AAAAzb,AAAA,AAAAF,AAAA2b,AAAA;AAAA5b,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwd,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnb,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsd;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApkB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsc,AAAArc;;;AAAA,AAAA,AAAA,AAAAqc,AAAA,AAAA5d;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6d,AAAArc;AAAAqc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlc,AAAA,AAAAkc,AAAA,AAAA,AAAA,AAAA,AAAAjc,AAAAC,AAAAgc,AAAAA;AAAA/b,AAAA,AAAAC,AAAA8b,AAAA;AAAA7b,AAAA,AAAAD,AAAA8b,AAAA;AAAA5b,AAAA,AAAAF,AAAA8b,AAAA;AAAA/b,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2d,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtb,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyd;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvkB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyc,AAAAxc;;;AAAA,AAAA,AAAA,AAAAwc,AAAA,AAAA/d;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAge,AAAAxc;AAAAwc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArc,AAAA,AAAAqc,AAAA,AAAA,AAAA,AAAA,AAAApc,AAAAC,AAAAmc,AAAAA;AAAAlc,AAAA,AAAAC,AAAAic,AAAA;AAAAhc,AAAA,AAAAD,AAAAic,AAAA;AAAA/b,AAAA,AAAAF,AAAAic,AAAA;AAAAlc,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8d,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzb,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4d;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1kB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4c,AAAA3c;;;AAAA,AAAA,AAAA,AAAA2c,AAAA,AAAAle;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAme,AAAA3c;AAAA2c,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxc,AAAA,AAAAwc,AAAA,AAAA,AAAA,AAAA,AAAAvc,AAAAC,AAAAsc,AAAAA;AAAArc,AAAA,AAAAC,AAAAoc,AAAA;AAAAnc,AAAA,AAAAD,AAAAoc,AAAA;AAAAlc,AAAA,AAAAF,AAAAoc,AAAA;AAAArc,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAie,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5b,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+d;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7kB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+c,AAAA9c;;;AAAA,AAAA,AAAA,AAAA8c,AAAA,AAAAre;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAse,AAAA9c;AAAA8c,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3c,AAAA,AAAA2c,AAAA,AAAA,AAAA,AAAA,AAAA1c,AAAAC,AAAAyc,AAAAA;AAAAxc,AAAA,AAAAC,AAAAuc,AAAA;AAAAtc,AAAA,AAAAD,AAAAuc,AAAA;AAAArc,AAAA,AAAAF,AAAAuc,AAAA;AAAAxc,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAoe,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/b,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAke;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhlB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkd,AAAAjd;;;AAAA,AAAA,AAAA,AAAAid,AAAA,AAAAxe;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAye,AAAAjd;AAAAid,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9c,AAAA,AAAA8c,AAAA,AAAA,AAAA,AAAA,AAAA7c,AAAAC,AAAA4c,AAAAA;AAAA3c,AAAA,AAAAC,AAAA0c,AAAA;AAAAzc,AAAA,AAAAD,AAAA0c,AAAA;AAAAxc,AAAA,AAAAF,AAAA0c,AAAA;AAAA3c,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAue,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlc,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqe;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnlB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqd,AAAApd;;;AAAA,AAAA,AAAA,AAAAod,AAAA,AAAA3e;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4e,AAAApd;AAAAod,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjd,AAAA,AAAAid,AAAA,AAAA,AAAA,AAAA,AAAAhd,AAAAC,AAAA+c,AAAAA;AAAA9c,AAAA,AAAAC,AAAA6c,AAAA;AAAA5c,AAAA,AAAAD,AAAA6c,AAAA;AAAA3c,AAAA,AAAAF,AAAA6c,AAAA;AAAA9c,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0e,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArc,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwe;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtlB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwd,AAAAvd;;;AAAA,AAAA,AAAA,AAAAud,AAAA,AAAA9e;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+e,AAAAvd;AAAAud,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApd,AAAA,AAAAod,AAAA,AAAA,AAAA,AAAA,AAAAnd,AAAAC,AAAAkd,AAAAA;AAAAjd,AAAA,AAAAC,AAAAgd,AAAA;AAAA/c,AAAA,AAAAD,AAAAgd,AAAA;AAAA9c,AAAA,AAAAF,AAAAgd,AAAA;AAAAjd,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6e,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxc,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2e;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzlB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2d,AAAA1d;;;AAAA,AAAA,AAAA,AAAA0d,AAAA,AAAAjf;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkf,AAAA1d;AAAA0d,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvd,AAAA,AAAAud,AAAA,AAAA,AAAA,AAAA,AAAAtd,AAAAC,AAAAqd,AAAAA;AAAApd,AAAA,AAAAC,AAAAmd,AAAA;AAAAld,AAAA,AAAAD,AAAAmd,AAAA;AAAAjd,AAAA,AAAAF,AAAAmd,AAAA;AAAApd,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgf,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3c,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8e;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5lB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8d,AAAA7d;;;AAAA,AAAA,AAAA,AAAA6d,AAAA,AAAApf;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqf,AAAA7d;AAAA6d,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1d,AAAA,AAAA0d,AAAA,AAAA,AAAA,AAAA,AAAAzd,AAAAC,AAAAwd,AAAAA;AAAAvd,AAAA,AAAAC,AAAAsd,AAAA;AAAArd,AAAA,AAAAD,AAAAsd,AAAA;AAAApd,AAAA,AAAAF,AAAAsd,AAAA;AAAAvd,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmf,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9c,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAif;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/lB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAie,AAAAhe;;;AAAA,AAAA,AAAA,AAAAge,AAAA,AAAAvf;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwf,AAAAhe;AAAAge,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7d,AAAA,AAAA6d,AAAA,AAAA,AAAA,AAAA,AAAA5d,AAAAC,AAAA2d,AAAAA;AAAA1d,AAAA,AAAAC,AAAAyd,AAAA;AAAAxd,AAAA,AAAAD,AAAAyd,AAAA;AAAAvd,AAAA,AAAAF,AAAAyd,AAAA;AAAA1d,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsf,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjd,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAof;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlmB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoe,AAAAne;;;AAAA,AAAA,AAAA,AAAAme,AAAA,AAAA1f;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2f,AAAAne;AAAAme,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhe,AAAA,AAAAge,AAAA,AAAA,AAAA,AAAA,AAAA/d,AAAAC,AAAA8d,AAAAA;AAAA7d,AAAA,AAAAC,AAAA4d,AAAA;AAAA3d,AAAA,AAAAD,AAAA4d,AAAA;AAAA1d,AAAA,AAAAF,AAAA4d,AAAA;AAAA7d,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyf,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApd,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuf;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArmB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAue,AAAAte;;;AAAA,AAAA,AAAA,AAAAse,AAAA,AAAA7f;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8f,AAAAte;AAAAse,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAne,AAAA,AAAAme,AAAA,AAAA,AAAA,AAAA,AAAAle,AAAAC,AAAAie,AAAAA;AAAAhe,AAAA,AAAAC,AAAA+d,AAAA;AAAA9d,AAAA,AAAAD,AAAA+d,AAAA;AAAA7d,AAAA,AAAAF,AAAA+d,AAAA;AAAAhe,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4f,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvd,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0f;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxmB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0e,AAAAze;;;AAAA,AAAA,AAAA,AAAAye,AAAA,AAAAhgB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAigB,AAAAze;AAAAye,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAte,AAAA,AAAAse,AAAA,AAAA,AAAA,AAAA,AAAAre,AAAAC,AAAAoe,AAAAA;AAAAne,AAAA,AAAAC,AAAAke,AAAA;AAAAje,AAAA,AAAAD,AAAAke,AAAA;AAAAhe,AAAA,AAAAF,AAAAke,AAAA;AAAAne,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+f,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1d,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6f;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3mB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6e,AAAA5e;;;AAAA,AAAA,AAAA,AAAA4e,AAAA,AAAAngB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAogB,AAAA5e;AAAA4e,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAze,AAAA,AAAAye,AAAA,AAAA,AAAA,AAAA,AAAAxe,AAAAC,AAAAue,AAAAA;AAAAte,AAAA,AAAAC,AAAAqe,AAAA;AAAApe,AAAA,AAAAD,AAAAqe,AAAA;AAAAne,AAAA,AAAAF,AAAAqe,AAAA;AAAAte,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkgB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7d,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAggB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9mB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgf,AAAA/e;;;AAAA,AAAA,AAAA,AAAA+e,AAAA,AAAAtgB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAugB,AAAA/e;AAAA+e,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5e,AAAA,AAAA4e,AAAA,AAAA,AAAA,AAAA,AAAA3e,AAAAC,AAAA0e,AAAAA;AAAAze,AAAA,AAAAC,AAAAwe,AAAA;AAAAve,AAAA,AAAAD,AAAAwe,AAAA;AAAAte,AAAA,AAAAF,AAAAwe,AAAA;AAAAze,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqgB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhe,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmgB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjnB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmf,AAAAlf;;;AAAA,AAAA,AAAA,AAAAkf,AAAA,AAAAzgB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0gB,AAAAlf;AAAAkf,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/e,AAAA,AAAA+e,AAAA,AAAA,AAAA,AAAA,AAAA9e,AAAAC,AAAA6e,AAAAA;AAAA5e,AAAA,AAAAC,AAAA2e,AAAA;AAAA1e,AAAA,AAAAD,AAAA2e,AAAA;AAAAze,AAAA,AAAAF,AAAA2e,AAAA;AAAA5e,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwgB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAne,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsgB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApnB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsf,AAAArf;;;AAAA,AAAA,AAAA,AAAAqf,AAAA,AAAA5gB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6gB,AAAArf;AAAAqf,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlf,AAAA,AAAAkf,AAAA,AAAA,AAAA,AAAA,AAAAjf,AAAAC,AAAAgf,AAAAA;AAAA/e,AAAA,AAAAC,AAAA8e,AAAA;AAAA7e,AAAA,AAAAD,AAAA8e,AAAA;AAAA5e,AAAA,AAAAF,AAAA8e,AAAA;AAAA/e,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2gB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAte,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAygB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvnB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyf,AAAAxf;;;AAAA,AAAA,AAAA,AAAAwf,AAAA,AAAA/gB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAghB,AAAAxf;AAAAwf,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArf,AAAA,AAAAqf,AAAA,AAAA,AAAA,AAAA,AAAApf,AAAAC,AAAAmf,AAAAA;AAAAlf,AAAA,AAAAC,AAAAif,AAAA;AAAAhf,AAAA,AAAAD,AAAAif,AAAA;AAAA/e,AAAA,AAAAF,AAAAif,AAAA;AAAAlf,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8gB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAze,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4gB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1nB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4f,AAAA3f;;;AAAA,AAAA,AAAA,AAAA2f,AAAA,AAAAlhB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmhB,AAAA3f;AAAA2f,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxf,AAAA,AAAAwf,AAAA,AAAA,AAAA,AAAA,AAAAvf,AAAAC,AAAAsf,AAAAA;AAAArf,AAAA,AAAAC,AAAAof,AAAA;AAAAnf,AAAA,AAAAD,AAAAof,AAAA;AAAAlf,AAAA,AAAAF,AAAAof,AAAA;AAAArf,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAihB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5e,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+gB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7nB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+f,AAAA9f;;;AAAA,AAAA,AAAA,AAAA8f,AAAA,AAAArhB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAshB,AAAA9f;AAAA8f,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3f,AAAA,AAAA2f,AAAA,AAAA,AAAA,AAAA,AAAA1f,AAAAC,AAAAyf,AAAAA;AAAAxf,AAAA,AAAAC,AAAAuf,AAAA;AAAAtf,AAAA,AAAAD,AAAAuf,AAAA;AAAArf,AAAA,AAAAF,AAAAuf,AAAA;AAAAxf,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAohB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/e,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkhB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhoB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkgB,AAAAjgB;;;AAAA,AAAA,AAAA,AAAAigB,AAAA,AAAAxhB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAyhB,AAAAjgB;AAAAigB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9f,AAAA,AAAA8f,AAAA,AAAA,AAAA,AAAA,AAAA7f,AAAAC,AAAA4f,AAAAA;AAAA3f,AAAA,AAAAC,AAAA0f,AAAA;AAAAzf,AAAA,AAAAD,AAAA0f,AAAA;AAAAxf,AAAA,AAAAF,AAAA0f,AAAA;AAAA3f,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAuhB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAlf,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqhB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnoB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqgB,AAAApgB;;;AAAA,AAAA,AAAA,AAAAogB,AAAA,AAAA3hB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4hB,AAAApgB;AAAAogB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjgB,AAAA,AAAAigB,AAAA,AAAA,AAAA,AAAA,AAAAhgB,AAAAC,AAAA+f,AAAAA;AAAA9f,AAAA,AAAAC,AAAA6f,AAAA;AAAA5f,AAAA,AAAAD,AAAA6f,AAAA;AAAA3f,AAAA,AAAAF,AAAA6f,AAAA;AAAA9f,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0hB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAArf,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwhB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtoB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwgB,AAAAvgB;;;AAAA,AAAA,AAAA,AAAAugB,AAAA,AAAA9hB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+hB,AAAAvgB;AAAAugB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApgB,AAAA,AAAAogB,AAAA,AAAA,AAAA,AAAA,AAAAngB,AAAAC,AAAAkgB,AAAAA;AAAAjgB,AAAA,AAAAC,AAAAggB,AAAA;AAAA/f,AAAA,AAAAD,AAAAggB,AAAA;AAAA9f,AAAA,AAAAF,AAAAggB,AAAA;AAAAjgB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6hB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxf,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2hB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzoB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2gB,AAAA1gB;;;AAAA,AAAA,AAAA,AAAA0gB,AAAA,AAAAjiB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAkiB,AAAA1gB;AAAA0gB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvgB,AAAA,AAAAugB,AAAA,AAAA,AAAA,AAAA,AAAAtgB,AAAAC,AAAAqgB,AAAAA;AAAApgB,AAAA,AAAAC,AAAAmgB,AAAA;AAAAlgB,AAAA,AAAAD,AAAAmgB,AAAA;AAAAjgB,AAAA,AAAAF,AAAAmgB,AAAA;AAAApgB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAgiB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3f,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8hB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5oB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8gB,AAAA7gB;;;AAAA,AAAA,AAAA,AAAA6gB,AAAA,AAAApiB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqiB,AAAA7gB;AAAA6gB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1gB,AAAA,AAAA0gB,AAAA,AAAA,AAAA,AAAA,AAAAzgB,AAAAC,AAAAwgB,AAAAA;AAAAvgB,AAAA,AAAAC,AAAAsgB,AAAA;AAAArgB,AAAA,AAAAD,AAAAsgB,AAAA;AAAApgB,AAAA,AAAAF,AAAAsgB,AAAA;AAAAvgB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmiB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9f,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAiiB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/oB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAihB,AAAAhhB;;;AAAA,AAAA,AAAA,AAAAghB,AAAA,AAAAviB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwiB,AAAAhhB;AAAAghB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7gB,AAAA,AAAA6gB,AAAA,AAAA,AAAA,AAAA,AAAA5gB,AAAAC,AAAA2gB,AAAAA;AAAA1gB,AAAA,AAAAC,AAAAygB,AAAA;AAAAxgB,AAAA,AAAAD,AAAAygB,AAAA;AAAAvgB,AAAA,AAAAF,AAAAygB,AAAA;AAAA1gB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAsiB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjgB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAoiB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlpB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAohB,AAAAnhB;;;AAAA,AAAA,AAAA,AAAAmhB,AAAA,AAAA1iB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2iB,AAAAnhB;AAAAmhB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhhB,AAAA,AAAAghB,AAAA,AAAA,AAAA,AAAA,AAAA/gB,AAAAC,AAAA8gB,AAAAA;AAAA7gB,AAAA,AAAAC,AAAA4gB,AAAA;AAAA3gB,AAAA,AAAAD,AAAA4gB,AAAA;AAAA1gB,AAAA,AAAAF,AAAA4gB,AAAA;AAAA7gB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAyiB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApgB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAuiB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArpB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuhB,AAAAthB;;;AAAA,AAAA,AAAA,AAAAshB,AAAA,AAAA7iB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8iB,AAAAthB;AAAAshB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnhB,AAAA,AAAAmhB,AAAA,AAAA,AAAA,AAAA,AAAAlhB,AAAAC,AAAAihB,AAAAA;AAAAhhB,AAAA,AAAAC,AAAA+gB,AAAA;AAAA9gB,AAAA,AAAAD,AAAA+gB,AAAA;AAAA7gB,AAAA,AAAAF,AAAA+gB,AAAA;AAAAhhB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4iB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvgB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0iB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxpB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0hB,AAAAzhB;;;AAAA,AAAA,AAAA,AAAAyhB,AAAA,AAAAhjB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAijB,AAAAzhB;AAAAyhB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAthB,AAAA,AAAAshB,AAAA,AAAA,AAAA,AAAA,AAAArhB,AAAAC,AAAAohB,AAAAA;AAAAnhB,AAAA,AAAAC,AAAAkhB,AAAA;AAAAjhB,AAAA,AAAAD,AAAAkhB,AAAA;AAAAhhB,AAAA,AAAAF,AAAAkhB,AAAA;AAAAnhB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+iB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1gB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6iB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3pB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6hB,AAAA5hB;;;AAAA,AAAA,AAAA,AAAA4hB,AAAA,AAAAnjB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAojB,AAAA5hB;AAAA4hB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzhB,AAAA,AAAAyhB,AAAA,AAAA,AAAA,AAAA,AAAAxhB,AAAAC,AAAAuhB,AAAAA;AAAAthB,AAAA,AAAAC,AAAAqhB,AAAA;AAAAphB,AAAA,AAAAD,AAAAqhB,AAAA;AAAAnhB,AAAA,AAAAF,AAAAqhB,AAAA;AAAAthB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkjB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7gB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgjB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9pB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgiB,AAAA/hB;;;AAAA,AAAA,AAAA,AAAA+hB,AAAA,AAAAtjB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAujB,AAAA/hB;AAAA+hB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5hB,AAAA,AAAA4hB,AAAA,AAAA,AAAA,AAAA,AAAA3hB,AAAAC,AAAA0hB,AAAAA;AAAAzhB,AAAA,AAAAC,AAAAwhB,AAAA;AAAAvhB,AAAA,AAAAD,AAAAwhB,AAAA;AAAAthB,AAAA,AAAAF,AAAAwhB,AAAA;AAAAzhB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqjB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhhB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmjB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjqB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmiB,AAAAliB;;;AAAA,AAAA,AAAA,AAAAkiB,AAAA,AAAAzjB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0jB,AAAAliB;AAAAkiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/hB,AAAA,AAAA+hB,AAAA,AAAA,AAAA,AAAA,AAAA9hB,AAAAC,AAAA6hB,AAAAA;AAAA5hB,AAAA,AAAAC,AAAA2hB,AAAA;AAAA1hB,AAAA,AAAAD,AAAA2hB,AAAA;AAAAzhB,AAAA,AAAAF,AAAA2hB,AAAA;AAAA5hB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwjB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnhB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsjB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAApqB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsiB,AAAAriB;;;AAAA,AAAA,AAAA,AAAAqiB,AAAA,AAAA5jB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6jB,AAAAriB;AAAAqiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAliB,AAAA,AAAAkiB,AAAA,AAAA,AAAA,AAAA,AAAAjiB,AAAAC,AAAAgiB,AAAAA;AAAA/hB,AAAA,AAAAC,AAAA8hB,AAAA;AAAA7hB,AAAA,AAAAD,AAAA8hB,AAAA;AAAA5hB,AAAA,AAAAF,AAAA8hB,AAAA;AAAA/hB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2jB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAthB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAyjB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvqB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyiB,AAAAxiB;;;AAAA,AAAA,AAAA,AAAAwiB,AAAA,AAAA/jB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgkB,AAAAxiB;AAAAwiB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAriB,AAAA,AAAAqiB,AAAA,AAAA,AAAA,AAAA,AAAApiB,AAAAC,AAAAmiB,AAAAA;AAAAliB,AAAA,AAAAC,AAAAiiB,AAAA;AAAAhiB,AAAA,AAAAD,AAAAiiB,AAAA;AAAA/hB,AAAA,AAAAF,AAAAiiB,AAAA;AAAAliB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8jB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzhB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4jB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1qB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4iB,AAAA3iB;;;AAAA,AAAA,AAAA,AAAA2iB,AAAA,AAAAlkB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmkB,AAAA3iB;AAAA2iB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxiB,AAAA,AAAAwiB,AAAA,AAAA,AAAA,AAAA,AAAAviB,AAAAC,AAAAsiB,AAAAA;AAAAriB,AAAA,AAAAC,AAAAoiB,AAAA;AAAAniB,AAAA,AAAAD,AAAAoiB,AAAA;AAAAliB,AAAA,AAAAF,AAAAoiB,AAAA;AAAAriB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAikB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5hB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+jB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7qB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+iB,AAAA9iB;;;AAAA,AAAA,AAAA,AAAA8iB,AAAA,AAAArkB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAskB,AAAA9iB;AAAA8iB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3iB,AAAA,AAAA2iB,AAAA,AAAA,AAAA,AAAA,AAAA1iB,AAAAC,AAAAyiB,AAAAA;AAAAxiB,AAAA,AAAAC,AAAAuiB,AAAA;AAAAtiB,AAAA,AAAAD,AAAAuiB,AAAA;AAAAriB,AAAA,AAAAF,AAAAuiB,AAAA;AAAAxiB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAokB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/hB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAkkB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAhrB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkjB,AAAAjjB;;;AAAA,AAAA,AAAA,AAAAijB,AAAA,AAAAxkB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAykB,AAAAjjB;AAAAijB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9iB,AAAA,AAAA8iB,AAAA,AAAA,AAAA,AAAA,AAAA7iB,AAAAC,AAAA4iB,AAAAA;AAAA3iB,AAAA,AAAAC,AAAA0iB,AAAA;AAAAziB,AAAA,AAAAD,AAAA0iB,AAAA;AAAAxiB,AAAA,AAAAF,AAAA0iB,AAAA;AAAA3iB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAukB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAliB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAqkB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAnrB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAqjB,AAAApjB;;;AAAA,AAAA,AAAA,AAAAojB,AAAA,AAAA3kB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA4kB,AAAApjB;AAAAojB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjjB,AAAA,AAAAijB,AAAA,AAAA,AAAA,AAAA,AAAAhjB,AAAAC,AAAA+iB,AAAAA;AAAA9iB,AAAA,AAAAC,AAAA6iB,AAAA;AAAA5iB,AAAA,AAAAD,AAAA6iB,AAAA;AAAA3iB,AAAA,AAAAF,AAAA6iB,AAAA;AAAA9iB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA0kB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAriB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAwkB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAtrB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwjB,AAAAvjB;;;AAAA,AAAA,AAAA,AAAAujB,AAAA,AAAA9kB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA+kB,AAAAvjB;AAAAujB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApjB,AAAA,AAAAojB,AAAA,AAAA,AAAA,AAAA,AAAAnjB,AAAAC,AAAAkjB,AAAAA;AAAAjjB,AAAA,AAAAC,AAAAgjB,AAAA;AAAA/iB,AAAA,AAAAD,AAAAgjB,AAAA;AAAA9iB,AAAA,AAAAF,AAAAgjB,AAAA;AAAAjjB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA6kB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAxiB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA2kB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAzrB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2jB,AAAA1jB;;;AAAA,AAAA,AAAA,AAAA0jB,AAAA,AAAAjlB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAklB,AAAA1jB;AAAA0jB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvjB,AAAA,AAAAujB,AAAA,AAAA,AAAA,AAAA,AAAAtjB,AAAAC,AAAAqjB,AAAAA;AAAApjB,AAAA,AAAAC,AAAAmjB,AAAA;AAAAljB,AAAA,AAAAD,AAAAmjB,AAAA;AAAAjjB,AAAA,AAAAF,AAAAmjB,AAAA;AAAApjB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAglB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA3iB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA8kB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA5rB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8jB,AAAA7jB;;;AAAA,AAAA,AAAA,AAAA6jB,AAAA,AAAAplB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAqlB,AAAA7jB;AAAA6jB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1jB,AAAA,AAAA0jB,AAAA,AAAA,AAAA,AAAA,AAAAzjB,AAAAC,AAAAwjB,AAAAA;AAAAvjB,AAAA,AAAAC,AAAAsjB,AAAA;AAAArjB,AAAA,AAAAD,AAAAsjB,AAAA;AAAApjB,AAAA,AAAAF,AAAAsjB,AAAA;AAAAvjB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAmlB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA9iB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAilB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA/rB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAikB,AAAAhkB;;;AAAA,AAAA,AAAA,AAAAgkB,AAAA,AAAAvlB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAwlB,AAAAhkB;AAAAgkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7jB,AAAA,AAAA6jB,AAAA,AAAA,AAAA,AAAA,AAAA5jB,AAAAC,AAAA2jB,AAAAA;AAAA1jB,AAAA,AAAAC,AAAAyjB,AAAA;AAAAxjB,AAAA,AAAAD,AAAAyjB,AAAA;AAAAvjB,AAAA,AAAAF,AAAAyjB,AAAA;AAAA1jB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAslB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAjjB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAolB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAlsB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAokB,AAAAnkB;;;AAAA,AAAA,AAAA,AAAAmkB,AAAA,AAAA1lB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA2lB,AAAAnkB;AAAAmkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhkB,AAAA,AAAAgkB,AAAA,AAAA,AAAA,AAAA,AAAA/jB,AAAAC,AAAA8jB,AAAAA;AAAA7jB,AAAA,AAAAC,AAAA4jB,AAAA;AAAA3jB,AAAA,AAAAD,AAAA4jB,AAAA;AAAA1jB,AAAA,AAAAF,AAAA4jB,AAAA;AAAA7jB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAylB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAApjB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAulB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAArsB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAukB,AAAAtkB;;;AAAA,AAAA,AAAA,AAAAskB,AAAA,AAAA7lB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA8lB,AAAAtkB;AAAAskB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnkB,AAAA,AAAAmkB,AAAA,AAAA,AAAA,AAAA,AAAAlkB,AAAAC,AAAAikB,AAAAA;AAAAhkB,AAAA,AAAAC,AAAA+jB,AAAA;AAAA9jB,AAAA,AAAAD,AAAA+jB,AAAA;AAAA7jB,AAAA,AAAAF,AAAA+jB,AAAA;AAAAhkB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA4lB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAvjB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA0lB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAxsB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0kB,AAAAzkB;;;AAAA,AAAA,AAAA,AAAAykB,AAAA,AAAAhmB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAimB,AAAAzkB;AAAAykB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtkB,AAAA,AAAAskB,AAAA,AAAA,AAAA,AAAA,AAAArkB,AAAAC,AAAAokB,AAAAA;AAAAnkB,AAAA,AAAAC,AAAAkkB,AAAA;AAAAjkB,AAAA,AAAAD,AAAAkkB,AAAA;AAAAhkB,AAAA,AAAAF,AAAAkkB,AAAA;AAAAnkB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA+lB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA1jB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA6lB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA3sB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA6kB,AAAA5kB;;;AAAA,AAAA,AAAA,AAAA4kB,AAAA,AAAAnmB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAomB,AAAA5kB;AAAA4kB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzkB,AAAA,AAAAykB,AAAA,AAAA,AAAA,AAAA,AAAAxkB,AAAAC,AAAAukB,AAAAA;AAAAtkB,AAAA,AAAAC,AAAAqkB,AAAA;AAAApkB,AAAA,AAAAD,AAAAqkB,AAAA;AAAAnkB,AAAA,AAAAF,AAAAqkB,AAAA;AAAAtkB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAkmB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA7jB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAgmB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA9sB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAglB,AAAA/kB;;;AAAA,AAAA,AAAA,AAAA+kB,AAAA,AAAAtmB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAumB,AAAA/kB;AAAA+kB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5kB,AAAA,AAAA4kB,AAAA,AAAA,AAAA,AAAA,AAAA3kB,AAAAC,AAAA0kB,AAAAA;AAAAzkB,AAAA,AAAAC,AAAAwkB,AAAA;AAAAvkB,AAAA,AAAAD,AAAAwkB,AAAA;AAAAtkB,AAAA,AAAAF,AAAAwkB,AAAA;AAAAzkB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAqmB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAhkB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAmmB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAjtB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmlB,AAAAllB;;;AAAA,AAAA,AAAA,AAAAklB,AAAA,AAAAzmB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA0mB,AAAAllB;AAAAklB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/kB,AAAA,AAAA+kB,AAAA,AAAA,AAAA,AAAA,AAAA9kB,AAAAC,AAAA6kB,AAAAA;AAAA5kB,AAAA,AAAAC,AAAA2kB,AAAA;AAAA1kB,AAAA,AAAAD,AAAA2kB,AAAA;AAAAzkB,AAAA,AAAAF,AAAA2kB,AAAA;AAAA5kB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAwmB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAnkB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAsmB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAptB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAslB,AAAArlB;;;AAAA,AAAA,AAAA,AAAAqlB,AAAA,AAAA5mB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAA6mB,AAAArlB;AAAAqlB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAllB,AAAA,AAAAklB,AAAA,AAAA,AAAA,AAAA,AAAAjlB,AAAAC,AAAAglB,AAAAA;AAAA/kB,AAAA,AAAAC,AAAA8kB,AAAA;AAAA7kB,AAAA,AAAAD,AAAA8kB,AAAA;AAAA5kB,AAAA,AAAAF,AAAA8kB,AAAA;AAAA/kB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA2mB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAtkB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAymB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAAvtB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAylB,AAAAxlB;;;AAAA,AAAA,AAAA,AAAAwlB,AAAA,AAAA/mB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAgnB,AAAAxlB;AAAAwlB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArlB,AAAA,AAAAqlB,AAAA,AAAA,AAAA,AAAA,AAAAplB,AAAAC,AAAAmlB,AAAAA;AAAAllB,AAAA,AAAAC,AAAAilB,AAAA;AAAAhlB,AAAA,AAAAD,AAAAilB,AAAA;AAAA/kB,AAAA,AAAAF,AAAAilB,AAAA;AAAAllB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAA8mB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAAzkB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA4mB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA1tB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4lB,AAAA3lB;;;AAAA,AAAA,AAAA,AAAA2lB,AAAA,AAAAlnB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAmnB,AAAA3lB;AAAA2lB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxlB,AAAA,AAAAwlB,AAAA,AAAA,AAAA,AAAA,AAAAvlB,AAAAC,AAAAslB,AAAAA;AAAArlB,AAAA,AAAAC,AAAAolB,AAAA;AAAAnlB,AAAA,AAAAD,AAAAolB,AAAA;AAAAllB,AAAA,AAAAF,AAAAolB,AAAA;AAAArlB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAinB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA5kB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAA+mB;;;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAAC,AAAA,AAAA7tB;AAAA,AAAA,AAAA8H,AAAA;AAAA,AAAA,AAAApH,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAoH,AAAA,AAAA,AAAAnH;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAjH,AAAA,AAAAiH,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+lB,AAAA9lB;;;AAAA,AAAA,AAAA,AAAA8lB,AAAA,AAAArnB;AAAA,AAAA,AAAAwB,AAAA,AAAAC,AAAA,AAAAzB;AAAAsnB,AAAA9lB;AAAA8lB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3lB,AAAA,AAAA2lB,AAAA,AAAA,AAAA,AAAA,AAAA1lB,AAAAC,AAAAylB,AAAAA;AAAAxlB,AAAA,AAAAC,AAAAulB,AAAA;AAAAtlB,AAAA,AAAAD,AAAAulB,AAAA;AAAArlB,AAAA,AAAAF,AAAAulB,AAAA;AAAAxlB,AAAA,AAAAI,AAAAC,AAAAL;AAAAM,AAAA,AAAAC,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAAK;AAAAA;;AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAAN,AAAAG,AAA+ChC;;;AAA/C,AAAA,AAAAonB,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAE;AAAA,AAAA,AAAA/kB,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnC,AAAAknB;;;AAAA","names",["com.fulcrologic.fulcro.dom/element-marker","js/React.createElement","G__60937","G__60938","goog.object/get","com.fulcrologic.fulcro.dom/element?","x","cljs.core/object?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/def-impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/keyword?","cljs.spec.alpha/or-spec-impl","p1__60939#","p1__60940#","cljs.core/nil?","cljs.core/map?","cljs.spec.alpha/rep-impl","p1__60941#","cljs.core/string?","cljs.core/number?","cljs.core/vector?","cljs.core/seq?","cljs.core/array?","com.fulcrologic.fulcro.dom/render","component","el","js/ReactDOM.render","com.fulcrologic.fulcro.dom/render-to-str","c","js/ReactDOMServer.renderToString","var_args","G__60963","com.fulcrologic.fulcro.dom/node","js/Error","js/ReactDOM.findDOMNode","name","G__60965","G__60975","com.fulcrologic.fulcro.dom/create-element","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq60970","G__60971","cljs.core/first","cljs.core/next","G__60972","self__4717__auto__","tag","com.fulcrologic.fulcro.dom.create_element.cljs$core$IFn$_invoke$arity$2","opts","children","com.fulcrologic.fulcro.dom/convert-props","props","cljs.core/clj->js","com.fulcrologic.fulcro.dom/macro-create-element*","arr","com.fulcrologic.fulcro.dom/update-state","next-props","value","on-change","goog.object/getValueByKeys","next-state","inputRef","G__60980","G__60981","G__60982","goog.object/extend","goog.object/set","goog.object/remove","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.dom","js/com.fulcrologic.fulcro.dom.form-elements?","com.fulcrologic.fulcro.dom/form-elements?","com.fulcrologic.fulcro.dom/is-form-element?","element","and__4120__auto__","G__60984","clojure.string/lower-case","com.fulcrologic.fulcro.dom/wrap-form-element","ctor","this","state","G__60993","G__60994","goog/bind","G__60990","G__60991","G__60992","js/React.Component","js/goog.inherits","x60995","event","temp__5753__auto__","handler","new-props","state-value","this-node","value-node","G__60996","G__60997","p1__60987#","goog.dom/findNode","element-value","js/goog.DEBUG","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","real-factory","js/React.createFactory","temp__5751__auto__","r","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","p","com.fulcrologic.fulcro.dom/wrapped-input","com.fulcrologic.fulcro.dom/wrapped-textarea","com.fulcrologic.fulcro.dom/wrapped-option","com.fulcrologic.fulcro.dom/wrapped-select","com.fulcrologic.fulcro.dom/arr-append*","com.fulcrologic.fulcro.dom/arr-append","tail","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","G__61011","G__61021","com.fulcrologic.fulcro.dom/macro-create-element","type","args","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","csskw","vec__61022","seq__61023","cljs.core/seq","first__61024","head","f","G__61025","G__61026","com.fulcrologic.fulcro.dom-common/add-kwprops-to-props","G__61028","G__61030","G__61031","G__61033","G__61035","G__61037","com.fulcrologic.fulcro.dom-common/interpret-classes","G__61040","G__61041","com.fulcrologic.fulcro.dom/form","args__4736__auto__","argseq__4737__auto__","conformed-args__59513__auto__","com.fulcrologic.fulcro.algorithms.do-not-use/conform!","map__61074","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","children__59515__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","attrs__59514__auto__","css__59516__auto__","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/second","attrs-value__59517__auto__","or__4131__auto__","cljs.core.into.cljs$core$IFn$_invoke$arity$2","seq61062","self__4718__auto__","com.fulcrologic.fulcro.dom/audio","map__61102","seq61096","com.fulcrologic.fulcro.dom/input","map__61116","seq61111","com.fulcrologic.fulcro.dom/menuitem","map__61127","seq61124","com.fulcrologic.fulcro.dom/radialGradient","map__61144","seq61134","com.fulcrologic.fulcro.dom/feMerge","map__61166","seq61162","com.fulcrologic.fulcro.dom/set","map__61192","seq61182","com.fulcrologic.fulcro.dom/feSpecularLighting","map__61210","seq61203","com.fulcrologic.fulcro.dom/base","map__61247","seq61242","com.fulcrologic.fulcro.dom/h1","map__61286","seq61281","com.fulcrologic.fulcro.dom/feOffset","map__61300","seq61298","com.fulcrologic.fulcro.dom/embed","map__61320","seq61318","com.fulcrologic.fulcro.dom/animateMotion","map__61337","seq61329","com.fulcrologic.fulcro.dom/h3","map__61352","seq61343","com.fulcrologic.fulcro.dom/body","map__61370","seq61362","com.fulcrologic.fulcro.dom/hkern","map__61381","seq61378","com.fulcrologic.fulcro.dom/keygen","map__61388","seq61385","com.fulcrologic.fulcro.dom/font-face-format","map__61405","seq61399","com.fulcrologic.fulcro.dom/feFuncA","map__61419","seq61417","com.fulcrologic.fulcro.dom/progress","map__61432","seq61426","com.fulcrologic.fulcro.dom/main","map__61444","seq61437","com.fulcrologic.fulcro.dom/cite","map__61475","seq61459","com.fulcrologic.fulcro.dom/rect","map__61495","seq61488","com.fulcrologic.fulcro.dom/tref","map__61504","seq61502","com.fulcrologic.fulcro.dom/meshpatch","map__61516","seq61512","com.fulcrologic.fulcro.dom/polyline","map__61538","seq61531","com.fulcrologic.fulcro.dom/metadata","map__61551","seq61544","com.fulcrologic.fulcro.dom/map","map__61559","seq61555","com.fulcrologic.fulcro.dom/object","map__61573","seq61566","com.fulcrologic.fulcro.dom/i","map__61584","seq61581","com.fulcrologic.fulcro.dom/font-face-name","map__61591","seq61589","com.fulcrologic.fulcro.dom/p","map__61600","seq61596","com.fulcrologic.fulcro.dom/feFuncR","map__61616","seq61608","com.fulcrologic.fulcro.dom/hatchpath","map__61626","seq61623","com.fulcrologic.fulcro.dom/altGlyphItem","map__61638","seq61630","com.fulcrologic.fulcro.dom/nav","map__61651","seq61644","com.fulcrologic.fulcro.dom/ruby","map__61671","seq61660","com.fulcrologic.fulcro.dom/switch","map__61689","seq61684","com.fulcrologic.fulcro.dom/a","map__61713","seq61705","com.fulcrologic.fulcro.dom/view","map__61728","seq61726","com.fulcrologic.fulcro.dom/menu","map__61738","seq61735","com.fulcrologic.fulcro.dom/blockquote","map__61750","seq61745","com.fulcrologic.fulcro.dom/img","map__61767","seq61759","com.fulcrologic.fulcro.dom/feFuncG","map__61777","seq61774","com.fulcrologic.fulcro.dom/text","map__61793","seq61790","com.fulcrologic.fulcro.dom/span","map__61811","seq61802","com.fulcrologic.fulcro.dom/track","map__61822","seq61819","com.fulcrologic.fulcro.dom/data","map__61833","seq61828","com.fulcrologic.fulcro.dom/u","map__61850","seq61841","com.fulcrologic.fulcro.dom/dl","map__61863","seq61857","com.fulcrologic.fulcro.dom/select","map__61884","seq61874","com.fulcrologic.fulcro.dom/polygon","map__61897","seq61892","com.fulcrologic.fulcro.dom/pattern","map__61914","seq61908","com.fulcrologic.fulcro.dom/html","map__61932","seq61926","com.fulcrologic.fulcro.dom/foreignObject","map__61951","seq61945","com.fulcrologic.fulcro.dom/thead","map__61967","seq61963","com.fulcrologic.fulcro.dom/path","map__61987","seq61977","com.fulcrologic.fulcro.dom/del","map__62011","seq62002","com.fulcrologic.fulcro.dom/altGlyph","map__62028","seq62022","com.fulcrologic.fulcro.dom/fieldset","map__62046","seq62037","com.fulcrologic.fulcro.dom/aside","map__62066","seq62055","com.fulcrologic.fulcro.dom/feBlend","map__62081","seq62076","com.fulcrologic.fulcro.dom/figure","map__62092","seq62089","com.fulcrologic.fulcro.dom/textPath","map__62104","seq62099","com.fulcrologic.fulcro.dom/figcaption","map__62118","seq62113","com.fulcrologic.fulcro.dom/mask","map__62130","seq62127","com.fulcrologic.fulcro.dom/q","map__62143","seq62138","com.fulcrologic.fulcro.dom/bdi","map__62159","seq62153","com.fulcrologic.fulcro.dom/feDistantLight","map__62176","seq62163","com.fulcrologic.fulcro.dom/video","map__62194","seq62188","com.fulcrologic.fulcro.dom/address","map__62210","seq62205","com.fulcrologic.fulcro.dom/caption","map__62219","seq62215","com.fulcrologic.fulcro.dom/dd","map__62228","seq62225","com.fulcrologic.fulcro.dom/rp","map__62237","seq62231","com.fulcrologic.fulcro.dom/hr","map__62250","seq62242","com.fulcrologic.fulcro.dom/meta","map__62265","seq62258","com.fulcrologic.fulcro.dom/tbody","map__62280","seq62274","com.fulcrologic.fulcro.dom/desc","map__62293","seq62288","com.fulcrologic.fulcro.dom/table","map__62301","seq62297","com.fulcrologic.fulcro.dom/pre","map__62313","seq62311","com.fulcrologic.fulcro.dom/ul","map__62329","seq62325","com.fulcrologic.fulcro.dom/feConvolveMatrix","map__62346","seq62340","com.fulcrologic.fulcro.dom/sup","map__62367","seq62357","com.fulcrologic.fulcro.dom/dfn","map__62380","seq62375","com.fulcrologic.fulcro.dom/sub","map__62398","seq62389","com.fulcrologic.fulcro.dom/mark","map__62410","seq62407","com.fulcrologic.fulcro.dom/feDisplacementMap","map__62418","seq62415","com.fulcrologic.fulcro.dom/unknown","map__62434","seq62427","com.fulcrologic.fulcro.dom/script","map__62452","seq62443","com.fulcrologic.fulcro.dom/feTurbulence","map__62487","seq62475","com.fulcrologic.fulcro.dom/big","map__62510","seq62504","com.fulcrologic.fulcro.dom/button","map__62533","seq62523","com.fulcrologic.fulcro.dom/font-face-uri","map__62547","seq62543","com.fulcrologic.fulcro.dom/wbr","map__62562","seq62556","com.fulcrologic.fulcro.dom/symbol","map__62572","seq62566","com.fulcrologic.fulcro.dom/strong","map__62581","seq62577","com.fulcrologic.fulcro.dom/use","map__62604","seq62590","com.fulcrologic.fulcro.dom/solidcolor","map__62630","seq62615","com.fulcrologic.fulcro.dom/fePointLight","map__62648","seq62642","com.fulcrologic.fulcro.dom/li","map__62655","seq62653","com.fulcrologic.fulcro.dom/dt","map__62666","seq62664","com.fulcrologic.fulcro.dom/feFuncB","map__62675","seq62672","com.fulcrologic.fulcro.dom/marker","map__62695","seq62685","com.fulcrologic.fulcro.dom/feComponentTransfer","map__62718","seq62712","com.fulcrologic.fulcro.dom/td","map__62732","seq62729","com.fulcrologic.fulcro.dom/tr","map__62754","seq62744","com.fulcrologic.fulcro.dom/circle","map__62771","seq62769","com.fulcrologic.fulcro.dom/section","map__62777","seq62775","com.fulcrologic.fulcro.dom/feDropShadow","map__62787","seq62784","com.fulcrologic.fulcro.dom/th","map__62796","seq62792","com.fulcrologic.fulcro.dom/time","map__62801","seq62798","com.fulcrologic.fulcro.dom/optgroup","map__62812","seq62808","com.fulcrologic.fulcro.dom/iframe","map__62827","seq62819","com.fulcrologic.fulcro.dom/color-profile","map__62838","seq62830","com.fulcrologic.fulcro.dom/legend","map__62856","seq62843","com.fulcrologic.fulcro.dom/em","map__62876","seq62865","com.fulcrologic.fulcro.dom/kbd","map__62881","seq62880","com.fulcrologic.fulcro.dom/article","map__62897","seq62888","com.fulcrologic.fulcro.dom/animateColor","map__62901","seq62899","com.fulcrologic.fulcro.dom/clipPath","map__62905","seq62903","com.fulcrologic.fulcro.dom/abbr","map__62908","seq62907","com.fulcrologic.fulcro.dom/altGlyphDef","map__62915","seq62910","com.fulcrologic.fulcro.dom/meshrow","map__62935","seq62926","com.fulcrologic.fulcro.dom/cursor","map__62947","seq62946","com.fulcrologic.fulcro.dom/animate","map__62964","seq62955","com.fulcrologic.fulcro.dom/source","map__62987","seq62980","com.fulcrologic.fulcro.dom/output","map__63006","seq62996","com.fulcrologic.fulcro.dom/font-face","map__63026","seq63016","com.fulcrologic.fulcro.dom/feMergeNode","map__63052","seq63042","com.fulcrologic.fulcro.dom/feSpotLight","map__63062","seq63057","com.fulcrologic.fulcro.dom/header","map__63073","seq63068","com.fulcrologic.fulcro.dom/datalist","map__63093","seq63083","com.fulcrologic.fulcro.dom/tfoot","map__63102","seq63097","com.fulcrologic.fulcro.dom/s","map__63117","seq63110","com.fulcrologic.fulcro.dom/hatch","map__63125","seq63124","com.fulcrologic.fulcro.dom/ins","map__63128","seq63127","com.fulcrologic.fulcro.dom/footer","map__63135","seq63133","com.fulcrologic.fulcro.dom/mpath","map__63140","seq63139","com.fulcrologic.fulcro.dom/title","map__63143","seq63142","com.fulcrologic.fulcro.dom/h5","map__63148","seq63147","com.fulcrologic.fulcro.dom/meshgradient","map__63152","seq63151","com.fulcrologic.fulcro.dom/canvas","map__63155","seq63154","com.fulcrologic.fulcro.dom/param","map__63158","seq63157","com.fulcrologic.fulcro.dom/font","map__63161","seq63160","com.fulcrologic.fulcro.dom/div","map__63164","seq63163","com.fulcrologic.fulcro.dom/option","map__63167","seq63166","com.fulcrologic.fulcro.dom/feFlood","map__63170","seq63169","com.fulcrologic.fulcro.dom/summary","map__63173","seq63172","com.fulcrologic.fulcro.dom/feMorphology","map__63177","seq63176","com.fulcrologic.fulcro.dom/samp","map__63180","seq63179","com.fulcrologic.fulcro.dom/glyphRef","map__63187","seq63184","com.fulcrologic.fulcro.dom/small","map__63192","seq63190","com.fulcrologic.fulcro.dom/style","map__63198","seq63194","com.fulcrologic.fulcro.dom/textarea","map__63202","seq63201","com.fulcrologic.fulcro.dom/feGaussianBlur","map__63205","seq63204","com.fulcrologic.fulcro.dom/h4","map__63208","seq63207","com.fulcrologic.fulcro.dom/head","map__63211","seq63210","com.fulcrologic.fulcro.dom/g","map__63215","seq63213","com.fulcrologic.fulcro.dom/missing-glyph","map__63218","seq63217","com.fulcrologic.fulcro.dom/stop","map__63221","seq63220","com.fulcrologic.fulcro.dom/feDiffuseLighting","map__63224","seq63223","com.fulcrologic.fulcro.dom/filter","map__63227","seq63226","com.fulcrologic.fulcro.dom/feComposite","map__63231","seq63229","com.fulcrologic.fulcro.dom/mesh","map__63235","seq63234","com.fulcrologic.fulcro.dom/var","map__63238","seq63237","com.fulcrologic.fulcro.dom/tspan","map__63241","seq63240","com.fulcrologic.fulcro.dom/ol","map__63245","seq63243","com.fulcrologic.fulcro.dom/details","map__63250","seq63249","com.fulcrologic.fulcro.dom/line","map__63253","seq63252","com.fulcrologic.fulcro.dom/col","map__63256","seq63255","com.fulcrologic.fulcro.dom/label","map__63259","seq63258","com.fulcrologic.fulcro.dom/picture","map__63264","seq63261","com.fulcrologic.fulcro.dom/rt","map__63267","seq63266","com.fulcrologic.fulcro.dom/h6","map__63270","seq63269","com.fulcrologic.fulcro.dom/vkern","map__63273","seq63272","com.fulcrologic.fulcro.dom/link","map__63276","seq63275","com.fulcrologic.fulcro.dom/defs","map__63280","seq63278","com.fulcrologic.fulcro.dom/glyph","map__63283","seq63282","com.fulcrologic.fulcro.dom/colgroup","map__63286","seq63285","com.fulcrologic.fulcro.dom/meter","map__63289","seq63288","com.fulcrologic.fulcro.dom/bdo","map__63292","seq63291","com.fulcrologic.fulcro.dom/feImage","map__63298","seq63294","com.fulcrologic.fulcro.dom/b","map__63312","seq63307","com.fulcrologic.fulcro.dom/svg","map__63326","seq63320","com.fulcrologic.fulcro.dom/feTile","map__63329","seq63328","com.fulcrologic.fulcro.dom/ellipse","map__63335","seq63333","com.fulcrologic.fulcro.dom/code","map__63338","seq63337","com.fulcrologic.fulcro.dom/dialog","map__63344","seq63340","com.fulcrologic.fulcro.dom/linearGradient","map__63352","seq63348","com.fulcrologic.fulcro.dom/discard","map__63370","seq63355","com.fulcrologic.fulcro.dom/font-face-src","map__63378","seq63377","com.fulcrologic.fulcro.dom/noscript","map__63389","seq63387","com.fulcrologic.fulcro.dom/animateTransform","map__63396","seq63393","com.fulcrologic.fulcro.dom/feColorMatrix","map__63400","seq63398","com.fulcrologic.fulcro.dom/h2","map__63407","seq63405","com.fulcrologic.fulcro.dom/area","map__63422","seq63417","com.fulcrologic.fulcro.dom/br","map__63425","seq63424","com.fulcrologic.fulcro.dom/image","map__63432","seq63427"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1630228360000,1630228360000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^O",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^:I","goog/dom/tagname.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.dom.HtmlElement"]]],["^:I","goog/async/freelist.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/platform.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.util","~$goog.string"]]],["^:I","goog/timer/timer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Promise","~$goog.events.EventTarget"]]],["^:I","com/fulcrologic/fulcro/algorithms/lookup.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^9["]]],["^:I","cljs/spec/gen/alpha.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$goog.Uri"]]],["^:I","cljs/tools/reader/impl/utils.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^;4"]]],["^:I","goog/math/math.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.array","~$goog.asserts"]]],["^:I","goog/string/stringformat.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;4"]]],["^:I","goog/events/eventtype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^:I","goog/labs/useragent/browser.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^:3","~$goog.string.internal"]]],["^:I","goog/html/safeurl.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^;<"]]],["^:I","goog/array/array.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:V","node_modules/prop-types/checkPropTypes.js"],[1630228360000,1630228360000,1549836454000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^:I","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^9[","~$edn-query-language.core","^:3","^@"]]],["^:I","goog/useragent/useragent.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^;3","~$goog.reflect","^;4"]]],["^:I","goog/structs/prioritypool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^:I","clojure/test/check/properties.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.generators","~$clojure.test.check.results"]]],["^:I","goog/async/run.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^:I","clojure/test/check/generators.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^;4"]]],["^:I","taoensso/encore.cljs"],[1630228119299,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$clojure.set","~$cljs.reader","~$cljs.tools.reader.edn","^:3","^;4","~$goog.string.format","~$goog.string.StringBuffer","~$goog.events","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","~$goog.structs","~$goog.net.EventType","~$goog.net.ErrorCode","~$taoensso.truss"]]],["^:I","goog/debug/error.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/async/workqueue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.async.FreeList"]]],["^:I","goog/events/events.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^;:","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^:I","goog/promise/resolver.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/browserfeature.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:I","cljs/tools/reader/edn.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^;4","^;V"]]],["^:I","clojure/test/check/random/doubles.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.longs"]]],["^:I","goog/structs/priorityqueue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.structs.Heap"]]],["^:I","goog/net/xhrio.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Timer","^;8","^;9","^<4","^;6","~$goog.json.hybrid","~$goog.log","^<1","^<0","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^:3","^;4","^;[","~$goog.structs.Map","~$goog.uri.utils","^;;"]]],["^:I","goog/promise/thenable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/nodetype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/impl/inspect.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","cljs/tools/reader.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<9","^<:","^<;","^<8","^;8","^;4","^;V"]]],["^:V","node_modules/scheduler/cjs/scheduler.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","clojure/test/check/rose_tree.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","clojure/test/check/impl.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/wrapperxmlhttpfactory.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^:V","node_modules/scheduler/cjs/scheduler.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/events/eventtarget.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Disposable","^;9","^;W","~$goog.events.Event","^<6","^<7","^:3"]]],["^:I","clojure/test/check/random.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.doubles","^<="]]],["^:I","goog/disposable/disposable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.disposable.IDisposable"]]],["^:I","goog/string/typedstring.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:V","node_modules/react/index.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^:I","shadow/js.js"],[1630228360071,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/object/object.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/asserts.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:V","node_modules/react-dom/cjs/react-dom.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$react$index","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],["^:I","goog/structs/set.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;[","~$goog.structs.Collection","^<D"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^:V","node_modules/react/cjs/react.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","^<O","~$module$node_modules$prop_types$checkPropTypes"]]],["^:I","goog/math/long.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;H"]]],["^:I","goog/events/listener.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.events.ListenableKey"]]],["^:I","goog/html/trustedresourceurl.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;?","^;@","^;A","^;B"]]],["^:I","goog/events/listenermap.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.events.Listener","^:3"]]],["^:I","goog/events/eventid.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","taoensso/truss.cljs"],[1630228118689,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$taoensso.truss.impl"]]],["^:I","goog/string/internal.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","clojure/test/check.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;K","^;P","^;L","^;Q","~$clojure.test.check.impl"]]],["^:I","edn_query_language/core.cljc"],[1630228119293,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^@","~$clojure.test.check","^;K","~$clojure.test.check.properties"]]],["^:I","goog/functions/functions.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/html/safestyle.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.html.SafeUrl","^;A","^;B","^;<"]]],["^:I","goog/dom/safe.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^<Z","^;>","^;A","^;<"]]],["^:I","taoensso/truss/impl.cljs"],[1630228118689,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;R"]]],["^:I","clojure/walk.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/eventtype.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/map.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^:I","goog/net/xhriopool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;X","~$goog.structs.PriorityPool"]]],["^:I","goog/html/safehtml.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.TagName","~$goog.dom.tags","^=2","^=3","~$goog.html.SafeStyleSheet","^<Z","^;>","^;?","^;@","^;E","^:3","^;A","^;B","^;<"]]],["^:I","goog/dom/tags.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^:3"]]],["^:I","goog/math/size.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/scheduler/index.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^:I","goog/structs/queue.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8"]]],["^:I","goog/labs/useragent/engine.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;3","^;4"]]],["^:I","taoensso/timbre/appenders/core.cljs"],[1630228119105,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","~$taoensso.encore"]]],["^:I","cljs/reader.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^<<","^;T","^;V"]]],["^:I","goog/dom/dom.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^=7","~$goog.dom.safe","^=1","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^:3","^;4","~$goog.string.Unicode","^;;"]]],["^:I","com/fulcrologic/fulcro/components.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^:6","^;D","^@","^9[","~$clojure.walk","^:;","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$com.fulcrologic.fulcro.algorithms.denormalize","~$com.fulcrologic.fulcro.algorithms.lookup","^;R"]]],["^:I","goog/asserts/asserts.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.debug.Error","^=>"]]],["^:I","goog/debug/logbuffer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.debug.LogRecord"]]],["^:I","goog/uri/uri.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4","^;[","^<D","^<E","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^:I","goog/net/errorcode.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/i18n/bidi.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:V","node_modules/object-assign/index.js"],[1630228360000,1630228360000,1484580833000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/disposable/idisposable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/promise/promise.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.Thenable","^;9","^<3","~$goog.async.run","^;O","^=H","~$goog.promise.Resolver"]]],["^:I","cljs/spec/alpha.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:3","^=D","^H","^:;"]]],["^:I","goog/fs/url.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/debug/logrecord.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/base.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",[]]],["^:I","goog/json/hybrid.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.json"]]],["^:I","goog/structs/structs.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3"]]],["^:I","cljs/tools/reader/impl/errors.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<9","^:;","~$cljs.tools.reader.impl.inspect"]]],["^:I","cljsjs/react.cljs"],[1630228358937,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<N"]]],["^:I","clojure/string.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;4","^;V"]]],["^:I","goog/structs/pool.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<H","~$goog.structs.Queue","~$goog.structs.Set"]]],["^:I","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:V","node_modules/react/cjs/react.production.min.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","^<O"]]],["^:I","goog/net/httpstatus.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","com/fulcrologic/fulcro/dom_common.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^:3"]]],["^:I","goog/structs/heap.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^:3","~$goog.structs.Node"]]],["^:I","goog/debug/entrypointregistry.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9"]]],["^:I","goog/string/string.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","goog/reflect/reflect.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/labs/useragent/util.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;<"]]],["^:I","com/fulcrologic/fulcro/dom.cljs"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]]],["^:I","goog/debug/debug.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","~$goog.debug.errorcontext","^;;"]]],["^:I","goog/string/stringbuffer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/math/coordinate.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","~$goog.math"]]],["^:I","goog/debug/errorcontext.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/tools/reader/reader_types.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<:","^;4","^;V"]]],["^:I","goog/iter/iter.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^=0","^=U"]]],["^:I","goog/async/nexttick.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<4","^=7","^=0","^;E","^;F"]]],["^:I","goog/html/uncheckedconversions.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^=1","^=2","^=3","^=9","^<Z","^;>","^;A","^;<"]]],["^:I","goog/debug/logger.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","~$goog.debug","~$goog.debug.LogBuffer","^=I"]]],["^:V","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1630228360000,1630228360000,1549571078000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:["]]],["^:I","goog/events/event.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<H","~$goog.events.EventId"]]],["^:I","cljs/tools/reader/impl/commons.cljs"],[1630228358603,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<8","^<9","^<:"]]],["^:I","goog/dom/htmlelement.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljs/core.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["~$goog.math.Long","~$goog.math.Integer","^;4","^:3","^;8","^;7","^;V"]]],["^:I","goog/html/safescript.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;A","^;B"]]],["^:I","clojure/test/check/random/longs.cljs"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","~$clojure.test.check.random.longs.bit-count-impl","^=Y","^B"]]],["^:I","goog/log/log.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=V","~$goog.debug.LogManager","^=I","~$goog.debug.Logger"]]],["^:I","goog/html/safestylesheet.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^=3","^:3","^;A","^;B","^;<"]]],["^:I","goog/structs/collection.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","cljsjs/react/dom.cljs"],[1630228358937,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^<N","~$module$node_modules$react_dom$index"]]],["^:I","goog/events/browserevent.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=V","^;:","^<I","~$goog.events.EventType","^;H","^;;"]]],["^:I","goog/math/integer.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/structs/node.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/dom/browserfeature.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;;"]]],["^:V","node_modules/scheduler/tracing.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^:V","node_modules/react-dom/cjs/react-dom.development.js"],[1630228360000,1630228360000,499162500000,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:[","^<N","^<O","^<P","^<S","~$module$node_modules$scheduler$tracing"]]],["^:I","clojure/set.cljs"],[1630228118934,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/uri/utils.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;8","^;9","^;4"]]],["^:I","goog/string/const.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","^;B"]]],["^:I","taoensso/timbre.cljs"],[1630228119105,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^:;","^=<","~$taoensso.timbre.appenders.core"]]],["^:I","goog/json/json.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]],["^:I","goog/events/listenable.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^=X"]]],["^:I","goog/net/xmlhttpfactory.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^<F"]]],["^:I","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],[1630228119420,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B","^;D"]]],["^:I","goog/net/xmlhttp.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^;9","~$goog.net.WrapperXmlHttpFactory","^<G"]]],["^:I","clojure/test/check/results.cljc"],[1630228119162,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4","^B"]]],["^:I","goog/net/xhrlike.js"],[1630228359392,"^:W",["^ ","^:X",null,"^:Y",["^O",[]],"^:Z",["^:4"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre/appenders/core.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/ansi.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/columns.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/components.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss/impl.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar!/taoensso/timbre.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/writer.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar!/io/aviso/exception.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/dom_common.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar!/edn_query_language/core.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/reader.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar!/taoensso/truss.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar!/taoensso/encore.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/edn.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1630228119000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Client-side DOM macros and functions. For isomorphic (server) support, see also com.fulcrologic.fulcro.dom-server","^7","com/fulcrologic/fulcro/dom.cljs","^8",1,"^9",5,"^:",1,"^;",31],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L"],"^M",null,"^N",["^O",["^P","^Q","^R","^S","^T","^U","^V","^W","^X"]],"^Y",["^ ","^Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^13","^14","^15","^16",true],"^17",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^18","^14","^15","^16",true],"^19",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1:","^14","^15","^16",true],"^1;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1<","^14","^15","^16",true],"^1=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1>","^14","^15","^16",true],"^1?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1@","^14","^15","^16",true],"^P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1A","^14","^15","^16",true],"^1B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1C","^14","^15","^16",true],"^1D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1E","^14","^15","^16",true],"^1F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1G","^14","^15","^16",true],"^1H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1I","^14","^15","^16",true],"^1J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1K","^14","^15","^16",true],"^1L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1M","^14","^15","^16",true],"^1N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1O","^14","^15","^16",true],"^1P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Q","^14","^15","^16",true],"^1R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1S","^14","^15","^16",true],"^1T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1U","^14","^15","^16",true],"^1V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1W","^14","^15","^16",true],"^1X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1Y","^14","^15","^16",true],"^1Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^1[","^14","^15","^16",true],"^20",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^21","^14","^15","^16",true],"^22",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^23","^14","^15","^16",true],"^24",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^25","^14","^15","^16",true],"^26",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^27","^14","^15","^16",true],"^28",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^29","^14","^15","^16",true],"^2:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2;","^14","^15","^16",true],"^2<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2=","^14","^15","^16",true],"^Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2>","^14","^15","^16",true],"^2?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2@","^14","^15","^16",true],"~$i",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2A","^14","^15","^16",true],"^2B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2C","^14","^15","^16",true],"~$p",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2D","^14","^15","^16",true],"^2E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2F","^14","^15","^16",true],"^2G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2H","^14","^15","^16",true],"^2I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2J","^14","^15","^16",true],"^2K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2L","^14","^15","^16",true],"^2M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2N","^14","^15","^16",true],"^2O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2P","^14","^15","^16",true],"~$a",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Q","^14","^15","^16",true],"^2R",["^ ","^[",["^10",[["^2S"]]],"^8",121,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2T","^14","^15","^16",true],"^2U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2V","^14","^15","^16",true],"^2W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2X","^14","^15","^16",true],"^2Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^2Z","^14","^15","^16",true],"^2[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^30","^14","^15","^16",true],"^31",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^32","^14","^15","^16",true],"^33",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^34","^14","^15","^16",true],"^35",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^36","^14","^15","^16",true],"^37",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^38","^14","^15","^16",true],"^39",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3:","^14","^15","^16",true],"~$u",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3;","^14","^15","^16",true],"^3<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3=","^14","^15","^16",true],"^R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3>","^14","^15","^16",true],"^3?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3@","^14","^15","^16",true],"^3A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3B","^14","^15","^16",true],"^3C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3D","^14","^15","^16",true],"^3E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3F","^14","^15","^16",true],"^3G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3H","^14","^15","^16",true],"^3I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3J","^14","^15","^16",true],"^3K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3L","^14","^15","^16",true],"^3M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3N","^14","^15","^16",true],"^3O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3P","^14","^15","^16",true],"^3Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3R","^14","^15","^16",true],"^3S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3T","^14","^15","^16",true],"^3U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3V","^14","^15","^16",true],"^3W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3X","^14","^15","^16",true],"^3Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3Z","^14","^15","^16",true],"^S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^3[","^14","^15","^16",true],"~$q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^40","^14","^15","^16",true],"^41",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^42","^14","^15","^16",true],"^43",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^44","^14","^15","^16",true],"^45",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^46","^14","^15","^16",true],"^47",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^48","^14","^15","^16",true],"^49",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4:","^14","^15","^16",true],"^4;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4<","^14","^15","^16",true],"^4=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4>","^14","^15","^16",true],"^4?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4@","^14","^15","^16",true],"^T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4A","^14","^15","^16",true],"^4B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4C","^14","^15","^16",true],"^4D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4E","^14","^15","^16",true],"^4F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4G","^14","^15","^16",true],"^4H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4I","^14","^15","^16",true],"^4J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4K","^14","^15","^16",true],"^4L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4M","^14","^15","^16",true],"^4N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4O","^14","^15","^16",true],"^4P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Q","^14","^15","^16",true],"^4R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4S","^14","^15","^16",true],"^4T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4U","^14","^15","^16",true],"^4V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4W","^14","^15","^16",true],"^4X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4Y","^14","^15","^16",true],"^4Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^4[","^14","^15","^16",true],"^50",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^51","^14","^15","^16",true],"^52",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^53","^14","^15","^16",true],"^54",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^55","^14","^15","^16",true],"^56",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^57","^14","^15","^16",true],"^58",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^59","^14","^15","^16",true],"^U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5:","^14","^15","^16",true],"^5;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5<","^14","^15","^16",true],"^V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5=","^14","^15","^16",true],"^5>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5?","^14","^15","^16",true],"^5@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5A","^14","^15","^16",true],"^5B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5C","^14","^15","^16",true],"^5D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5E","^14","^15","^16",true],"^5F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5G","^14","^15","^16",true],"^5H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5I","^14","^15","^16",true],"^5J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5K","^14","^15","^16",true],"^5L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5M","^14","^15","^16",true],"^5N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5O","^14","^15","^16",true],"^5P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Q","^14","^15","^16",true],"^5R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5S","^14","^15","^16",true],"^5T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5U","^14","^15","^16",true],"^5V",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5W","^14","^15","^16",true],"^W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5X","^14","^15","^16",true],"^5Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^5Z","^14","^15","^16",true],"^5[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^60","^14","^15","^16",true],"^61",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^62","^14","^15","^16",true],"^63",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^64","^14","^15","^16",true],"^65",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^66","^14","^15","^16",true],"^67",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^68","^14","^15","^16",true],"^69",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6:","^14","^15","^16",true],"^6;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6<","^14","^15","^16",true],"^6=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6>","^14","^15","^16",true],"^6?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6@","^14","^15","^16",true],"^6A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6B","^14","^15","^16",true],"^6C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6D","^14","^15","^16",true],"^6E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6F","^14","^15","^16",true],"^6G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6H","^14","^15","^16",true],"^6I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6J","^14","^15","^16",true],"^6K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6L","^14","^15","^16",true],"^6M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6N","^14","^15","^16",true],"^6O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6P","^14","^15","^16",true],"^6Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6R","^14","^15","^16",true],"^6S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6T","^14","^15","^16",true],"^6U",["^ ","^[",["^10",[["^6V"]]],"^8",135,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6W","^14","^15","^16",true],"^6X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6Y","^14","^15","^16",true],"^6Z",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^6[","^14","^15","^16",true],"~$s",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^70","^14","^15","^16",true],"^71",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^72","^14","^15","^16",true],"^73",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^74","^14","^15","^16",true],"^75",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^76","^14","^15","^16",true],"^77",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^78","^14","^15","^16",true],"^79",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7:","^14","^15","^16",true],"^7;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7<","^14","^15","^16",true],"^7=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7>","^14","^15","^16",true],"^7?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7@","^14","^15","^16",true],"^7A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7B","^14","^15","^16",true],"^7C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7D","^14","^15","^16",true],"^7E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7F","^14","^15","^16",true],"^7G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7H","^14","^15","^16",true],"^7I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7J","^14","^15","^16",true],"^7K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7L","^14","^15","^16",true],"^7M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7N","^14","^15","^16",true],"^7O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7P","^14","^15","^16",true],"^7Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7R","^14","^15","^16",true],"^7S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7T","^14","^15","^16",true],"^7U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7V","^14","^15","^16",true],"^7W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7X","^14","^15","^16",true],"^7Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^7Z","^14","^15","^16",true],"^7[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^80","^14","^15","^16",true],"^81",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^82","^14","^15","^16",true],"~$g",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^83","^14","^15","^16",true],"^84",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^85","^14","^15","^16",true],"^86",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^87","^14","^15","^16",true],"^88",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^89","^14","^15","^16",true],"^X",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8:","^14","^15","^16",true],"^8;",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8<","^14","^15","^16",true],"^8=",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8>","^14","^15","^16",true],"^8?",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8@","^14","^15","^16",true],"^8A",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8B","^14","^15","^16",true],"^8C",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8D","^14","^15","^16",true],"^8E",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8F","^14","^15","^16",true],"^8G",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8H","^14","^15","^16",true],"^8I",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8J","^14","^15","^16",true],"^8K",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8L","^14","^15","^16",true],"^8M",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8N","^14","^15","^16",true],"^8O",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8P","^14","^15","^16",true],"^8Q",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8R","^14","^15","^16",true],"^8S",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8T","^14","^15","^16",true],"^8U",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8V","^14","^15","^16",true],"^8W",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8X","^14","^15","^16",true],"^8Y",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^8Z","^14","^15","^16",true],"^8[",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^90","^14","^15","^16",true],"^91",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^92","^14","^15","^16",true],"^93",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^94","^14","^15","^16",true],"^95",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^96","^14","^15","^16",true],"~$b",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^97","^14","^15","^16",true],"^98",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^99","^14","^15","^16",true],"^9:",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9;","^14","^15","^16",true],"^9<",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9=","^14","^15","^16",true],"^9>",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9?","^14","^15","^16",true],"^9@",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9A","^14","^15","^16",true],"^9B",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9C","^14","^15","^16",true],"^9D",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9E","^14","^15","^16",true],"^9F",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9G","^14","^15","^16",true],"^9H",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9I","^14","^15","^16",true],"^9J",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9K","^14","^15","^16",true],"^9L",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9M","^14","^15","^16",true],"^9N",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9O","^14","^15","^16",true],"^9P",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9Q","^14","^15","^16",true],"^9R",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9S","^14","^15","^16",true],"^9T",["^ ","^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^8",138,"^9",1,"^7","com/fulcrologic/fulcro/dom.clj","^12","^9U","^14","^15","^16",true]],"~:shadow/js-access-properties",["^O",["onChange","createElement","createFactory","findDOMNode","render","Component","componentWillReceiveProps","renderToString"]],"^12","^15","^9W",null,"^9X",["^ ","^?","^@","^9Y","^9Y","^9Z","^9[","^:0","^:1","^B","^B","^:2","^:3","^:4","^:4","^:3","^:3","^:5","^:5","^:6","^:6","^:7","^:7","^:8","^:5","^:9","^9Y","~$s","^@","^:1","^:1","^9[","^9[","^::","^:;","^:;","^:;","^@","^@"],"^:<",["^O",["^:=","^:>"]],"~:shadow/js-access-global",["^O",["ReactDOMServer","React","ReactDOM","Error"]],"^:?",null,"~:defs",["^ ","^Z",["^ ","~:protocol-inline",null,"^5",["^ ","^[",["^10",["~$quote",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"~:arglists-meta",["^10",[null]]],"^7",null],"^12","^13","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"~:protocol-impl",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"~:methods",[["^ ","^?L",0,"^?K",true,"~:tag","~$any"]],"^8",226,"~:ret-tag","^?S","^?M",0,"~:fn-var",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(form \"hello\")\n(form nil \"hello\")\n\nThese two are made equivalent at compile time\n(form {:onClick f} \"hello\")\n(form #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(form :#the-id.klass.other-klass \"hello\")\n(form :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^17",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^18","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(audio \"hello\")\n(audio nil \"hello\")\n\nThese two are made equivalent at compile time\n(audio {:onClick f} \"hello\")\n(audio #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(audio :#the-id.klass.other-klass \"hello\")\n(audio :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^19",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(input \"hello\")\n(input nil \"hello\")\n\nThese two are made equivalent at compile time\n(input {:onClick f} \"hello\")\n(input #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(input :#the-id.klass.other-klass \"hello\")\n(input :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menuitem \"hello\")\n(menuitem nil \"hello\")\n\nThese two are made equivalent at compile time\n(menuitem {:onClick f} \"hello\")\n(menuitem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menuitem :#the-id.klass.other-klass \"hello\")\n(menuitem :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(radialGradient \"hello\")\n(radialGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(radialGradient {:onClick f} \"hello\")\n(radialGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(radialGradient :#the-id.klass.other-klass \"hello\")\n(radialGradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMerge \"hello\")\n(feMerge nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMerge {:onClick f} \"hello\")\n(feMerge #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMerge :#the-id.klass.other-klass \"hello\")\n(feMerge :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1A","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(set \"hello\")\n(set nil \"hello\")\n\nThese two are made equivalent at compile time\n(set {:onClick f} \"hello\")\n(set #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(set :#the-id.klass.other-klass \"hello\")\n(set :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1C","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpecularLighting \"hello\")\n(feSpecularLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpecularLighting {:onClick f} \"hello\")\n(feSpecularLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpecularLighting :#the-id.klass.other-klass \"hello\")\n(feSpecularLighting :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1E","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(base \"hello\")\n(base nil \"hello\")\n\nThese two are made equivalent at compile time\n(base {:onClick f} \"hello\")\n(base #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(base :#the-id.klass.other-klass \"hello\")\n(base :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1G","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h1 \"hello\")\n(h1 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h1 {:onClick f} \"hello\")\n(h1 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h1 :#the-id.klass.other-klass \"hello\")\n(h1 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-element*",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",94,"^9",7,"^:",94,"^;",28,"^[",["^10",["^?I",["^10",[["~$arr"]]]]],"^6","Used internally by the DOM element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element*","^7","com/fulcrologic/fulcro/dom.cljs","^;",28,"^?N",["^10",[["^?W"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",94,"^?T","~$js","^:",94,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["^?W"]]]]],"^6","Used internally by the DOM element generation."],"^1H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1I","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feOffset \"hello\")\n(feOffset nil \"hello\")\n\nThese two are made equivalent at compile time\n(feOffset {:onClick f} \"hello\")\n(feOffset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feOffset :#the-id.klass.other-klass \"hello\")\n(feOffset :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1K","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(embed \"hello\")\n(embed nil \"hello\")\n\nThese two are made equivalent at compile time\n(embed {:onClick f} \"hello\")\n(embed #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(embed :#the-id.klass.other-klass \"hello\")\n(embed :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1M","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateMotion \"hello\")\n(animateMotion nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateMotion {:onClick f} \"hello\")\n(animateMotion #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateMotion :#the-id.klass.other-klass \"hello\")\n(animateMotion :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1O","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h3 \"hello\")\n(h3 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h3 {:onClick f} \"hello\")\n(h3 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h3 :#the-id.klass.other-klass \"hello\")\n(h3 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1Q","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(body \"hello\")\n(body nil \"hello\")\n\nThese two are made equivalent at compile time\n(body {:onClick f} \"hello\")\n(body #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(body :#the-id.klass.other-klass \"hello\")\n(body :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1S","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hkern \"hello\")\n(hkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(hkern {:onClick f} \"hello\")\n(hkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hkern :#the-id.klass.other-klass \"hello\")\n(hkern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1U","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(keygen \"hello\")\n(keygen nil \"hello\")\n\nThese two are made equivalent at compile time\n(keygen {:onClick f} \"hello\")\n(keygen #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(keygen :#the-id.klass.other-klass \"hello\")\n(keygen :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1W","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-format \"hello\")\n(font-face-format nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-format {:onClick f} \"hello\")\n(font-face-format #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-format :#the-id.klass.other-klass \"hello\")\n(font-face-format :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-textarea",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",172,"^9",6,"^:",172,"^;",22],"^12","~$com.fulcrologic.fulcro.dom/wrapped-textarea","^7","com/fulcrologic/fulcro/dom.cljs","^;",22,"^9",1,"^8",172,"^:",172,"^?R","~$function","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^1X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1Y","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncA \"hello\")\n(feFuncA nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncA {:onClick f} \"hello\")\n(feFuncA #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncA :#the-id.klass.other-klass \"hello\")\n(feFuncA :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^1Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^1[","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(progress \"hello\")\n(progress nil \"hello\")\n\nThese two are made equivalent at compile time\n(progress {:onClick f} \"hello\")\n(progress #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(progress :#the-id.klass.other-klass \"hello\")\n(progress :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^20",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^21","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(main \"hello\")\n(main nil \"hello\")\n\nThese two are made equivalent at compile time\n(main {:onClick f} \"hello\")\n(main #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(main :#the-id.klass.other-klass \"hello\")\n(main :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^22",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^23","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cite \"hello\")\n(cite nil \"hello\")\n\nThese two are made equivalent at compile time\n(cite {:onClick f} \"hello\")\n(cite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cite :#the-id.klass.other-klass \"hello\")\n(cite :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^24",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^25","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rect \"hello\")\n(rect nil \"hello\")\n\nThese two are made equivalent at compile time\n(rect {:onClick f} \"hello\")\n(rect #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rect :#the-id.klass.other-klass \"hello\")\n(rect :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^26",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^27","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tref \"hello\")\n(tref nil \"hello\")\n\nThese two are made equivalent at compile time\n(tref {:onClick f} \"hello\")\n(tref #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tref :#the-id.klass.other-klass \"hello\")\n(tref :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^28",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^29","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshpatch \"hello\")\n(meshpatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshpatch {:onClick f} \"hello\")\n(meshpatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshpatch :#the-id.klass.other-klass \"hello\")\n(meshpatch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2:",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2;","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polyline \"hello\")\n(polyline nil \"hello\")\n\nThese two are made equivalent at compile time\n(polyline {:onClick f} \"hello\")\n(polyline #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polyline :#the-id.klass.other-klass \"hello\")\n(polyline :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2=","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(metadata \"hello\")\n(metadata nil \"hello\")\n\nThese two are made equivalent at compile time\n(metadata {:onClick f} \"hello\")\n(metadata #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(metadata :#the-id.klass.other-klass \"hello\")\n(metadata :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(map \"hello\")\n(map nil \"hello\")\n\nThese two are made equivalent at compile time\n(map {:onClick f} \"hello\")\n(map #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(map :#the-id.klass.other-klass \"hello\")\n(map :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$arr-append",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",180,"^9",8,"^:",180,"^;",18,"~:private",true,"^[",["^10",["^?I",["^10",[["^?W","~$tail"]]]]]],"^@2",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append","^7","com/fulcrologic/fulcro/dom.cljs","^;",18,"^?N",["^10",[["^?W","^@3"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",180,"^?T",["^O",[null,"^?S"]],"^:",180,"^?M",2,"^?U",true,"^[",["^10",["^?I",["^10",[["^?W","^@3"]]]]]],"^2?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(object \"hello\")\n(object nil \"hello\")\n\nThese two are made equivalent at compile time\n(object {:onClick f} \"hello\")\n(object #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(object :#the-id.klass.other-klass \"hello\")\n(object :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$update-state",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",100,"^9",8,"^:",100,"^;",20,"^@2",true,"^[",["^10",["^?I",["^10",[["~$component","~$next-props","~$value"]]]]],"^6","Updates the state of the wrapped input element."],"^@2",true,"^12","~$com.fulcrologic.fulcro.dom/update-state","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?N",["^10",[["^@6","^@7","^@8"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",100,"^?T","^?S","^:",100,"^?M",3,"^?U",true,"^[",["^10",["^?I",["^10",[["^@6","^@7","^@8"]]]]],"^6","Updates the state of the wrapped input element."],"~$i",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2A","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(i \"hello\")\n(i nil \"hello\")\n\nThese two are made equivalent at compile time\n(i {:onClick f} \"hello\")\n(i #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(i :#the-id.klass.other-klass \"hello\")\n(i :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2C","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-name \"hello\")\n(font-face-name nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-name {:onClick f} \"hello\")\n(font-face-name #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-name :#the-id.klass.other-klass \"hello\")\n(font-face-name :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$p",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2D","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(p \"hello\")\n(p nil \"hello\")\n\nThese two are made equivalent at compile time\n(p {:onClick f} \"hello\")\n(p #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(p :#the-id.klass.other-klass \"hello\")\n(p :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2F","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncR \"hello\")\n(feFuncR nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncR {:onClick f} \"hello\")\n(feFuncR #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncR :#the-id.klass.other-klass \"hello\")\n(feFuncR :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2H","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatchpath \"hello\")\n(hatchpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatchpath {:onClick f} \"hello\")\n(hatchpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatchpath :#the-id.klass.other-klass \"hello\")\n(hatchpath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2J","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphItem \"hello\")\n(altGlyphItem nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphItem {:onClick f} \"hello\")\n(altGlyphItem #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphItem :#the-id.klass.other-klass \"hello\")\n(altGlyphItem :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2L","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(nav \"hello\")\n(nav nil \"hello\")\n\nThese two are made equivalent at compile time\n(nav {:onClick f} \"hello\")\n(nav #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(nav :#the-id.klass.other-klass \"hello\")\n(nav :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2N","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ruby \"hello\")\n(ruby nil \"hello\")\n\nThese two are made equivalent at compile time\n(ruby {:onClick f} \"hello\")\n(ruby #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ruby :#the-id.klass.other-klass \"hello\")\n(ruby :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2P","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(switch \"hello\")\n(switch nil \"hello\")\n\nThese two are made equivalent at compile time\n(switch {:onClick f} \"hello\")\n(switch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(switch :#the-id.klass.other-klass \"hello\")\n(switch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$a",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2Q","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(a \"hello\")\n(a nil \"hello\")\n\nThese two are made equivalent at compile time\n(a {:onClick f} \"hello\")\n(a #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(a :#the-id.klass.other-klass \"hello\")\n(a :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2V","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(view \"hello\")\n(view nil \"hello\")\n\nThese two are made equivalent at compile time\n(view {:onClick f} \"hello\")\n(view #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(view :#the-id.klass.other-klass \"hello\")\n(view :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2X","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(menu \"hello\")\n(menu nil \"hello\")\n\nThese two are made equivalent at compile time\n(menu {:onClick f} \"hello\")\n(menu #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(menu :#the-id.klass.other-klass \"hello\")\n(menu :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^2Z","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(blockquote \"hello\")\n(blockquote nil \"hello\")\n\nThese two are made equivalent at compile time\n(blockquote {:onClick f} \"hello\")\n(blockquote #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(blockquote :#the-id.klass.other-klass \"hello\")\n(blockquote :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^2[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^30","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(img \"hello\")\n(img nil \"hello\")\n\nThese two are made equivalent at compile time\n(img {:onClick f} \"hello\")\n(img #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(img :#the-id.klass.other-klass \"hello\")\n(img :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^31",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^32","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncG \"hello\")\n(feFuncG nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncG {:onClick f} \"hello\")\n(feFuncG #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncG :#the-id.klass.other-klass \"hello\")\n(feFuncG :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^33",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^34","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(text \"hello\")\n(text nil \"hello\")\n\nThese two are made equivalent at compile time\n(text {:onClick f} \"hello\")\n(text #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(text :#the-id.klass.other-klass \"hello\")\n(text :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^35",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^36","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(span \"hello\")\n(span nil \"hello\")\n\nThese two are made equivalent at compile time\n(span {:onClick f} \"hello\")\n(span #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(span :#the-id.klass.other-klass \"hello\")\n(span :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^37",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^38","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(track \"hello\")\n(track nil \"hello\")\n\nThese two are made equivalent at compile time\n(track {:onClick f} \"hello\")\n(track #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(track :#the-id.klass.other-klass \"hello\")\n(track :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^39",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(data \"hello\")\n(data nil \"hello\")\n\nThese two are made equivalent at compile time\n(data {:onClick f} \"hello\")\n(data #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(data :#the-id.klass.other-klass \"hello\")\n(data :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$u",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3;","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(u \"hello\")\n(u nil \"hello\")\n\nThese two are made equivalent at compile time\n(u {:onClick f} \"hello\")\n(u #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(u :#the-id.klass.other-klass \"hello\")\n(u :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3=","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dl \"hello\")\n(dl nil \"hello\")\n\nThese two are made equivalent at compile time\n(dl {:onClick f} \"hello\")\n(dl #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dl :#the-id.klass.other-klass \"hello\")\n(dl :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(select \"hello\")\n(select nil \"hello\")\n\nThese two are made equivalent at compile time\n(select {:onClick f} \"hello\")\n(select #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(select :#the-id.klass.other-klass \"hello\")\n(select :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(polygon \"hello\")\n(polygon nil \"hello\")\n\nThese two are made equivalent at compile time\n(polygon {:onClick f} \"hello\")\n(polygon #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(polygon :#the-id.klass.other-klass \"hello\")\n(polygon :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3B","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pattern \"hello\")\n(pattern nil \"hello\")\n\nThese two are made equivalent at compile time\n(pattern {:onClick f} \"hello\")\n(pattern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pattern :#the-id.klass.other-klass \"hello\")\n(pattern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3D","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(html \"hello\")\n(html nil \"hello\")\n\nThese two are made equivalent at compile time\n(html {:onClick f} \"hello\")\n(html #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(html :#the-id.klass.other-klass \"hello\")\n(html :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3F","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(foreignObject \"hello\")\n(foreignObject nil \"hello\")\n\nThese two are made equivalent at compile time\n(foreignObject {:onClick f} \"hello\")\n(foreignObject #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(foreignObject :#the-id.klass.other-klass \"hello\")\n(foreignObject :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3H","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(thead \"hello\")\n(thead nil \"hello\")\n\nThese two are made equivalent at compile time\n(thead {:onClick f} \"hello\")\n(thead #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(thead :#the-id.klass.other-klass \"hello\")\n(thead :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3J","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(path \"hello\")\n(path nil \"hello\")\n\nThese two are made equivalent at compile time\n(path {:onClick f} \"hello\")\n(path #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(path :#the-id.klass.other-klass \"hello\")\n(path :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3L","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(del \"hello\")\n(del nil \"hello\")\n\nThese two are made equivalent at compile time\n(del {:onClick f} \"hello\")\n(del #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(del :#the-id.klass.other-klass \"hello\")\n(del :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3N","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyph \"hello\")\n(altGlyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyph {:onClick f} \"hello\")\n(altGlyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyph :#the-id.klass.other-klass \"hello\")\n(altGlyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3P","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fieldset \"hello\")\n(fieldset nil \"hello\")\n\nThese two are made equivalent at compile time\n(fieldset {:onClick f} \"hello\")\n(fieldset #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fieldset :#the-id.klass.other-klass \"hello\")\n(fieldset :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-input",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",171,"^9",6,"^:",171,"^;",19],"^12","~$com.fulcrologic.fulcro.dom/wrapped-input","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^9",1,"^8",171,"^:",171,"^?R","^@0","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^3Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3R","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(aside \"hello\")\n(aside nil \"hello\")\n\nThese two are made equivalent at compile time\n(aside {:onClick f} \"hello\")\n(aside #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(aside :#the-id.klass.other-klass \"hello\")\n(aside :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3T","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feBlend \"hello\")\n(feBlend nil \"hello\")\n\nThese two are made equivalent at compile time\n(feBlend {:onClick f} \"hello\")\n(feBlend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feBlend :#the-id.klass.other-klass \"hello\")\n(feBlend :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3V","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figure \"hello\")\n(figure nil \"hello\")\n\nThese two are made equivalent at compile time\n(figure {:onClick f} \"hello\")\n(figure #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figure :#the-id.klass.other-klass \"hello\")\n(figure :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3X","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textPath \"hello\")\n(textPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(textPath {:onClick f} \"hello\")\n(textPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textPath :#the-id.klass.other-klass \"hello\")\n(textPath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^3Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3Z","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(figcaption \"hello\")\n(figcaption nil \"hello\")\n\nThese two are made equivalent at compile time\n(figcaption {:onClick f} \"hello\")\n(figcaption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(figcaption :#the-id.klass.other-klass \"hello\")\n(figcaption :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^3[","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mask \"hello\")\n(mask nil \"hello\")\n\nThese two are made equivalent at compile time\n(mask {:onClick f} \"hello\")\n(mask #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mask :#the-id.klass.other-klass \"hello\")\n(mask :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^40","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(q \"hello\")\n(q nil \"hello\")\n\nThese two are made equivalent at compile time\n(q {:onClick f} \"hello\")\n(q #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(q :#the-id.klass.other-klass \"hello\")\n(q :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^41",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^42","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdi \"hello\")\n(bdi nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdi {:onClick f} \"hello\")\n(bdi #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdi :#the-id.klass.other-klass \"hello\")\n(bdi :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-wrapped-form-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",183,"^9",7,"^:",183,"^;",40,"^[",["^10",["^?I",["^10",[["~$opts"]]]]],"^6","Used internally by element generation."],"^12","~$com.fulcrologic.fulcro.dom/macro-create-wrapped-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",40,"^?N",["^10",[["^@="]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",183,"^:",183,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["^@="]]]]],"^6","Used internally by element generation."],"^43",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^44","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDistantLight \"hello\")\n(feDistantLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDistantLight {:onClick f} \"hello\")\n(feDistantLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDistantLight :#the-id.klass.other-klass \"hello\")\n(feDistantLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^45",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^46","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(video \"hello\")\n(video nil \"hello\")\n\nThese two are made equivalent at compile time\n(video {:onClick f} \"hello\")\n(video #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(video :#the-id.klass.other-klass \"hello\")\n(video :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^47",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^48","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(address \"hello\")\n(address nil \"hello\")\n\nThese two are made equivalent at compile time\n(address {:onClick f} \"hello\")\n(address #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(address :#the-id.klass.other-klass \"hello\")\n(address :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^49",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(caption \"hello\")\n(caption nil \"hello\")\n\nThese two are made equivalent at compile time\n(caption {:onClick f} \"hello\")\n(caption #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(caption :#the-id.klass.other-klass \"hello\")\n(caption :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrap-form-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",119,"^9",7,"^:",119,"^;",24,"^[",["^10",["^?I",["^10",[["~$element"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/wrap-form-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",24,"^?N",["^10",[["^@@"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",119,"^?T","^@0","^:",119,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["^@@"]]]]]],"^4;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dd \"hello\")\n(dd nil \"hello\")\n\nThese two are made equivalent at compile time\n(dd {:onClick f} \"hello\")\n(dd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dd :#the-id.klass.other-klass \"hello\")\n(dd :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rp \"hello\")\n(rp nil \"hello\")\n\nThese two are made equivalent at compile time\n(rp {:onClick f} \"hello\")\n(rp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rp :#the-id.klass.other-klass \"hello\")\n(rp :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hr \"hello\")\n(hr nil \"hello\")\n\nThese two are made equivalent at compile time\n(hr {:onClick f} \"hello\")\n(hr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hr :#the-id.klass.other-klass \"hello\")\n(hr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4A","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meta \"hello\")\n(meta nil \"hello\")\n\nThese two are made equivalent at compile time\n(meta {:onClick f} \"hello\")\n(meta #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meta :#the-id.klass.other-klass \"hello\")\n(meta :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4C","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tbody \"hello\")\n(tbody nil \"hello\")\n\nThese two are made equivalent at compile time\n(tbody {:onClick f} \"hello\")\n(tbody #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tbody :#the-id.klass.other-klass \"hello\")\n(tbody :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4E","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(desc \"hello\")\n(desc nil \"hello\")\n\nThese two are made equivalent at compile time\n(desc {:onClick f} \"hello\")\n(desc #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(desc :#the-id.klass.other-klass \"hello\")\n(desc :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4G","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(table \"hello\")\n(table nil \"hello\")\n\nThese two are made equivalent at compile time\n(table {:onClick f} \"hello\")\n(table #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(table :#the-id.klass.other-klass \"hello\")\n(table :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4I","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(pre \"hello\")\n(pre nil \"hello\")\n\nThese two are made equivalent at compile time\n(pre {:onClick f} \"hello\")\n(pre #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(pre :#the-id.klass.other-klass \"hello\")\n(pre :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4K","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ul \"hello\")\n(ul nil \"hello\")\n\nThese two are made equivalent at compile time\n(ul {:onClick f} \"hello\")\n(ul #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ul :#the-id.klass.other-klass \"hello\")\n(ul :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$arr-append*",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",176,"^9",8,"^:",176,"^;",19,"^@2",true,"^[",["^10",["^?I",["^10",[["^?W","~$x"]]]]]],"^@2",true,"^12","~$com.fulcrologic.fulcro.dom/arr-append*","^7","com/fulcrologic/fulcro/dom.cljs","^;",19,"^?N",["^10",[["^?W","~$x"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",176,"^:",176,"^?M",2,"^?U",true,"^[",["^10",["^?I",["^10",[["^?W","~$x"]]]]]],"^4L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4M","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feConvolveMatrix \"hello\")\n(feConvolveMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feConvolveMatrix {:onClick f} \"hello\")\n(feConvolveMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feConvolveMatrix :#the-id.klass.other-klass \"hello\")\n(feConvolveMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4O","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sup \"hello\")\n(sup nil \"hello\")\n\nThese two are made equivalent at compile time\n(sup {:onClick f} \"hello\")\n(sup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sup :#the-id.klass.other-klass \"hello\")\n(sup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$element?",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",35,"^9",7,"^:",35,"^;",15,"^[",["^10",["^?I",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^12","~$com.fulcrologic.fulcro.dom/element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",15,"^?N",["^10",[["~$x"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",35,"^?T","~$boolean","^:",35,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["~$x"]]]]],"^6","Returns true if the given arg is a react element."],"^4P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4Q","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dfn \"hello\")\n(dfn nil \"hello\")\n\nThese two are made equivalent at compile time\n(dfn {:onClick f} \"hello\")\n(dfn #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dfn :#the-id.klass.other-klass \"hello\")\n(dfn :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4S","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(sub \"hello\")\n(sub nil \"hello\")\n\nThese two are made equivalent at compile time\n(sub {:onClick f} \"hello\")\n(sub #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(sub :#the-id.klass.other-klass \"hello\")\n(sub :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4U","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mark \"hello\")\n(mark nil \"hello\")\n\nThese two are made equivalent at compile time\n(mark {:onClick f} \"hello\")\n(mark #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mark :#the-id.klass.other-klass \"hello\")\n(mark :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4W","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDisplacementMap \"hello\")\n(feDisplacementMap nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDisplacementMap {:onClick f} \"hello\")\n(feDisplacementMap #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDisplacementMap :#the-id.klass.other-klass \"hello\")\n(feDisplacementMap :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$convert-props",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",81,"^9",7,"^:",81,"^;",20,"^[",["^10",["^?I",["^10",[["~$props"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^12","~$com.fulcrologic.fulcro.dom/convert-props","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?N",["^10",[["^@H"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",81,"^?T",["^O",[null,"^2?","^?S"]],"^:",81,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["^@H"]]]]],"^6","Given props, which can be nil, a js-obj or a clj map: returns a js object."],"^4X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4Y","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(unknown \"hello\")\n(unknown nil \"hello\")\n\nThese two are made equivalent at compile time\n(unknown {:onClick f} \"hello\")\n(unknown #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(unknown :#the-id.klass.other-klass \"hello\")\n(unknown :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^4Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^4[","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(script \"hello\")\n(script nil \"hello\")\n\nThese two are made equivalent at compile time\n(script {:onClick f} \"hello\")\n(script #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(script :#the-id.klass.other-klass \"hello\")\n(script :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^50",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^51","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTurbulence \"hello\")\n(feTurbulence nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTurbulence {:onClick f} \"hello\")\n(feTurbulence #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTurbulence :#the-id.klass.other-klass \"hello\")\n(feTurbulence :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^52",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^53","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(big \"hello\")\n(big nil \"hello\")\n\nThese two are made equivalent at compile time\n(big {:onClick f} \"hello\")\n(big #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(big :#the-id.klass.other-klass \"hello\")\n(big :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^54",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^55","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(button \"hello\")\n(button nil \"hello\")\n\nThese two are made equivalent at compile time\n(button {:onClick f} \"hello\")\n(button #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(button :#the-id.klass.other-klass \"hello\")\n(button :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^56",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^57","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-uri \"hello\")\n(font-face-uri nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-uri {:onClick f} \"hello\")\n(font-face-uri #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-uri :#the-id.klass.other-klass \"hello\")\n(font-face-uri :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^58",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^59","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(wbr \"hello\")\n(wbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(wbr {:onClick f} \"hello\")\n(wbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(wbr :#the-id.klass.other-klass \"hello\")\n(wbr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(symbol \"hello\")\n(symbol nil \"hello\")\n\nThese two are made equivalent at compile time\n(symbol {:onClick f} \"hello\")\n(symbol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(symbol :#the-id.klass.other-klass \"hello\")\n(symbol :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(strong \"hello\")\n(strong nil \"hello\")\n\nThese two are made equivalent at compile time\n(strong {:onClick f} \"hello\")\n(strong #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(strong :#the-id.klass.other-klass \"hello\")\n(strong :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5=","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(use \"hello\")\n(use nil \"hello\")\n\nThese two are made equivalent at compile time\n(use {:onClick f} \"hello\")\n(use #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(use :#the-id.klass.other-klass \"hello\")\n(use :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5>",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5?","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(solidcolor \"hello\")\n(solidcolor nil \"hello\")\n\nThese two are made equivalent at compile time\n(solidcolor {:onClick f} \"hello\")\n(solidcolor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(solidcolor :#the-id.klass.other-klass \"hello\")\n(solidcolor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5@",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5A","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(fePointLight \"hello\")\n(fePointLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(fePointLight {:onClick f} \"hello\")\n(fePointLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(fePointLight :#the-id.klass.other-klass \"hello\")\n(fePointLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5C","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(li \"hello\")\n(li nil \"hello\")\n\nThese two are made equivalent at compile time\n(li {:onClick f} \"hello\")\n(li #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(li :#the-id.klass.other-klass \"hello\")\n(li :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5E","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dt \"hello\")\n(dt nil \"hello\")\n\nThese two are made equivalent at compile time\n(dt {:onClick f} \"hello\")\n(dt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dt :#the-id.klass.other-klass \"hello\")\n(dt :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5G","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFuncB \"hello\")\n(feFuncB nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFuncB {:onClick f} \"hello\")\n(feFuncB #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFuncB :#the-id.klass.other-klass \"hello\")\n(feFuncB :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5I","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(marker \"hello\")\n(marker nil \"hello\")\n\nThese two are made equivalent at compile time\n(marker {:onClick f} \"hello\")\n(marker #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(marker :#the-id.klass.other-klass \"hello\")\n(marker :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5K","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComponentTransfer \"hello\")\n(feComponentTransfer nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComponentTransfer {:onClick f} \"hello\")\n(feComponentTransfer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComponentTransfer :#the-id.klass.other-klass \"hello\")\n(feComponentTransfer :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5M","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(td \"hello\")\n(td nil \"hello\")\n\nThese two are made equivalent at compile time\n(td {:onClick f} \"hello\")\n(td #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(td :#the-id.klass.other-klass \"hello\")\n(td :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5O","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tr \"hello\")\n(tr nil \"hello\")\n\nThese two are made equivalent at compile time\n(tr {:onClick f} \"hello\")\n(tr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tr :#the-id.klass.other-klass \"hello\")\n(tr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5Q","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(circle \"hello\")\n(circle nil \"hello\")\n\nThese two are made equivalent at compile time\n(circle {:onClick f} \"hello\")\n(circle #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(circle :#the-id.klass.other-klass \"hello\")\n(circle :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5S","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(section \"hello\")\n(section nil \"hello\")\n\nThese two are made equivalent at compile time\n(section {:onClick f} \"hello\")\n(section #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(section :#the-id.klass.other-klass \"hello\")\n(section :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5U","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDropShadow \"hello\")\n(feDropShadow nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDropShadow {:onClick f} \"hello\")\n(feDropShadow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDropShadow :#the-id.klass.other-klass \"hello\")\n(feDropShadow :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5V",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5W","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(th \"hello\")\n(th nil \"hello\")\n\nThese two are made equivalent at compile time\n(th {:onClick f} \"hello\")\n(th #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(th :#the-id.klass.other-klass \"hello\")\n(th :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5X","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(time \"hello\")\n(time nil \"hello\")\n\nThese two are made equivalent at compile time\n(time {:onClick f} \"hello\")\n(time #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(time :#the-id.klass.other-klass \"hello\")\n(time :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^5Z","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(optgroup \"hello\")\n(optgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(optgroup {:onClick f} \"hello\")\n(optgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(optgroup :#the-id.klass.other-klass \"hello\")\n(optgroup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^5[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^60","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(iframe \"hello\")\n(iframe nil \"hello\")\n\nThese two are made equivalent at compile time\n(iframe {:onClick f} \"hello\")\n(iframe #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(iframe :#the-id.klass.other-klass \"hello\")\n(iframe :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^61",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^62","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(color-profile \"hello\")\n(color-profile nil \"hello\")\n\nThese two are made equivalent at compile time\n(color-profile {:onClick f} \"hello\")\n(color-profile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(color-profile :#the-id.klass.other-klass \"hello\")\n(color-profile :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^63",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^64","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(legend \"hello\")\n(legend nil \"hello\")\n\nThese two are made equivalent at compile time\n(legend {:onClick f} \"hello\")\n(legend #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(legend :#the-id.klass.other-klass \"hello\")\n(legend :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^65",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^66","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(em \"hello\")\n(em nil \"hello\")\n\nThese two are made equivalent at compile time\n(em {:onClick f} \"hello\")\n(em #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(em :#the-id.klass.other-klass \"hello\")\n(em :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^67",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^68","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(kbd \"hello\")\n(kbd nil \"hello\")\n\nThese two are made equivalent at compile time\n(kbd {:onClick f} \"hello\")\n(kbd #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(kbd :#the-id.klass.other-klass \"hello\")\n(kbd :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^69",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(article \"hello\")\n(article nil \"hello\")\n\nThese two are made equivalent at compile time\n(article {:onClick f} \"hello\")\n(article #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(article :#the-id.klass.other-klass \"hello\")\n(article :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateColor \"hello\")\n(animateColor nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateColor {:onClick f} \"hello\")\n(animateColor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateColor :#the-id.klass.other-klass \"hello\")\n(animateColor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(clipPath \"hello\")\n(clipPath nil \"hello\")\n\nThese two are made equivalent at compile time\n(clipPath {:onClick f} \"hello\")\n(clipPath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(clipPath :#the-id.klass.other-klass \"hello\")\n(clipPath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(abbr \"hello\")\n(abbr nil \"hello\")\n\nThese two are made equivalent at compile time\n(abbr {:onClick f} \"hello\")\n(abbr #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(abbr :#the-id.klass.other-klass \"hello\")\n(abbr :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6B","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(altGlyphDef \"hello\")\n(altGlyphDef nil \"hello\")\n\nThese two are made equivalent at compile time\n(altGlyphDef {:onClick f} \"hello\")\n(altGlyphDef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(altGlyphDef :#the-id.klass.other-klass \"hello\")\n(altGlyphDef :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6D","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshrow \"hello\")\n(meshrow nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshrow {:onClick f} \"hello\")\n(meshrow #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshrow :#the-id.klass.other-klass \"hello\")\n(meshrow :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6F","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(cursor \"hello\")\n(cursor nil \"hello\")\n\nThese two are made equivalent at compile time\n(cursor {:onClick f} \"hello\")\n(cursor #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(cursor :#the-id.klass.other-klass \"hello\")\n(cursor :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$form-elements?",["^ ","^12","~$com.fulcrologic.fulcro.dom/form-elements?","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",1,"^:",113,"^;",24,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",113,"^9",10,"^:",113,"^;",24],"^?R","~$cljs.core/ISet"],"^6G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6H","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animate \"hello\")\n(animate nil \"hello\")\n\nThese two are made equivalent at compile time\n(animate {:onClick f} \"hello\")\n(animate #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animate :#the-id.klass.other-klass \"hello\")\n(animate :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6J","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(source \"hello\")\n(source nil \"hello\")\n\nThese two are made equivalent at compile time\n(source {:onClick f} \"hello\")\n(source #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(source :#the-id.klass.other-klass \"hello\")\n(source :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6L","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(output \"hello\")\n(output nil \"hello\")\n\nThese two are made equivalent at compile time\n(output {:onClick f} \"hello\")\n(output #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(output :#the-id.klass.other-klass \"hello\")\n(output :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6N","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face \"hello\")\n(font-face nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face {:onClick f} \"hello\")\n(font-face #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face :#the-id.klass.other-klass \"hello\")\n(font-face :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6P","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMergeNode \"hello\")\n(feMergeNode nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMergeNode {:onClick f} \"hello\")\n(feMergeNode #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMergeNode :#the-id.klass.other-klass \"hello\")\n(feMergeNode :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6R","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feSpotLight \"hello\")\n(feSpotLight nil \"hello\")\n\nThese two are made equivalent at compile time\n(feSpotLight {:onClick f} \"hello\")\n(feSpotLight #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feSpotLight :#the-id.klass.other-klass \"hello\")\n(feSpotLight :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6T","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(header \"hello\")\n(header nil \"hello\")\n\nThese two are made equivalent at compile time\n(header {:onClick f} \"hello\")\n(header #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(header :#the-id.klass.other-klass \"hello\")\n(header :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6Y","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(datalist \"hello\")\n(datalist nil \"hello\")\n\nThese two are made equivalent at compile time\n(datalist {:onClick f} \"hello\")\n(datalist #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(datalist :#the-id.klass.other-klass \"hello\")\n(datalist :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^6Z",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^6[","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tfoot \"hello\")\n(tfoot nil \"hello\")\n\nThese two are made equivalent at compile time\n(tfoot {:onClick f} \"hello\")\n(tfoot #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tfoot :#the-id.klass.other-klass \"hello\")\n(tfoot :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$s",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^70","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(s \"hello\")\n(s nil \"hello\")\n\nThese two are made equivalent at compile time\n(s {:onClick f} \"hello\")\n(s #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(s :#the-id.klass.other-klass \"hello\")\n(s :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^71",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^72","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(hatch \"hello\")\n(hatch nil \"hello\")\n\nThese two are made equivalent at compile time\n(hatch {:onClick f} \"hello\")\n(hatch #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(hatch :#the-id.klass.other-klass \"hello\")\n(hatch :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^73",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^74","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ins \"hello\")\n(ins nil \"hello\")\n\nThese two are made equivalent at compile time\n(ins {:onClick f} \"hello\")\n(ins #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ins :#the-id.klass.other-klass \"hello\")\n(ins :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$node",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",63,"^9",7,"^:",63,"^;",11,"^[",["^10",["^?I",["^10",[["^@6"],["^@6","~$name"]]]]],"^6","Returns the dom node associated with a component's React ref.","^?J",["^ ","^?K",false,"^?L",2,"^?M",2,"^?N",["^10",[["^@6"],["^@6","^@N"]]],"^[",["^10",[["^@6"],["^@6","^@N"]]],"^?O",["^10",[null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/node","^7","com/fulcrologic/fulcro/dom.cljs","^;",11,"^?J",["^ ","^?K",false,"^?L",2,"^?M",2,"^?N",["^10",[["^@6"],["^@6","^@N"]]],"^[",["^10",[["^@6"],["^@6","^@N"]]],"^?O",["^10",[null,null]]],"^?N",["^10",[["^@6"],["^@6","^@N"]]],"^?P",null,"^?L",2,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^?Q",[["^ ","^?L",1,"^?K",false,"^?R","^?Y"],["^ ","^?L",2,"^?K",false,"^?R",["^O",["^?Y","~$clj-nil"]]]],"^8",63,"^:",63,"^?M",2,"^?U",true,"^[",["^10",[["^@6"],["^@6","^@N"]]],"^6","Returns the dom node associated with a component's React ref."],"^75",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^76","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(footer \"hello\")\n(footer nil \"hello\")\n\nThese two are made equivalent at compile time\n(footer {:onClick f} \"hello\")\n(footer #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(footer :#the-id.klass.other-klass \"hello\")\n(footer :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^77",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^78","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mpath \"hello\")\n(mpath nil \"hello\")\n\nThese two are made equivalent at compile time\n(mpath {:onClick f} \"hello\")\n(mpath #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mpath :#the-id.klass.other-klass \"hello\")\n(mpath :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^79",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(title \"hello\")\n(title nil \"hello\")\n\nThese two are made equivalent at compile time\n(title {:onClick f} \"hello\")\n(title #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(title :#the-id.klass.other-klass \"hello\")\n(title :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h5 \"hello\")\n(h5 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h5 {:onClick f} \"hello\")\n(h5 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h5 :#the-id.klass.other-klass \"hello\")\n(h5 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meshgradient \"hello\")\n(meshgradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(meshgradient {:onClick f} \"hello\")\n(meshgradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meshgradient :#the-id.klass.other-klass \"hello\")\n(meshgradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(canvas \"hello\")\n(canvas nil \"hello\")\n\nThese two are made equivalent at compile time\n(canvas {:onClick f} \"hello\")\n(canvas #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(canvas :#the-id.klass.other-klass \"hello\")\n(canvas :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7B","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(param \"hello\")\n(param nil \"hello\")\n\nThese two are made equivalent at compile time\n(param {:onClick f} \"hello\")\n(param #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(param :#the-id.klass.other-klass \"hello\")\n(param :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7D","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font \"hello\")\n(font nil \"hello\")\n\nThese two are made equivalent at compile time\n(font {:onClick f} \"hello\")\n(font #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font :#the-id.klass.other-klass \"hello\")\n(font :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$is-form-element?",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",115,"^9",7,"^:",115,"^;",23,"^[",["^10",["^?I",["^10",[["^@@"]]]]]],"^12","~$com.fulcrologic.fulcro.dom/is-form-element?","^7","com/fulcrologic/fulcro/dom.cljs","^;",23,"^?N",["^10",[["^@@"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",115,"^?T","^?S","^:",115,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["^@@"]]]]]],"~$render-to-str",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",58,"^9",7,"^:",58,"^;",20,"^[",["^10",["^?I",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^12","~$com.fulcrologic.fulcro.dom/render-to-str","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^?N",["^10",[["~$c"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",58,"^?T","^?Y","^:",58,"^?M",1,"^?U",true,"^[",["^10",["^?I",["^10",[["~$c"]]]]],"^6","Equivalent to React.renderToString. NOTE: You must require cljsjs.react.dom.server to use this function."],"^7E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7F","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(div \"hello\")\n(div nil \"hello\")\n\nThese two are made equivalent at compile time\n(div {:onClick f} \"hello\")\n(div #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(div :#the-id.klass.other-klass \"hello\")\n(div :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7H","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(option \"hello\")\n(option nil \"hello\")\n\nThese two are made equivalent at compile time\n(option {:onClick f} \"hello\")\n(option #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(option :#the-id.klass.other-klass \"hello\")\n(option :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7J","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feFlood \"hello\")\n(feFlood nil \"hello\")\n\nThese two are made equivalent at compile time\n(feFlood {:onClick f} \"hello\")\n(feFlood #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feFlood :#the-id.klass.other-klass \"hello\")\n(feFlood :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7L","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(summary \"hello\")\n(summary nil \"hello\")\n\nThese two are made equivalent at compile time\n(summary {:onClick f} \"hello\")\n(summary #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(summary :#the-id.klass.other-klass \"hello\")\n(summary :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7N","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feMorphology \"hello\")\n(feMorphology nil \"hello\")\n\nThese two are made equivalent at compile time\n(feMorphology {:onClick f} \"hello\")\n(feMorphology #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feMorphology :#the-id.klass.other-klass \"hello\")\n(feMorphology :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7P","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(samp \"hello\")\n(samp nil \"hello\")\n\nThese two are made equivalent at compile time\n(samp {:onClick f} \"hello\")\n(samp #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(samp :#the-id.klass.other-klass \"hello\")\n(samp :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7R","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyphRef \"hello\")\n(glyphRef nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyphRef {:onClick f} \"hello\")\n(glyphRef #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyphRef :#the-id.klass.other-klass \"hello\")\n(glyphRef :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7T","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(small \"hello\")\n(small nil \"hello\")\n\nThese two are made equivalent at compile time\n(small {:onClick f} \"hello\")\n(small #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(small :#the-id.klass.other-klass \"hello\")\n(small :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7V","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(style \"hello\")\n(style nil \"hello\")\n\nThese two are made equivalent at compile time\n(style {:onClick f} \"hello\")\n(style #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(style :#the-id.klass.other-klass \"hello\")\n(style :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7X","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(textarea \"hello\")\n(textarea nil \"hello\")\n\nThese two are made equivalent at compile time\n(textarea {:onClick f} \"hello\")\n(textarea #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(textarea :#the-id.klass.other-klass \"hello\")\n(textarea :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^7Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^7Z","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feGaussianBlur \"hello\")\n(feGaussianBlur nil \"hello\")\n\nThese two are made equivalent at compile time\n(feGaussianBlur {:onClick f} \"hello\")\n(feGaussianBlur #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feGaussianBlur :#the-id.klass.other-klass \"hello\")\n(feGaussianBlur :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-option",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",173,"^9",6,"^:",173,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-option","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",173,"^:",173,"^?R","^@0","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"~$element-marker",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",31,"^9",23,"^:",31,"^;",37,"^@2",true],"^@2",true,"^12","~$com.fulcrologic.fulcro.dom/element-marker","^7","com/fulcrologic/fulcro/dom.cljs","^;",37,"^9",1,"^8",31,"^:",31,"^?R","^?S"],"^7[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^80","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h4 \"hello\")\n(h4 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h4 {:onClick f} \"hello\")\n(h4 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h4 :#the-id.klass.other-klass \"hello\")\n(h4 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^81",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^82","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(head \"hello\")\n(head nil \"hello\")\n\nThese two are made equivalent at compile time\n(head {:onClick f} \"hello\")\n(head #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(head :#the-id.klass.other-klass \"hello\")\n(head :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$g",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^83","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(g \"hello\")\n(g nil \"hello\")\n\nThese two are made equivalent at compile time\n(g {:onClick f} \"hello\")\n(g #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(g :#the-id.klass.other-klass \"hello\")\n(g :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^84",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^85","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(missing-glyph \"hello\")\n(missing-glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(missing-glyph {:onClick f} \"hello\")\n(missing-glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(missing-glyph :#the-id.klass.other-klass \"hello\")\n(missing-glyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$wrapped-select",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",174,"^9",6,"^:",174,"^;",20],"^12","~$com.fulcrologic.fulcro.dom/wrapped-select","^7","com/fulcrologic/fulcro/dom.cljs","^;",20,"^9",1,"^8",174,"^:",174,"^?R","^@0","^6","Low-level form input, with no syntactic sugar. Used internally by DOM macros"],"^86",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^87","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(stop \"hello\")\n(stop nil \"hello\")\n\nThese two are made equivalent at compile time\n(stop {:onClick f} \"hello\")\n(stop #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(stop :#the-id.klass.other-klass \"hello\")\n(stop :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$render",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",53,"^9",7,"^:",53,"^;",13,"^[",["^10",["^?I",["^10",[["^@6","~$el"]]]]],"^6","Equivalent to React.render"],"^12","~$com.fulcrologic.fulcro.dom/render","^7","com/fulcrologic/fulcro/dom.cljs","^;",13,"^?N",["^10",[["^@6","^A0"]]],"^?P",null,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^8",53,"^?T","^?Y","^:",53,"^?M",2,"^?U",true,"^[",["^10",["^?I",["^10",[["^@6","^A0"]]]]],"^6","Equivalent to React.render"],"^88",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^89","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feDiffuseLighting \"hello\")\n(feDiffuseLighting nil \"hello\")\n\nThese two are made equivalent at compile time\n(feDiffuseLighting {:onClick f} \"hello\")\n(feDiffuseLighting #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feDiffuseLighting :#the-id.klass.other-klass \"hello\")\n(feDiffuseLighting :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^X",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8:","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(filter \"hello\")\n(filter nil \"hello\")\n\nThese two are made equivalent at compile time\n(filter {:onClick f} \"hello\")\n(filter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(filter :#the-id.klass.other-klass \"hello\")\n(filter :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8;",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8<","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feComposite \"hello\")\n(feComposite nil \"hello\")\n\nThese two are made equivalent at compile time\n(feComposite {:onClick f} \"hello\")\n(feComposite #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feComposite :#the-id.klass.other-klass \"hello\")\n(feComposite :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8=",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8>","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(mesh \"hello\")\n(mesh nil \"hello\")\n\nThese two are made equivalent at compile time\n(mesh {:onClick f} \"hello\")\n(mesh #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(mesh :#the-id.klass.other-klass \"hello\")\n(mesh :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8?",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8@","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(var \"hello\")\n(var nil \"hello\")\n\nThese two are made equivalent at compile time\n(var {:onClick f} \"hello\")\n(var #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(var :#the-id.klass.other-klass \"hello\")\n(var :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8A",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8B","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(tspan \"hello\")\n(tspan nil \"hello\")\n\nThese two are made equivalent at compile time\n(tspan {:onClick f} \"hello\")\n(tspan #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(tspan :#the-id.klass.other-klass \"hello\")\n(tspan :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8C",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8D","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ol \"hello\")\n(ol nil \"hello\")\n\nThese two are made equivalent at compile time\n(ol {:onClick f} \"hello\")\n(ol #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ol :#the-id.klass.other-klass \"hello\")\n(ol :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8E",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8F","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(details \"hello\")\n(details nil \"hello\")\n\nThese two are made equivalent at compile time\n(details {:onClick f} \"hello\")\n(details #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(details :#the-id.klass.other-klass \"hello\")\n(details :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8G",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8H","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(line \"hello\")\n(line nil \"hello\")\n\nThese two are made equivalent at compile time\n(line {:onClick f} \"hello\")\n(line #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(line :#the-id.klass.other-klass \"hello\")\n(line :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8I",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8J","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(col \"hello\")\n(col nil \"hello\")\n\nThese two are made equivalent at compile time\n(col {:onClick f} \"hello\")\n(col #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(col :#the-id.klass.other-klass \"hello\")\n(col :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8K",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8L","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(label \"hello\")\n(label nil \"hello\")\n\nThese two are made equivalent at compile time\n(label {:onClick f} \"hello\")\n(label #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(label :#the-id.klass.other-klass \"hello\")\n(label :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8M",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8N","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(picture \"hello\")\n(picture nil \"hello\")\n\nThese two are made equivalent at compile time\n(picture {:onClick f} \"hello\")\n(picture #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(picture :#the-id.klass.other-klass \"hello\")\n(picture :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8O",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8P","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(rt \"hello\")\n(rt nil \"hello\")\n\nThese two are made equivalent at compile time\n(rt {:onClick f} \"hello\")\n(rt #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(rt :#the-id.klass.other-klass \"hello\")\n(rt :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8Q",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8R","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h6 \"hello\")\n(h6 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h6 {:onClick f} \"hello\")\n(h6 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h6 :#the-id.klass.other-klass \"hello\")\n(h6 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8S",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8T","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(vkern \"hello\")\n(vkern nil \"hello\")\n\nThese two are made equivalent at compile time\n(vkern {:onClick f} \"hello\")\n(vkern #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(vkern :#the-id.klass.other-klass \"hello\")\n(vkern :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8U",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8V","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(link \"hello\")\n(link nil \"hello\")\n\nThese two are made equivalent at compile time\n(link {:onClick f} \"hello\")\n(link #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(link :#the-id.klass.other-klass \"hello\")\n(link :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8W",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8X","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(defs \"hello\")\n(defs nil \"hello\")\n\nThese two are made equivalent at compile time\n(defs {:onClick f} \"hello\")\n(defs #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(defs :#the-id.klass.other-klass \"hello\")\n(defs :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8Y",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^8Z","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(glyph \"hello\")\n(glyph nil \"hello\")\n\nThese two are made equivalent at compile time\n(glyph {:onClick f} \"hello\")\n(glyph #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(glyph :#the-id.klass.other-klass \"hello\")\n(glyph :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^8[",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^90","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(colgroup \"hello\")\n(colgroup nil \"hello\")\n\nThese two are made equivalent at compile time\n(colgroup {:onClick f} \"hello\")\n(colgroup #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(colgroup :#the-id.klass.other-klass \"hello\")\n(colgroup :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^91",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^92","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(meter \"hello\")\n(meter nil \"hello\")\n\nThese two are made equivalent at compile time\n(meter {:onClick f} \"hello\")\n(meter #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(meter :#the-id.klass.other-klass \"hello\")\n(meter :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^93",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^94","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(bdo \"hello\")\n(bdo nil \"hello\")\n\nThese two are made equivalent at compile time\n(bdo {:onClick f} \"hello\")\n(bdo #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(bdo :#the-id.klass.other-klass \"hello\")\n(bdo :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^95",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^96","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feImage \"hello\")\n(feImage nil \"hello\")\n\nThese two are made equivalent at compile time\n(feImage {:onClick f} \"hello\")\n(feImage #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feImage :#the-id.klass.other-klass \"hello\")\n(feImage :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$b",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^97","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(b \"hello\")\n(b nil \"hello\")\n\nThese two are made equivalent at compile time\n(b {:onClick f} \"hello\")\n(b #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(b :#the-id.klass.other-klass \"hello\")\n(b :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^98",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^99","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(svg \"hello\")\n(svg nil \"hello\")\n\nThese two are made equivalent at compile time\n(svg {:onClick f} \"hello\")\n(svg #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(svg :#the-id.klass.other-klass \"hello\")\n(svg :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9:",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9;","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feTile \"hello\")\n(feTile nil \"hello\")\n\nThese two are made equivalent at compile time\n(feTile {:onClick f} \"hello\")\n(feTile #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feTile :#the-id.klass.other-klass \"hello\")\n(feTile :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$macro-create-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",197,"^9",7,"^:",197,"^;",27,"^[",["^10",["^?I",["^10",[["~$type","^11"],["^A3","^11","~$csskw"]]]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time.","^?J",["^ ","^?K",false,"^?L",3,"^?M",3,"^?N",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^[",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^?O",["^10",[null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/macro-create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",27,"^?J",["^ ","^?K",false,"^?L",3,"^?M",3,"^?N",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^[",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^?O",["^10",[null,null]]],"^?N",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^?P",null,"^?L",3,"^?O",["^10",[null,null]],"^9",1,"^?K",false,"^?Q",[["^ ","^?L",2,"^?K",false,"^?R","^?S"],["^ ","^?L",3,"^?K",false,"^?R","^?S"]],"^8",197,"^:",197,"^?M",3,"^?U",true,"^[",["^10",[["^A3","^11"],["^A3","^11","^A4"]]],"^6","Runtime interpretation of props. Used internally by element generation when the macro cannot expand the element at compile time."],"^9<",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9=","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(ellipse \"hello\")\n(ellipse nil \"hello\")\n\nThese two are made equivalent at compile time\n(ellipse {:onClick f} \"hello\")\n(ellipse #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(ellipse :#the-id.klass.other-klass \"hello\")\n(ellipse :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9>",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9?","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(code \"hello\")\n(code nil \"hello\")\n\nThese two are made equivalent at compile time\n(code {:onClick f} \"hello\")\n(code #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(code :#the-id.klass.other-klass \"hello\")\n(code :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9@",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9A","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(dialog \"hello\")\n(dialog nil \"hello\")\n\nThese two are made equivalent at compile time\n(dialog {:onClick f} \"hello\")\n(dialog #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(dialog :#the-id.klass.other-klass \"hello\")\n(dialog :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9B",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9C","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(linearGradient \"hello\")\n(linearGradient nil \"hello\")\n\nThese two are made equivalent at compile time\n(linearGradient {:onClick f} \"hello\")\n(linearGradient #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(linearGradient :#the-id.klass.other-klass \"hello\")\n(linearGradient :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9D",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9E","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(discard \"hello\")\n(discard nil \"hello\")\n\nThese two are made equivalent at compile time\n(discard {:onClick f} \"hello\")\n(discard #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(discard :#the-id.klass.other-klass \"hello\")\n(discard :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9F",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9G","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(font-face-src \"hello\")\n(font-face-src nil \"hello\")\n\nThese two are made equivalent at compile time\n(font-face-src {:onClick f} \"hello\")\n(font-face-src #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(font-face-src :#the-id.klass.other-klass \"hello\")\n(font-face-src :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9H",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9I","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(noscript \"hello\")\n(noscript nil \"hello\")\n\nThese two are made equivalent at compile time\n(noscript {:onClick f} \"hello\")\n(noscript #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(noscript :#the-id.klass.other-klass \"hello\")\n(noscript :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9J",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9K","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(animateTransform \"hello\")\n(animateTransform nil \"hello\")\n\nThese two are made equivalent at compile time\n(animateTransform {:onClick f} \"hello\")\n(animateTransform #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(animateTransform :#the-id.klass.other-klass \"hello\")\n(animateTransform :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9L",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9M","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(feColorMatrix \"hello\")\n(feColorMatrix nil \"hello\")\n\nThese two are made equivalent at compile time\n(feColorMatrix {:onClick f} \"hello\")\n(feColorMatrix #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(feColorMatrix :#the-id.klass.other-klass \"hello\")\n(feColorMatrix :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9N",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9O","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(h2 \"hello\")\n(h2 nil \"hello\")\n\nThese two are made equivalent at compile time\n(h2 {:onClick f} \"hello\")\n(h2 #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(h2 :#the-id.klass.other-klass \"hello\")\n(h2 :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9P",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9Q","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(area \"hello\")\n(area nil \"hello\")\n\nThese two are made equivalent at compile time\n(area {:onClick f} \"hello\")\n(area #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(area :#the-id.klass.other-klass \"hello\")\n(area :#the-id.klass.other-klass {:onClick f} \"hello\")"],"^9R",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9S","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(br \"hello\")\n(br nil \"hello\")\n\nThese two are made equivalent at compile time\n(br {:onClick f} \"hello\")\n(br #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(br :#the-id.klass.other-klass \"hello\")\n(br :#the-id.klass.other-klass {:onClick f} \"hello\")"],"~$create-element",["^ ","^?H",null,"^5",["^ ","^7","com/fulcrologic/fulcro/dom.cljs","^8",70,"^9",7,"^:",70,"^;",21,"^[",["^10",["^?I",["^10",[["~$tag"],["^A7","^@="],["^A7","^@=","~$&","~$children"]]]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`","^?J",["^ ","^?K",true,"^?L",2,"^?M",2,"^?N",["^10",[["^A7"],["^A7","^@="]]],"^[",["^10",[["^A7"],["^A7","^@="],["^A7","^@=","~$&","^A8"]]],"^?O",["^10",[null,null,null]]]],"^12","~$com.fulcrologic.fulcro.dom/create-element","^7","com/fulcrologic/fulcro/dom.cljs","^;",21,"^?J",["^ ","^?K",true,"^?L",2,"^?M",2,"^?N",["^10",[["^A7"],["^A7","^@="]]],"^[",["^10",[["^A7"],["^A7","^@="],["^A7","^@=","~$&","^A8"]]],"^?O",["^10",[null,null,null]]],"^?N",["^10",[["^A7"],["^A7","^@="]]],"^?P",null,"^?L",2,"^?O",["^10",[null,null,null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",1,"^?K",false,"^?R","^?S"],["^ ","^?L",2,"^?K",false,"^?R","^?Y"],["^ ","^?L",2,"^?K",true,"^?R","^?Y"]],"^8",70,"^:",70,"^?M",2,"^?U",true,"^[",["^10",[["^A7"],["^A7","^@="],["^A7","^@=","~$&","^A8"]]],"^6","Create a DOM element for which there exists no corresponding function.\n   Useful to create DOM elements not included in React.DOM. Equivalent\n   to calling `js/React.createElement`"],"^9T",["^ ","^?H",null,"^5",["^ ","^[",["^10",["^?I",["^10",[["~$&","^11"]]]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^7",null],"^12","^9U","^7","com/fulcrologic/fulcro/dom.cljs","^?J",["^ ","^?K",true,"^?L",0,"^?M",0,"^?N",[["^10",["^11"]]],"^[",["^10",[["~$&","^11"]]],"^?O",["^10",[null]]],"^?N",[["^10",["^11"]]],"^?P",null,"^?L",0,"^?O",["^10",[null]],"^9",1,"^?K",true,"^?Q",[["^ ","^?L",0,"^?K",true,"^?R","^?S"]],"^8",226,"^?T","^?S","^?M",0,"^?U",true,"^[",["^10",[["~$&","^11"]]],"^6","Returns a React DOM element. Can be invoked in several ways\n\nThese two are made equivalent at compile time\n(image \"hello\")\n(image nil \"hello\")\n\nThese two are made equivalent at compile time\n(image {:onClick f} \"hello\")\n(image #js {:onClick f} \"hello\")\n\nThere is also a shorthand for CSS id and class names\n(image :#the-id.klass.other-klass \"hello\")\n(image :#the-id.klass.other-klass {:onClick f} \"hello\")"]],"^:>",["^ ","^?","^@","^9Z","^9[","^:0","^:1","^B","^B","~$s","^@","^:1","^:1","^9[","^9[","^@","^@","^15","^15"],"~:cljs.analyzer/constants",["^ ","^:<",["^O",["~$cljs.core/array?","~$cljs.spec.alpha/*","~:children","~$cljs.core/keyword?","~$cljs.core/vector?","~:element","~:else","^@E","~:number","~$cljs.spec.alpha/cat","~$p1__60941#","~$p1__60940#","~:warn","~$cljs.core/string?","~$cljs.spec.alpha/or","~:css","~$cljs.core/map?","~:string","~$%","~$cljs.core/number?","~$cljs.core/object?","~$fn*","~$p1__60939#","~:nil","~$cljs.core/nil?","~$cljs.core/fn","~:js-object","~:attrs","~$cljs.core/not","~:com.fulcrologic.fulcro.dom/dom-element-args","~$cljs.core/and","~:collection","~$cljs.core/seq?","~:auto","~:p","~:map","~$cljs.core/or","~$cljs.spec.alpha/?"]],"~:order",["^AV","^AC","^AI","^B1","^A>","^AT","^AH","^AP","^AQ","^A[","^AN","^AO","^AW","^AJ","^AU","^@E","^AS","^AE","^AM","^A=","^A<","^AK","^AG","^AB","^AL","^AX","^AD","^B0","^A?","^AY","^A;","^A@","^AR","~$%","^AA","^AF","~:p","^AZ"]],"^:E",["^ ","^:>",["^O",[]],"^:=",["^O",[]]],"^:F",["^ "],"^:G",["^:4","^B","^@","^:;","^:1","^:6","^:7","^:3","^9Y","^:5","^9["]],"^14","^15","~:ns-specs",["^ ","^AV",["^10",["^AC","^AI",["^10",["^B1","^A>"]],"^AT",["^10",["^B1",["^10",["^AH","^AP","^AQ","^A[",["^10",["^AN",["^AO"],["^10",["^AW",["^10",["^AJ","^AO"]],["^10",["^AU",["^10",["^@E","^AO"]]]]]]]],"^AS",["^10",["^AN",["^AE"],["^10",["^AW",["^10",["^AM","^AE"]],["^10",["^AU",["^10",["^@E","^AE"]]]]]]]]]]]],"^A=",["^10",["^A<",["^10",["^AH","^AK","^AG","^AB","^AL","^AX",["^10",["^AN",["^AD"],["^10",["^B0",["^10",["^A?","^AD"]],["^10",["^AY","^AD"]],["^10",["^A;","^AD"]]]]]],"^AP","^AQ","^A@","^@E"]]]]]]],"~:ns-speced-vars",[],"~:compiler-options",["^:U",[["^B5","~:static-fns"],true,["^B5","~:elide-asserts"],false,["^B5","~:optimize-constants"],null,["^B5","^:L"],null,["^B5","~:external-config"],null,["^B5","~:tooling-config"],null,["^B5","~:emit-constants"],null,["^B5","~:load-tests"],null,["^B5","~:form-size-threshold"],null,["^B5","~:infer-externs"],true,["^B5","^:N"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^B5","~:fn-invoke-direct"],null,["^B5","~:source-map"],"/dev/null"]]]