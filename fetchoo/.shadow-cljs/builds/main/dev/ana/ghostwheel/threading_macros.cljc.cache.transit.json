["^ ","~:output",["^ ","~:js","goog.provide('ghostwheel.threading_macros');\ngoog.require('cljs.core');\ngoog.require('ghostwheel.logging');\ngoog.require('ghostwheel.utils');\nghostwheel.threading_macros.log_threading_header = (function ghostwheel$threading_macros$log_threading_header(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___57046 = arguments.length;\nvar i__4731__auto___57048 = (0);\nwhile(true){\nif((i__4731__auto___57048 < len__4730__auto___57046)){\nargs__4736__auto__.push((arguments[i__4731__auto___57048]));\n\nvar G__57049 = (i__4731__auto___57048 + (1));\ni__4731__auto___57048 = G__57049;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn ghostwheel.threading_macros.log_threading_header.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nghostwheel.threading_macros.log_threading_header.cljs$core$IFn$_invoke$arity$variadic = (function (threading_type,expr,p__56890){\nvar vec__56892 = p__56890;\nvar name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56892,(0),null);\nreturn ghostwheel.logging.group.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(threading_type),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr),(cljs.core.truth_(name)?\" \":null),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"ghostwheel.logging\",\"background\",\"ghostwheel.logging/background\",41589606),new cljs.core.Keyword(null,\"black\",\"black\",1294279647).cljs$core$IFn$_invoke$arity$1(ghostwheel.logging.ghostwheel_colors)], null));\n});\n\nghostwheel.threading_macros.log_threading_header.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nghostwheel.threading_macros.log_threading_header.cljs$lang$applyTo = (function (seq56883){\nvar G__56884 = cljs.core.first(seq56883);\nvar seq56883__$1 = cljs.core.next(seq56883);\nvar G__56885 = cljs.core.first(seq56883__$1);\nvar seq56883__$2 = cljs.core.next(seq56883__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__56884,G__56885,seq56883__$2);\n});\n\nghostwheel.threading_macros.log_cond_step = (function ghostwheel$threading_macros$log_cond_step(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___57054 = arguments.length;\nvar i__4731__auto___57055 = (0);\nwhile(true){\nif((i__4731__auto___57055 < len__4730__auto___57054)){\nargs__4736__auto__.push((arguments[i__4731__auto___57055]));\n\nvar G__57056 = (i__4731__auto___57055 + (1));\ni__4731__auto___57055 = G__57056;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((3) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((3)),(0),null)):null);\nreturn ghostwheel.threading_macros.log_cond_step.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4737__auto__);\n});\n\nghostwheel.threading_macros.log_cond_step.cljs$core$IFn$_invoke$arity$variadic = (function (test,step,data,p__56967){\nvar vec__56968 = p__56967;\nvar style = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__56968,(0),null);\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"ghostwheel.logging\",\"pr-clog\",\"ghostwheel.logging/pr-clog\",-1989385842,null),null,(1),null)),(new cljs.core.List(null,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(test),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(step)].join(''),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,data,null,(1),null)),(new cljs.core.List(null,style,null,(1),null))], 0))));\n});\n\nghostwheel.threading_macros.log_cond_step.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nghostwheel.threading_macros.log_cond_step.cljs$lang$applyTo = (function (seq56948){\nvar G__56949 = cljs.core.first(seq56948);\nvar seq56948__$1 = cljs.core.next(seq56948);\nvar G__56950 = cljs.core.first(seq56948__$1);\nvar seq56948__$2 = cljs.core.next(seq56948__$1);\nvar G__56951 = cljs.core.first(seq56948__$2);\nvar seq56948__$3 = cljs.core.next(seq56948__$2);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__56949,G__56950,G__56951,seq56948__$3);\n});\n\nghostwheel.threading_macros.log_some_step = (function ghostwheel$threading_macros$log_some_step(some_step){\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((new cljs.core.List(null,new cljs.core.Symbol(\"ghostwheel.logging\",\"pr-clog\",\"ghostwheel.logging/pr-clog\",-1989385842,null),null,(1),null)),(new cljs.core.List(null,cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(cljs.core.last(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.seq_QMARK_,some_step)))),null,(1),null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(new cljs.core.List(null,some_step,null,(1),null))], 0))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ghostwheel/threading_macros.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$*cond->",["^ ","~:arglists",["~#list",[["~$expr","~$&","~$clauses"]]],"~:doc","Traced version of cond->","^7",111,"^8",1,"^6","ghostwheel/threading_macros.cljc","~:name","~$ghostwheel.threading-macros/*cond->","~:ns","~$ghostwheel.threading-macros","~:macro",true],"~$*->>",["^ ","^Q",["^R",[["~$orig-x","~$&","~$orig-forms"]]],"^U","Traced version of ->>","^7",53,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*->>","^X","^Y","^Z",true],"~$*as->",["^ ","^Q",["^R",[["^S","~$name","~$&","~$forms"]]],"^U","Traced version of as->","^7",82,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*as->","^X","^Y","^Z",true],"~$*some->>",["^ ","^Q",["^R",[["^S","~$&","^15"]]],"^U","Traced version of some->>","^7",190,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*some->>","^X","^Y","^Z",true],"~$*some->",["^ ","^Q",["^R",[["^S","~$&","^15"]]],"^U","Traced version of some->","^7",169,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*some->","^X","^Y","^Z",true],"~$*cond->>",["^ ","^Q",["^R",[["^S","~$&","^T"]]],"^U","Traced version of cond->>","^7",136,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*cond->>","^X","^Y","^Z",true],"~$*->",["^ ","^Q",["^R",[["^10","~$&","^11"]]],"^U","Traced version of ->","^7",25,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","~$ghostwheel.threading-macros/*->","^X","^Y","^Z",true]],"^V","^Y","~:op","^X","~:imports",null,"~:requires",["^ ","~$ghostwheel.logging","^1B","~$l","^1B","~$ghostwheel.utils","^1C","~$u","^1C","^A","^A","~$goog","^1D"],"~:seen",["^N",["~:require","~:require-macros"]],"~:uses",["^ ","~$ghostwheel-colors","^1B","~$pr-clog","^1B","~$cljs-env?","^1C","~$clj->cljs","^1C"],"^1G",["^ ","^Y","^Y","^A","^A","^1C","^1C","~$u","^1C"],"~:form",["^R",["~$ns","^Y",["^R",["^1G","^Y"]],["^R",["^1F",["^1B","~:as","~$l","~:refer",["^1I","^1J"]],["^1C","^1O","~$u","^1P",["^1K","^1L"]]]]]],"~:flags",["^ ","^1G",["^N",[]],"^1F",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^1D","^A","^1B","^1C"]],"^X","^Y","~:resource-id",["~:shadow.build.classpath/resource","ghostwheel/threading_macros.cljc"],"~:compiled-at",1630228423168,"~:resource-name","ghostwheel/threading_macros.cljc","~:warnings",[],"~:source",";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ghostwheel.threading-macros\n  #?(:cljs (:require-macros ghostwheel.threading-macros))\n  (:require [ghostwheel.logging :as l :refer [ghostwheel-colors pr-clog]]\n            [ghostwheel.utils :as u :refer [cljs-env? clj->cljs]]))\n\n\n;;;; Traced threading macros\n\n\n;; REVIEW: Consider doing this at compile time and passing the &env to differentiate\n;; between Clojure and -Script\n(defn log-threading-header\n  [threading-type expr & [name]]\n  (l/group (str threading-type \" \" expr (when name \" \") name)\n           {::l/background (:black ghostwheel-colors)}))\n\n(defmacro *->\n  \"Traced version of ->\"\n  [orig-x & orig-forms]\n  (let [untraced `(~'-> ~orig-x ~@orig-forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(loop [x orig-x, forms orig-forms]\n             (if forms\n               (let [form     (first forms)\n                     threaded (if (seq? form)\n                                (with-meta `(pr-clog ~(str form)\n                                                     (~(first form) ~x ~@(next form)))\n                                           (meta form))\n                                `(pr-clog ~(str form)\n                                          ~(list form x)))]\n                 (recur threaded (next forms)))\n               `(do\n                  (log-threading-header \"->\" ~(str orig-x))\n                  (pr-clog ~(str orig-x) ~orig-x)\n                  (let [x# ~x]\n                    ~(when (cljs-env? &env)\n                       `(l/group-end))\n                    x#))))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *->>\n  \"Traced version of ->>\"\n  [orig-x & orig-forms]\n  (let [untraced `(~'->> ~orig-x ~@orig-forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          (do\n            ~(loop [x orig-x, forms orig-forms]\n               (if forms\n                 (let [form     (first forms)\n                       threaded (if (seq? form)\n                                  (with-meta `(pr-clog ~(str form)\n                                                       (~(first form) ~@(next form) ~x))\n                                             (meta form))\n                                  `(pr-clog ~(str form)\n                                            ~(list form x)))]\n                   (recur threaded (next forms)))\n                 `(do\n                    (log-threading-header \"->>\" ~(str orig-x))\n                    (pr-clog ~(str orig-x) ~orig-x)\n                    (let [x# ~x]\n                      ~(when (cljs-env? &env)\n                         `(l/group-end))\n                      x#)))))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *as->\n  \"Traced version of as->\"\n  [expr name & forms]\n  (let [untraced `(~'as-> ~expr ~name ~@forms)\n        log-step (fn [form] `(pr-clog ~(str form) ~form))]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          (do\n            (log-threading-header \"as->\" ~(str expr) ~(str name))\n            (pr-clog ~(str name) ~expr)\n            (let [~name ~expr\n                  ~@(interleave (repeat name) (map log-step forms))]\n              ~(when (cljs-env? &env)\n                 `(l/group-end))\n              ~name))))\n     (cljs-env? &env) clj->cljs)))\n\n(defn- log-cond-step\n  [test step data & [style]]\n  `(pr-clog\n    ~(str test\n          \" \"\n          step)\n    ~data\n    ~style))\n\n(defmacro *cond->\n  \"Traced version of cond->\"\n  [expr & clauses]\n  (assert (even? (count clauses)))\n  (let [untraced `(~'cond-> ~expr ~@clauses)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [[test step]]\n                         `(if ~test\n                            ~(log-cond-step test step `(-> ~g ~step) {::l/weight :bold})\n                            ~(log-cond-step test step g {::l/foreground (:base0 ghostwheel-colors)})))]\n             `(do\n                (log-threading-header \"cond->\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map pstep (partition 2 clauses)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *cond->>\n  \"Traced version of cond->>\"\n  [expr & clauses]\n  (assert (even? (count clauses)))\n  (let [untraced `(~'cond->> ~expr ~@clauses)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [[test step]]\n                         `(if ~test\n                            ~(log-cond-step test step `(->> ~g ~step) {::l/weight :bold})\n                            ~(log-cond-step test step g {::l/foreground (:base0 ghostwheel-colors)})))]\n             `(do\n                (log-threading-header \"cond->>\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map pstep (partition 2 clauses)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defn- log-some-step\n  [some-step]\n  `(pr-clog\n    ~(str #_(second some-step)\n      #_\" \"\n      (->> some-step (filter seq?) last last))\n    ~some-step))\n\n(defmacro *some->\n  \"Traced version of some->\"\n  [expr & forms]\n  (let [untraced `(~'some-> ~expr ~@forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [step] `(if (nil? ~g) nil (-> ~g ~step)))]\n             `(do\n                (log-threading-header \"some->\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map log-some-step (map pstep forms)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *some->>\n  \"Traced version of some->>\"\n  [expr & forms]\n  (let [untraced `(~'some->> ~expr ~@forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [step] `(if (nil? ~g) nil (->> ~g ~step)))]\n             `(do\n                (log-threading-header \"some->>\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map log-some-step (map pstep forms)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;;AAmBA,AAAA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AACHU,AAAeC;AADlB,AAAA,AAAAT,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAC0BU;AAD1B,AAEE,AAAA,AAAA,AAACC,AAAQ,AAAA,AAAKH,AAAmBC,AAAK,AAAA,AAAA,AAAA,AAAMC,AAAUA,AAC7B,AAAA,AAAQE;;;AAHnC,AAAA,AAAA,AAAMd;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAkFA,AAAA,AAAA,AAAAV,AAAOqB;AAAP,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjB;;;AAAA,AAAA,AAAA,AAAA,AAAAkB,AAAOD,AACJW,AAAKC,AAAKC;AADb,AAAA,AAAAX,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AACqBY;AADrB,AAAA,AAAAX,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAGK,AAAA,AAAKK,AAEAC,AACLC,AACAC;;;AAPL,AAAA,AAAA,AAAOd;;AAAP;AAAA,AAAA,AAAA,AAAAO,AAAOP;AAAP,AAAA,AAAAQ,AAAA,AAAAjB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAAE,AAAA,AAAAlB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAAG,AAAA,AAAAnB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAA,AAAAc,AAAAC,AAAAC,AAAAH;;;AAAA,AA2DA,AAAA,AAAOQ,AACJC;AADH,AAAA,AAAAb,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAGK,AAEC,AAAA,AAAKU,AAAU,AAACC,AAAOC,AAAMC,AAAKA,AACnCH","names",["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","ghostwheel.threading-macros/log-threading-header","p__56890","vec__56892","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq56883","G__56884","cljs.core/first","cljs.core/next","G__56885","self__4717__auto__","threading-type","expr","name","ghostwheel.logging.group.cljs$core$IFn$_invoke$arity$2","ghostwheel.logging/ghostwheel-colors","ghostwheel.threading-macros/log-cond-step","p__56967","vec__56968","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","seq56948","G__56949","G__56950","G__56951","test","step","data","style","ghostwheel.threading-macros/log-some-step","some-step","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/seq?","cljs.core/last"]]],"~:cache-keys",["~#cmap",[["^1U","ghostwheel/utils.cljc"],[1630228119207,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^1D","^A","~$clojure.walk","~$cljs.env","~$orchestra-cljs.spec.test"]]],["^1U","goog/labs/useragent/platform.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","~$goog.labs.userAgent.util","~$goog.string"]]],["^1U","orchestra_cljs/spec/test.cljs"],[1630228119080,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","~$goog.object","~$goog.userAgent.product","~$clojure.string","~$cljs.stacktrace","^I","^?","^G"]]],["^1U","cljs/spec/gen/alpha.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","~$goog.Uri"]]],["^1U","goog/math/math.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","~$goog.array","~$goog.asserts"]]],["^1U","cljs/env.cljc"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A"]]],["^1U","goog/labs/useragent/browser.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2=","^2?","~$goog.string.internal"]]],["^1U","goog/array/array.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2E"]]],["^1U","goog/useragent/useragent.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2=","~$goog.reflect","^2>"]]],["^1U","goog/debug/error.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","goog/dom/nodetype.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","cljs/pprint.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^2A","^2>","~$goog.string.StringBuffer"]]],["^1U","goog/object/object.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1U","cljs/stacktrace.cljc"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^2>","^2A"]]],["^1U","goog/math/long.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2E","^2J"]]],["^1U","goog/string/internal.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","goog/functions/functions.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","clojure/walk.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A"]]],["^1U","goog/useragent/product.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2G","^2I","~$goog.userAgent"]]],["^1U","goog/structs/map.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1U","goog/labs/useragent/engine.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2=","^2>"]]],["^1U","goog/asserts/asserts.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1U","goog/uri/uri.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2E","^2>","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1U","ghostwheel/threading_macros.cljc"],[1630228119207,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^1B","^1C"]]],["^1U","ghostwheel/logging.cljc"],[1630228119285,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^2A","^I"]]],["^1U","cljs/spec/alpha.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^2?","^2:","^G","^2A"]]],["^1U","goog/base.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",[]]],["^1U","goog/structs/structs.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2?"]]],["^1U","clojure/string.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^A","^2>","^2K"]]],["^1U","goog/string/string.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2F"]]],["^1U","goog/reflect/reflect.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","goog/labs/useragent/util.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2F"]]],["^1U","goog/string/stringbuffer.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","goog/iter/iter.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2E","~$goog.functions","~$goog.math"]]],["^1U","cljs/core.cljs"],[1630228118934,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["~$goog.math.Long","~$goog.math.Integer","^2>","^2?","^2D","^2C","^2K"]]],["^1U","goog/math/integer.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D"]]],["^1U","goog/uri/utils.js"],[1630228359392,"^26",["^ ","^27",null,"^28",["^N",[]],"^29",["^1D","^2D","^2E","^2>"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar!/ghostwheel/logging.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/threading_macros.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer/api.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/pprint.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar!/ghostwheel/utils.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar!/orchestra_cljs/spec/test.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ghostwheel/threading_macros.cljc","^7",9,"^8",5,"^9",9,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O",["^ ","^P",["^ ","^Q",["^R",[["^S","~$&","^T"]]],"^U","Traced version of cond->","^7",111,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^W","^X","^Y","^Z",true],"^[",["^ ","^Q",["^R",[["^10","~$&","^11"]]],"^U","Traced version of ->>","^7",53,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^12","^X","^Y","^Z",true],"^13",["^ ","^Q",["^R",[["^S","^14","~$&","^15"]]],"^U","Traced version of as->","^7",82,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^16","^X","^Y","^Z",true],"^17",["^ ","^Q",["^R",[["^S","~$&","^15"]]],"^U","Traced version of some->>","^7",190,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^18","^X","^Y","^Z",true],"^19",["^ ","^Q",["^R",[["^S","~$&","^15"]]],"^U","Traced version of some->","^7",169,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^1:","^X","^Y","^Z",true],"^1;",["^ ","^Q",["^R",[["^S","~$&","^T"]]],"^U","Traced version of cond->>","^7",136,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^1<","^X","^Y","^Z",true],"^1=",["^ ","^Q",["^R",[["^10","~$&","^11"]]],"^U","Traced version of ->","^7",25,"^8",1,"^6","ghostwheel/threading_macros.cljc","^V","^1>","^X","^Y","^Z",true]],"^V","^Y","^1@",null,"^1A",["^ ","^1B","^1B","~$l","^1B","^1C","^1C","~$u","^1C","^A","^A","^1D","^1D"],"^1E",["^N",["^1F","^1G"]],"^1H",["^ ","^1I","^1B","^1J","^1B","^1K","^1C","^1L","^1C"],"~:defs",["^ ","~$log-threading-header",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ghostwheel/threading_macros.cljc","^7",20,"^8",7,"^9",20,"^:",27,"^Q",["^R",["~$quote",["^R",[["~$threading-type","^S","~$&",["^14"]]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^R",["^3Z","^S",["^14"]]]],"^Q",["^R",[["^3Z","^S","~$&",["^14"]]]],"~:arglists-meta",["^R",[null]]]],"^V","~$ghostwheel.threading-macros/log-threading-header","^6","ghostwheel/threading_macros.cljc","^:",27,"^3[",["^ ","^40",true,"^41",2,"^42",2,"^43",[["^R",["^3Z","^S",["^14"]]]],"^Q",["^R",[["^3Z","^S","~$&",["^14"]]]],"^44",["^R",[null]]],"^43",[["^R",["^3Z","^S",["^14"]]]],"~:protocol-impl",null,"^41",2,"^44",["^R",[null]],"^8",1,"^40",true,"~:methods",[["^ ","^41",2,"^40",true,"~:tag","~$any"]],"^7",20,"~:ret-tag","^49","^9",20,"^42",2,"~:fn-var",true,"^Q",["^R",[["^3Z","^S","~$&",["^14"]]]]],"~$log-cond-step",["^ ","^3X",null,"^5",["^ ","^6","ghostwheel/threading_macros.cljc","^7",102,"^8",8,"^9",102,"^:",21,"~:private",true,"^Q",["^R",["^3Y",["^R",[["~$test","~$step","~$data","~$&",["~$style"]]]]]],"^3[",["^ ","^40",true,"^41",3,"^42",3,"^43",[["^R",["^4>","^4?","^4@",["^4A"]]]],"^Q",["^R",[["^4>","^4?","^4@","~$&",["^4A"]]]],"^44",["^R",[null]]]],"^4=",true,"^V","~$ghostwheel.threading-macros/log-cond-step","^6","ghostwheel/threading_macros.cljc","^:",21,"^3[",["^ ","^40",true,"^41",3,"^42",3,"^43",[["^R",["^4>","^4?","^4@",["^4A"]]]],"^Q",["^R",[["^4>","^4?","^4@","~$&",["^4A"]]]],"^44",["^R",[null]]],"^43",[["^R",["^4>","^4?","^4@",["^4A"]]]],"^46",null,"^41",3,"^44",["^R",[null]],"^8",1,"^40",true,"^47",[["^ ","^41",3,"^40",true,"^48",["^N",["~$seq","~$cljs.core/IList"]]]],"^7",102,"^4:","^49","^9",102,"^42",3,"^4;",true,"^Q",["^R",[["^4>","^4?","^4@","~$&",["^4A"]]]]],"~$log-some-step",["^ ","^3X",null,"^5",["^ ","^6","ghostwheel/threading_macros.cljc","^7",161,"^8",8,"^9",161,"^:",21,"^4=",true,"^Q",["^R",["^3Y",["^R",[["~$some-step"]]]]]],"^4=",true,"^V","~$ghostwheel.threading-macros/log-some-step","^6","ghostwheel/threading_macros.cljc","^:",21,"^43",["^R",[["^4F"]]],"^46",null,"^44",["^R",[null,null]],"^8",1,"^40",false,"^7",161,"^4:",["^N",["^4C","^4D"]],"^9",161,"^42",1,"^4;",true,"^Q",["^R",["^3Y",["^R",[["^4F"]]]]]]],"^1G",["^ ","^Y","^Y","^A","^A","^1C","^1C","~$u","^1C"],"~:cljs.analyzer/constants",["^ ","^1E",["^N",["~:ghostwheel.logging/background","~$ghostwheel.logging/pr-clog","~:black"]],"~:order",["^4I","^4K","^4J"]],"^1Q",["^ ","^1G",["^N",[]],"^1F",["^N",[]]],"^1R",["^ "],"^1S",["^1D","^A","^1B","^1C"]],"^X","^Y","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^25",[["^4O","~:static-fns"],true,["^4O","~:elide-asserts"],false,["^4O","~:optimize-constants"],null,["^4O","^1X"],null,["^4O","~:external-config"],null,["^4O","~:tooling-config"],null,["^4O","~:emit-constants"],null,["^4O","~:load-tests"],null,["^4O","~:form-size-threshold"],null,["^4O","~:infer-externs"],true,["^4O","^1Z"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4O","~:fn-invoke-direct"],null,["^4O","~:source-map"],"/dev/null"]]]