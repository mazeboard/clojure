["^ ","~:output",["^ ","~:js","goog.provide('edn_query_language.core');\ngoog.require('cljs.core');\ngoog.require('cljs.spec.alpha');\ngoog.require('clojure.test.check');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.properties');\n/**\n * Dynamic var.  When bound to true in the current thread calls to query->ast will no go past the\n *   first level of children.  This is useful when you just want the AST for one layer of a query.\n */\nedn_query_language.core._STAR_shallow_conversion_STAR_ = false;\n\n/** @define {boolean} */\ngoog.define(\"edn_query_language.core.INCLUDE_SPECS\",true);\nif(edn_query_language.core.INCLUDE_SPECS){\nedn_query_language.core.generators = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-join\",\"edn-query-language.core/gen-mutation-join\",-322365024),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-key\",\"edn-query-language.core/gen-ident-key\",206827139),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-key\",\"edn-query-language.core/gen-mutation-key\",-1303208029),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-special-property\",\"edn-query-language.core/gen-special-property\",119579205),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-key\",\"edn-query-language.core/gen-join-key-param-key\",-1963047635),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-value\",\"edn-query-language.core/gen-ident-value\",-277824306),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation\",\"edn-query-language.core/gen-mutation\",-1800855536),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query-expr\",\"edn-query-language.core/gen-query-expr\",-1899459535),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-max-depth\",\"edn-query-language.core/gen-max-depth\",2056700083),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-expr\",\"edn-query-language.core/gen-mutation-expr\",-1023991277),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-union\",\"edn-query-language.core/gen-union\",658558325),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join\",\"edn-query-language.core/gen-join\",1458926230),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr\",\"edn-query-language.core/gen-param-expr\",680343767),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-query\",\"edn-query-language.core/gen-join-query\",2012309943),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key\",\"edn-query-language.core/gen-join-key\",113991259),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr-key\",\"edn-query-language.core/gen-param-expr-key\",-1954692996),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-depth\",\"edn-query-language.core/gen-depth\",-137293027),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-union-key\",\"edn-query-language.core/gen-union-key\",-1438378594),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-expr\",\"edn-query-language.core/gen-join-key-param-expr\",1421551999),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-recursion\",\"edn-query-language.core/gen-recursion\",-1703222337)],[(function edn_query_language$core$mutation_join(p__43641){\nvar map__43642 = p__43641;\nvar map__43642__$1 = (((((!((map__43642 == null))))?(((((map__43642.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43642.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43642):map__43642);\nvar env = map__43642__$1;\nvar gen_mutation_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43642__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-expr\",\"edn-query-language.core/gen-mutation-expr\",-1023991277));\nvar gen_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43642__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463));\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3((gen_mutation_expr.cljs$core$IFn$_invoke$arity$1 ? gen_mutation_expr.cljs$core$IFn$_invoke$arity$1(env) : gen_mutation_expr.call(null,env)),(gen_query.cljs$core$IFn$_invoke$arity$1 ? gen_query.cljs$core$IFn$_invoke$arity$1(env) : gen_query.call(null,env)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"num-elements\",\"num-elements\",1960422107),(1)], null));\n}),(function edn_query_language$core$gen_ident_key(_){\nreturn clojure.test.check.generators.keyword_ns;\n}),(function edn_query_language$core$gen_mutation_key(_){\nreturn clojure.test.check.generators.symbol;\n}),(function edn_query_language$core$gen_special_property(_){\nreturn clojure.test.check.generators.return$(new cljs.core.Symbol(null,\"*\",\"*\",345799209,null));\n}),(function edn_query_language$core$gen_query(p__43651){\nvar map__43652 = p__43651;\nvar map__43652__$1 = (((((!((map__43652 == null))))?(((((map__43652.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43652.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43652):map__43652);\nvar env = map__43652__$1;\nvar gen_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43652__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305));\nvar gen_query_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43652__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query-expr\",\"edn-query-language.core/gen-query-expr\",-1899459535));\nvar gen_max_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43652__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-max-depth\",\"edn-query-language.core/gen-max-depth\",2056700083));\nif((gen_max_depth > (0))){\nreturn clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1((function (){var G__43657 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-max-depth\",\"edn-query-language.core/gen-max-depth\",2056700083),cljs.core.dec);\nreturn (gen_query_expr.cljs$core$IFn$_invoke$arity$1 ? gen_query_expr.cljs$core$IFn$_invoke$arity$1(G__43657) : gen_query_expr.call(null,G__43657));\n})());\n} else {\nreturn clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1((gen_property.cljs$core$IFn$_invoke$arity$1 ? gen_property.cljs$core$IFn$_invoke$arity$1(env) : gen_property.call(null,env)));\n}\n}),(function edn_query_language$core$gen_params(_){\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.any_printable,clojure.test.check.generators.any_printable);\n}),(function edn_query_language$core$gen_join_key_param_key(p__43659){\nvar map__43660 = p__43659;\nvar map__43660__$1 = (((((!((map__43660 == null))))?(((((map__43660.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43660.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43660):map__43660);\nvar env = map__43660__$1;\nvar gen_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43660__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305));\nvar gen_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43660__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611));\nreturn clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(gen_property.cljs$core$IFn$_invoke$arity$1 ? gen_property.cljs$core$IFn$_invoke$arity$1(env) : gen_property.call(null,env)),(gen_ident.cljs$core$IFn$_invoke$arity$1 ? gen_ident.cljs$core$IFn$_invoke$arity$1(env) : gen_ident.call(null,env))], null));\n}),(function edn_query_language$core$gen_ident(p__43666){\nvar map__43667 = p__43666;\nvar map__43667__$1 = (((((!((map__43667 == null))))?(((((map__43667.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43667.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43667):map__43667);\nvar env = map__43667__$1;\nvar gen_ident_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43667__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-key\",\"edn-query-language.core/gen-ident-key\",206827139));\nvar gen_ident_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43667__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-value\",\"edn-query-language.core/gen-ident-value\",-277824306));\nreturn clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(gen_ident_key.cljs$core$IFn$_invoke$arity$1 ? gen_ident_key.cljs$core$IFn$_invoke$arity$1(env) : gen_ident_key.call(null,env)),(gen_ident_value.cljs$core$IFn$_invoke$arity$1 ? gen_ident_value.cljs$core$IFn$_invoke$arity$1(env) : gen_ident_value.call(null,env))], 0));\n}),(function edn_query_language$core$gen_ident_value(_){\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(15),clojure.test.check.generators.simple_type_printable], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),clojure.test.check.generators.return$(new cljs.core.Symbol(null,\"_\",\"_\",-1201019570,null))], null)], null));\n}),(function edn_query_language$core$gen_mutation(p__43672){\nvar map__43673 = p__43672;\nvar map__43673__$1 = (((((!((map__43673 == null))))?(((((map__43673.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43673.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43673):map__43673);\nvar env = map__43673__$1;\nvar gen_mutation_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43673__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-expr\",\"edn-query-language.core/gen-mutation-expr\",-1023991277));\nvar gen_mutation_join = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43673__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-join\",\"edn-query-language.core/gen-mutation-join\",-322365024));\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(5),(gen_mutation_expr.cljs$core$IFn$_invoke$arity$1 ? gen_mutation_expr.cljs$core$IFn$_invoke$arity$1(env) : gen_mutation_expr.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_mutation_join.cljs$core$IFn$_invoke$arity$1 ? gen_mutation_join.cljs$core$IFn$_invoke$arity$1(env) : gen_mutation_join.call(null,env))], null)], null));\n}),(function edn_query_language$core$gen_query_expr(p__43676){\nvar map__43677 = p__43676;\nvar map__43677__$1 = (((((!((map__43677 == null))))?(((((map__43677.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43677.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43677):map__43677);\nvar env = map__43677__$1;\nvar gen_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305));\nvar gen_join = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join\",\"edn-query-language.core/gen-join\",1458926230));\nvar gen_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611));\nvar gen_param_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr\",\"edn-query-language.core/gen-param-expr\",680343767));\nvar gen_special_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-special-property\",\"edn-query-language.core/gen-special-property\",119579205));\nvar gen_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43677__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation\",\"edn-query-language.core/gen-mutation\",-1800855536));\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(gen_property.cljs$core$IFn$_invoke$arity$1 ? gen_property.cljs$core$IFn$_invoke$arity$1(env) : gen_property.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(gen_join.cljs$core$IFn$_invoke$arity$1 ? gen_join.cljs$core$IFn$_invoke$arity$1(env) : gen_join.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_ident.cljs$core$IFn$_invoke$arity$1 ? gen_ident.cljs$core$IFn$_invoke$arity$1(env) : gen_ident.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(gen_param_expr.cljs$core$IFn$_invoke$arity$1 ? gen_param_expr.cljs$core$IFn$_invoke$arity$1(env) : gen_param_expr.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_mutation.cljs$core$IFn$_invoke$arity$1 ? gen_mutation.cljs$core$IFn$_invoke$arity$1(env) : gen_mutation.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_special_property.cljs$core$IFn$_invoke$arity$1 ? gen_special_property.cljs$core$IFn$_invoke$arity$1(env) : gen_special_property.call(null,env))], null)], null));\n}),(function edn_query_language$core$gen_property(_){\nreturn clojure.test.check.generators.keyword_ns;\n}),(4),(function edn_query_language$core$gen_mutation_expr(p__43682){\nvar map__43684 = p__43682;\nvar map__43684__$1 = (((((!((map__43684 == null))))?(((((map__43684.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43684.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43684):map__43684);\nvar env = map__43684__$1;\nvar gen_mutation_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43684__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-key\",\"edn-query-language.core/gen-mutation-key\",-1303208029));\nvar gen_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43684__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935));\nreturn clojure.test.check.generators.bind((gen_mutation_key.cljs$core$IFn$_invoke$arity$1 ? gen_mutation_key.cljs$core$IFn$_invoke$arity$1(env) : gen_mutation_key.call(null,env)),((function (map__43684,map__43684__$1,env,gen_mutation_key,gen_params){\nreturn (function (key){\nreturn clojure.test.check.generators.bind((gen_params.cljs$core$IFn$_invoke$arity$1 ? gen_params.cljs$core$IFn$_invoke$arity$1(env) : gen_params.call(null,env)),((function (map__43684,map__43684__$1,env,gen_mutation_key,gen_params){\nreturn (function (val){\nvar val__24725__auto__ = (new cljs.core.List(null,key,(new cljs.core.List(null,val,null,(1),null)),(2),null));\nif(clojure.test.check.generators.generator_QMARK_(val__24725__auto__)){\nreturn val__24725__auto__;\n} else {\nreturn clojure.test.check.generators.return$(val__24725__auto__);\n}\n});})(map__43684,map__43684__$1,env,gen_mutation_key,gen_params))\n);\n});})(map__43684,map__43684__$1,env,gen_mutation_key,gen_params))\n);\n}),(function edn_query_language$core$gen_union(p__43690){\nvar map__43693 = p__43690;\nvar map__43693__$1 = (((((!((map__43693 == null))))?(((((map__43693.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43693.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43693):map__43693);\nvar env = map__43693__$1;\nvar gen_union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43693__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-union-key\",\"edn-query-language.core/gen-union-key\",-1438378594));\nvar gen_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43693__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463));\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3((gen_union_key.cljs$core$IFn$_invoke$arity$1 ? gen_union_key.cljs$core$IFn$_invoke$arity$1(env) : gen_union_key.call(null,env)),(gen_query.cljs$core$IFn$_invoke$arity$1 ? gen_query.cljs$core$IFn$_invoke$arity$1(env) : gen_query.call(null,env)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"min-elements\",\"min-elements\",949370780),(1)], null));\n}),(function edn_query_language$core$gen_join(p__43699){\nvar map__43700 = p__43699;\nvar map__43700__$1 = (((((!((map__43700 == null))))?(((((map__43700.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43700.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43700):map__43700);\nvar env = map__43700__$1;\nvar gen_join_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43700__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key\",\"edn-query-language.core/gen-join-key\",113991259));\nvar gen_join_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43700__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-query\",\"edn-query-language.core/gen-join-query\",2012309943));\nreturn clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3((gen_join_key.cljs$core$IFn$_invoke$arity$1 ? gen_join_key.cljs$core$IFn$_invoke$arity$1(env) : gen_join_key.call(null,env)),(gen_join_query.cljs$core$IFn$_invoke$arity$1 ? gen_join_query.cljs$core$IFn$_invoke$arity$1(env) : gen_join_query.call(null,env)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"num-elements\",\"num-elements\",1960422107),(1)], null));\n}),(function edn_query_language$core$gen_param_expr(p__43713){\nvar map__43715 = p__43713;\nvar map__43715__$1 = (((((!((map__43715 == null))))?(((((map__43715.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43715.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43715):map__43715);\nvar env = map__43715__$1;\nvar gen_param_expr_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43715__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr-key\",\"edn-query-language.core/gen-param-expr-key\",-1954692996));\nvar gen_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43715__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935));\nreturn clojure.test.check.generators.bind((gen_param_expr_key.cljs$core$IFn$_invoke$arity$1 ? gen_param_expr_key.cljs$core$IFn$_invoke$arity$1(env) : gen_param_expr_key.call(null,env)),((function (map__43715,map__43715__$1,env,gen_param_expr_key,gen_params){\nreturn (function (q){\nreturn clojure.test.check.generators.bind((gen_params.cljs$core$IFn$_invoke$arity$1 ? gen_params.cljs$core$IFn$_invoke$arity$1(env) : gen_params.call(null,env)),((function (map__43715,map__43715__$1,env,gen_param_expr_key,gen_params){\nreturn (function (p){\nvar val__24725__auto__ = (new cljs.core.List(null,q,(new cljs.core.List(null,p,null,(1),null)),(2),null));\nif(clojure.test.check.generators.generator_QMARK_(val__24725__auto__)){\nreturn val__24725__auto__;\n} else {\nreturn clojure.test.check.generators.return$(val__24725__auto__);\n}\n});})(map__43715,map__43715__$1,env,gen_param_expr_key,gen_params))\n);\n});})(map__43715,map__43715__$1,env,gen_param_expr_key,gen_params))\n);\n}),(function edn_query_language$core$gen_join_query(p__43743){\nvar map__43744 = p__43743;\nvar map__43744__$1 = (((((!((map__43744 == null))))?(((((map__43744.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43744.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43744):map__43744);\nvar env = map__43744__$1;\nvar gen_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43744__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463));\nvar gen_union = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43744__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-union\",\"edn-query-language.core/gen-union\",658558325));\nvar gen_recursion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43744__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-recursion\",\"edn-query-language.core/gen-recursion\",-1703222337));\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(10),(gen_query.cljs$core$IFn$_invoke$arity$1 ? gen_query.cljs$core$IFn$_invoke$arity$1(env) : gen_query.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(gen_union.cljs$core$IFn$_invoke$arity$1 ? gen_union.cljs$core$IFn$_invoke$arity$1(env) : gen_union.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_recursion.cljs$core$IFn$_invoke$arity$1 ? gen_recursion.cljs$core$IFn$_invoke$arity$1(env) : gen_recursion.call(null,env))], null)], null));\n}),(function edn_query_language$core$gen_join_key(p__43753){\nvar map__43755 = p__43753;\nvar map__43755__$1 = (((((!((map__43755 == null))))?(((((map__43755.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43755.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43755):map__43755);\nvar env = map__43755__$1;\nvar gen_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43755__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305));\nvar gen_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43755__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611));\nvar gen_join_key_param_expr = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43755__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-expr\",\"edn-query-language.core/gen-join-key-param-expr\",1421551999));\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(10),(gen_property.cljs$core$IFn$_invoke$arity$1 ? gen_property.cljs$core$IFn$_invoke$arity$1(env) : gen_property.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(gen_ident.cljs$core$IFn$_invoke$arity$1 ? gen_ident.cljs$core$IFn$_invoke$arity$1(env) : gen_ident.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(gen_join_key_param_expr.cljs$core$IFn$_invoke$arity$1 ? gen_join_key_param_expr.cljs$core$IFn$_invoke$arity$1(env) : gen_join_key_param_expr.call(null,env))], null)], null));\n}),(function edn_query_language$core$gen_param_expr_key(p__43768){\nvar map__43769 = p__43768;\nvar map__43769__$1 = (((((!((map__43769 == null))))?(((((map__43769.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43769.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43769):map__43769);\nvar env = map__43769__$1;\nvar gen_property = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43769__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-property\",\"edn-query-language.core/gen-property\",922992305));\nvar gen_join = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43769__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join\",\"edn-query-language.core/gen-join\",1458926230));\nvar gen_ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43769__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611));\nreturn clojure.test.check.generators.frequency(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(gen_property.cljs$core$IFn$_invoke$arity$1 ? gen_property.cljs$core$IFn$_invoke$arity$1(env) : gen_property.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(gen_join.cljs$core$IFn$_invoke$arity$1 ? gen_join.cljs$core$IFn$_invoke$arity$1(env) : gen_join.call(null,env))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(4),(gen_ident.cljs$core$IFn$_invoke$arity$1 ? gen_ident.cljs$core$IFn$_invoke$arity$1(env) : gen_ident.call(null,env))], null)], null));\n}),(function edn_query_language$core$gen_depth(_){\nreturn clojure.test.check.generators.large_integer_STAR_(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),(1),new cljs.core.Keyword(null,\"max\",\"max\",61366548),(5)], null));\n}),(function edn_query_language$core$gen_union_key(_){\nreturn clojure.test.check.generators.keyword_ns;\n}),(function edn_query_language$core$gen_join_key_param_expr(p__43786){\nvar map__43790 = p__43786;\nvar map__43790__$1 = (((((!((map__43790 == null))))?(((((map__43790.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43790.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43790):map__43790);\nvar env = map__43790__$1;\nvar gen_join_key_param_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43790__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-key\",\"edn-query-language.core/gen-join-key-param-key\",-1963047635));\nvar gen_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43790__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935));\nreturn clojure.test.check.generators.bind((gen_join_key_param_key.cljs$core$IFn$_invoke$arity$1 ? gen_join_key_param_key.cljs$core$IFn$_invoke$arity$1(env) : gen_join_key_param_key.call(null,env)),((function (map__43790,map__43790__$1,env,gen_join_key_param_key,gen_params){\nreturn (function (q){\nreturn clojure.test.check.generators.bind((gen_params.cljs$core$IFn$_invoke$arity$1 ? gen_params.cljs$core$IFn$_invoke$arity$1(env) : gen_params.call(null,env)),((function (map__43790,map__43790__$1,env,gen_join_key_param_key,gen_params){\nreturn (function (p){\nvar val__24725__auto__ = (new cljs.core.List(null,q,(new cljs.core.List(null,p,null,(1),null)),(2),null));\nif(clojure.test.check.generators.generator_QMARK_(val__24725__auto__)){\nreturn val__24725__auto__;\n} else {\nreturn clojure.test.check.generators.return$(val__24725__auto__);\n}\n});})(map__43790,map__43790__$1,env,gen_join_key_param_key,gen_params))\n);\n});})(map__43790,map__43790__$1,env,gen_join_key_param_key,gen_params))\n);\n}),(function edn_query_language$core$gen_recursion(p__43810){\nvar map__43812 = p__43810;\nvar map__43812__$1 = (((((!((map__43812 == null))))?(((((map__43812.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__43812.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__43812):map__43812);\nvar env = map__43812__$1;\nvar gen_depth = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__43812__$1,new cljs.core.Keyword(\"edn-query-language.core\",\"gen-depth\",\"edn-query-language.core/gen-depth\",-137293027));\nreturn clojure.test.check.generators.one_of(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(gen_depth.cljs$core$IFn$_invoke$arity$1 ? gen_depth.cljs$core$IFn$_invoke$arity$1(env) : gen_depth.call(null,env)),clojure.test.check.generators.return$(new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null))], null));\n})]);\n\nedn_query_language.core.default_gen = (function edn_query_language$core$default_gen(name){\nreturn (function (){\nvar fexpr__43827 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.generators,name);\nreturn (fexpr__43827.cljs$core$IFn$_invoke$arity$1 ? fexpr__43827.cljs$core$IFn$_invoke$arity$1(edn_query_language.core.generators) : fexpr__43827.call(null,edn_query_language.core.generators));\n});\n});\n\nedn_query_language.core.make_gen = (function edn_query_language$core$make_gen(env,name){\nvar env__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([edn_query_language.core.generators,env], 0));\nvar gen = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env__$1,name);\nif(cljs.core.truth_(gen)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"No generator available for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),\"\\n\",\"gen\"].join('')));\n}\n\nvar fexpr__43843 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env__$1,name);\nreturn (fexpr__43843.cljs$core$IFn$_invoke$arity$1 ? fexpr__43843.cljs$core$IFn$_invoke$arity$1(env__$1) : fexpr__43843.call(null,env__$1));\n});\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),cljs.core.keyword_QMARK_);\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"special-property\",\"edn-query-language.core/special-property\",-1016508506),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"*\",\"*\",345799209,null)),\"null\"], null), null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null,\"*\",\"*\",345799209,null),null], null), null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"ident-value\",\"edn-query-language.core/ident-value\",-715964249),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-value\",\"edn-query-language.core/gen-ident-value\",-277824306))),cljs.spec.alpha.with_gen(cljs.core.any_QMARK_,edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident-value\",\"edn-query-language.core/gen-ident-value\",-277824306))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident-value\",\"edn-query-language.core/ident-value\",-715964249)),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611))),cljs.spec.alpha.with_gen(cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident-value\",\"edn-query-language.core/ident-value\",-715964249)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident-value\",\"edn-query-language.core/ident-value\",-715964249)], null)),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-ident\",\"edn-query-language.core/gen-ident\",-1301134611))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(null,\"param-exp\",\"param-exp\",-594699720),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-expr\",\"edn-query-language.core/join-key-param-expr\",496601666)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(null,\"param-exp\",\"param-exp\",-594699720)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-expr\",\"edn-query-language.core/join-key-param-expr\",496601666)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-expr\",\"edn-query-language.core/join-key-param-expr\",496601666)], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761),new cljs.core.Keyword(null,\"count\",\"count\",2139924085),(1),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761)),cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761)], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"into\",\"into\",-150836029),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kfn\",\"cljs.spec.alpha/kfn\",672643897),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911)],[cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),true,(function (G__43866){\nreturn ((cljs.core.map_QMARK_(G__43866)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.bounded_count((1),G__43866))));\n}),cljs.core.map_QMARK_,(1),(function (i__12903__auto__,v__12904__auto__){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v__12904__auto__,(0));\n}),true,cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key\",\"edn-query-language.core/join-key\",-2056428321),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),(1))]),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"union\",\"edn-query-language.core/union\",-1766530903),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"min-count\",\"min-count\",1594709013),(1),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"into\",\"into\",-150836029),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),new cljs.core.Keyword(null,\"min-count\",\"min-count\",1594709013),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kfn\",\"cljs.spec.alpha/kfn\",672643897),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911)],[cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),true,(function (G__43885){\nreturn ((cljs.core.map_QMARK_(G__43885)) && (((((function (){var or__4131__auto__ = (1);\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (0);\n}\n})() <= cljs.core.bounded_count((1)\n,G__43885))) && ((cljs.core.bounded_count((1)\n,G__43885) <= (function (){var or__4131__auto__ = null;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn (9007199254740991);\n}\n})())))));\n}),(1),cljs.core.map_QMARK_,(function (i__12903__auto__,v__12904__auto__){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v__12904__auto__,(0));\n}),true,cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true,new cljs.core.Keyword(null,\"min-count\",\"min-count\",1594709013),(1))]),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"recursion-depth\",\"edn-query-language.core/recursion-depth\",-1726216891),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),new cljs.core.Symbol(\"cljs.core\",\"nat-int?\",\"cljs.core/nat-int?\",-164364171,null),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-depth\",\"edn-query-language.core/gen-depth\",-137293027))),cljs.spec.alpha.with_gen(cljs.core.nat_int_QMARK_,edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-depth\",\"edn-query-language.core/gen-depth\",-137293027))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"recursion\",\"edn-query-language.core/recursion\",2090214849),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),new cljs.core.Keyword(\"edn-query-language.core\",\"recursion-depth\",\"edn-query-language.core/recursion-depth\",-1726216891),new cljs.core.Keyword(null,\"unbounded\",\"unbounded\",-2054589494),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null)),\"null\"], null), null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),new cljs.core.Keyword(null,\"unbounded\",\"unbounded\",-2054589494)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"recursion-depth\",\"edn-query-language.core/recursion-depth\",-1726216891),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null)),\"null\"], null), null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"recursion-depth\",\"edn-query-language.core/recursion-depth\",-1726216891),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null),null], null), null)], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"union\",\"union\",2142937499),new cljs.core.Keyword(\"edn-query-language.core\",\"union\",\"edn-query-language.core/union\",-1766530903),new cljs.core.Keyword(null,\"recursion\",\"recursion\",-749738765),new cljs.core.Keyword(\"edn-query-language.core\",\"recursion\",\"edn-query-language.core/recursion\",2090214849)),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-query\",\"edn-query-language.core/gen-join-query\",2012309943))),cljs.spec.alpha.with_gen(cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"union\",\"union\",2142937499),new cljs.core.Keyword(null,\"recursion\",\"recursion\",-749738765)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"union\",\"edn-query-language.core/union\",-1766530903),new cljs.core.Keyword(\"edn-query-language.core\",\"recursion\",\"edn-query-language.core/recursion\",2090214849)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"union\",\"edn-query-language.core/union\",-1766530903),new cljs.core.Keyword(\"edn-query-language.core\",\"recursion\",\"edn-query-language.core/recursion\",2090214849)], null),null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-query\",\"edn-query-language.core/gen-join-query\",2012309943))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935))),cljs.spec.alpha.with_gen(cljs.core.map_QMARK_,edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-params\",\"edn-query-language.core/gen-params\",-973382935))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr-key\",\"edn-query-language.core/param-expr-key\",1108092539),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr-key\",\"edn-query-language.core/gen-param-expr-key\",-1954692996))),cljs.spec.alpha.with_gen(cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)], null),null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr-key\",\"edn-query-language.core/gen-param-expr-key\",-1954692996))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"and\",\"cljs.spec.alpha/and\",-2060279705,null),new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr-key\",\"edn-query-language.core/param-expr-key\",1108092539),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr\",\"edn-query-language.core/gen-param-expr\",680343767))),cljs.spec.alpha.with_gen(cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr-key\",\"edn-query-language.core/param-expr-key\",1108092539),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq_QMARK_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr-key\",\"edn-query-language.core/param-expr-key\",1108092539),cljs.spec.alpha.maybe_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr-key\",\"edn-query-language.core/param-expr-key\",1108092539),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null))], null),null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-param-expr\",\"edn-query-language.core/gen-param-expr\",680343767))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-key\",\"edn-query-language.core/join-key-param-key\",339850713),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228)], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-expr\",\"edn-query-language.core/join-key-param-expr\",496601666),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"and\",\"cljs.spec.alpha/and\",-2060279705,null),new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-key\",\"edn-query-language.core/join-key-param-key\",339850713),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-expr\",\"edn-query-language.core/gen-join-key-param-expr\",1421551999))),cljs.spec.alpha.with_gen(cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-key\",\"edn-query-language.core/join-key-param-key\",339850713),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq_QMARK_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-key\",\"edn-query-language.core/join-key-param-key\",339850713),cljs.spec.alpha.maybe_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"join-key-param-key\",\"edn-query-language.core/join-key-param-key\",339850713),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null))], null),null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-join-key-param-expr\",\"edn-query-language.core/gen-join-key-param-expr\",1421551999))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-key\",\"edn-query-language.core/mutation-key\",422562651),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-key\",\"edn-query-language.core/gen-mutation-key\",-1303208029))),cljs.spec.alpha.with_gen(cljs.core.symbol_QMARK_,edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-key\",\"edn-query-language.core/gen-mutation-key\",-1303208029))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"with-gen\",\"cljs.spec.alpha/with-gen\",1999495028,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"and\",\"cljs.spec.alpha/and\",-2060279705,null),new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"mutate-key\",\"mutate-key\",-468386111),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-key\",\"edn-query-language.core/mutation-key\",422562651),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-expr\",\"edn-query-language.core/gen-mutation-expr\",-1023991277))),cljs.spec.alpha.with_gen(cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"seq?\",\"cljs.core/seq?\",-1302056292,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"mutate-key\",\"mutate-key\",-468386111),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-key\",\"edn-query-language.core/mutation-key\",422562651),new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.seq_QMARK_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mutate-key\",\"mutate-key\",-468386111),new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-key\",\"edn-query-language.core/mutation-key\",422562651),cljs.spec.alpha.maybe_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-key\",\"edn-query-language.core/mutation-key\",422562651),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"?\",\"cljs.spec.alpha/?\",1605136319,null),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673))], null))], null),null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-mutation-expr\",\"edn-query-language.core/gen-mutation-expr\",-1023991277))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-join\",\"edn-query-language.core/mutation-join\",2054928671),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"count\",\"count\",2139924085),(1),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"tuple\",\"cljs.spec.alpha/tuple\",-415901908,null),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"into\",\"into\",-150836029),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(\"cljs.spec.alpha\",\"kfn\",\"cljs.spec.alpha/kfn\",672643897),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911)],[cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),true,(function (G__43990){\nreturn ((cljs.core.map_QMARK_(G__43990)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.bounded_count((1),G__43990))));\n}),cljs.core.map_QMARK_,(1),(function (i__12903__auto__,v__12904__auto__){\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v__12904__auto__,(0));\n}),true,cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"map-of\",\"cljs.spec.alpha/map-of\",153715093,null),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"conform-keys\",\"conform-keys\",-1800041814),true,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),(1))]),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"mutation\",\"edn-query-language.core/mutation\",137261372),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"mutation\",\"mutation\",-285823378),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(null,\"mutation-join\",\"mutation-join\",1363539465),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-join\",\"edn-query-language.core/mutation-join\",2054928671)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mutation\",\"mutation\",-285823378),new cljs.core.Keyword(null,\"mutation-join\",\"mutation-join\",1363539465)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-join\",\"edn-query-language.core/mutation-join\",2054928671)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-expr\",\"edn-query-language.core/mutation-expr\",-2127055036),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation-join\",\"edn-query-language.core/mutation-join\",2054928671)], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query-expr\",\"edn-query-language.core/query-expr\",-1903182083),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(null,\"mutation\",\"mutation\",-285823378),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation\",\"edn-query-language.core/mutation\",137261372),new cljs.core.Keyword(null,\"param-exp\",\"param-exp\",-594699720),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),new cljs.core.Keyword(null,\"special\",\"special\",-1125941630),new cljs.core.Keyword(\"edn-query-language.core\",\"special-property\",\"edn-query-language.core/special-property\",-1016508506)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(null,\"mutation\",\"mutation\",-285823378),new cljs.core.Keyword(null,\"param-exp\",\"param-exp\",-594699720),new cljs.core.Keyword(null,\"special\",\"special\",-1125941630)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation\",\"edn-query-language.core/mutation\",137261372),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),new cljs.core.Keyword(\"edn-query-language.core\",\"special-property\",\"edn-query-language.core/special-property\",-1016508506)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"join\",\"edn-query-language.core/join\",2091674288),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(\"edn-query-language.core\",\"mutation\",\"edn-query-language.core/mutation\",137261372),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),new cljs.core.Keyword(\"edn-query-language.core\",\"special-property\",\"edn-query-language.core/special-property\",-1016508506)], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query-expr\",\"edn-query-language.core/query-expr\",-1903182083),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),cljs.core.list(new cljs.core.Symbol(\"edn-query-language.core\",\"default-gen\",\"edn-query-language.core/default-gen\",1426575839,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463))),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.core\",\"query-expr\",\"edn-query-language.core/query-expr\",-1903182083),new cljs.core.Keyword(\"edn-query-language.core\",\"query-expr\",\"edn-query-language.core/query-expr\",-1903182083),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__44006){\nreturn cljs.core.vector_QMARK_(G__44006);\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query-expr\",\"edn-query-language.core/query-expr\",-1903182083),new cljs.core.Keyword(null,\"gen\",\"gen\",142575302),cljs.core.list(new cljs.core.Symbol(null,\"default-gen\",\"default-gen\",1119884077,null),new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463)),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),edn_query_language.core.default_gen(new cljs.core.Keyword(\"edn-query-language.core\",\"gen-query\",\"edn-query-language.core/gen-query\",-590385463))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761),new cljs.core.Keyword(\"edn-query-language.core\",\"join-query\",\"edn-query-language.core/join-query\",587629761));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"ident\",\"edn-query-language.core/ident\",419196228),cljs.core.symbol_QMARK_], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),cljs.core.symbol_QMARK_], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"union-key\",\"edn-query-language.ast/union-key\",-682972655),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__44009){\nreturn cljs.core.coll_QMARK_(G__44009);\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957))], null),null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"and\",\"cljs.spec.alpha/and\",-2060279705,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43630#\",\"p1__43630#\",421423811,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"=\",\"cljs.core/=\",-1891498332,null),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),cljs.core.list(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Symbol(null,\"p1__43630#\",\"p1__43630#\",421423811,null)))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43631#\",\"p1__43631#\",-310799035,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,\"null\",new cljs.core.Keyword(null,\"call\",\"call\",-519999866),\"null\",new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),\"null\",new cljs.core.Keyword(null,\"join\",\"join\",-758861890),\"null\"], null), null),new cljs.core.Symbol(null,\"p1__43631#\",\"p1__43631#\",-310799035,null))),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null))))),cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"=\",\"cljs.core/=\",-1891498332,null),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),cljs.core.list(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43631#\",\"p1__43631#\",-310799035,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,\"null\",new cljs.core.Keyword(null,\"call\",\"call\",-519999866),\"null\",new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),\"null\",new cljs.core.Keyword(null,\"join\",\"join\",-758861890),\"null\"], null), null),new cljs.core.Symbol(null,\"p1__43631#\",\"p1__43631#\",-310799035,null))),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44028){\nreturn cljs.core.map_QMARK_(G__44028);\n}),(function (G__44028){\nreturn cljs.core.contains_QMARK_(G__44028,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44028){\nreturn cljs.core.contains_QMARK_(G__44028,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\n})], null),(function (G__44028){\nreturn ((cljs.core.map_QMARK_(G__44028)) && (cljs.core.contains_QMARK_(G__44028,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44028,new cljs.core.Keyword(null,\"children\",\"children\",-940561982))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)))], null),null])),(function (p1__43630_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__43630_SHARP_));\n}),(function (x){\nreturn cljs.core.every_QMARK_(cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__43631_SHARP_){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,null,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),null,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),null,new cljs.core.Keyword(null,\"join\",\"join\",-758861890),null], null), null),p1__43631_SHARP_);\n}),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(x));\n})], null),null));\n\nif((typeof edn_query_language !== 'undefined') && (typeof edn_query_language.core !== 'undefined') && (typeof edn_query_language.core.node_type !== 'undefined')){\n} else {\nedn_query_language.core.node_type = (function (){var method_table__4613__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4614__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4615__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4616__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4617__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__44055 = cljs.core.get_global_hierarchy;\nreturn (fexpr__44055.cljs$core$IFn$_invoke$arity$0 ? fexpr__44055.cljs$core$IFn$_invoke$arity$0() : fexpr__44055.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"edn-query-language.core\",\"node-type\"),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4617__auto__,method_table__4613__auto__,prefer_table__4614__auto__,method_cache__4615__auto__,cached_hierarchy__4616__auto__));\n})();\n}\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,null,(function (_){\nreturn cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141)], null),null,null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44063){\nreturn cljs.core.map_QMARK_(G__44063);\n}),(function (G__44063){\nreturn cljs.core.contains_QMARK_(G__44063,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}),(function (G__44063){\nreturn cljs.core.contains_QMARK_(G__44063,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\n})], null),(function (G__44063){\nreturn ((cljs.core.map_QMARK_(G__44063)) && (cljs.core.contains_QMARK_(G__44063,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))) && (cljs.core.contains_QMARK_(G__44063,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141)], null),null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510)))], null),null]));\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),(function (_){\nreturn cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141)], null),null,null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44091){\nreturn cljs.core.map_QMARK_(G__44091);\n}),(function (G__44091){\nreturn cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44091){\nreturn cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}),(function (G__44091){\nreturn cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\n})], null),(function (G__44091){\nreturn ((cljs.core.map_QMARK_(G__44091)) && (cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))) && (cljs.core.contains_QMARK_(G__44091,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141)], null),null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510)))], null),null]));\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"join\",\"join\",-758861890),(function (_){\nreturn cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719)], null),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(null,\"if\",\"if\",1181717262,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"->\",\"cljs.core/->\",1488366311,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Symbol(\"cljs.core\",\"first\",\"cljs.core/first\",-752535972,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"=\",\"cljs.core/=\",-1891498332,null),new cljs.core.Keyword(null,\"recursion\",\"recursion\",-749738765))),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),cljs.core.list(new cljs.core.Symbol(null,\"if\",\"if\",1181717262,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),false))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43633#\",\"p1__43633#\",1096083321,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [null,\"null\",new cljs.core.Keyword(null,\"call\",\"call\",-519999866),\"null\",new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),\"null\",new cljs.core.Keyword(null,\"union\",\"union\",2142937499),\"null\",new cljs.core.Keyword(null,\"join\",\"join\",-758861890),\"null\"], null), null),new cljs.core.Symbol(null,\"p1__43633#\",\"p1__43633#\",1096083321,null))),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44145){\nreturn cljs.core.map_QMARK_(G__44145);\n}),(function (G__44145){\nreturn cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44145){\nreturn cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}),(function (G__44145){\nreturn cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\n}),(function (G__44145){\nreturn cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\n})], null),(function (G__44145){\nreturn ((cljs.core.map_QMARK_(G__44145)) && (cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))) && (cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))) && (cljs.core.contains_QMARK_(G__44145,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))));\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719)], null),null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)))], null),null])),(function (p1__43632_SHARP_){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(new cljs.core.Keyword(null,\"query\",\"query\",-1288509510).cljs$core$IFn$_invoke$arity$1(p1__43632_SHARP_)),new cljs.core.Keyword(null,\"recursion\",\"recursion\",-749738765))){\nreturn p1__43632_SHARP_;\n} else {\nif(cljs.core.contains_QMARK_(p1__43632_SHARP_,new cljs.core.Keyword(null,\"children\",\"children\",-940561982))){\nreturn p1__43632_SHARP_;\n} else {\nreturn false;\n}\n}\n}),(function (x){\nreturn cljs.core.every_QMARK_(cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__43633_SHARP_){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [null,null,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),null,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),null,new cljs.core.Keyword(null,\"union\",\"union\",2142937499),null,new cljs.core.Keyword(null,\"join\",\"join\",-758861890),null], null), null),p1__43633_SHARP_);\n}),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(x));\n})], null),null);\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"union\",\"union\",2142937499),(function (_){\nreturn cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"union-entry\",\"union-entry\",223335750),\"null\"], null), null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44200){\nreturn cljs.core.map_QMARK_(G__44200);\n}),(function (G__44200){\nreturn cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44200){\nreturn cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\n}),(function (G__44200){\nreturn cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\n})], null),(function (G__44200){\nreturn ((cljs.core.map_QMARK_(G__44200)) && (cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))) && (cljs.core.contains_QMARK_(G__44200,new cljs.core.Keyword(null,\"children\",\"children\",-940561982))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)))], null),null])),(function (p1__43634_SHARP_){\nreturn cljs.core.every_QMARK_(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"union-entry\",\"union-entry\",223335750),null], null), null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(p1__43634_SHARP_));\n})], null),null);\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"union-entry\",\"union-entry\",223335750),(function (_){\nreturn cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"union-key\",\"edn-query-language.ast/union-key\",-682972655),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43635#\",\"p1__43635#\",-257944414,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,\"null\",new cljs.core.Keyword(null,\"call\",\"call\",-519999866),\"null\",new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),\"null\",new cljs.core.Keyword(null,\"join\",\"join\",-758861890),\"null\"], null), null),new cljs.core.Symbol(null,\"p1__43635#\",\"p1__43635#\",-257944414,null))),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null))))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"union-key\",\"edn-query-language.ast/union-key\",-682972655),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,null,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44275){\nreturn cljs.core.map_QMARK_(G__44275);\n}),(function (G__44275){\nreturn cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44275){\nreturn cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\n}),(function (G__44275){\nreturn cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\n}),(function (G__44275){\nreturn cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\n})], null),(function (G__44275){\nreturn ((cljs.core.map_QMARK_(G__44275)) && (cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234))) && (cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))) && (cljs.core.contains_QMARK_(G__44275,new cljs.core.Keyword(null,\"children\",\"children\",-940561982))));\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"union-key\",\"edn-query-language.ast/union-key\",-682972655),new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)))], null),null])),(function (x){\nreturn cljs.core.every_QMARK_(cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__43635_SHARP_){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,null,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),null,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),null,new cljs.core.Keyword(null,\"join\",\"join\",-758861890),null], null), null),p1__43635_SHARP_);\n}),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(x));\n})], null),null);\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),(function (_){\nreturn cljs.spec.alpha.and_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)], null),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null)),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"every?\",\"cljs.core/every?\",1416822717,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"comp\",\"cljs.core/comp\",-2137591872,null),cljs.core.list(new cljs.core.Symbol(null,\"fn*\",\"fn*\",-752876845,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"p1__43636#\",\"p1__43636#\",-36871440,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,\"null\",new cljs.core.Keyword(null,\"call\",\"call\",-519999866),\"null\",new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),\"null\",new cljs.core.Keyword(null,\"join\",\"join\",-758861890),\"null\"], null), null),new cljs.core.Symbol(null,\"p1__43636#\",\"p1__43636#\",-36871440,null))),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.core.list(new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null))))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),null,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__44393){\nreturn cljs.core.map_QMARK_(G__44393);\n}),(function (G__44393){\nreturn cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\n}),(function (G__44393){\nreturn cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\n}),(function (G__44393){\nreturn cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510));\n}),(function (G__44393){\nreturn cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\n})], null),(function (G__44393){\nreturn ((cljs.core.map_QMARK_(G__44393)) && (cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"type\",\"type\",1174270348))) && (cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))) && (cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))) && (cljs.core.contains_QMARK_(G__44393,new cljs.core.Keyword(null,\"params\",\"params\",710516235))));\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"dispatch-key\",\"edn-query-language.ast/dispatch-key\",-1369369141),new cljs.core.Keyword(\"edn-query-language.core\",\"params\",\"edn-query-language.core/params\",429907673)], null),null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"query\",\"edn-query-language.ast/query\",780932719),new cljs.core.Keyword(\"edn-query-language.ast\",\"children\",\"edn-query-language.ast/children\",1247091825)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"key\",\"key\",-1516042587))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(null,\"params\",\"params\",710516235)))], null),null])),(function (x){\nreturn cljs.core.every_QMARK_(cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__43636_SHARP_){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [null,null,new cljs.core.Keyword(null,\"call\",\"call\",-519999866),null,new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),null,new cljs.core.Keyword(null,\"join\",\"join\",-758861890),null], null), null),p1__43636_SHARP_);\n}),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(x));\n})], null),null);\n}));\n\nedn_query_language.core.node_type.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"root\",\"root\",-448657453),(function (_){\nreturn cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),null,null);\n}));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"type\",\"edn-query-language.ast/type\",-1057701829),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"set\",\"cljs.core/set\",724680876,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"keys\",\"cljs.core/keys\",-927561820,null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"methods\",\"cljs.core/methods\",-1793562622,null),new cljs.core.Symbol(\"edn-query-language.core\",\"node-type\",\"edn-query-language.core/node-type\",1078374183,null)))),cljs.core.set(cljs.core.keys(cljs.core.methods$(edn_query_language.core.node_type))));\n\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"multi-spec\",\"cljs.spec.alpha/multi-spec\",175821274,null),new cljs.core.Symbol(\"edn-query-language.core\",\"node-type\",\"edn-query-language.core/node-type\",1078374183,null),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)),cljs.spec.alpha.multi_spec_impl.cljs$core$IFn$_invoke$arity$3(new cljs.core.Symbol(\"edn-query-language.core\",\"node-type\",\"edn-query-language.core/node-type\",1078374183,null),new cljs.core.Var(function(){return edn_query_language.core.node_type;},new cljs.core.Symbol(\"edn-query-language.core\",\"node-type\",\"edn-query-language.core/node-type\",1078374183,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"edn-query-language.core\",\"edn-query-language.core\",1253777601,null),new cljs.core.Symbol(null,\"node-type\",\"node-type\",1770023989,null),\"edn_query_language/core.cljc\",22,3,223,223,cljs.core.List.EMPTY,null,(cljs.core.truth_(edn_query_language.core.node_type)?edn_query_language.core.node_type.cljs$lang$test:null)])),new cljs.core.Keyword(null,\"type\",\"type\",1174270348)));\n} else {\n}\nedn_query_language.core.mark_meta = (function edn_query_language$core$mark_meta(source,target){\nvar G__44471 = target;\nif(cljs.core.truth_(cljs.core.meta(source))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__44471,new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964),cljs.core.meta(source));\n} else {\nreturn G__44471;\n}\n});\nedn_query_language.core.symbol__GT_ast = (function edn_query_language$core$symbol__GT_ast(k){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),k,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),k], null);\n});\nedn_query_language.core.keyword__GT_ast = (function edn_query_language$core$keyword__GT_ast(k){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),k,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),k], null);\n});\nedn_query_language.core.union_entry__GT_ast = (function edn_query_language$core$union_entry__GT_ast(p__44479){\nvar vec__44482 = p__44479;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44482,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44482,(1),null);\nvar component = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"union-entry\",\"union-entry\",223335750),new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234),k,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),v,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(edn_query_language.core.expr__GT_ast),v)], null),(((component == null))?null:new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component], null))], 0));\n});\nedn_query_language.core.union__GT_ast = (function edn_query_language$core$union__GT_ast(m){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"union\",\"union\",2142937499),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),m,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(edn_query_language.core.union_entry__GT_ast),m)], null);\n});\nedn_query_language.core.call__GT_ast = (function edn_query_language$core$call__GT_ast(p__44496){\nvar vec__44499 = p__44496;\nvar f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44499,(0),null);\nvar args = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44499,(1),null);\nvar call = vec__44499;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),f)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1 ? edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1(args) : edn_query_language.core.expr__GT_ast.call(null,args)),new cljs.core.Keyword(null,\"target\",\"target\",253001721),(function (){var or__4131__auto__ = new cljs.core.Keyword(null,\"target\",\"target\",253001721).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(call));\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576);\n}\n})());\n} else {\nvar ast = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4((edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1 ? edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1(f) : edn_query_language.core.expr__GT_ast.call(null,f)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"params\",\"params\",710516235)], null),cljs.core.merge,(function (){var or__4131__auto__ = args;\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nreturn cljs.core.PersistentArrayMap.EMPTY;\n}\n})());\nvar G__44509 = edn_query_language.core.mark_meta(call,ast);\nif((new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(ast) instanceof cljs.core.Symbol)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__44509,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"call\",\"call\",-519999866));\n} else {\nreturn G__44509;\n}\n}\n});\n/**\n * Convert a query to its AST representation.\n */\nedn_query_language.core.query__GT_ast = (function edn_query_language$core$query__GT_ast(query){\nvar component = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(query));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([edn_query_language.core.mark_meta(query,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(edn_query_language.core.expr__GT_ast),query)], null)),(((component == null))?null:new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component], null))], 0));\n});\n/**\n * Call query->ast and return the first children.\n */\nedn_query_language.core.query__GT_ast1 = (function edn_query_language$core$query__GT_ast1(query_expr){\nreturn cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(query_expr)));\n});\nedn_query_language.core.join__GT_ast = (function edn_query_language$core$join__GT_ast(join){\nvar query_root_QMARK_ = new cljs.core.Keyword(null,\"query-root\",\"query-root\",359781888).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(join));\nvar vec__44533 = cljs.core.first(join);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44533,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44533,(1),null);\nvar ast = (edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1 ? edn_query_language.core.expr__GT_ast.cljs$core$IFn$_invoke$arity$1(k) : edn_query_language.core.expr__GT_ast.call(null,k));\nvar type = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast)))?new cljs.core.Keyword(null,\"call\",\"call\",-519999866):new cljs.core.Keyword(null,\"join\",\"join\",-758861890));\nvar component = new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(v));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ast,edn_query_language.core.mark_meta(join,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),type,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),v], null)),(((component == null))?null:new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component], null)),(cljs.core.truth_(query_root_QMARK_)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-root\",\"query-root\",359781888),true], null):null),((((typeof v === 'number') || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null),v)) || (edn_query_language.core._STAR_shallow_conversion_STAR_)))?null:((cljs.core.vector_QMARK_(v))?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(edn_query_language.core.expr__GT_ast),v)], null):((cljs.core.map_QMARK_(v))?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [edn_query_language.core.union__GT_ast(v)], null)], null):(function(){throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Invalid join, \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(join)].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"error\",\"invalid-join\",\"error/invalid-join\",1594073006)], null))})()\n)))], 0));\n});\nedn_query_language.core.ident__GT_ast = (function edn_query_language$core$ident__GT_ast(p__44569){\nvar vec__44576 = p__44569;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44576,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44576,(1),null);\nvar ref = vec__44576;\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),k,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),ref], null);\n});\n/**\n * Given a query expression convert it into an AST.\n */\nedn_query_language.core.expr__GT_ast = (function edn_query_language$core$expr__GT_ast(x){\nif((x instanceof cljs.core.Symbol)){\nreturn edn_query_language.core.symbol__GT_ast(x);\n} else {\nif((x instanceof cljs.core.Keyword)){\nreturn edn_query_language.core.keyword__GT_ast(x);\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn edn_query_language.core.join__GT_ast(x);\n} else {\nif(cljs.core.vector_QMARK_(x)){\nreturn edn_query_language.core.ident__GT_ast(x);\n} else {\nif(cljs.core.seq_QMARK_(x)){\nreturn edn_query_language.core.call__GT_ast(x);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Invalid expression \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(''),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"error\",\"invalid-expression\",\"error/invalid-expression\",-881565136)], null));\n\n}\n}\n}\n}\n}\n});\nedn_query_language.core.wrap_expr = (function edn_query_language$core$wrap_expr(root_QMARK_,expr){\nif(cljs.core.truth_(root_QMARK_)){\nreturn cljs.core.with_meta((function (){var G__44605 = expr;\nif((expr instanceof cljs.core.Keyword)){\nreturn (new cljs.core.List(null,G__44605,null,(1),null));\n} else {\nreturn G__44605;\n}\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-root\",\"query-root\",359781888),true], null));\n} else {\nreturn expr;\n}\n});\nedn_query_language.core.parameterize = (function edn_query_language$core$parameterize(expr,params){\nif((!(cljs.core.empty_QMARK_(params)))){\nreturn (new cljs.core.List(null,expr,(new cljs.core.List(null,params,null,(1),null)),(2),null));\n} else {\nreturn (new cljs.core.List(null,expr,null,(1),null));\n}\n});\n/**\n * Given a query expression AST convert it back into a query expression.\n */\nedn_query_language.core.ast__GT_expr = (function edn_query_language$core$ast__GT_expr(var_args){\nvar G__44624 = arguments.length;\nswitch (G__44624) {\ncase 1:\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nedn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$1 = (function (ast){\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(ast,false);\n});\n\nedn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2 = (function (p__44635,unparse_QMARK_){\nvar map__44636 = p__44635;\nvar map__44636__$1 = (((((!((map__44636 == null))))?(((((map__44636.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44636.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44636):map__44636);\nvar ast = map__44636__$1;\nvar ast_meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44636__$1,new cljs.core.Keyword(null,\"meta\",\"meta\",1499536964));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44636__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44636__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\nvar G__44640 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,ast_meta),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (map__44636,map__44636__$1,ast,ast_meta,type,component){\nreturn (function (p1__44617_SHARP_){\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(p1__44617_SHARP_,unparse_QMARK_);\n});})(map__44636,map__44636__$1,ast,ast_meta,type,component))\n),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast));\nif((!((component == null)))){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__44640,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__44640;\n}\n} else {\nvar map__44642 = ast;\nvar map__44642__$1 = (((((!((map__44642 == null))))?(((((map__44642.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44642.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44642):map__44642);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44642__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44642__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar query_root = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44642__$1,new cljs.core.Keyword(null,\"query-root\",\"query-root\",359781888));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44642__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nreturn edn_query_language.core.wrap_expr(query_root,(cljs.core.truth_((function (){var and__4120__auto__ = params;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type);\n} else {\nreturn and__4120__auto__;\n}\n})())?(function (){var expr = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(ast,new cljs.core.Keyword(null,\"params\",\"params\",710516235)),unparse_QMARK_);\nreturn edn_query_language.core.parameterize(expr,params);\n})():(function (){var key__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type))?edn_query_language.core.parameterize(key,params):key);\nif(cljs.core.truth_((function (){var or__4131__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),type);\nif(or__4131__auto__){\nreturn or__4131__auto__;\n} else {\nvar and__4120__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type);\nif(and__4120__auto__){\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\n} else {\nreturn and__4120__auto__;\n}\n}\n})())){\nif(((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Symbol(null,\"...\",\"...\",-1926939749,null),query)) && ((!(typeof query === 'number'))) && (((unparse_QMARK_ === true) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)))))){\nvar map__44655 = ast;\nvar map__44655__$1 = (((((!((map__44655 == null))))?(((((map__44655.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44655.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44655):map__44655);\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44655__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar query_meta = cljs.core.meta(query);\nif(((((1) === cljs.core.count(children))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"union\",\"union\",2142937499),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(cljs.core.first(children)))))){\nreturn cljs.core.with_meta(cljs.core.PersistentArrayMap.createAsIfByAssoc([key__$1,cljs.core.into.cljs$core$IFn$_invoke$arity$3((function (){var G__44657 = cljs.core.with_meta(cljs.core.PersistentArrayMap.EMPTY,ast_meta);\nif(cljs.core.truth_(component)){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__44657,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__44657;\n}\n})(),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component){\nreturn (function (p__44659){\nvar map__44660 = p__44659;\nvar map__44660__$1 = (((((!((map__44660 == null))))?(((((map__44660.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44660.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44660):map__44660);\nvar union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44660__$1,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\nvar children__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44660__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar component__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44660__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [union_key,(function (){var G__44662 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (map__44660,map__44660__$1,union_key,children__$1,component__$1,map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component){\nreturn (function (p1__44620_SHARP_){\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(p1__44620_SHARP_,unparse_QMARK_);\n});})(map__44660,map__44660__$1,union_key,children__$1,component__$1,map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component))\n),children__$1);\nif((!((component__$1 == null)))){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__44662,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component__$1);\n} else {\nreturn G__44662;\n}\n})()], null);\n});})(map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component))\n),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(cljs.core.first(children)))]),ast_meta);\n} else {\nreturn cljs.core.with_meta(cljs.core.PersistentArrayMap.createAsIfByAssoc([key__$1,(function (){var G__44666 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,query_meta),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component){\nreturn (function (p1__44621_SHARP_){\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(p1__44621_SHARP_,unparse_QMARK_);\n});})(map__44655,map__44655__$1,children,query_meta,key__$1,map__44642,map__44642__$1,key,query,query_root,params,map__44636,map__44636__$1,ast,ast_meta,type,component))\n),children);\nif((!((component == null)))){\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__44666,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\n} else {\nreturn G__44666;\n}\n})()]),ast_meta);\n}\n} else {\nreturn cljs.core.with_meta(cljs.core.PersistentArrayMap.createAsIfByAssoc([key__$1,query]),ast_meta);\n}\n} else {\nreturn key__$1;\n}\n})()));\n}\n});\n\nedn_query_language.core.ast__GT_expr.cljs$lang$maxFixedArity = 2;\n\nedn_query_language.core.ast__GT_query = (function edn_query_language$core$ast__GT_query(query_ast){\n\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(query_ast,true);\n});\n/**\n * Check if x is a EQL ident.\n */\nedn_query_language.core.ident_QMARK_ = (function edn_query_language$core$ident_QMARK_(x){\nreturn ((cljs.core.vector_QMARK_(x)) && ((cljs.core.first(x) instanceof cljs.core.Keyword)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(x))));\n});\nedn_query_language.core.focus_subquery_union_STAR_ = (function edn_query_language$core$focus_subquery_union_STAR_(query_ast,sub_ast){\nvar s_index = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__44706_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234).cljs$core$IFn$_invoke$arity$1(p1__44706_SHARP_),p1__44706_SHARP_],null));\n})),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(sub_ast));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s_index){\nreturn (function (children,p__44722){\nvar map__44723 = p__44722;\nvar map__44723__$1 = (((((!((map__44723 == null))))?(((((map__44723.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44723.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44723):map__44723);\nvar union_entry = map__44723__$1;\nvar union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44723__$1,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(s_index,union_key);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar sub = temp__5751__auto__;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(children,(edn_query_language.core.focus_subquery_STAR_.cljs$core$IFn$_invoke$arity$2 ? edn_query_language.core.focus_subquery_STAR_.cljs$core$IFn$_invoke$arity$2(union_entry,sub) : edn_query_language.core.focus_subquery_STAR_.call(null,union_entry,sub)));\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(children,union_entry);\n}\n});})(s_index))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(query_ast)));\n});\n/**\n * Internal implementation of focus-subquery, you can use this function directly if\n *   you want to send AST in and get AST out (instead of query in / query out).\n */\nedn_query_language.core.focus_subquery_STAR_ = (function edn_query_language$core$focus_subquery_STAR_(query_ast,sub_ast){\nvar q_index = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__44728_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p1__44728_SHARP_),p1__44728_SHARP_],null));\n})),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(query_ast));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (q_index){\nreturn (function (children,p__44729){\nvar map__44731 = p__44729;\nvar map__44731__$1 = (((((!((map__44731 == null))))?(((((map__44731.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44731.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44731):map__44731);\nvar focus = map__44731__$1;\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44731__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44731__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(q_index,key);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar source = temp__5751__auto__;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),type,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(source)], 0))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(children,(edn_query_language.core.focus_subquery_STAR_.cljs$core$IFn$_invoke$arity$2 ? edn_query_language.core.focus_subquery_STAR_.cljs$core$IFn$_invoke$arity$2(source,focus) : edn_query_language.core.focus_subquery_STAR_.call(null,source,focus)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"union\",\"union\",2142937499),type,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(source)], 0))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(children,edn_query_language.core.focus_subquery_union_STAR_(source,focus));\n} else {\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(children,source);\n\n}\n}\n} else {\nreturn children;\n}\n});})(q_index))\n,cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(sub_ast)));\n});\n/**\n * Given a query, focus it along the specified query expression.\n * \n *   Examples:\n *  (focus-query [:foo :bar :baz] [:foo])\n *  => [:foo]\n * \n *  (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n *  => [{:foo [:bar]} :woz]\n */\nedn_query_language.core.focus_subquery = (function edn_query_language$core$focus_subquery(query,sub_query){\nvar query_ast = edn_query_language.core.query__GT_ast(query);\nvar sub_ast = edn_query_language.core.query__GT_ast(sub_query);\nreturn edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.focus_subquery_STAR_(query_ast,sub_ast),true);\n});\n/**\n * Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n *   on a whole AST. Each iteration of the transducer will get a single AST node to process.\n * \n *   ```\n *   (->> [:a {:b [:c :d]} :e]\n *     (p/query->ast)\n *     (p/transduce-children (remove (comp #{:a :c} :key)))\n *     (p/ast->query))\n *   ; => [{:b [:d]} :e]\n *   ```\n */\nedn_query_language.core.transduce_children = (function edn_query_language$core$transduce_children(xform,p__44746){\nvar map__44747 = p__44746;\nvar map__44747__$1 = (((((!((map__44747 == null))))?(((((map__44747.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44747.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44747):map__44747);\nvar node = map__44747__$1;\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44747__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\nvar G__44749 = node;\nif(cljs.core.seq(children)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__44749,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),((function (G__44749,map__44747,map__44747__$1,node,children){\nreturn (function (children__$1){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(xform,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (G__44749,map__44747,map__44747__$1,node,children){\nreturn (function (p1__44742_SHARP_){\nreturn (edn_query_language.core.transduce_children.cljs$core$IFn$_invoke$arity$2 ? edn_query_language.core.transduce_children.cljs$core$IFn$_invoke$arity$2(xform,p1__44742_SHARP_) : edn_query_language.core.transduce_children.call(null,xform,p1__44742_SHARP_));\n});})(G__44749,map__44747,map__44747__$1,node,children))\n)),children__$1);\n});})(G__44749,map__44747,map__44747__$1,node,children))\n);\n} else {\nreturn G__44749;\n}\n});\n/**\n * Given an AST point, check if the children is a union query type.\n */\nedn_query_language.core.union_children_QMARK_ = (function edn_query_language$core$union_children_QMARK_(ast){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"union\",\"union\",2142937499),(function (){var G__44756 = ast;\nvar G__44756__$1 = (((G__44756 == null))?null:new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__44756));\nvar G__44756__$2 = (((G__44756__$1 == null))?null:cljs.core.first(G__44756__$1));\nif((G__44756__$2 == null)){\nreturn null;\n} else {\nreturn new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(G__44756__$2);\n}\n})());\n});\n/**\n * Add property param, eg:\n * \n *   ```\n *   (p/update-property-param :keyword assoc :foo \"bar\") => (:keyword {:foo \"bar\"})\n *   (p/update-property-param '(:keyword {:param \"prev\"}) assoc :foo \"bar\") => (:keyword {:foo \"bar\" :param \"prev\"})\n *   ```\n *   \n */\nedn_query_language.core.update_property_param = (function edn_query_language$core$update_property_param(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___45372 = arguments.length;\nvar i__4731__auto___45373 = (0);\nwhile(true){\nif((i__4731__auto___45373 < len__4730__auto___45372)){\nargs__4736__auto__.push((arguments[i__4731__auto___45373]));\n\nvar G__45374 = (i__4731__auto___45373 + (1));\ni__4731__auto___45373 = G__45374;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn edn_query_language.core.update_property_param.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nedn_query_language.core.update_property_param.cljs$core$IFn$_invoke$arity$variadic = (function (x,f,args){\nif(cljs.core.seq_QMARK_(x)){\nvar vec__44769 = x;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44769,(0),null);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44769,(1),null);\nreturn (new cljs.core.List(null,k,(new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,p,args),null,(1),null)),(2),null));\n} else {\nreturn (new cljs.core.List(null,x,(new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,cljs.core.PersistentArrayMap.EMPTY,args),null,(1),null)),(2),null));\n}\n});\n\nedn_query_language.core.update_property_param.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nedn_query_language.core.update_property_param.cljs$lang$applyTo = (function (seq44765){\nvar G__44766 = cljs.core.first(seq44765);\nvar seq44765__$1 = cljs.core.next(seq44765);\nvar G__44767 = cljs.core.first(seq44765__$1);\nvar seq44765__$2 = cljs.core.next(seq44765__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__44766,G__44767,seq44765__$2);\n});\n\n/**\n * Merges two ast's.\n */\nedn_query_language.core.merge_asts = (function edn_query_language$core$merge_asts(qa,qb){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ast,p__44775){\nvar map__44776 = p__44775;\nvar map__44776__$1 = (((((!((map__44776 == null))))?(((((map__44776.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__44776.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__44776):map__44776);\nvar item_b = map__44776__$1;\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44776__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44776__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44776__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar temp__5751__auto__ = cljs.core.first(cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(((function (map__44776,map__44776__$1,item_b,key,type,params){\nreturn (function (p1__44774_SHARP_,p2__44773_SHARP_){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p2__44773_SHARP_),key)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__44774_SHARP_,p2__44773_SHARP_], null);\n} else {\nreturn null;\n}\n});})(map__44776,map__44776__$1,item_b,key,type,params))\n,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast)));\nif(cljs.core.truth_(temp__5751__auto__)){\nvar vec__44780 = temp__5751__auto__;\nvar idx = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44780,(0),null);\nvar item = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44780,(1),null);\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(item),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([type], 0))) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(item),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([type], 0))))){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(item),params)){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(ast,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),idx], null),edn_query_language.core.merge_asts,item_b);\n} else {\nreturn cljs.core.reduced(null);\n}\n} else {\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(item))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),type)))){\nreturn cljs.core.assoc_in(ast,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982),idx], null),item_b);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\nreturn cljs.core.reduced(null);\n} else {\nreturn ast;\n\n}\n}\n}\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),cljs.core.conj,item_b);\n}\n}),qa,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(qb));\n});\n/**\n * Merges two queries\n */\nedn_query_language.core.merge_queries = (function edn_query_language$core$merge_queries(qa,qb){\nvar G__44794 = edn_query_language.core.merge_asts(edn_query_language.core.query__GT_ast(qa),edn_query_language.core.query__GT_ast(qb));\nif((G__44794 == null)){\nreturn null;\n} else {\nreturn edn_query_language.core.ast__GT_query(G__44794);\n}\n});\n/**\n * Converts ident values and param values to ::p/var.\n */\nedn_query_language.core.normalize_query_variables = (function edn_query_language$core$normalize_query_variables(query){\nreturn edn_query_language.core.ast__GT_query(edn_query_language.core.transduce_children(cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (x){\nvar G__44802 = x;\nvar G__44802__$1 = ((edn_query_language.core.ident_QMARK_(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(x)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__44802,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(x)),new cljs.core.Keyword(\"edn-query-language.core\",\"var\",\"edn-query-language.core/var\",-1571169875)], null)):G__44802);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(x))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__44802__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235),((function (G__44802,G__44802__$1){\nreturn (function (p1__44798_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (G__44802,G__44802__$1){\nreturn (function (p__44810){\nvar vec__44811 = p__44810;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44811,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44811,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,new cljs.core.Keyword(\"edn-query-language.core\",\"var\",\"edn-query-language.core/var\",-1571169875)], null);\n});})(G__44802,G__44802__$1))\n),p1__44798_SHARP_);\n});})(G__44802,G__44802__$1))\n);\n} else {\nreturn G__44802__$1;\n}\n})),edn_query_language.core.query__GT_ast(query)));\n});\n/**\n * Generates a consistent hash from the query. The query first goes to a process to remove any\n *   variables from idents and params, then we get the Clojure hash of it. You can use this to save\n *   information about a query that can be used to correlate with the query later.\n */\nedn_query_language.core.query_id = (function edn_query_language$core$query_id(query){\nreturn cljs.core.hash(edn_query_language.core.normalize_query_variables(query));\n});\n/**\n * Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n * a large query.\n */\nedn_query_language.core.query__GT_shallow_ast = (function edn_query_language$core$query__GT_shallow_ast(query){\nvar _STAR_shallow_conversion_STAR__orig_val__44825 = edn_query_language.core._STAR_shallow_conversion_STAR_;\nvar _STAR_shallow_conversion_STAR__temp_val__44826 = true;\nedn_query_language.core._STAR_shallow_conversion_STAR_ = _STAR_shallow_conversion_STAR__temp_val__44826;\n\ntry{return edn_query_language.core.query__GT_ast(query);\n}finally {edn_query_language.core._STAR_shallow_conversion_STAR_ = _STAR_shallow_conversion_STAR__orig_val__44825;\n}});\nif(edn_query_language.core.INCLUDE_SPECS){\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"query->ast\",\"edn-query-language.core/query->ast\",1749339811,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),null,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"root\",\"edn-query-language.ast/root\",1592076898),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"query->ast1\",\"edn-query-language.core/query->ast1\",-1127394108,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),null,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"ast->query\",\"edn-query-language.core/ast->query\",1361699420,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"ident?\",\"edn-query-language.core/ident?\",-1410852474,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.any_QMARK_], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null),cljs.core.boolean_QMARK_,null,null),new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"focus-subquery\",\"edn-query-language.core/focus-subquery\",167014332,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"sub-query\",\"sub-query\",-1930580307),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"sub-query\",\"sub-query\",-1930580307),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"sub-query\",\"sub-query\",-1930580307)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(null,\"sub-query\",\"sub-query\",-1930580307),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"transduce-children\",\"edn-query-language.core/transduce-children\",966659322,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"xform\",\"xform\",-1725711008),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"node\",\"node\",581201198),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"xform\",\"xform\",-1725711008),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"node\",\"node\",581201198),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"xform\",\"xform\",-1725711008),new cljs.core.Keyword(null,\"node\",\"node\",581201198)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.fn_QMARK_,new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"xform\",\"xform\",-1725711008),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"node\",\"node\",581201198),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),null,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"union-children?\",\"edn-query-language.core/union-children?\",730690780,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null),cljs.core.boolean_QMARK_,null,null),new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"update-property-param\",\"edn-query-language.core/update-property-param\",213758125,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)),new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)),new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),new cljs.core.Keyword(null,\"args\",\"args\",1315556576)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)], null),null),cljs.core.fn_QMARK_,cljs.spec.alpha.rep_impl(new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null),cljs.core.any_QMARK_)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),new cljs.core.Keyword(\"edn-query-language.core\",\"property\",\"edn-query-language.core/property\",-1479624874),new cljs.core.Keyword(null,\"expr\",\"expr\",745722291),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901)),new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"*\",\"cljs.spec.alpha/*\",-1238084288,null),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null))),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),null,null),new cljs.core.Keyword(\"edn-query-language.core\",\"param-expr\",\"edn-query-language.core/param-expr\",-1530253901),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"merge-asts\",\"edn-query-language.core/merge-asts\",807253317,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957))),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957),null),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"node\",\"edn-query-language.ast/node\",-1614840957)),null,null,null));\n\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"edn-query-language.core\",\"merge-queries\",\"edn-query-language.core/merge-queries\",-229392415,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null),cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"qa\",\"qa\",-1970946508),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),new cljs.core.Keyword(null,\"qb\",\"qb\",-1714166232),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492))),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492),null),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"nilable\",\"cljs.spec.alpha/nilable\",1628308748,null),new cljs.core.Keyword(\"edn-query-language.core\",\"query\",\"edn-query-language.core/query\",-1940317492)),null,null,null));\n} else {\n}\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","edn_query_language/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.test","~$cljs.test","~$clojure.spec.test.alpha","~$cljs.spec.test.alpha","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",null,"~:excludes",["~#set",["~$ident?"]],"~:name","~$edn-query-language.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","^>","^?","^A","^A","~$clojure.test.check.generators","^V","~$goog","^W","~$gen","^V","~$clojure.test.check","^Y","~$s","^?","~$clojure.test.check.properties","^Z","^?","^?"],"~:seen",["^N",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^V","^V","^X","^V","^A","^A","^>","^?","~$s","^?","^Z","^Z","^?","^?"],"~:form",["~#list",["~$ns","^Q",["^14",["~:refer-clojure","~:exclude",["^O"]]],["^14",["^10",["^>","~:as","~$s"],["^Y"],["^V","^18","^X","~:include-macros",true],["^Z"]]]]],"~:flags",["^ ","^10",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^W","^A","^?","^Y","^V","^Z"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","edn_query_language/core.cljc"],"~:compiled-at",1630228421328,"~:resource-name","edn_query_language/core.cljc","~:warnings",[],"~:source","(ns edn-query-language.core\n  (:refer-clojure :exclude [ident?])\n  (:require [clojure.spec.alpha :as s]\n            [clojure.test.check]\n            [clojure.test.check.generators :as gen #?@(:cljs [:include-macros true])]\n            [clojure.test.check.properties]))\n\n(def ^:dynamic *shallow-conversion*\n  \"Dynamic var.  When bound to true in the current thread calls to query->ast will no go past the\n  first level of children.  This is useful when you just want the AST for one layer of a query.\"\n  false)\n\n#?(:clj  (def INCLUDE_SPECS true)\n   :cljs (goog-define INCLUDE_SPECS true))\n\n(when INCLUDE_SPECS\n  ;; query specs\n\n  (def generators\n    {::gen-max-depth\n     4\n\n     ::gen-property\n     (fn gen-property [_] gen/keyword-ns)\n\n     ::gen-special-property\n     (fn gen-special-property [_] (gen/return '*))\n\n     ::gen-ident-key\n     (fn gen-ident-key [_] gen/keyword-ns)\n\n     ::gen-ident-value\n     (fn gen-ident-value [_]\n       (gen/frequency [[15 gen/simple-type-printable]\n                       [1 (gen/return '_)]]))\n\n     ::gen-ident\n     (fn gen-ident [{::keys [gen-ident-key gen-ident-value] :as env}]\n       (gen/tuple\n         (gen-ident-key env)\n         (gen-ident-value env)))\n\n     ::gen-params\n     (fn gen-params [_] (gen/map gen/any-printable gen/any-printable))\n\n     ::gen-join-key\n     (fn gen-join-key [{::keys [gen-property gen-ident gen-join-key-param-expr] :as env}]\n       (gen/frequency [[10 (gen-property env)]\n                       [3 (gen-ident env)]\n                       [1 (gen-join-key-param-expr env)]]))\n\n     ::gen-join-key-param-key\n     (fn gen-join-key-param-key [{::keys [gen-property gen-ident] :as env}]\n       (gen/one-of [(gen-property env) (gen-ident env)]))\n\n     ::gen-join-key-param-expr\n     (fn gen-join-key-param-expr [{::keys [gen-join-key-param-key gen-params] :as env}]\n       (gen/let [q (gen-join-key-param-key env)\n                 p (gen-params env)]\n         (list q p)))\n\n     ::gen-join\n     (fn gen-join [{::keys [gen-join-key gen-join-query] :as env}]\n       (gen/map (gen-join-key env) (gen-join-query env) {:num-elements 1}))\n\n     ::gen-join-query\n     (fn gen-join-query [{::keys [gen-query gen-union gen-recursion] :as env}]\n       (gen/frequency [[10 (gen-query env)]\n                       [2 (gen-union env)]\n                       [1 (gen-recursion env)]]))\n\n     ::gen-union-key\n     (fn gen-union-key [_] gen/keyword-ns)\n\n     ::gen-union\n     (fn gen-union [{::keys [gen-union-key gen-query] :as env}]\n       (gen/map (gen-union-key env) (gen-query env) {:min-elements 1}))\n\n     ::gen-depth\n     (fn gen-depth [_] (gen/large-integer* {:min 1 :max 5}))\n\n     ::gen-recursion\n     (fn gen-recursion [{::keys [gen-depth] :as env}]\n       (gen/one-of [(gen-depth env) (gen/return '...)]))\n\n     ::gen-param-expr-key\n     (fn gen-param-expr-key [{::keys [gen-property gen-join gen-ident] :as env}]\n       (gen/frequency [[20 (gen-property env)]\n                       [8 (gen-join env)]\n                       [4 (gen-ident env)]]))\n\n     ::gen-param-expr\n     (fn gen-param-expr [{::keys [gen-param-expr-key gen-params] :as env}]\n       (gen/let [q (gen-param-expr-key env)\n                 p (gen-params env)]\n         (list q p)))\n\n     ::gen-query-expr\n     (fn gen-query-expr [{::keys [gen-property gen-join gen-ident gen-param-expr gen-special-property gen-mutation]\n                          :as    env}]\n       (gen/frequency [[20 (gen-property env)]\n                       [6 (gen-join env)]\n                       [1 (gen-ident env)]\n                       [2 (gen-param-expr env)]\n                       [1 (gen-mutation env)]\n                       [1 (gen-special-property env)]]))\n\n     ::gen-query\n     (fn gen-query [{::keys [gen-property gen-query-expr gen-max-depth] :as env}]\n       (if (> gen-max-depth 0)\n         (gen/vector (gen-query-expr (update env ::gen-max-depth dec)))\n         (gen/vector-distinct (gen-property env))))\n\n     ::gen-mutation-key\n     (fn gen-mutation-key [_] gen/symbol)\n\n     ::gen-mutation-expr\n     (fn gen-mutation-expr [{::keys [gen-mutation-key gen-params] :as env}]\n       (gen/let [key (gen-mutation-key env)\n                 val (gen-params env)]\n         (list key val)))\n\n     ::gen-mutation-join\n     (fn mutation-join [{::keys [gen-mutation-expr gen-query] :as env}]\n       (gen/map (gen-mutation-expr env) (gen-query env) {:num-elements 1}))\n\n     ::gen-mutation\n     (fn gen-mutation [{::keys [gen-mutation-expr gen-mutation-join] :as env}]\n       (gen/frequency [[5 (gen-mutation-expr env)]\n                       [1 (gen-mutation-join env)]]))})\n\n  (defn default-gen [name]\n    #((get generators name) generators))\n\n  (defn make-gen\n    [env name]\n    (let [env (merge generators env)\n          gen (get env name)]\n      (assert gen (str \"No generator available for \" name))\n      ((get env name) env)))\n\n  ; tag::specs[]\n  (s/def ::property keyword?)\n  (s/def ::special-property #{'*})\n  (s/def ::ident-value (s/with-gen any? (default-gen ::gen-ident-value)))\n  (s/def ::ident (s/with-gen (s/tuple ::property ::ident-value) (default-gen ::gen-ident)))\n  (s/def ::join-key (s/or :prop ::property, :ident ::ident, :param-exp ::join-key-param-expr))\n  (s/def ::join (s/map-of ::join-key ::join-query, :count 1, :conform-keys true))\n  (s/def ::union (s/map-of ::property ::query, :min-count 1, :conform-keys true))\n  (s/def ::recursion-depth (s/with-gen nat-int? (default-gen ::gen-depth)))\n  (s/def ::recursion (s/or :depth ::recursion-depth, :unbounded #{'...}))\n\n  (s/def ::join-query\n    (s/with-gen\n      (s/or :query ::query\n            :union ::union\n            :recursion ::recursion)\n      (default-gen ::gen-join-query)))\n\n  (s/def ::params\n    (s/with-gen map? (default-gen ::gen-params)))\n\n  (s/def ::param-expr-key\n    (s/with-gen\n      (s/or :prop ::property\n            :join ::join\n            :ident ::ident)\n      (default-gen ::gen-param-expr-key)))\n\n  (s/def ::param-expr\n    (s/with-gen\n      (s/and seq? (s/cat :expr ::param-expr-key :params (s/? ::params)))\n      (default-gen ::gen-param-expr)))\n\n  (s/def ::join-key-param-key (s/or :prop ::property :ident ::ident))\n\n  (s/def ::join-key-param-expr\n    (s/with-gen\n      (s/and seq? (s/cat :expr ::join-key-param-key :params (s/? ::params)))\n      (default-gen ::gen-join-key-param-expr)))\n\n  (s/def ::mutation-key (s/with-gen symbol? (default-gen ::gen-mutation-key)))\n\n  (s/def ::mutation-expr\n    (s/with-gen\n      (s/and seq? (s/cat :mutate-key ::mutation-key :params (s/? ::params)))\n      (default-gen ::gen-mutation-expr)))\n\n  (s/def ::mutation-join\n    (s/map-of ::mutation-expr ::query :count 1 :conform-keys true))\n\n  (s/def ::mutation\n    (s/or :mutation ::mutation-expr\n          :mutation-join ::mutation-join))\n\n  (s/def ::query-expr\n    (s/or :prop ::property\n          :join ::join\n          :ident ::ident\n          :mutation ::mutation\n          :param-exp ::param-expr\n          :special ::special-property))\n\n  (s/def ::query\n    (s/coll-of ::query-expr :kind vector? :gen (default-gen ::gen-query)))\n  ; end::specs[]\n\n  ;; ast specs\n\n  (s/def :edn-query-language.ast/query ::join-query)\n  (s/def :edn-query-language.ast/key (s/or :prop ::property :ident ::ident :sym symbol?))\n  (s/def :edn-query-language.ast/dispatch-key (s/or :prop ::property :sym symbol?))\n  (s/def :edn-query-language.ast/union-key ::property)\n\n  (s/def :edn-query-language.ast/children\n    (s/coll-of :edn-query-language.ast/node))\n\n  (s/def :edn-query-language.ast/root\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/children])\n      #(= :root (:type %))\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmulti node-type :type)\n\n  (defmethod node-type nil [_]\n    (s/keys :req-un [:edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :prop [_]\n    (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key]))\n\n  (defmethod node-type :join [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key :edn-query-language.ast/query] :opt-un [:edn-query-language.ast/children])\n      #(if (-> % :query first (= :recursion)) % (if (contains? % :children) % false))\n      (fn [x] (every? (comp #(contains? #{:prop :join :union :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :union [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/query :edn-query-language.ast/children])\n      #(every? (comp #{:union-entry} :type) (:children %))))\n\n  (defmethod node-type :union-entry [_]\n    (s/and (s/keys :req-un [:edn-query-language.ast/type :edn-query-language.ast/union-key :edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :call [_]\n    (s/and (s/keys\n             :req-un [:edn-query-language.ast/type :edn-query-language.ast/key :edn-query-language.ast/dispatch-key ::params]\n             :opt-un [:edn-query-language.ast/query :edn-query-language.ast/children])\n      (fn [x] (every? (comp #(contains? #{:prop :join :call nil} %) :type) (:children x)))))\n\n  (defmethod node-type :root [_]\n    (s/spec :edn-query-language.ast/root))\n\n  (s/def :edn-query-language.ast/type (set (keys (methods node-type))))\n  (s/def :edn-query-language.ast/node (s/multi-spec node-type :type)))\n\n;; library\n\n(declare expr->ast)\n\n(defn- mark-meta [source target]\n  (cond-> target\n    (meta source) (assoc :meta (meta source))))\n\n(defn symbol->ast [k]\n  {:dispatch-key k\n   :key          k})\n\n(defn keyword->ast [k]\n  {:type         :prop\n   :dispatch-key k\n   :key          k})\n\n(defn union-entry->ast [[k v]]\n  (let [component (-> v meta :component)]\n    (merge\n      {:type      :union-entry\n       :union-key k\n       :query     v\n       :children  (into [] (map expr->ast) v)}\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn union->ast [m]\n  {:type     :union\n   :query    m\n   :children (into [] (map union-entry->ast) m)})\n\n(defn call->ast [[f args :as call]]\n  (if (= 'quote f)\n    (assoc (expr->ast args) :target (or (-> call meta :target) :remote))\n    (let [ast (update-in (expr->ast f) [:params] merge (or args {}))]\n      (cond-> (mark-meta call ast)\n        (symbol? (:dispatch-key ast)) (assoc :type :call)))))\n\n(defn query->ast\n  \"Convert a query to its AST representation.\"\n  [query]\n  (let [component (-> query meta :component)]\n    (merge\n      (mark-meta query\n        {:type     :root\n         :children (into [] (map expr->ast) query)})\n      (when-not (nil? component)\n        {:component component}))))\n\n(defn query->ast1\n  \"Call query->ast and return the first children.\"\n  [query-expr]\n  (-> (query->ast query-expr) :children first))\n\n(defn join->ast [join]\n  (let [query-root? (-> join meta :query-root)\n        [k v] (first join)\n        ast         (expr->ast k)\n        type        (if (= :call (:type ast)) :call :join)\n        component   (-> v meta :component)]\n    (merge ast\n           (mark-meta join {:type type :query v})\n           (when-not (nil? component)\n             {:component component})\n           (when query-root?\n             {:query-root true})\n      (when-not (or (number? v) (= '... v) *shallow-conversion*)\n             (cond\n               (vector? v) {:children (into [] (map expr->ast) v)}\n               (map? v) {:children [(union->ast v)]}\n               :else (throw\n                       (ex-info (str \"Invalid join, \" join)\n                         {:type :error/invalid-join})))))))\n\n(defn ident->ast [[k id :as ref]]\n  {:type         :prop\n   :dispatch-key k\n   :key          ref})\n\n(defn expr->ast\n  \"Given a query expression convert it into an AST.\"\n  [x]\n  (cond\n    (symbol? x) (symbol->ast x)\n    (keyword? x) (keyword->ast x)\n    (map? x) (join->ast x)\n    (vector? x) (ident->ast x)\n    (seq? x) (call->ast x)\n    :else (throw\n            (ex-info (str \"Invalid expression \" x)\n              {:type :error/invalid-expression}))))\n\n(defn wrap-expr [root? expr]\n  (if root?\n    (with-meta\n      (cond-> expr (keyword? expr) list)\n      {:query-root true})\n    expr))\n\n(defn parameterize [expr params]\n  (if-not (empty? params)\n    (list expr params)\n    (list expr)))\n\n(defn ast->expr\n  \"Given a query expression AST convert it back into a query expression.\"\n  ([ast]\n   (ast->expr ast false))\n  ([{:keys [type component] ast-meta :meta :as ast} unparse?]\n   (if (= :root type)\n     (cond-> (into (with-meta [] ast-meta) (map #(ast->expr % unparse?)) (:children ast))\n       (not (nil? component)) (vary-meta assoc :component component))\n     (let [{:keys [key query query-root params]} ast]\n       (wrap-expr query-root\n         (if (and params (not= :call type))\n           (let [expr (ast->expr (dissoc ast :params) unparse?)]\n             (parameterize expr params))\n           (let [key (if (= :call type) (parameterize key params) key)]\n             (if (or (= :join type)\n                     (and (= :call type) (:children ast)))\n               (if (and (not= '... query) (not (number? query))\n                        (or (true? unparse?)\n                            (= :call type)))\n                 (let [{:keys [children]} ast\n                       query-meta (meta query)]\n                   (if (and (== 1 (count children))\n                            (= :union (:type (first children)))) ;; UNION\n                     (with-meta\n                       {key (into (cond-> (with-meta {} ast-meta)\n                                    component (vary-meta assoc :component component))\n                                  (map (fn [{:keys [union-key children component]}]\n                                         [union-key\n                                          (cond-> (into [] (map #(ast->expr % unparse?)) children)\n                                            (not (nil? component)) (vary-meta assoc :component component))]))\n                                  (:children (first children)))}\n                       ast-meta)\n                     (with-meta\n                       {key (cond-> (into (with-meta [] query-meta) (map #(ast->expr % unparse?)) children)\n                              (not (nil? component)) (vary-meta assoc :component component))}\n                       ast-meta)))\n                 (with-meta {key query} ast-meta))\n               key))))))))\n\n(defn ast->query [query-ast]\n  \"Given an AST convert it back into a query expression.\"\n  (ast->expr query-ast true))\n\n(defn ident?\n  \"Check if x is a EQL ident.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))\n       (= 2 (count x))))\n\n;; query processing helpers\n\n(declare focus-subquery*)\n\n(defn focus-subquery-union*\n  [query-ast sub-ast]\n  (let [s-index (into {} (map #(vector (:union-key %) %)) (:children sub-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [union-key] :as union-entry}]\n          (if-let [sub (get s-index union-key)]\n            (conj children (focus-subquery* union-entry sub))\n            (conj children union-entry)))\n        []\n        (:children query-ast)))))\n\n(defn focus-subquery*\n  \"Internal implementation of focus-subquery, you can use this function directly if\n  you want to send AST in and get AST out (instead of query in / query out).\"\n  [query-ast sub-ast]\n  (let [q-index (into {} (map #(vector (:key %) %)) (:children query-ast))]\n    (assoc query-ast\n      :children\n      (reduce\n        (fn [children {:keys [key type] :as focus}]\n          (if-let [source (get q-index key)]\n            (cond\n              (= :join type (:type source))\n              (conj children (focus-subquery* source focus))\n\n              (= :union type (:type source))\n              (conj children (focus-subquery-union* source focus))\n\n              :else\n              (conj children source))\n            children))\n        []\n        (:children sub-ast)))))\n\n(defn focus-subquery\n  \"Given a query, focus it along the specified query expression.\n\n  Examples:\n    (focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n    => [{:foo [:bar]} :woz]\"\n  [query sub-query]\n  (let [query-ast (query->ast query)\n        sub-ast   (query->ast sub-query)]\n    (ast->expr (focus-subquery* query-ast sub-ast) true)))\n\n(defn transduce-children\n  \"Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n  on a whole AST. Each iteration of the transducer will get a single AST node to process.\n\n  ```\n  (->> [:a {:b [:c :d]} :e]\n       (p/query->ast)\n       (p/transduce-children (remove (comp #{:a :c} :key)))\n       (p/ast->query))\n  ; => [{:b [:d]} :e]\n  ```\"\n  [xform {:keys [children] :as node}]\n  (cond-> node\n    (seq children)\n    (update :children\n      (fn [children]\n        (into [] (comp xform (map #(transduce-children xform %))) children)))))\n\n(defn union-children?\n  \"Given an AST point, check if the children is a union query type.\"\n  [ast]\n  (= :union (some-> ast :children first :type)))\n\n(defn update-property-param\n  \"Add property param, eg:\n\n  ```\n  (p/update-property-param :keyword assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\"})\n  (p/update-property-param '(:keyword {:param \\\"prev\\\"}) assoc :foo \\\"bar\\\") => (:keyword {:foo \\\"bar\\\" :param \\\"prev\\\"})\n  ```\n  \"\n  [x f & args]\n  (if (seq? x)\n    (let [[k p] x]\n      (list k (apply f p args)))\n\n    (list x (apply f {} args))))\n\n(defn merge-asts\n  \"Merges two ast's.\"\n  [qa qb]\n  (reduce (fn [ast {:keys [key type params] :as item-b}]\n            (if-let [[idx item] (->> ast :children\n                                     (keep-indexed #(if (-> %2 :key (= key)) [%1 %2]))\n                                     first)]\n              (cond\n                (or (= :join (:type item) type)\n                    (= :prop (:type item) type))\n                (if (= (:params item) params)\n                  (update-in ast [:children idx] merge-asts item-b)\n                  (reduced nil))\n\n                (and (= :prop (:type item))\n                     (= :join type))\n                (assoc-in ast [:children idx] item-b)\n\n                (= :call type)\n                (reduced nil)\n\n                :else ast)\n              (update ast :children conj item-b)))\n    qa\n    (:children qb)))\n\n(defn merge-queries\n  \"Merges two queries\"\n  [qa qb]\n  (some-> (merge-asts (query->ast qa) (query->ast qb))\n    (ast->query)))\n\n(defn normalize-query-variables\n  \"Converts ident values and param values to ::p/var.\"\n  [query]\n  (->> (query->ast query)\n       (transduce-children\n         (map (fn [x]\n                (cond-> x\n                  (ident? (:key x))\n                  (assoc :key [(first (:key x)) ::var])\n\n                  (:params x)\n                  (update :params #(into {} (map (fn [[k _]] [k ::var])) %))))))\n       (ast->query)))\n\n(defn query-id\n  \"Generates a consistent hash from the query. The query first goes to a process to remove any\n  variables from idents and params, then we get the Clojure hash of it. You can use this to save\n  information about a query that can be used to correlate with the query later.\"\n  [query]\n  (hash (normalize-query-variables query)))\n\n(defn query->shallow-ast\n  \"Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n   a large query.\"\n  [query]\n  (binding [*shallow-conversion* true]\n    (query->ast query)))\n\n(when INCLUDE_SPECS\n  (s/fdef query->ast\n    :args (s/cat :query (s/nilable ::query))\n    :ret :edn-query-language.ast/root)\n\n  (s/fdef query->ast1\n    :args (s/cat :query ::query)\n    :ret :edn-query-language.ast/node)\n\n  (s/fdef ast->query\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret ::query)\n\n  (s/fdef ident?\n    :args (s/cat :x any?)\n    :ret boolean?)\n\n  (s/fdef focus-subquery\n    :args (s/cat :query ::query :sub-query ::query)\n    :ret ::query)\n\n  (s/fdef transduce-children\n    :args (s/cat :xform fn? :node :edn-query-language.ast/node)\n    :ret :edn-query-language.ast/node)\n\n  (s/fdef union-children?\n    :args (s/cat :ast :edn-query-language.ast/node)\n    :ret boolean?)\n\n  (s/fdef update-property-param\n    :args (s/cat :x (s/or :property ::property\n                          :expr ::param-expr)\n                 :f fn?\n                 :args (s/* any?))\n    :ret ::param-expr)\n\n  (s/fdef merge-asts\n    :args (s/cat :qa :edn-query-language.ast/node, :qb :edn-query-language.ast/node)\n    :ret (s/nilable :edn-query-language.ast/node))\n\n  (s/fdef merge-queries\n    :args (s/cat :qa (s/nilable ::query), :qb (s/nilable ::query))\n    :ret (s/nilable ::query)))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["edn-query-language.core/*shallow-conversion*","goog/define","edn-query-language.core/INCLUDE_SPECS","edn-query-language.core/generators","_","clojure.test.check.generators/keyword-ns","clojure.test.check.generators/return","clojure.test.check.generators/frequency","clojure.test.check.generators/simple-type-printable","p__43666","map__43667","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","gen-ident-key","gen-ident-value","env","clojure.test.check.generators.tuple.cljs$core$IFn$_invoke$arity$variadic","clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$2","clojure.test.check.generators/any-printable","p__43753","map__43755","gen-property","gen-ident","gen-join-key-param-expr","p__43659","map__43660","clojure.test.check.generators/one-of","p__43786","map__43790","gen-join-key-param-key","gen-params","clojure.test.check.generators/bind","val__24725__auto__","clojure.test.check.generators/generator?","q","p","cljs.core/List","p__43699","map__43700","gen-join-key","gen-join-query","clojure.test.check.generators.map.cljs$core$IFn$_invoke$arity$3","p__43743","map__43744","gen-query","gen-union","gen-recursion","p__43690","map__43693","gen-union-key","clojure.test.check.generators/large-integer*","p__43810","map__43812","gen-depth","p__43768","map__43769","gen-join","p__43713","map__43715","gen-param-expr-key","p__43676","map__43677","gen-param-expr","gen-special-property","gen-mutation","p__43651","map__43652","gen-query-expr","gen-max-depth","clojure.test.check.generators.vector.cljs$core$IFn$_invoke$arity$1","G__43657","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/dec","clojure.test.check.generators.vector_distinct.cljs$core$IFn$_invoke$arity$1","clojure.test.check.generators/symbol","p__43682","map__43684","gen-mutation-key","key","val","p__43641","map__43642","gen-mutation-expr","p__43672","map__43673","gen-mutation-join","edn-query-language.core/default-gen","name","fexpr__43827","edn-query-language.core/make-gen","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","gen","js/Error","fexpr__43843","cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.spec.alpha/with-gen","cljs.core/any?","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__43866","cljs.core/map?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/bounded-count","i__12903__auto__","v__12904__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__43885","or__4131__auto__","cljs.spec.alpha/MAX_INT","cljs.core/nat-int?","cljs.spec.alpha/and-spec-impl","cljs.core/seq?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/symbol?","G__43990","G__44006","cljs.core/vector?","G__44009","cljs.core/coll?","p1__43630#","cljs.spec.alpha/map-spec-impl","G__44028","cljs.core/contains?","x","cljs.core/every?","p1__43631#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","js/edn-query-language","js/edn-query-language.core","js/edn-query-language.core.node-type","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__44055","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","edn-query-language.core/node-type","G__44063","G__44091","p1__43632#","G__44145","cljs.core/first","p1__43633#","p1__43634#","G__44200","G__44275","p1__43635#","G__44393","p1__43636#","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/set","cljs.core/keys","cljs.core/methods","cljs.spec.alpha.multi_spec_impl.cljs$core$IFn$_invoke$arity$3","edn-query-language.core/mark-meta","source","target","G__44471","cljs.core/meta","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","edn-query-language.core/symbol->ast","k","edn-query-language.core/keyword->ast","p__44479","vec__44482","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","edn-query-language.core/union-entry->ast","v","component","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","edn-query-language.core/expr->ast","edn-query-language.core/union->ast","m","p__44496","vec__44499","edn-query-language.core/call->ast","f","args","call","ast","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","G__44509","cljs.core/Symbol","edn-query-language.core/query->ast","query","edn-query-language.core/query->ast1","query-expr","edn-query-language.core/join->ast","join","vec__44533","query-root?","type","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","p__44569","vec__44576","edn-query-language.core/ident->ast","id","ref","cljs.core/Keyword","edn-query-language.core/wrap-expr","root?","expr","cljs.core/with-meta","G__44605","edn-query-language.core/parameterize","params","cljs.core/empty?","var_args","G__44624","edn-query-language.core/ast->expr","p__44635","map__44636","edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2","ast-meta","unparse?","G__44640","p1__44617#","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","map__44642","query-root","and__4120__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","map__44655","children","query-meta","cljs.core/count","G__44657","p__44659","map__44660","union-key","G__44662","p1__44620#","G__44666","p1__44621#","edn-query-language.core/ast->query","query-ast","edn-query-language.core/ident?","edn-query-language.core/focus-subquery-union*","sub-ast","s-index","p1__44706#","cljs.core/PersistentVector","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__44722","map__44723","union-entry","temp__5751__auto__","sub","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","edn-query-language.core/focus-subquery*","q-index","p1__44728#","p__44729","map__44731","focus","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic","edn-query-language.core/focus-subquery","sub-query","p__44746","map__44747","edn-query-language.core/transduce-children","xform","node","G__44749","cljs.core/seq","p1__44742#","edn-query-language.core/union-children?","G__44756","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","edn-query-language.core/update-property-param","seq44765","G__44766","cljs.core/next","G__44767","self__4717__auto__","vec__44769","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","edn-query-language.core/merge-asts","qa","qb","p__44775","map__44776","item-b","vec__44780","idx","item","p1__44774#","p2__44773#","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/reduced","cljs.core/assoc-in","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","edn-query-language.core/merge-queries","G__44794","edn-query-language.core/normalize-query-variables","G__44802","p1__44798#","p__44810","vec__44811","edn-query-language.core/query-id","cljs.core/hash","edn-query-language.core/query->shallow-ast","*shallow-conversion*-orig-val__44825","*shallow-conversion*-temp-val__44826","cljs.spec.alpha/fspec-impl","cljs.spec.alpha/nilable-impl","cljs.core/boolean?","cljs.core/fn?","cljs.spec.alpha/rep-impl"]]],"~:cache-keys",["~#cmap",[["^1>","cljs/spec/gen/alpha.cljs"],[1630228118934,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^W","^A","~$goog.Uri"]]],["^1>","goog/math/math.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","~$goog.array","~$goog.asserts"]]],["^1>","goog/array/array.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1Q"]]],["^1>","clojure/test/check/properties.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","^V","~$clojure.test.check.results"]]],["^1>","clojure/test/check/generators.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","~$clojure.string","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$goog.string"]]],["^1>","goog/debug/error.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","clojure/test/check/random/doubles.cljs"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","~$clojure.test.check.random.longs"]]],["^1>","goog/dom/nodetype.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","clojure/test/check/rose_tree.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A"]]],["^1>","clojure/test/check/impl.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A"]]],["^1>","clojure/test/check/random.cljs"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","~$clojure.test.check.random.doubles","^1W"]]],["^1>","goog/object/object.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],"~:SHADOW-TIMESTAMP",[1630228360000,1630228118000],["^1>","goog/math/long.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1Q","~$goog.reflect"]]],["^1>","goog/string/internal.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","clojure/test/check.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","^V","^1T","^1R","^1U","~$clojure.test.check.impl"]]],["^1>","edn_query_language/core.cljc"],[1630228119293,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","^?","^Y","^V","^Z"]]],["^1>","goog/functions/functions.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","clojure/walk.cljs"],[1630228118934,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A"]]],["^1>","goog/structs/map.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/asserts/asserts.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1P","^1Q","^1V","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","cljs/spec/alpha.cljs"],[1630228118934,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","~$goog.object","~$clojure.walk","^G","^1S"]]],["^1>","goog/base.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",[]]],["^1>","goog/structs/structs.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1P","^29"]]],["^1>","clojure/string.cljs"],[1630228118934,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","^1V","~$goog.string.StringBuffer"]]],["^1>","clojure/test/check/random/longs/bit_count_impl.cljs"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A"]]],["^1>","goog/string/string.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","~$goog.string.internal"]]],["^1>","goog/reflect/reflect.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","goog/string/stringbuffer.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","goog/iter/iter.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1P","^1Q","~$goog.functions","~$goog.math"]]],["^1>","cljs/core.cljs"],[1630228118934,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["~$goog.math.Long","~$goog.math.Integer","^1V","^29","^1P","^1O","^2;"]]],["^1>","clojure/test/check/random/longs.cljs"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A","~$clojure.test.check.random.longs.bit-count-impl","^2?","^A"]]],["^1>","goog/math/integer.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W"]]],["^1>","goog/uri/utils.js"],[1630228359392,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^1P","^1Q","^1V"]]],["^1>","clojure/test/check/results.cljc"],[1630228119162,"^1K",["^ ","^1L",null,"^1M",["^N",[]],"^1N",["^W","^A"]]]]],"~:clj-info",["^ ","jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/random.clj",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/gen/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/spec/alpha.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/generators.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/results.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/properties.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar!/clojure/test/check/rose_tree.cljc",1630228119000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1629997474000,"jar:file:/Users/mazeboard/.m2/repository/binaryage/devtools/0.9.10/devtools-0.9.10.jar!/devtools/defaults.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1630228358000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1630228118000,"jar:file:/Users/mazeboard/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1630228118000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","edn_query_language/core.cljc","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",["^O"]],"^P","^Q","^T",null,"^U",["^ ","^>","^?","^A","^A","^V","^V","^W","^W","^X","^V","^Y","^Y","~$s","^?","^Z","^Z","^?","^?"],"^[",["^N",["^10"]],"~:shadow/js-access-global",["^N",["Error"]],"^11",null,"~:defs",["^ ","~$expr->ast",["^ ","~:protocol-inline",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",336,"^8",7,"^9",336,"^:",16,"~:arglists",["^14",["~$quote",["^14",[["~$x"]]]]],"~:doc","Given a query expression convert it into an AST."],"^P","~$edn-query-language.core/expr->ast","^6","edn_query_language/core.cljc","^:",16,"~:method-params",["^14",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^8",1,"~:variadic?",false,"^7",336,"~:ret-tag",["^N",[null,"~$clj","~$any","~$cljs.core/IMap","~$clj-nil"]],"^9",336,"~:max-fixed-arity",1,"~:fn-var",true,"^3=",["^14",["^3>",["^14",[["~$x"]]]]],"^3?","Given a query expression convert it into an AST."],"~$*shallow-conversion*",["^ ","^5",["^ ","^6","edn_query_language/core.cljc","^7",8,"^8",16,"^9",8,"^:",36,"~:dynamic",true],"^P","~$edn-query-language.core/*shallow-conversion*","^6","edn_query_language/core.cljc","^:",36,"^8",1,"^3M",true,"^7",8,"^9",8,"~:tag","~$boolean","^3?","Dynamic var.  When bound to true in the current thread calls to query->ast will no go past the\n  first level of children.  This is useful when you just want the AST for one layer of a query."],"~$union-children?",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",483,"^8",7,"^9",483,"^:",22,"^3=",["^14",["^3>",["^14",[["~$ast"]]]]],"^3?","Given an AST point, check if the children is a union query type."],"^P","~$edn-query-language.core/union-children?","^6","edn_query_language/core.cljc","^:",22,"^3A",["^14",[["^3R"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",483,"^3E","^3P","^9",483,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^3R"]]]]],"^3?","Given an AST point, check if the children is a union query type."],"~$call->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",288,"^8",7,"^9",288,"^:",16,"^3=",["^14",["^3>",["^14",[[["~$f","~$args","^18","~$call"]]]]]]],"^P","~$edn-query-language.core/call->ast","^6","edn_query_language/core.cljc","^:",16,"^3A",["^14",[["~$p__44496"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",288,"^3E",["^N",[null,"^3F","^3G"]],"^9",288,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[[["~$f","^3U","^18","^3V"]]]]]]],"~$ast->expr",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",361,"^8",7,"^9",361,"^:",16,"^3=",["^14",["^3>",["^14",[["^3R"],[["^ ","~:keys",["~$type","~$component"],"~$ast-meta","^5","^18","^3R"],"~$unparse?"]]]]],"^3?","Given a query expression AST convert it back into a query expression.","~:top-fn",["^ ","^3D",false,"~:fixed-arity",2,"^3J",2,"^3A",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3=",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3C",["^14",[null,null]]]],"^P","~$edn-query-language.core/ast->expr","^6","edn_query_language/core.cljc","^:",16,"^43",["^ ","^3D",false,"^44",2,"^3J",2,"^3A",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3=",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3C",["^14",[null,null]]],"^3A",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3B",null,"^44",2,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"~:methods",[["^ ","^44",1,"^3D",false,"^3O","^3G"],["^ ","^44",2,"^3D",false,"^3O",["^N",[null,"^3F","^3G","~$cljs.core/MetaFn","^3I"]]]],"^7",361,"^9",361,"^3J",2,"^3K",true,"^3=",["^14",[["^3R"],[["^ ","^3Z",["^3[","^40"],"^41","^5","^18","^3R"],"^42"]]],"^3?","Given a query expression AST convert it back into a query expression."],"~$generators",["^ ","^P","~$edn-query-language.core/generators","^6","edn_query_language/core.cljc","^7",19,"^8",3,"^9",19,"^:",18,"^5",["^ ","^6","edn_query_language/core.cljc","^7",19,"^8",8,"^9",19,"^:",18],"^3O","^3H"],"~$mark-meta",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",260,"^8",8,"^9",260,"^:",17,"~:private",true,"^3=",["^14",["^3>",["^14",[["~$source","~$target"]]]]]],"^4;",true,"^P","~$edn-query-language.core/mark-meta","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["^4<","^4="]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",260,"^3E",["^N",[null,"^3F","^3G"]],"^9",260,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4<","^4="]]]]]],"~$INCLUDE_SPECS",["^ ","^5",["^ ","^6","edn_query_language/core.cljc","^7",14,"^8",23,"^9",14,"^:",36,"^3O","^3P","~:declared",true],"^P","~$edn-query-language.core/INCLUDE_SPECS","^6","edn_query_language/core.cljc","^:",36,"^8",10,"^7",14,"^4@",true,"^9",14,"^3O","^3P"],"~$focus-subquery-union*",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",415,"^8",7,"^9",415,"^:",28,"^3=",["^14",["^3>",["^14",[["~$query-ast","~$sub-ast"]]]]]],"^P","~$edn-query-language.core/focus-subquery-union*","^6","edn_query_language/core.cljc","^:",28,"^3A",["^14",[["^4C","^4D"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",415,"^3E",["^N",["^3F","^3G"]],"^9",415,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4C","^4D"]]]]]],"~$focus-subquery*",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",428,"^8",7,"^9",428,"^:",22,"^3=",["^14",["^3>",["^14",[["^4C","^4D"]]]]],"^3?","Internal implementation of focus-subquery, you can use this function directly if\n  you want to send AST in and get AST out (instead of query in / query out)."],"^P","~$edn-query-language.core/focus-subquery*","^6","edn_query_language/core.cljc","^:",22,"^3A",["^14",[["^4C","^4D"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",428,"^3E",["^N",["^3F","^3G"]],"^9",428,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4C","^4D"]]]]],"^3?","Internal implementation of focus-subquery, you can use this function directly if\n  you want to send AST in and get AST out (instead of query in / query out)."],"~$transduce-children",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",465,"^8",7,"^9",465,"^:",25,"^3=",["^14",["^3>",["^14",[["~$xform",["^ ","^3Z",["~$children"],"^18","~$node"]]]]]],"^3?","Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n  on a whole AST. Each iteration of the transducer will get a single AST node to process.\n\n  ```\n  (->> [:a {:b [:c :d]} :e]\n       (p/query->ast)\n       (p/transduce-children (remove (comp #{:a :c} :key)))\n       (p/ast->query))\n  ; => [{:b [:d]} :e]\n  ```"],"^P","~$edn-query-language.core/transduce-children","^6","edn_query_language/core.cljc","^:",25,"^3A",["^14",[["^4I","~$p__44746"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",465,"^3E",["^N",[null,"^3F","^3G"]],"^9",465,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4I",["^ ","^3Z",["^4J"],"^18","^4K"]]]]]],"^3?","Recursivelly transduce children on the AST, you can use this to apply filter/transformations\n  on a whole AST. Each iteration of the transducer will get a single AST node to process.\n\n  ```\n  (->> [:a {:b [:c :d]} :e]\n       (p/query->ast)\n       (p/transduce-children (remove (comp #{:a :c} :key)))\n       (p/ast->query))\n  ; => [{:b [:d]} :e]\n  ```"],"~$focus-subquery",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",451,"^8",7,"^9",451,"^:",21,"^3=",["^14",["^3>",["^14",[["~$query","~$sub-query"]]]]],"^3?","Given a query, focus it along the specified query expression.\n\n  Examples:\n    (focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n    => [{:foo [:bar]} :woz]"],"^P","~$edn-query-language.core/focus-subquery","^6","edn_query_language/core.cljc","^:",21,"^3A",["^14",[["^4O","^4P"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",451,"^3E",["^N",[null,"^3F","^3G","^47","^3I"]],"^9",451,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4O","^4P"]]]]],"^3?","Given a query, focus it along the specified query expression.\n\n  Examples:\n    (focus-query [:foo :bar :baz] [:foo])\n    => [:foo]\n\n    (fulcro.client.primitives/focus-query [{:foo [:bar :baz]} :woz] [{:foo [:bar]} :woz])\n    => [{:foo [:bar]} :woz]"],"~$ast->query",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",400,"^8",7,"^9",400,"^:",17,"^3=",["^14",["^3>",["^14",[["^4C"]]]]]],"^P","~$edn-query-language.core/ast->query","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["^4C"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",400,"^3E",["^N",[null,"^3F","^3G","^47","^3I"]],"^9",400,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4C"]]]]]],"~$query->ast1",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",306,"^8",7,"^9",306,"^:",18,"^3=",["^14",["^3>",["^14",[["~$query-expr"]]]]],"^3?","Call query->ast and return the first children."],"^P","~$edn-query-language.core/query->ast1","^6","edn_query_language/core.cljc","^:",18,"^3A",["^14",[["^4U"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",306,"^3E",["^N",["^3G","^3I"]],"^9",306,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4U"]]]]],"^3?","Call query->ast and return the first children."],"~$query->shallow-ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",556,"^8",7,"^9",556,"^:",25,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n   a large query."],"^P","~$edn-query-language.core/query->shallow-ast","^6","edn_query_language/core.cljc","^:",25,"^3A",["^14",[["^4O"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",556,"^9",556,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Like query->ast, but does not follow joins.  Useful for efficiently getting just the top-level entries in\n   a large query."],"~$merge-asts",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",503,"^8",7,"^9",503,"^:",17,"^3=",["^14",["^3>",["^14",[["~$qa","~$qb"]]]]],"^3?","Merges two ast's."],"^P","~$edn-query-language.core/merge-asts","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["^4Z","^4["]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",503,"^3E",["^N",[null,"^3G"]],"^9",503,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4Z","^4["]]]]],"^3?","Merges two ast's."],"~$parameterize",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",356,"^8",7,"^9",356,"^:",19,"^3=",["^14",["^3>",["^14",[["~$expr","~$params"]]]]]],"^P","~$edn-query-language.core/parameterize","^6","edn_query_language/core.cljc","^:",19,"^3A",["^14",[["^52","^53"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",356,"^3E","~$cljs.core/List","^9",356,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^52","^53"]]]]]],"~$default-gen",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",132,"^8",9,"^9",132,"^:",20,"^3=",["^14",["^3>",["^14",[["~$name"]]]]]],"^P","~$edn-query-language.core/default-gen","^6","edn_query_language/core.cljc","^:",20,"^3A",["^14",[["^57"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",3,"^3D",false,"^7",132,"^3E","~$function","^9",132,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^57"]]]]]],"~$make-gen",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",135,"^8",9,"^9",135,"^:",17,"^3=",["^14",["^3>",["^14",[["~$env","^57"]]]]]],"^P","~$edn-query-language.core/make-gen","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["^5;","^57"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",3,"^3D",false,"^7",135,"^3E","^3G","^9",135,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^5;","^57"]]]]]],"~$query-id",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",549,"^8",7,"^9",549,"^:",15,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Generates a consistent hash from the query. The query first goes to a process to remove any\n  variables from idents and params, then we get the Clojure hash of it. You can use this to save\n  information about a query that can be used to correlate with the query later."],"^P","~$edn-query-language.core/query-id","^6","edn_query_language/core.cljc","^:",15,"^3A",["^14",[["^4O"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",549,"^3E",["^N",[null,"~$number"]],"^9",549,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Generates a consistent hash from the query. The query first goes to a process to remove any\n  variables from idents and params, then we get the Clojure hash of it. You can use this to save\n  information about a query that can be used to correlate with the query later."],"~$wrap-expr",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",349,"^8",7,"^9",349,"^:",16,"^3=",["^14",["^3>",["^14",[["~$root?","^52"]]]]]],"^P","~$edn-query-language.core/wrap-expr","^6","edn_query_language/core.cljc","^:",16,"^3A",["^14",[["^5A","^52"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",349,"^3E",["^N",[null,"^3F","^47","^3I"]],"^9",349,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^5A","^52"]]]]]],"~$join->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",311,"^8",7,"^9",311,"^:",16,"^3=",["^14",["^3>",["^14",[["~$join"]]]]]],"^P","~$edn-query-language.core/join->ast","^6","edn_query_language/core.cljc","^:",16,"^3A",["^14",[["^5D"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",311,"^3E",["^N",["^3G","^3I"]],"^9",311,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^5D"]]]]]],"~$normalize-query-variables",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",535,"^8",7,"^9",535,"^:",32,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Converts ident values and param values to ::p/var."],"^P","~$edn-query-language.core/normalize-query-variables","^6","edn_query_language/core.cljc","^:",32,"^3A",["^14",[["^4O"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",535,"^3E",["^N",[null,"^3F","^3G","^47","^3I"]],"^9",535,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Converts ident values and param values to ::p/var."],"^O",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",404,"^8",7,"^9",404,"^:",13,"^3=",["^14",["^3>",["^14",[["~$x"]]]]],"^3?","Check if x is a EQL ident."],"^P","~$edn-query-language.core/ident?","^6","edn_query_language/core.cljc","^:",13,"^3A",["^14",[["~$x"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",404,"^3E","^3P","^9",404,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["~$x"]]]]],"^3?","Check if x is a EQL ident."],"~$keyword->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",268,"^8",7,"^9",268,"^:",19,"^3=",["^14",["^3>",["^14",[["~$k"]]]]]],"^P","~$edn-query-language.core/keyword->ast","^6","edn_query_language/core.cljc","^:",19,"^3A",["^14",[["~$k"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",268,"^3E","^3H","^9",268,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["~$k"]]]]]],"~$node-type",["^ ","^P","~$edn-query-language.core/node-type","^6","edn_query_language/core.cljc","^7",223,"^8",3,"^9",223,"^:",22,"^5",["^ ","^6","edn_query_language/core.cljc","^7",223,"^8",13,"^9",223,"^:",22],"^3O","~$cljs.core/MultiFn"],"~$query->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",295,"^8",7,"^9",295,"^:",17,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Convert a query to its AST representation."],"^P","~$edn-query-language.core/query->ast","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["^4O"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",295,"^3E",["^N",["^3G","^3I"]],"^9",295,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4O"]]]]],"^3?","Convert a query to its AST representation."],"~$ident->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",331,"^8",7,"^9",331,"^:",17,"^3=",["^14",["^3>",["^14",[[["~$k","~$id","^18","~$ref"]]]]]]],"^P","~$edn-query-language.core/ident->ast","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["~$p__44569"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",331,"^3E","^3H","^9",331,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[[["~$k","^5Q","^18","^5R"]]]]]]],"~$merge-queries",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",529,"^8",7,"^9",529,"^:",20,"^3=",["^14",["^3>",["^14",[["^4Z","^4["]]]]],"^3?","Merges two queries"],"^P","~$edn-query-language.core/merge-queries","^6","edn_query_language/core.cljc","^:",20,"^3A",["^14",[["^4Z","^4["]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",529,"^3E",["^N",[null,"^3F","^3G","^47","^3I"]],"^9",529,"^3J",2,"^3K",true,"^3=",["^14",["^3>",["^14",[["^4Z","^4["]]]]],"^3?","Merges two queries"],"~$union-entry->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",273,"^8",7,"^9",273,"^:",23,"^3=",["^14",["^3>",["^14",[[["~$k","~$v"]]]]]]],"^P","~$edn-query-language.core/union-entry->ast","^6","edn_query_language/core.cljc","^:",23,"^3A",["^14",[["~$p__44479"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",273,"^3E",["^N",["^3G","^3I"]],"^9",273,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[[["~$k","~$v"]]]]]]],"~$symbol->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",264,"^8",7,"^9",264,"^:",18,"^3=",["^14",["^3>",["^14",[["~$k"]]]]]],"^P","~$edn-query-language.core/symbol->ast","^6","edn_query_language/core.cljc","^:",18,"^3A",["^14",[["~$k"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",264,"^3E","^3H","^9",264,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["~$k"]]]]]],"~$union->ast",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",283,"^8",7,"^9",283,"^:",17,"^3=",["^14",["^3>",["^14",[["~$m"]]]]]],"^P","~$edn-query-language.core/union->ast","^6","edn_query_language/core.cljc","^:",17,"^3A",["^14",[["~$m"]]],"^3B",null,"^3C",["^14",[null,null]],"^8",1,"^3D",false,"^7",283,"^3E","^3H","^9",283,"^3J",1,"^3K",true,"^3=",["^14",["^3>",["^14",[["~$m"]]]]]],"~$update-property-param",["^ ","^3<",null,"^5",["^ ","^6","edn_query_language/core.cljc","^7",488,"^8",7,"^9",488,"^:",28,"^3=",["^14",["^3>",["^14",[["~$x","~$f","~$&","^3U"]]]]],"^3?","Add property param, eg:\n\n  ```\n  (p/update-property-param :keyword assoc :foo \"bar\") => (:keyword {:foo \"bar\"})\n  (p/update-property-param '(:keyword {:param \"prev\"}) assoc :foo \"bar\") => (:keyword {:foo \"bar\" :param \"prev\"})\n  ```\n  ","^43",["^ ","^3D",true,"^44",2,"^3J",2,"^3A",[["^14",["~$x","~$f","^3U"]]],"^3=",["^14",[["~$x","~$f","~$&","^3U"]]],"^3C",["^14",[null]]]],"^P","~$edn-query-language.core/update-property-param","^6","edn_query_language/core.cljc","^:",28,"^43",["^ ","^3D",true,"^44",2,"^3J",2,"^3A",[["^14",["~$x","~$f","^3U"]]],"^3=",["^14",[["~$x","~$f","~$&","^3U"]]],"^3C",["^14",[null]]],"^3A",[["^14",["~$x","~$f","^3U"]]],"^3B",null,"^44",2,"^3C",["^14",[null]],"^8",1,"^3D",true,"^46",[["^ ","^44",2,"^3D",true,"^3O","^55"]],"^7",488,"^3E","^3G","^9",488,"^3J",2,"^3K",true,"^3=",["^14",[["~$x","~$f","~$&","^3U"]]],"^3?","Add property param, eg:\n\n  ```\n  (p/update-property-param :keyword assoc :foo \"bar\") => (:keyword {:foo \"bar\"})\n  (p/update-property-param '(:keyword {:param \"prev\"}) assoc :foo \"bar\") => (:keyword {:foo \"bar\" :param \"prev\"})\n  ```\n  "]],"^12",["^ ","^V","^V","^X","^V","^A","^A","^>","^?","~$s","^?","^Z","^Z","^?","^?"],"~:cljs.analyzer/constants",["^ ","^[",["^N",["~:args","~$cljs.spec.alpha/*","~:xform","~:edn-query-language.core/gen-mutation-join","~:query-root","~:req-un","~:opt-un","~$x","~:remote","~$cljs.core/comp","~:edn-query-language.core/join-query","^Q","~:edn-query-language.core/recursion","~$cljs.core/boolean?","~:mutate-key","^5V","~$cljs.core/methods","~:min","~$p1__43635#","~:ret","~:gfn","~:children","~:edn-query-language.core/join-key-param-expr","~:edn-query-language.ast/root","~:special","~:union-key","~$cljs.core/keyword?","~:pred-exprs","~:into","~:keys-pred","~:edn-query-language.core/gen-ident-key","^5O","~$p1__43630#","~:edn-query-language.ast/node","~:edn-query-language.core/gen-mutation-key","^4V","~$cljs.core/vector?","~:edn-query-language.core/ident","^5","~$cljs.core/=","~:edn-query-language.core/mutation-expr","~$cljs.core/keys","~:opt-keys","~:edn-query-language.core/recursion-depth","~$p1__43631#","^50","~:edn-query-language.core/gen-special-property","~:key","~:union-entry","^5H","~:else","~:call","~:gen","~:edn-query-language.core/special-property","~$cljs.spec.alpha/and","~:edn-query-language.core/ident-value","~$cljs.spec.alpha/coll-of","~$cljs.spec.alpha/cat","~$cljs.core/->","^5L","~:cljs.spec.alpha/kind-form","~:default","~:qb","~:property","^S","^P","~:edn-query-language.core/union","~:mutation-join","~$*","~:edn-query-language.core/gen-query","~:edn-query-language.core/gen-params","~:req-specs","~$cljs.spec.alpha/or","^6","~:conform-keys","^:","~:unbounded","~:edn-query-language.ast/dispatch-key","~:params","~$cljs.spec.alpha/fspec","~:ast","~$cljs.core/set","~$cljs.spec.alpha/nilable","~:type","~:edn-query-language.core/query","~$cljs.spec.alpha/tuple","^63","~:edn-query-language.core/gen-join-key-param-key","~:edn-query-language.core/var","~$cljs.core/contains?","~:sub-query","~$cljs.core/map?","~:edn-query-language.core/gen-ident","^56","~:cljs.spec.alpha/cpred","~:edn-query-language.core/gen-ident-value","~:node","~$_","~:component","~:mutation","~$if","~:error/invalid-join","~$%","~:edn-query-language.ast/query","~:sym","~$cljs.core/fn?","^8","~:edn-query-language.core/gen-mutation","~:error/invalid-expression","~:edn-query-language.core/join","~$cljs.spec.alpha/keys","~$p1__43636#","~:edn-query-language.core/gen-query-expr","~:edn-query-language.ast/children","~:edn-query-language.ast/union-key","~:edn-query-language.core/gen-property","~:req","~:edn-query-language.core/gen-max-depth","~:recursion","^7","~:edn-query-language.core/param-expr","~:expr","~:edn-query-language.core/gen-mutation-expr","~$fn*","~:root","~:max","~:qa","~$cljs.spec.alpha/with-gen","~:prop","~:min-count","^5K","~$cljs.core/nat-int?","~:kind","~:edn-query-language.core/gen-union","~$cljs.spec.alpha/map-of","~:count","~:req-keys","~:ident","~$cljs.core/fn","~:dispatch-key","~:edn-query-language.core/gen-join","~:opt-specs","~:edn-query-language.core/property","^9","~:edn-query-language.core/gen-param-expr","~:edn-query-language.core/gen-join-query","~:pred-forms","~:f","~:param-exp","~:depth","~:x","~:edn-query-language.core/join-key-param-key","~:edn-query-language.core/params","~:cljs.spec.alpha/kfn","~$p1__43633#","~:target","^4L","^3>","~$cljs.core/symbol?","~$cljs.spec.alpha/multi-spec","^3=","~:query","~:edn-query-language.ast/type","~:hierarchy","~:union","~:edn-query-language.core/gen-join-key","~:edn-query-language.core/param-expr-key","~:num-elements","~:edn-query-language.core/mutation-key","~$...","^3?","~:edn-query-language.core/gen-param-expr-key","^3S","~:edn-query-language.core/mutation","~$cljs.core/first","^4S","~$cljs.core/seq?","~:min-elements","~:edn-query-language.ast/key","^4Q","~:cljs.spec.alpha/conform-all","~:edn-query-language.core/query-expr","~:edn-query-language.core/gen-depth","~:test","~$cljs.core/every?","~:edn-query-language.core/gen-union-key","~$cljs.core/any?","~:join","~:edn-query-language.core/join-key","~:edn-query-language.core/mutation-join","~:edn-query-language.core/gen-join-key-param-expr","~:cljs.spec.alpha/describe","^58","~:opt","~:edn-query-language.core/gen-recursion","~$cljs.spec.alpha/?"]],"~:order",["^68","^6P","^6S","^70","^7B","^7C","^7Q","^7V","^7X","^85","^8:","^8=","^8?","^8C","^8M","^8T","^8W","^8X","^9;","^9@","^9H","^9K","^9P","^9S","^9=","~$*","~$_","^9D","^6C","^8F","^9?","^8V","^6L","^76","^3>","^78","^8H","^9L","^58","^6U","^7P","^9N","^7E","^8I","^8Q","^8Z","^6H","^87","^8N","^6>","^8O","^7F","^6N","^7<","^7W","^8L","^92","^9F","^9Q","^7U","^7@","^7O","^8J","^6Z","^8K","^6?","^8[","^7G","^97","^9:","^8@","^91","^9<","^9M","^8A","^77","^9C","^7:","^8B","^7I","^9T","^90","^9>","^95","^6W","^6A","^9O","^9A","^7[","^7A","^9G","^6J","^79","^6T","^75","^56","^82","^9E","^83","^7H","^8<","^8;","^6R","^6I","^88","^6:","^98","^8D","^6Q","^6V","^8E","^7N","^8R","~$x","^9J","^6=","^6[","^7S","^74","^6G","~$%","^6;","^6F","^6M","^6O","^6Y","^7D","^8>","^8P","^8U","^8Y","^9R","^99","^7=","^71","^8S","^80","^7;","^9B","^93","^72","^6D","^6K","^89","^7L","^6X","^6B","^5L","^96","^S","^P","^6","^:","^8","^7","^9","^3=","^3?","^9I","^Q","^5K","^5","^7Z","^94","^6<","^69","^73","^81","^86","^7R","^5O","^7J","^65","^7M","^6E","^4V","^4S","^7K","^5H","~:x","^6@","^4Q","^7T","^4L","^67","^84","^7Y","^3S","^63","^7?","~:f","^66","^50","^8G","^7>","^5V"]],"^1:",["^ ","^10",["^N",[]]],"^1;",["^ "],"^1<",["^W","^A","^?","^Y","^V","^Z"]],"^S","^Q","~:ns-specs",["^ ","^6>",["^14",["^8H",["^14",["^7E","^97","^7O","^9:","^7@","^8@","^6?"]],["^14",["^58","^8X"]]]],"^6?",["^14",["^7E","^8[","^6Z","^7G",["^N",[["^14",["^3>","^9?"]]]]]],"^5V",["^14",["^7J","^65",["^14",["^7:","^8G",["^14",["^7M","^7O"]],"^7>",["^14",["^7M","^7O"]]]],"^6E",["^14",["^7M","^7O"]]]],"^6H",["^14",["^8H",["^14",["^77","^9C",["^14",["^7:","^8B","^90","^7I",["^14",["^9T","^91"]]]]]],["^14",["^58","^9P"]]]],"^5O",["^14",["^7J","^65",["^14",["^7:","^97",["^14",["^7M","^7O"]]]],"^6E","^6I"]],"^4V",["^14",["^7J","^65",["^14",["^7:","^97","^7O"]],"^6E","^6R"]],"^6U",["^14",["^8H",["^14",["^7P","^8V","^78"]],["^14",["^58","^7V"]]]],"^6W",["^14",["^8H",["^14",["^77","^9C",["^14",["^7:","^6A","^9>","^7I",["^14",["^9T","^91"]]]]]],["^14",["^58","^8C"]]]],"^6Z",["^14",["^8H","^8K",["^14",["^58","^9H"]]]],"^50",["^14",["^7J","^65",["^14",["^7:","^8G","^6R","^7>","^6R"]],"^6E",["^14",["^7M","^6R"]]]],"^5H",["^14",["^7J","^65",["^14",["^7:","~:x","^9L"]],"^6E","^6@"]],"^76",["^N",[["^14",["^3>","~$*"]]]],"^78",["^14",["^8H","^9L",["^14",["^58","^7X"]]]],"^7@",["^14",["^8N","^8V","^7O","^8J",1,"^7F",true]],"^7O",["^14",["^79","^9G","^8L","^6T","^75",["^14",["^58","^7B"]]]],"^63",["^14",["^7J","^65",["^14",["^7:","~:x",["^14",["^7E","^7?","^8V","^8B","^8A"]],"~:f","^84","^65",["^14",["^66","^9L"]]]],"^6E","^8A"]],"^87",["^14",["^8N","^9N","^6>","^8O",1,"^7F",true]],"^8A",["^14",["^8H",["^14",["^77","^9C",["^14",["^7:","^8B","^9<","^7I",["^14",["^9T","^91"]]]]]],["^14",["^58","^8W"]]]],"^8V","^6L","^90",["^14",["^7E","^8I","^8V","^8Q","^6U"]],"^91",["^14",["^8H","^7U",["^14",["^58","^7C"]]]],"^4L",["^14",["^7J","^65",["^14",["^7:","^67","^84","^7Y","^6R"]],"^6E","^6R"]],"^9<",["^14",["^8H",["^14",["^7E","^8I","^8V","^9M","^87","^8Q","^6U"]],["^14",["^58","^9@"]]]],"^9>",["^14",["^8H","^95",["^14",["^58","^6S"]]]],"^3S",["^14",["^7J","^65",["^14",["^7:","^7K","^6R"]],"^6E","^6@"]],"^9A",["^14",["^7E","^7[","^6W","^7A","^9O"]],"^4S",["^14",["^7J","^65",["^14",["^7:","^7K","^6R"]],"^6E","^7O"]],"^4Q",["^14",["^7J","^65",["^14",["^7:","^97","^7O","^7T","^7O"]],"^6E","^7O"]],"^9G",["^14",["^7E","^8I","^8V","^9M","^87","^8Q","^6U","^7[","^9A","^8Z","^8A","^6J","^76"]],"^9N",["^14",["^7E","^8I","^8V","^8Q","^6U","^8Z","^6H"]],"^9O",["^14",["^8N","^6W","^7O","^8O",1,"^7F",true]]],"~:ns-speced-vars",["^5V","^5O","^4V","^50","^5H","^63","^4L","^3S","^4S","^4Q"],"~:compiler-options",["^1J",[["^9X","~:static-fns"],true,["^9X","~:elide-asserts"],false,["^9X","~:optimize-constants"],null,["^9X","^1A"],null,["^9X","~:external-config"],null,["^9X","~:tooling-config"],null,["^9X","~:emit-constants"],null,["^9X","~:load-tests"],null,["^9X","~:form-size-threshold"],null,["^9X","~:infer-externs"],true,["^9X","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9X","~:fn-invoke-direct"],null,["^9X","~:source-map"],"/dev/null"]]]